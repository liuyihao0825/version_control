!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS_PATH_MARKER	tests/core/path.c	328;"	d	file:
ABS_PATH_MARKER	tests/core/path.c	330;"	d	file:
AC_VERSION_KHASH_H	src/khash.h	126;"	d
ADDED_IN_MASTER_INDEX_ENTRY	tests/merge/trees/automerge.c	25;"	d	file:
ADDED_IN_MASTER_INDEX_ENTRY	tests/merge/workdir/simple.c	29;"	d	file:
ALL_CRLF_TEXT_AS_CRLF	tests/filter/crlf.h	15;"	d
ALL_CRLF_TEXT_AS_LF	tests/filter/crlf.h	20;"	d
ALL_CRLF_TEXT_RAW	tests/filter/crlf.h	10;"	d
ALL_FLAGS	src/commit_list.h	16;"	d
ALL_LF_TEXT_AS_CRLF	tests/filter/crlf.h	16;"	d
ALL_LF_TEXT_AS_LF	tests/filter/crlf.h	21;"	d
ALL_LF_TEXT_RAW	tests/filter/crlf.h	11;"	d
ALTERNATE_MALFORMED_FOLDER1	tests/repo/discover.c	22;"	d	file:
ALTERNATE_MALFORMED_FOLDER2	tests/repo/discover.c	23;"	d	file:
ALTERNATE_MALFORMED_FOLDER3	tests/repo/discover.c	24;"	d	file:
ALTERNATE_NOT_FOUND_FOLDER	tests/repo/discover.c	25;"	d	file:
ANCHOR	deps/regex/regex_internal.h	/^  ANCHOR = EPSILON_BIT | 4,$/;"	e	enum:__anon5
ANOTHER_POEM	tests/stress/diff.c	15;"	d	file:
API_QUERY_DATA_AVAILABLE	deps/winhttp/winhttp.h	422;"	d
API_READ_DATA	deps/winhttp/winhttp.h	423;"	d
API_RECEIVE_RESPONSE	deps/winhttp/winhttp.h	421;"	d
API_SEND_REQUEST	deps/winhttp/winhttp.h	425;"	d
API_WRITE_DATA	deps/winhttp/winhttp.h	424;"	d
APPS	examples/Makefile	/^APPS = general showindex diff rev-list cat-file status log rev-parse init blame tag remote$/;"	m
ARGS_INFO_INIT	examples/common.h	47;"	d
ARRAY_LEN	tests/diff/racediffiter.c	19;"	d	file:
ARRAY_SIZE	deps/http-parser/http_parser.c	41;"	d	file:
ARRAY_SIZE	src/util.h	47;"	d
ASN1_STRING_get0_data	src/openssl_stream.h	/^GIT_INLINE(const unsigned char *) ASN1_STRING_get0_data(const ASN1_STRING *x)$/;"	f	signature:(const ASN1_STRING *x)
AUTOMERGEABLE_ANCESTOR_OID	tests/checkout/conflict.c	15;"	d	file:
AUTOMERGEABLE_IDSTR	tests/merge/driver.c	10;"	d	file:
AUTOMERGEABLE_INDEX_ENTRY	tests/merge/trees/automerge.c	27;"	d	file:
AUTOMERGEABLE_INDEX_ENTRY	tests/merge/workdir/simple.c	32;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/checkout/conflict.c	38;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/merge/conflict_data.h	1;"	d
AUTOMERGEABLE_MERGED_FILE	tests/merge/workdir/dirty.c	12;"	d	file:
AUTOMERGEABLE_MERGED_FILE_CRLF	tests/merge/conflict_data.h	12;"	d
AUTOMERGEABLE_OURS_OID	tests/checkout/conflict.c	16;"	d	file:
AUTOMERGEABLE_REUC_ENTRY	tests/merge/trees/automerge.c	37;"	d	file:
AUTOMERGEABLE_REUC_ENTRY	tests/merge/workdir/simple.c	54;"	d	file:
AUTOMERGEABLE_THEIRS_OID	tests/checkout/conflict.c	17;"	d	file:
AddRef	deps/winhttp/urlmon.h	/^	ULONG(STDMETHODCALLTYPE *AddRef)(IInternetSecurityManager *);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
Assert	deps/zlib/zutil.h	223;"	d
Assert	deps/zlib/zutil.h	230;"	d
BACK_SLASH	deps/regex/regex_internal.h	/^  BACK_SLASH$/;"	e	enum:__anon5
BAD	deps/zlib/inflate.h	/^    BAD,        \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon28
BARE_REPO	tests/object/blob/write.c	10;"	d	file:
BARE_REPOSITORY	tests/repo/init.c	/^	BARE_REPOSITORY = 1$/;"	e	enum:repo_mode	file:
BASE	deps/zlib/adler32.c	14;"	d	file:
BASEDIR	tests/core/mkdir.c	103;"	d	file:
BB_REPO_URL	tests/online/clone.c	11;"	d	file:
BB_REPO_URL_WITH_PASS	tests/online/clone.c	12;"	d	file:
BB_REPO_URL_WITH_WRONG_PASS	tests/online/clone.c	13;"	d	file:
BE	deps/regex/regex_internal.h	131;"	d
BE	deps/regex/regex_internal.h	133;"	d
BIG_STRING_PART	tests/core/zstream.c	88;"	d	file:
BIN_TREE_STORAGE_SIZE	deps/regex/regex_internal.h	504;"	d
BIO_get_data	src/openssl_stream.h	/^GIT_INLINE(void*) BIO_get_data(BIO *a)$/;"	f	signature:(BIO *a)
BIO_get_new_index	src/openssl_stream.h	/^GIT_INLINE(int) BIO_get_new_index(void)$/;"	f	signature:(void)
BIO_meth_free	src/openssl_stream.h	/^GIT_INLINE(void) BIO_meth_free(BIO_METHOD *biom)$/;"	f	signature:(BIO_METHOD *biom)
BIO_meth_new	src/openssl_stream.h	/^GIT_INLINE(BIO_METHOD*) BIO_meth_new(int type, const char *name)$/;"	f	signature:(int type, const char *name)
BIO_meth_set_create	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *))$/;"	f	signature:(BIO_METHOD *biom, int (*create) (BIO *))
BIO_meth_set_ctrl	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_ctrl(BIO_METHOD *biom, long (*ctrl) (BIO *, int, long, void *))$/;"	f	signature:(BIO_METHOD *biom, long (*ctrl) (BIO *, int, long, void *))
BIO_meth_set_destroy	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *))$/;"	f	signature:(BIO_METHOD *biom, int (*destroy) (BIO *))
BIO_meth_set_gets	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_gets(BIO_METHOD *biom, int (*gets) (BIO *, char *, int))$/;"	f	signature:(BIO_METHOD *biom, int (*gets) (BIO *, char *, int))
BIO_meth_set_puts	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_puts(BIO_METHOD *biom, int (*puts) (BIO *, const char *))$/;"	f	signature:(BIO_METHOD *biom, int (*puts) (BIO *, const char *))
BIO_meth_set_read	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_read(BIO_METHOD *biom, int (*read) (BIO *, char *, int))$/;"	f	signature:(BIO_METHOD *biom, int (*read) (BIO *, char *, int))
BIO_meth_set_write	src/openssl_stream.h	/^GIT_INLINE(int) BIO_meth_set_write(BIO_METHOD *biom, int (*write) (BIO *, const char *, int))$/;"	f	signature:(BIO_METHOD *biom, int (*write) (BIO *, const char *, int))
BIO_set_data	src/openssl_stream.h	/^GIT_INLINE(void) BIO_set_data(BIO *a, void *ptr)$/;"	f	signature:(BIO *a, void *ptr)
BIO_set_init	src/openssl_stream.h	/^GIT_INLINE(void) BIO_set_init(BIO *b, int init)$/;"	f	signature:(BIO *b, int init)
BITFLIPPED_AND_REVERSED_DATA_LEN	tests/filter/custom.c	41;"	d	file:
BITFLIP_FILTER_PRIORITY	tests/filter/custom.c	13;"	d	file:
BITS	deps/zlib/infback.c	190;"	d	file:
BITS	deps/zlib/inflate.c	506;"	d	file:
BITSET_WORDS	deps/regex/regex_internal.h	186;"	d
BITSET_WORD_BITS	deps/regex/regex_internal.h	184;"	d
BITSET_WORD_MAX	deps/regex/regex_internal.h	181;"	d
BIT_AT	deps/http-parser/http_parser.c	45;"	d	file:
BL_CODES	deps/zlib/deflate.h	42;"	d
BOOLAPI	deps/winhttp/winhttp.h	31;"	d
BRACKET_NAME_BUF_SIZE	deps/regex/regcomp.c	2586;"	d	file:
BRANCH_A_CHANGE	tests/merge/trees/whitespace.c	16;"	d	file:
BRANCH_A_EOL	tests/merge/trees/whitespace.c	13;"	d	file:
BRANCH_B_CHANGE	tests/merge/trees/whitespace.c	17;"	d	file:
BRANCH_B_EOL	tests/merge/trees/whitespace.c	14;"	d	file:
BRANCH_ID	tests/merge/driver.c	8;"	d	file:
BRANCH_RENAME_OURS	tests/merge/trees/renames.c	13;"	d	file:
BRANCH_RENAME_OURS	tests/merge/workdir/renames.c	14;"	d	file:
BRANCH_RENAME_THEIRS	tests/merge/trees/renames.c	14;"	d	file:
BRANCH_RENAME_THEIRS	tests/merge/workdir/renames.c	15;"	d	file:
BUFERR_MEM	src/filebuf.c	/^	BUFERR_MEM$/;"	e	enum:buferr_t	file:
BUFERR_OK	src/filebuf.c	/^	BUFERR_OK = 0,$/;"	e	enum:buferr_t	file:
BUFERR_WRITE	src/filebuf.c	/^	BUFERR_WRITE,$/;"	e	enum:buferr_t	file:
BUFERR_ZLIB	src/filebuf.c	/^	BUFERR_ZLIB,$/;"	e	enum:buferr_t	file:
BUF_FIRST	deps/regex/regex_internal.h	/^  BUF_FIRST = PREV_BEGBUF_CONSTRAINT,$/;"	e	enum:__anon3
BUF_LAST	deps/regex/regex_internal.h	/^  BUF_LAST = NEXT_ENDBUF_CONSTRAINT,$/;"	e	enum:__anon3
BUILDFIXED	deps/zlib/inflate.c	90;"	d	file:
BUILD_CHARCLASS_LOOP	deps/regex/regcomp.c	3529;"	d	file:
BUSY_STATE	deps/zlib/deflate.h	59;"	d
BYFOUR	deps/zlib/crc32.c	37;"	d	file:
BYTEBITS	deps/zlib/infback.c	201;"	d	file:
BYTEBITS	deps/zlib/inflate.c	517;"	d	file:
Buf_size	deps/zlib/deflate.h	51;"	d
Byte	deps/zlib/zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Bytef	deps/zlib/zconf.h	/^typedef Byte  FAR Bytef;$/;"	t
C	examples/blame.c	/^	int C;$/;"	m	struct:opts	file:	access:public
CACHED_POST_BODY_BUF_SIZE	src/transports/winhttp.c	32;"	d	file:
CACHE_FLUSH	src/submodule.c	/^	CACHE_FLUSH = 2$/;"	e	enum:__anon302	file:
CACHE_NONE	examples/diff.c	/^	CACHE_NONE = 2$/;"	e	enum:__anon35	file:
CACHE_NORMAL	examples/diff.c	/^	CACHE_NORMAL = 0,$/;"	e	enum:__anon35	file:
CACHE_OK	src/submodule.c	/^	CACHE_OK = 0,$/;"	e	enum:__anon302	file:
CACHE_ONLY	examples/diff.c	/^	CACHE_ONLY = 1,$/;"	e	enum:__anon35	file:
CACHE_REFRESH	src/submodule.c	/^	CACHE_REFRESH = 1,$/;"	e	enum:__anon302	file:
CALLBACK_DATA	deps/http-parser/http_parser.c	104;"	d	file:
CALLBACK_DATA_	deps/http-parser/http_parser.c	84;"	d	file:
CALLBACK_DATA_NOADVANCE	deps/http-parser/http_parser.c	108;"	d	file:
CALLBACK_NOTIFY	deps/http-parser/http_parser.c	78;"	d	file:
CALLBACK_NOTIFY_	deps/http-parser/http_parser.c	61;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	deps/http-parser/http_parser.c	81;"	d	file:
CANCEL_VALUE	tests/attr/repo.c	156;"	d	file:
CANCEL_VALUE	tests/core/path.c	357;"	d	file:
CASESELECT	src/util.h	252;"	d
CC	examples/Makefile	/^CC = gcc$/;"	m
CC	examples/network/Makefile	/^CC = gcc$/;"	m
CFLAGS	examples/Makefile	/^CFLAGS = -g -I..\/include -I..\/src -Wall -Wextra -Wmissing-prototypes -Wno-missing-field-initializers$/;"	m
CHANGED_IN_BRANCH_FILE	tests/merge/workdir/dirty.c	23;"	d	file:
CHANGED_IN_BRANCH_INDEX_ENTRY	tests/merge/trees/automerge.c	29;"	d	file:
CHANGED_IN_BRANCH_INDEX_ENTRY	tests/merge/workdir/simple.c	35;"	d	file:
CHANGED_IN_MASTER_INDEX_ENTRY	tests/merge/trees/automerge.c	31;"	d	file:
CHANGED_IN_MASTER_INDEX_ENTRY	tests/merge/workdir/simple.c	38;"	d	file:
CHARACTER	deps/regex/regex_internal.h	/^  CHARACTER = 1,$/;"	e	enum:__anon5
CHAR_CLASS	deps/regex/regex_internal.h	/^  CHAR_CLASS$/;"	e	enum:__anon14
CHECK	deps/zlib/inflate.h	/^    CHECK,      \/* i: waiting for 32-bit check value *\/$/;"	e	enum:__anon28
CHECKOUT_ACTION_IF	src/checkout.c	228;"	d	file:
CHECKOUT_ACTION__CONFLICT	src/checkout.c	/^	CHECKOUT_ACTION__CONFLICT = 8,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__DEFER_REMOVE	src/checkout.c	/^	CHECKOUT_ACTION__DEFER_REMOVE = 64,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__MAX	src/checkout.c	/^	CHECKOUT_ACTION__MAX = 32,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__NONE	src/checkout.c	/^	CHECKOUT_ACTION__NONE = 0,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__REMOVE	src/checkout.c	/^	CHECKOUT_ACTION__REMOVE = 1,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__REMOVE_AND_UPDATE	src/checkout.c	/^	CHECKOUT_ACTION__REMOVE_AND_UPDATE =$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__REMOVE_CONFLICT	src/checkout.c	/^	CHECKOUT_ACTION__REMOVE_CONFLICT = 16,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__UPDATE_BLOB	src/checkout.c	/^	CHECKOUT_ACTION__UPDATE_BLOB = 2,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__UPDATE_CONFLICT	src/checkout.c	/^	CHECKOUT_ACTION__UPDATE_CONFLICT = 32,$/;"	e	enum:__anon214	file:
CHECKOUT_ACTION__UPDATE_SUBMODULE	src/checkout.c	/^	CHECKOUT_ACTION__UPDATE_SUBMODULE = 4,$/;"	e	enum:__anon214	file:
CHECKOUT_INDEX_DONT_WRITE_MASK	src/checkout.c	2501;"	d	file:
CHECK_MACRO_FUNC_INIT_EQUAL	tests/core/structinit.c	22;"	d	file:
CHOP	deps/zlib/adler32.c	29;"	d	file:
CHUNKED	deps/http-parser/http_parser.c	125;"	d	file:
CHUNKSIZE	tests/filter/stream.c	31;"	d	file:
CHUNK_SIZE	src/transports/http.c	43;"	d	file:
CLEAN_THREAD_EXIT	src/win32/thread.c	11;"	d	file:
CLEAR_FOR_CORE_FILEMODE	tests/repo/init.c	456;"	d	file:
CLEAR_HASH	deps/zlib/deflate.c	196;"	d	file:
CLOSE	deps/http-parser/http_parser.c	127;"	d	file:
CLSID_InternetSecurityManager	src/transports/winhttp.c	63;"	d	file:
CLSID_InternetSecurityManager_mingw	src/transports/winhttp.c	/^static const CLSID CLSID_InternetSecurityManager_mingw =$/;"	v	file:
CL_COMMIT_EMAIL	tests/clar_libgit2.c	360;"	d	file:
CL_COMMIT_MSG	tests/clar_libgit2.c	361;"	d	file:
CL_COMMIT_NAME	tests/clar_libgit2.c	359;"	d	file:
CL_PERF_TIMER_INIT	tests/clar_libgit2_timer.h	16;"	d
CL_TEST_FAILURE	tests/clar.h	/^	CL_TEST_FAILURE,$/;"	e	enum:cl_test_status
CL_TEST_OK	tests/clar.h	/^	CL_TEST_OK,$/;"	e	enum:cl_test_status
CL_TEST_SKIP	tests/clar.h	/^	CL_TEST_SKIP$/;"	e	enum:cl_test_status
CL_TRACE	tests/clar.c	171;"	d	file:
CL_TRACE__SUITE_BEGIN	tests/clar.h	/^	CL_TRACE__SUITE_BEGIN,$/;"	e	enum:cl_trace_event
CL_TRACE__SUITE_END	tests/clar.h	/^	CL_TRACE__SUITE_END,$/;"	e	enum:cl_trace_event
CL_TRACE__TEST__BEGIN	tests/clar.h	/^	CL_TRACE__TEST__BEGIN,$/;"	e	enum:cl_trace_event
CL_TRACE__TEST__END	tests/clar.h	/^	CL_TRACE__TEST__END,$/;"	e	enum:cl_trace_event
CL_TRACE__TEST__LONGJMP	tests/clar.h	/^	CL_TRACE__TEST__LONGJMP,$/;"	e	enum:cl_trace_event
CL_TRACE__TEST__RUN_BEGIN	tests/clar.h	/^	CL_TRACE__TEST__RUN_BEGIN,$/;"	e	enum:cl_trace_event
CL_TRACE__TEST__RUN_END	tests/clar.h	/^	CL_TRACE__TEST__RUN_END,$/;"	e	enum:cl_trace_event
CMP	src/xdiff/xhistogram.c	105;"	d	file:
CMP_ENV	src/xdiff/xhistogram.c	102;"	d	file:
CMT_FILE_FMT	src/rebase.c	39;"	d	file:
CNG	src/hash/hash_win32.h	/^	CNG$/;"	e	enum:hash_win32_prov_type
CNT	src/xdiff/xhistogram.c	88;"	d	file:
CODELENS	deps/zlib/inflate.h	/^        CODELENS,   \/* i: waiting for length\/lit and distance code lengths *\/$/;"	e	enum:__anon28
CODES	deps/zlib/inftrees.h	/^    CODES,$/;"	e	enum:__anon32
COLL_ELEM_LEN_MAX	deps/regex/regex_internal.h	143;"	d
COLL_SYM	deps/regex/regex_internal.h	/^  COLL_SYM,$/;"	e	enum:__anon14
COMMENT	deps/zlib/inflate.h	/^    COMMENT,    \/* i: waiting for end of comment (gzip) *\/$/;"	e	enum:__anon28
COMMENT_STATE	deps/zlib/deflate.h	57;"	d
COMMIT_ALLOC	src/commit_list.h	19;"	d
COMPLEX_BRACKET	deps/regex/regex_internal.h	/^  COMPLEX_BRACKET = 6,$/;"	e	enum:__anon5
COMPRESS_BUFLEN	src/pack-objects.c	69;"	d	file:
CONCAT	deps/regex/regex_internal.h	/^  CONCAT = 16,$/;"	e	enum:__anon5
CONFIG_FETCH_FMT	src/remote.c	25;"	d	file:
CONFIG_PUSHURL_FMT	src/remote.c	24;"	d	file:
CONFIG_PUSH_FMT	src/remote.c	26;"	d	file:
CONFIG_TAGOPT_FMT	src/remote.c	27;"	d	file:
CONFIG_URL_FMT	src/remote.c	23;"	d	file:
CONFLICTING_ANCESTOR_OID	tests/checkout/conflict.c	11;"	d	file:
CONFLICTING_DIFF3_FILE	tests/checkout/conflict.c	31;"	d	file:
CONFLICTING_DIFF3_FILE	tests/merge/conflict_data.h	30;"	d
CONFLICTING_MERGE_FILE	tests/merge/conflict_data.h	23;"	d
CONFLICTING_OURS_FILE	tests/checkout/conflict.c	27;"	d	file:
CONFLICTING_OURS_OID	tests/checkout/conflict.c	12;"	d	file:
CONFLICTING_RECURSIVE_F1_TO_F2	tests/merge/conflict_data.h	43;"	d
CONFLICTING_RECURSIVE_H1_TO_H2_WITH_DIFF3	tests/merge/conflict_data.h	73;"	d
CONFLICTING_REUC_ENTRY	tests/merge/trees/automerge.c	42;"	d	file:
CONFLICTING_REUC_ENTRY	tests/merge/workdir/simple.c	59;"	d	file:
CONFLICTING_THEIRS_FILE	tests/checkout/conflict.c	29;"	d	file:
CONFLICTING_THEIRS_OID	tests/checkout/conflict.c	13;"	d	file:
CONFLICTING_UNION_FILE	tests/merge/conflict_data.h	39;"	d
CONFLICTS_ONE_ANCESTOR_OID	tests/index/conflicts.h	1;"	d
CONFLICTS_ONE_OUR_OID	tests/index/conflicts.h	2;"	d
CONFLICTS_ONE_THEIR_OID	tests/index/conflicts.h	3;"	d
CONFLICTS_TWO_ANCESTOR_OID	tests/index/conflicts.h	5;"	d
CONFLICTS_TWO_OUR_OID	tests/index/conflicts.h	6;"	d
CONFLICTS_TWO_THEIR_OID	tests/index/conflicts.h	7;"	d
CONNECTION	deps/http-parser/http_parser.c	121;"	d	file:
CONST_STRLEN	src/util.h	66;"	d
CONTENT	tests/attr/repo.c	290;"	d	file:
CONTENT_LENGTH	deps/http-parser/http_parser.c	122;"	d	file:
CONTEXT_BEGBUF	deps/regex/regex_internal.h	516;"	d
CONTEXT_ENDBUF	deps/regex/regex_internal.h	517;"	d
CONTEXT_NEWLINE	deps/regex/regex_internal.h	515;"	d
CONTEXT_WORD	deps/regex/regex_internal.h	514;"	d
COPY	deps/zlib/inflate.h	/^        COPY,       \/* i\/o: waiting for input or output to copy stored block *\/$/;"	e	enum:__anon28
COPY_	deps/zlib/inflate.h	/^        COPY_,      \/* i\/o: same as COPY below, but only first time in *\/$/;"	e	enum:__anon28
CR	deps/http-parser/http_parser.c	356;"	d	file:
CRC2	deps/zlib/inflate.c	441;"	d	file:
CRC4	deps/zlib/inflate.c	448;"	d	file:
CRLF_NUM_TEST_OBJECTS	tests/object/blob/filter.c	8;"	d	file:
CRTDBG_STACKTRACE__UID_LEN	src/win32/w32_crtdbg_stacktrace.c	12;"	d	file:
CRYPTOAPI	src/hash/hash_win32.h	/^	CRYPTOAPI,$/;"	e	enum:hash_win32_prov_type
CURLINFO_ACTIVESOCKET	src/curl_stream.c	20;"	d	file:
CURRENT_FILE	src/rebase.c	40;"	d	file:
CVAR_LIST_APPEND	src/config_file.c	49;"	d	file:
CVAR_LIST_EMPTY	src/config_file.c	47;"	d	file:
CVAR_LIST_FOREACH	src/config_file.c	66;"	d	file:
CVAR_LIST_FOREACH_SAFE	src/config_file.c	74;"	d	file:
CVAR_LIST_HEAD	src/config_file.c	41;"	d	file:
CVAR_LIST_NEXT	src/config_file.c	45;"	d	file:
CVAR_LIST_REMOVE_AFTER	src/config_file.c	62;"	d	file:
CVAR_LIST_REMOVE_HEAD	src/config_file.c	58;"	d	file:
CVAR_LIST_TAIL	src/config_file.c	43;"	d	file:
CallbacksTemplate	tests/generate.py	/^    class CallbacksTemplate(Template):$/;"	c	class:Module	inherits:Template
Code	deps/zlib/deflate.h	77;"	d
DATA_LEN	tests/filter/wildcard.c	14;"	d	file:
DATE_ISO8601	src/date.c	/^	DATE_ISO8601,$/;"	e	enum:__anon299	file:
DATE_LOCAL	src/date.c	/^	DATE_LOCAL,$/;"	e	enum:__anon299	file:
DATE_NORMAL	src/date.c	/^	DATE_NORMAL = 0,$/;"	e	enum:__anon299	file:
DATE_RAW	src/date.c	/^	DATE_RAW$/;"	e	enum:__anon299	file:
DATE_RELATIVE	src/date.c	/^	DATE_RELATIVE,$/;"	e	enum:__anon299	file:
DATE_RFC2822	src/date.c	/^	DATE_RFC2822,$/;"	e	enum:__anon299	file:
DATE_SHORT	src/date.c	/^	DATE_SHORT,$/;"	e	enum:__anon299	file:
DEFAULT_BREAK_REWRITE_THRESHOLD	src/diff_tform.c	242;"	d	file:
DEFAULT_BUFSIZE	src/common.h	82;"	d
DEFAULT_CONFLICT_MARKER_SIZE	src/xdiff/xdiff.h	132;"	d
DEFAULT_CONNECT_TIMEOUT	src/transports/winhttp.c	35;"	d	file:
DEFAULT_MAPPED_LIMIT	src/mwindow.c	24;"	d	file:
DEFAULT_NESTING_LEVEL	src/refdb_fs.c	31;"	d	file:
DEFAULT_NESTING_LEVEL	src/refs.c	29;"	d	file:
DEFAULT_RENAME_LIMIT	src/diff_tform.c	243;"	d	file:
DEFAULT_THRESHOLD	src/diff_tform.c	241;"	d	file:
DEFAULT_TREE_SIZE	src/tree.c	17;"	d	file:
DEFAULT_WINDOW_SIZE	src/mwindow.c	19;"	d	file:
DEFLATE_H	deps/zlib/deflate.h	14;"	d
DEF_MEM_LEVEL	deps/zlib/zutil.h	64;"	d
DEF_MEM_LEVEL	deps/zlib/zutil.h	66;"	d
DEF_WBITS	deps/zlib/zutil.h	59;"	d
DELETE_IN_MAP	src/index.c	49;"	d	file:
DELTA_HEADER_BUFFER_LEN	src/delta.c	495;"	d	file:
DF_SIDE1_BRANCH	tests/merge/trees/modeconflict.c	13;"	d	file:
DF_SIDE2_BRANCH	tests/merge/trees/modeconflict.c	14;"	d	file:
DICT	deps/zlib/inflate.h	/^    DICT,       \/* waiting for inflateSetDictionary() call *\/$/;"	e	enum:__anon28
DICTID	deps/zlib/inflate.h	/^    DICTID,     \/* i: waiting for dictionary check value *\/$/;"	e	enum:__anon28
DIFF_DRIVER_AUTO	src/diff_driver.c	/^	DIFF_DRIVER_AUTO = 0,$/;"	e	enum:__anon238	file:
DIFF_DRIVER_BINARY	src/diff_driver.c	/^	DIFF_DRIVER_BINARY = 1,$/;"	e	enum:__anon238	file:
DIFF_DRIVER_PATTERNLIST	src/diff_driver.c	/^	DIFF_DRIVER_PATTERNLIST = 3,$/;"	e	enum:__anon238	file:
DIFF_DRIVER_TEXT	src/diff_driver.c	/^	DIFF_DRIVER_TEXT = 2,$/;"	e	enum:__anon238	file:
DIFF_FLAGS_KNOWN_BINARY	src/diff_generate.h	18;"	d
DIFF_FLAGS_NOT_BINARY	src/diff_generate.h	19;"	d
DIFF_FLAG_ISNT_SET	src/diff.c	17;"	d	file:
DIFF_FLAG_ISNT_SET	src/diff_generate.c	22;"	d	file:
DIFF_FLAG_IS_SET	src/diff.c	15;"	d	file:
DIFF_FLAG_IS_SET	src/diff_generate.c	20;"	d	file:
DIFF_FLAG_SET	src/diff.c	19;"	d	file:
DIFF_FLAG_SET	src/diff_generate.c	24;"	d	file:
DIFF_FROM_ITERATORS	src/diff_generate.c	1256;"	d	file:
DIFF_MAX_FILESIZE	src/diff_file.c	17;"	d	file:
DIFF_NEW_PREFIX_DEFAULT	src/diff.h	24;"	d
DIFF_OLD_PREFIX_DEFAULT	src/diff.h	23;"	d
DIFF_OPTS	tests/diff/tree.c	91;"	d	file:
DIFF_RENAME_FILE_SEPARATOR	src/diff_stats.c	12;"	d	file:
DIR	src/win32/dir.h	35;"	d
DISCOVER_FOLDER	tests/repo/discover.c	8;"	d	file:
DIST	deps/zlib/inflate.h	/^            DIST,       \/* i: waiting for distance code *\/$/;"	e	enum:__anon28
DISTEXT	deps/zlib/inflate.h	/^            DISTEXT,    \/* i: waiting for distance extra bits *\/$/;"	e	enum:__anon28
DISTS	deps/zlib/inftrees.h	/^    DISTS$/;"	e	enum:__anon32
DIST_CODE_LEN	deps/zlib/trees.c	81;"	d	file:
DO1	deps/zlib/adler32.c	18;"	d	file:
DO1	deps/zlib/crc32.c	200;"	d	file:
DO16	deps/zlib/adler32.c	22;"	d	file:
DO2	deps/zlib/adler32.c	19;"	d	file:
DO4	deps/zlib/adler32.c	20;"	d	file:
DO8	deps/zlib/adler32.c	21;"	d	file:
DO8	deps/zlib/crc32.c	201;"	d	file:
DOBIG32	deps/zlib/crc32.c	284;"	d	file:
DOBIG4	deps/zlib/crc32.c	281;"	d	file:
DOLIT32	deps/zlib/crc32.c	244;"	d	file:
DOLIT4	deps/zlib/crc32.c	241;"	d	file:
DONE	deps/zlib/inflate.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon28
DOT_GIT	src/repository.h	26;"	d
DO_LOCAL_TEST	tests/fetchhead/nonetwork.c	8;"	d	file:
DROPBITS	deps/zlib/infback.c	194;"	d	file:
DROPBITS	deps/zlib/inflate.c	510;"	d	file:
DYNAMIC_CRC_TABLE	deps/zlib/crc32.c	27;"	d	file:
DYN_TREES	deps/zlib/zutil.h	72;"	d
D_CODES	deps/zlib/deflate.h	39;"	d
Dad	deps/zlib/deflate.h	78;"	d
DataBuffer	src/win32/reparse.h	/^			UCHAR DataBuffer[1];$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon283	access:public
DeclarationTemplate	tests/generate.py	/^    class DeclarationTemplate(Template):$/;"	c	class:Module	inherits:Template
DllMain	src/global.c	/^BOOL WINAPI DllMain(HINSTANCE hInstDll, DWORD fdwReason, LPVOID lpvReserved)$/;"	f	signature:(HINSTANCE hInstDll, DWORD fdwReason, LPVOID lpvReserved)
EAFNOSUPPORT	src/posix.h	82;"	d
ELEM_AT	deps/http-parser/http_parser.c	51;"	d	file:
ELSEWHERE	tests/object/blob/write.c	11;"	d	file:
EMPTY_TREE	tests/stash/save.c	362;"	d	file:
END_BLOCK	deps/zlib/trees.c	50;"	d	file:
END_FILE	src/rebase.c	38;"	d	file:
END_OF_RE	deps/regex/regex_internal.h	/^  END_OF_RE = 2,$/;"	e	enum:__anon5
ENOUGH	deps/zlib/inftrees.h	51;"	d
ENOUGH_DISTS	deps/zlib/inftrees.h	50;"	d
ENOUGH_LENS	deps/zlib/inftrees.h	49;"	d
ENSURE_BUF_OK	src/filebuf.c	20;"	d	file:
ENSURE_SIZE	src/buffer.c	20;"	d	file:
EOS	src/fnmatch.c	53;"	d	file:
EPSILON_BIT	deps/regex/regex_internal.h	250;"	d
EQUAL	deps/zlib/deflate.c	151;"	d	file:
EQUIV_CLASS	deps/regex/regex_internal.h	/^  EQUIV_CLASS,$/;"	e	enum:__anon14
ERROR_MSG	src/reset.c	19;"	d	file:
ERROR_WINHTTP_AUTODETECTION_FAILED	deps/winhttp/winhttp.h	225;"	d
ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR	deps/winhttp/winhttp.h	223;"	d
ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT	deps/winhttp/winhttp.h	217;"	d
ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN	deps/winhttp/winhttp.h	209;"	d
ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND	deps/winhttp/winhttp.h	208;"	d
ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN	deps/winhttp/winhttp.h	206;"	d
ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND	deps/winhttp/winhttp.h	207;"	d
ERROR_WINHTTP_CANNOT_CONNECT	deps/winhttp/winhttp.h	198;"	d
ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW	deps/winhttp/winhttp.h	228;"	d
ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED	deps/winhttp/winhttp.h	203;"	d
ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY	deps/winhttp/winhttp.h	231;"	d
ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY	deps/winhttp/winhttp.h	230;"	d
ERROR_WINHTTP_CONNECTION_ERROR	deps/winhttp/winhttp.h	199;"	d
ERROR_WINHTTP_HEADER_ALREADY_EXISTS	deps/winhttp/winhttp.h	214;"	d
ERROR_WINHTTP_HEADER_COUNT_EXCEEDED	deps/winhttp/winhttp.h	226;"	d
ERROR_WINHTTP_HEADER_NOT_FOUND	deps/winhttp/winhttp.h	210;"	d
ERROR_WINHTTP_HEADER_SIZE_OVERFLOW	deps/winhttp/winhttp.h	227;"	d
ERROR_WINHTTP_INCORRECT_HANDLE_STATE	deps/winhttp/winhttp.h	197;"	d
ERROR_WINHTTP_INCORRECT_HANDLE_TYPE	deps/winhttp/winhttp.h	196;"	d
ERROR_WINHTTP_INTERNAL_ERROR	deps/winhttp/winhttp.h	187;"	d
ERROR_WINHTTP_INVALID_HEADER	deps/winhttp/winhttp.h	212;"	d
ERROR_WINHTTP_INVALID_OPTION	deps/winhttp/winhttp.h	191;"	d
ERROR_WINHTTP_INVALID_QUERY_REQUEST	deps/winhttp/winhttp.h	213;"	d
ERROR_WINHTTP_INVALID_SERVER_RESPONSE	deps/winhttp/winhttp.h	211;"	d
ERROR_WINHTTP_INVALID_URL	deps/winhttp/winhttp.h	188;"	d
ERROR_WINHTTP_LOGIN_FAILURE	deps/winhttp/winhttp.h	194;"	d
ERROR_WINHTTP_NAME_NOT_RESOLVED	deps/winhttp/winhttp.h	190;"	d
ERROR_WINHTTP_NOT_INITIALIZED	deps/winhttp/winhttp.h	221;"	d
ERROR_WINHTTP_OPERATION_CANCELLED	deps/winhttp/winhttp.h	195;"	d
ERROR_WINHTTP_OPTION_NOT_SETTABLE	deps/winhttp/winhttp.h	192;"	d
ERROR_WINHTTP_OUT_OF_HANDLES	deps/winhttp/winhttp.h	185;"	d
ERROR_WINHTTP_REDIRECT_FAILED	deps/winhttp/winhttp.h	215;"	d
ERROR_WINHTTP_RESEND_REQUEST	deps/winhttp/winhttp.h	200;"	d
ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW	deps/winhttp/winhttp.h	229;"	d
ERROR_WINHTTP_SECURE_CERT_CN_INVALID	deps/winhttp/winhttp.h	202;"	d
ERROR_WINHTTP_SECURE_CERT_DATE_INVALID	deps/winhttp/winhttp.h	201;"	d
ERROR_WINHTTP_SECURE_CERT_REVOKED	deps/winhttp/winhttp.h	220;"	d
ERROR_WINHTTP_SECURE_CERT_REV_FAILED	deps/winhttp/winhttp.h	205;"	d
ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE	deps/winhttp/winhttp.h	224;"	d
ERROR_WINHTTP_SECURE_CHANNEL_ERROR	deps/winhttp/winhttp.h	216;"	d
ERROR_WINHTTP_SECURE_FAILURE	deps/winhttp/winhttp.h	222;"	d
ERROR_WINHTTP_SECURE_INVALID_CA	deps/winhttp/winhttp.h	204;"	d
ERROR_WINHTTP_SECURE_INVALID_CERT	deps/winhttp/winhttp.h	219;"	d
ERROR_WINHTTP_SHUTDOWN	deps/winhttp/winhttp.h	193;"	d
ERROR_WINHTTP_TIMEOUT	deps/winhttp/winhttp.h	186;"	d
ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT	deps/winhttp/winhttp.h	218;"	d
ERROR_WINHTTP_UNRECOGNIZED_SCHEME	deps/winhttp/winhttp.h	189;"	d
ERR_MSG	deps/zlib/zutil.h	50;"	d
ERR_RETURN	deps/zlib/zutil.h	52;"	d
EXLEN	deps/zlib/inflate.h	/^    EXLEN,      \/* i: waiting for extra length (gzip) *\/$/;"	e	enum:__anon28
EXPECTATIONS_COUNT	tests/notes/notes.c	54;"	d	file:
EXPECTED_HEADER	tests/diff/patch.c	20;"	d	file:
EXPECTED_HUNK	tests/diff/patch.c	26;"	d	file:
EXPECT_FALSE	tests/attr/attr_expect.h	/^	EXPECT_FALSE,$/;"	e	enum:attr_expect_t
EXPECT_STATUS_ADM	tests/diff/tree.c	125;"	d	file:
EXPECT_STRING	tests/attr/attr_expect.h	/^	EXPECT_STRING$/;"	e	enum:attr_expect_t
EXPECT_TRUE	tests/attr/attr_expect.h	/^	EXPECT_TRUE,$/;"	e	enum:attr_expect_t
EXPECT_UNDEFINED	tests/attr/attr_expect.h	/^	EXPECT_UNDEFINED,$/;"	e	enum:attr_expect_t
EXTRA	deps/zlib/inflate.h	/^    EXTRA,      \/* i: waiting for extra bytes (gzip) *\/$/;"	e	enum:__anon28
EXTRA_STATE	deps/zlib/deflate.h	55;"	d
F	examples/blame.c	/^	int F;$/;"	m	struct:opts	file:	access:public
FAR	deps/zlib/zconf.h	34;"	d
FASTFORWARD_BRANCH	tests/merge/workdir/analysis.c	20;"	d	file:
FASTFORWARD_ID	tests/merge/workdir/analysis.c	21;"	d	file:
FETCH_HEAD_EXPLICIT_DATA	tests/fetchhead/fetchhead_data.h	44;"	d
FETCH_HEAD_NO_MERGE_DATA	tests/fetchhead/fetchhead_data.h	24;"	d
FETCH_HEAD_NO_MERGE_DATA2	tests/fetchhead/fetchhead_data.h	33;"	d
FETCH_HEAD_NO_MERGE_DATA3	tests/fetchhead/fetchhead_data.h	38;"	d
FETCH_HEAD_QUOTE_DATA	tests/fetchhead/fetchhead_data.h	47;"	d
FETCH_HEAD_WILDCARD_DATA	tests/fetchhead/fetchhead_data.h	10;"	d
FETCH_HEAD_WILDCARD_DATA2	tests/fetchhead/fetchhead_data.h	19;"	d
FETCH_HEAD_WILDCARD_DATA_LOCAL	tests/fetchhead/fetchhead_data.h	2;"	d
FEW_UTF8_CRLF_RAW	tests/filter/crlf.h	25;"	d
FEW_UTF8_LF_RAW	tests/filter/crlf.h	26;"	d
FIELD	src/transports/http.c	/^	FIELD,$/;"	e	enum:last_cb	file:
FILEIO_BUFSIZE	src/common.h	83;"	d
FILESYSTEM_MAX_DEPTH	src/iterator.c	1088;"	d	file:
FILE_APPEND	tests/patch/patch_common.h	225;"	d
FILE_APPEND_NO_NL	tests/patch/patch_common.h	495;"	d
FILE_BINARY_DELTA_MODIFIED	tests/patch/patch_common.h	601;"	d
FILE_BINARY_DELTA_MODIFIED_LEN	tests/patch/patch_common.h	616;"	d
FILE_BINARY_DELTA_ORIGINAL	tests/patch/patch_common.h	584;"	d
FILE_BINARY_DELTA_ORIGINAL_LEN	tests/patch/patch_common.h	599;"	d
FILE_BINARY_LITERAL_MODIFIED	tests/patch/patch_common.h	571;"	d
FILE_BINARY_LITERAL_MODIFIED_LEN	tests/patch/patch_common.h	572;"	d
FILE_BINARY_LITERAL_ORIGINAL	tests/patch/patch_common.h	568;"	d
FILE_BINARY_LITERAL_ORIGINAL_LEN	tests/patch/patch_common.h	569;"	d
FILE_CHANGE_FIRSTLINE	tests/patch/patch_common.h	53;"	d
FILE_CHANGE_LASTLINE	tests/patch/patch_common.h	78;"	d
FILE_CHANGE_MIDDLE	tests/patch/patch_common.h	16;"	d
FILE_CHANGE_MIDDLE_GROW	tests/patch/patch_common.h	142;"	d
FILE_CHANGE_MIDDLE_SHRINK	tests/patch/patch_common.h	103;"	d
FILE_CONTENTS_CRLF	tests/index/crlf.c	9;"	d	file:
FILE_CONTENTS_LF	tests/index/crlf.c	8;"	d	file:
FILE_EMPTY_CONTEXT_MODIFIED	tests/patch/patch_common.h	478;"	d
FILE_EMPTY_CONTEXT_ORIGINAL	tests/patch/patch_common.h	475;"	d
FILE_NAME_NORMALIZED	src/win32/posix_w32.c	22;"	d	file:
FILE_OID_CRLF	tests/index/crlf.c	12;"	d	file:
FILE_OID_LF	tests/index/crlf.c	11;"	d	file:
FILE_ORIGINAL	tests/patch/patch_common.h	3;"	d
FILE_PREPEND	tests/patch/patch_common.h	192;"	d
FILE_PREPEND_AND_APPEND	tests/patch/patch_common.h	258;"	d
FILE_WITHOUT_BRACKET	tests/status/worktree_init.c	132;"	d	file:
FILE_WITH_BRACKET	tests/status/worktree_init.c	131;"	d	file:
FILE_WITH_SPACE	tests/status/worktree_init.c	210;"	d	file:
FILTERIO_BUFSIZE	src/common.h	84;"	d
FIND_FIRST_EX_LARGE_FETCH	src/path.c	1139;"	d	file:
FINISH_STATE	deps/zlib/deflate.h	60;"	d
FLAGS	deps/zlib/inflate.h	/^    FLAGS,      \/* i: waiting for method and flags (gzip) *\/$/;"	e	enum:__anon28
FLAG_BITS	src/commit_list.h	22;"	d
FLAG_SET	src/diff_tform.c	1115;"	d	file:
FLAG_SET	src/diff_tform.c	534;"	d	file:
FLUSH_BLOCK	deps/zlib/deflate.c	1550;"	d	file:
FLUSH_BLOCK_ONLY	deps/zlib/deflate.c	1538;"	d	file:
FNM_CASEFOLD	src/fnmatch.h	41;"	d
FNM_FILE_NAME	src/fnmatch.h	44;"	d
FNM_IGNORECASE	src/fnmatch.h	43;"	d
FNM_LEADING_DIR	src/fnmatch.h	40;"	d
FNM_NOESCAPE	src/fnmatch.h	37;"	d
FNM_NOMATCH	src/fnmatch.h	33;"	d
FNM_NORES	src/fnmatch.h	35;"	d
FNM_NOSYS	src/fnmatch.h	34;"	d
FNM_PATHNAME	src/fnmatch.h	38;"	d
FNM_PERIOD	src/fnmatch.h	39;"	d
FOO_COMMENT	tests/config/write.c	533;"	d	file:
FORCE_DIFFABLE	src/diff_driver.c	53;"	d	file:
FORMAT_DEFAULT	examples/status.c	/^	FORMAT_DEFAULT   = 0,$/;"	e	enum:__anon37	file:
FORMAT_LONG	examples/status.c	/^	FORMAT_LONG      = 1,$/;"	e	enum:__anon37	file:
FORMAT_PORCELAIN	examples/status.c	/^	FORMAT_PORCELAIN = 3,$/;"	e	enum:__anon37	file:
FORMAT_SHORT	examples/status.c	/^	FORMAT_SHORT     = 2,$/;"	e	enum:__anon37	file:
FREE_AND_NULL	tests/network/urlparse.c	15;"	d	file:
FRESHEN_FREQUENCY	src/odb_pack.c	24;"	d	file:
FSCTL_GET_REPARSE_POINT	src/win32/reparse.h	49;"	d
FSCTL_SET_REPARSE_POINT	src/win32/reparse.h	54;"	d
FUTILS_MAX_DEPTH	src/fileops.c	642;"	d	file:
F_CHUNKED	deps/http-parser/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	deps/http-parser/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	deps/http-parser/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_OK	src/posix.h	61;"	d
F_OPEN	deps/zlib/zutil.h	106;"	d
F_OPEN	deps/zlib/zutil.h	184;"	d
F_SKIPBODY	deps/http-parser/http_parser.h	/^  , F_SKIPBODY              = 1 << 5$/;"	e	enum:flags
F_TRAILING	deps/http-parser/http_parser.h	/^  , F_TRAILING              = 1 << 3$/;"	e	enum:flags
F_UPGRADE	deps/http-parser/http_parser.h	/^  , F_UPGRADE               = 1 << 4$/;"	e	enum:flags
Flags	src/win32/reparse.h	/^			ULONG  Flags;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
Freq	deps/zlib/deflate.h	76;"	d
GAWK	deps/regex/config.h	4;"	d
GET_ALL_ERRORS	src/config.c	/^	GET_ALL_ERRORS = 0,$/;"	e	enum:__anon338	file:
GET_NO_ERRORS	src/config.c	/^	GET_NO_ERRORS  = 2$/;"	e	enum:__anon338	file:
GET_NO_MISSING	src/config.c	/^	GET_NO_MISSING = 1,$/;"	e	enum:__anon338	file:
GF2_DIM	deps/zlib/crc32.c	324;"	d	file:
GITATTR	tests/attr/repo.c	295;"	d	file:
GITATTR	tests/object/blob/fromstream.c	45;"	d	file:
GITERR_CALLBACK	include/git2/errors.h	/^	GITERR_CALLBACK,$/;"	e	enum:__anon44
GITERR_CHECKOUT	include/git2/errors.h	/^	GITERR_CHECKOUT,$/;"	e	enum:__anon44
GITERR_CHECK_ALLOC	src/common.h	90;"	d
GITERR_CHECK_ALLOC_ADD	src/common.h	221;"	d
GITERR_CHECK_ALLOC_ADD3	src/common.h	224;"	d
GITERR_CHECK_ALLOC_ADD4	src/common.h	228;"	d
GITERR_CHECK_ALLOC_BUF	src/common.h	95;"	d
GITERR_CHECK_ALLOC_MULTIPLY	src/common.h	234;"	d
GITERR_CHECK_ARRAY	src/array.h	39;"	d
GITERR_CHECK_ERROR	src/common.h	100;"	d
GITERR_CHECK_VERSION	src/common.h	194;"	d
GITERR_CHERRYPICK	include/git2/errors.h	/^	GITERR_CHERRYPICK,$/;"	e	enum:__anon44
GITERR_CONFIG	include/git2/errors.h	/^	GITERR_CONFIG,$/;"	e	enum:__anon44
GITERR_DESCRIBE	include/git2/errors.h	/^	GITERR_DESCRIBE,$/;"	e	enum:__anon44
GITERR_FETCHHEAD	include/git2/errors.h	/^	GITERR_FETCHHEAD,$/;"	e	enum:__anon44
GITERR_FILESYSTEM	include/git2/errors.h	/^	GITERR_FILESYSTEM,$/;"	e	enum:__anon44
GITERR_FILTER	include/git2/errors.h	/^	GITERR_FILTER,$/;"	e	enum:__anon44
GITERR_INDEX	include/git2/errors.h	/^	GITERR_INDEX,$/;"	e	enum:__anon44
GITERR_INDEXER	include/git2/errors.h	/^	GITERR_INDEXER,$/;"	e	enum:__anon44
GITERR_INVALID	include/git2/errors.h	/^	GITERR_INVALID,$/;"	e	enum:__anon44
GITERR_MERGE	include/git2/errors.h	/^	GITERR_MERGE,$/;"	e	enum:__anon44
GITERR_NET	include/git2/errors.h	/^	GITERR_NET,$/;"	e	enum:__anon44
GITERR_NOMEMORY	include/git2/errors.h	/^	GITERR_NOMEMORY,$/;"	e	enum:__anon44
GITERR_NONE	include/git2/errors.h	/^	GITERR_NONE = 0,$/;"	e	enum:__anon44
GITERR_OBJECT	include/git2/errors.h	/^	GITERR_OBJECT,$/;"	e	enum:__anon44
GITERR_ODB	include/git2/errors.h	/^	GITERR_ODB,$/;"	e	enum:__anon44
GITERR_OS	include/git2/errors.h	/^	GITERR_OS,$/;"	e	enum:__anon44
GITERR_PATCH	include/git2/errors.h	/^	GITERR_PATCH,$/;"	e	enum:__anon44
GITERR_REBASE	include/git2/errors.h	/^	GITERR_REBASE,$/;"	e	enum:__anon44
GITERR_REFERENCE	include/git2/errors.h	/^	GITERR_REFERENCE,$/;"	e	enum:__anon44
GITERR_REGEX	include/git2/errors.h	/^	GITERR_REGEX,$/;"	e	enum:__anon44
GITERR_REPOSITORY	include/git2/errors.h	/^	GITERR_REPOSITORY,$/;"	e	enum:__anon44
GITERR_REVERT	include/git2/errors.h	/^	GITERR_REVERT,$/;"	e	enum:__anon44
GITERR_SSH	include/git2/errors.h	/^	GITERR_SSH,$/;"	e	enum:__anon44
GITERR_SSL	include/git2/errors.h	/^	GITERR_SSL,$/;"	e	enum:__anon44
GITERR_STASH	include/git2/errors.h	/^	GITERR_STASH,$/;"	e	enum:__anon44
GITERR_SUBMODULE	include/git2/errors.h	/^	GITERR_SUBMODULE,$/;"	e	enum:__anon44
GITERR_TAG	include/git2/errors.h	/^	GITERR_TAG,$/;"	e	enum:__anon44
GITERR_THREAD	include/git2/errors.h	/^	GITERR_THREAD,$/;"	e	enum:__anon44
GITERR_TREE	include/git2/errors.h	/^	GITERR_TREE,$/;"	e	enum:__anon44
GITERR_ZLIB	include/git2/errors.h	/^	GITERR_ZLIB,$/;"	e	enum:__anon44
GITMODULES_CREATE	src/submodule.c	/^	GITMODULES_CREATE = 1,$/;"	e	enum:__anon303	file:
GITMODULES_EXISTING	src/submodule.c	/^	GITMODULES_EXISTING = 0,$/;"	e	enum:__anon303	file:
GITNO_CONNECT_SSL	src/netops.h	/^	GITNO_CONNECT_SSL = 1,$/;"	e	enum:__anon220
GIT_ABBREV_DEFAULT	src/repository.h	/^	GIT_ABBREV_DEFAULT = 7,$/;"	e	enum:__anon317
GIT_ACK_COMMON	src/transports/smart.h	/^	GIT_ACK_COMMON,$/;"	e	enum:git_ack_status
GIT_ACK_CONTINUE	src/transports/smart.h	/^	GIT_ACK_CONTINUE,$/;"	e	enum:git_ack_status
GIT_ACK_NONE	src/transports/smart.h	/^	GIT_ACK_NONE,$/;"	e	enum:git_ack_status
GIT_ACK_READY	src/transports/smart.h	/^	GIT_ACK_READY$/;"	e	enum:git_ack_status
GIT_ADD_SIZET_OVERFLOW	src/common.h	213;"	d
GIT_ALIGN	src/cc-compat.h	39;"	d
GIT_ALIGN	src/cc-compat.h	41;"	d
GIT_ALIGN	src/cc-compat.h	43;"	d
GIT_ALTERNATES_FILE	src/odb.c	23;"	d	file:
GIT_ALTERNATES_MAX_DEPTH	src/odb.c	32;"	d	file:
GIT_ANNOTATED_COMMIT_REAL	src/annotated_commit.h	/^	GIT_ANNOTATED_COMMIT_REAL = 1,$/;"	e	enum:__anon217
GIT_ANNOTATED_COMMIT_VIRTUAL	src/annotated_commit.h	/^	GIT_ANNOTATED_COMMIT_VIRTUAL = 2,$/;"	e	enum:__anon217
GIT_ARRAY_INIT	src/array.h	28;"	d
GIT_ATTR_CHECK_FILE_THEN_INDEX	include/git2/attr.h	117;"	d
GIT_ATTR_CHECK_INDEX_ONLY	include/git2/attr.h	119;"	d
GIT_ATTR_CHECK_INDEX_THEN_FILE	include/git2/attr.h	118;"	d
GIT_ATTR_CHECK_NO_SYSTEM	include/git2/attr.h	128;"	d
GIT_ATTR_CONFIG	src/attrcache.h	13;"	d
GIT_ATTR_FALSE	include/git2/attr.h	47;"	d
GIT_ATTR_FALSE_T	include/git2/attr.h	/^	GIT_ATTR_FALSE_T, \/**< The attribute has been unset *\/$/;"	e	enum:__anon61
GIT_ATTR_FILE	src/attr_file.h	17;"	d
GIT_ATTR_FILE_INREPO	src/attr_file.h	18;"	d
GIT_ATTR_FILE_NUM_SOURCES	src/attr_file.h	/^	GIT_ATTR_FILE_NUM_SOURCES  = 3$/;"	e	enum:__anon165
GIT_ATTR_FILE_SYSTEM	src/attr_file.h	19;"	d
GIT_ATTR_FILE_XDG	src/attr_file.h	20;"	d
GIT_ATTR_FILE__FROM_FILE	src/attr_file.h	/^	GIT_ATTR_FILE__FROM_FILE   = 1,$/;"	e	enum:__anon165
GIT_ATTR_FILE__FROM_INDEX	src/attr_file.h	/^	GIT_ATTR_FILE__FROM_INDEX  = 2,$/;"	e	enum:__anon165
GIT_ATTR_FILE__IN_MEMORY	src/attr_file.h	/^	GIT_ATTR_FILE__IN_MEMORY   = 0,$/;"	e	enum:__anon165
GIT_ATTR_FNMATCH_ALLOWMACRO	src/attr_file.h	32;"	d
GIT_ATTR_FNMATCH_ALLOWNEG	src/attr_file.h	31;"	d
GIT_ATTR_FNMATCH_ALLOWSPACE	src/attr_file.h	28;"	d
GIT_ATTR_FNMATCH_DIRECTORY	src/attr_file.h	23;"	d
GIT_ATTR_FNMATCH_FULLPATH	src/attr_file.h	24;"	d
GIT_ATTR_FNMATCH_HASWILD	src/attr_file.h	27;"	d
GIT_ATTR_FNMATCH_ICASE	src/attr_file.h	29;"	d
GIT_ATTR_FNMATCH_IGNORE	src/attr_file.h	26;"	d
GIT_ATTR_FNMATCH_LEADINGDIR	src/attr_file.h	33;"	d
GIT_ATTR_FNMATCH_MACRO	src/attr_file.h	25;"	d
GIT_ATTR_FNMATCH_MATCH_ALL	src/attr_file.h	30;"	d
GIT_ATTR_FNMATCH_NEGATIVE	src/attr_file.h	22;"	d
GIT_ATTR_FNMATCH_NOLEADINGDIR	src/attr_file.h	34;"	d
GIT_ATTR_FNMATCH__INCOMING	src/attr_file.h	36;"	d
GIT_ATTR_HAS_VALUE	include/git2/attr.h	77;"	d
GIT_ATTR_TRUE	include/git2/attr.h	33;"	d
GIT_ATTR_TRUE_T	include/git2/attr.h	/^	GIT_ATTR_TRUE_T,  \/**< The attribute has been set *\/$/;"	e	enum:__anon61
GIT_ATTR_UNSPECIFIED	include/git2/attr.h	65;"	d
GIT_ATTR_UNSPECIFIED_T	include/git2/attr.h	/^	GIT_ATTR_UNSPECIFIED_T = 0, \/**< The attribute has been left unspecified *\/$/;"	e	enum:__anon61
GIT_ATTR_VALUE_T	include/git2/attr.h	/^	GIT_ATTR_VALUE_T, \/**< This attribute has a value *\/$/;"	e	enum:__anon61
GIT_AUTHTYPE_BASIC	src/transports/auth.h	/^	GIT_AUTHTYPE_BASIC = 1,$/;"	e	enum:__anon195
GIT_AUTHTYPE_NEGOTIATE	src/transports/auth.h	/^	GIT_AUTHTYPE_NEGOTIATE = 2,$/;"	e	enum:__anon195
GIT_AUTO_CRLF_DEFAULT	src/repository.h	/^	GIT_AUTO_CRLF_DEFAULT = GIT_AUTO_CRLF_FALSE,$/;"	e	enum:__anon317
GIT_AUTO_CRLF_FALSE	src/repository.h	/^	GIT_AUTO_CRLF_FALSE = 0,$/;"	e	enum:__anon317
GIT_AUTO_CRLF_INPUT	src/repository.h	/^	GIT_AUTO_CRLF_INPUT = 2,$/;"	e	enum:__anon317
GIT_AUTO_CRLF_TRUE	src/repository.h	/^	GIT_AUTO_CRLF_TRUE = 1,$/;"	e	enum:__anon317
GIT_BARE_DIR_MODE	src/repository.h	29;"	d
GIT_BEGIN_DECL	include/git2/common.h	14;"	d
GIT_BEGIN_DECL	include/git2/common.h	18;"	d
GIT_BISECT_LOG_FILE	src/refs.h	39;"	d
GIT_BITVEC_MASK	src/bitvec.h	41;"	d
GIT_BITVEC_WORD	src/bitvec.h	42;"	d
GIT_BLAME_FIRST_PARENT	include/git2/blame.h	/^	GIT_BLAME_FIRST_PARENT = (1<<4),$/;"	e	enum:__anon41
GIT_BLAME_NORMAL	include/git2/blame.h	/^	GIT_BLAME_NORMAL = 0,$/;"	e	enum:__anon41
GIT_BLAME_OPTIONS_INIT	include/git2/blame.h	82;"	d
GIT_BLAME_OPTIONS_VERSION	include/git2/blame.h	81;"	d
GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES = (1<<3),$/;"	e	enum:__anon41
GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES = (1<<2),$/;"	e	enum:__anon41
GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES = (1<<1),$/;"	e	enum:__anon41
GIT_BLAME_TRACK_COPIES_SAME_FILE	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_SAME_FILE = (1<<0),$/;"	e	enum:__anon41
GIT_BOM_NONE	src/buf_text.h	/^	GIT_BOM_NONE = 0,$/;"	e	enum:__anon341
GIT_BOM_UTF16_BE	src/buf_text.h	/^	GIT_BOM_UTF16_BE = 3,$/;"	e	enum:__anon341
GIT_BOM_UTF16_LE	src/buf_text.h	/^	GIT_BOM_UTF16_LE = 2,$/;"	e	enum:__anon341
GIT_BOM_UTF32_BE	src/buf_text.h	/^	GIT_BOM_UTF32_BE = 5$/;"	e	enum:__anon341
GIT_BOM_UTF32_LE	src/buf_text.h	/^	GIT_BOM_UTF32_LE = 4,$/;"	e	enum:__anon341
GIT_BOM_UTF8	src/buf_text.h	/^	GIT_BOM_UTF8 = 1,$/;"	e	enum:__anon341
GIT_BRANCH_ALL	include/git2/types.h	/^	GIT_BRANCH_ALL = GIT_BRANCH_LOCAL|GIT_BRANCH_REMOTE,$/;"	e	enum:__anon145
GIT_BRANCH_LOCAL	include/git2/types.h	/^	GIT_BRANCH_LOCAL = 1,$/;"	e	enum:__anon145
GIT_BRANCH_MASTER	src/repository.c	39;"	d	file:
GIT_BRANCH_REMOTE	include/git2/types.h	/^	GIT_BRANCH_REMOTE = 2,$/;"	e	enum:__anon145
GIT_BUF_INIT	src/buffer.h	24;"	d
GIT_BUF_INIT_CONST	include/git2/buffer.h	60;"	d
GIT_CACHE_STORE_ANY	src/cache.h	/^	GIT_CACHE_STORE_ANY = 0,$/;"	e	enum:__anon228
GIT_CACHE_STORE_PARSED	src/cache.h	/^	GIT_CACHE_STORE_PARSED = 2$/;"	e	enum:__anon228
GIT_CACHE_STORE_RAW	src/cache.h	/^	GIT_CACHE_STORE_RAW = 1,$/;"	e	enum:__anon228
GIT_CAP_DELETE_REFS	src/transports/smart.h	24;"	d
GIT_CAP_INCLUDE_TAG	src/transports/smart.h	23;"	d
GIT_CAP_MULTI_ACK	src/transports/smart.h	19;"	d
GIT_CAP_MULTI_ACK_DETAILED	src/transports/smart.h	20;"	d
GIT_CAP_OFS_DELTA	src/transports/smart.h	18;"	d
GIT_CAP_REPORT_STATUS	src/transports/smart.h	25;"	d
GIT_CAP_SIDE_BAND	src/transports/smart.h	21;"	d
GIT_CAP_SIDE_BAND_64K	src/transports/smart.h	22;"	d
GIT_CAP_SYMREF	src/transports/smart.h	27;"	d
GIT_CAP_THIN_PACK	src/transports/smart.h	26;"	d
GIT_CERT_HOSTKEY_LIBSSH2	include/git2/types.h	/^	GIT_CERT_HOSTKEY_LIBSSH2,$/;"	e	enum:git_cert_t
GIT_CERT_NONE	include/git2/types.h	/^	GIT_CERT_NONE,$/;"	e	enum:git_cert_t
GIT_CERT_SSH_MD5	include/git2/transport.h	/^	GIT_CERT_SSH_MD5 = (1 << 0),$/;"	e	enum:__anon77
GIT_CERT_SSH_SHA1	include/git2/transport.h	/^	GIT_CERT_SSH_SHA1 = (1 << 1),$/;"	e	enum:__anon77
GIT_CERT_STRARRAY	include/git2/types.h	/^	GIT_CERT_STRARRAY,$/;"	e	enum:git_cert_t
GIT_CERT_X509	include/git2/types.h	/^	GIT_CERT_X509,$/;"	e	enum:git_cert_t
GIT_CHECKOUT_ALLOW_CONFLICTS	include/git2/checkout.h	/^	GIT_CHECKOUT_ALLOW_CONFLICTS = (1u << 4),$/;"	e	enum:__anon137
GIT_CHECKOUT_CONFLICT_STYLE_DIFF3	include/git2/checkout.h	/^	GIT_CHECKOUT_CONFLICT_STYLE_DIFF3 = (1u << 21),$/;"	e	enum:__anon137
GIT_CHECKOUT_CONFLICT_STYLE_MERGE	include/git2/checkout.h	/^	GIT_CHECKOUT_CONFLICT_STYLE_MERGE = (1u << 20),$/;"	e	enum:__anon137
GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH	include/git2/checkout.h	/^	GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH = (1u << 13),$/;"	e	enum:__anon137
GIT_CHECKOUT_DONT_OVERWRITE_IGNORED	include/git2/checkout.h	/^	GIT_CHECKOUT_DONT_OVERWRITE_IGNORED = (1u << 19),$/;"	e	enum:__anon137
GIT_CHECKOUT_DONT_REMOVE_EXISTING	include/git2/checkout.h	/^	GIT_CHECKOUT_DONT_REMOVE_EXISTING = (1u << 22),$/;"	e	enum:__anon137
GIT_CHECKOUT_DONT_UPDATE_INDEX	include/git2/checkout.h	/^	GIT_CHECKOUT_DONT_UPDATE_INDEX = (1u << 8),$/;"	e	enum:__anon137
GIT_CHECKOUT_DONT_WRITE_INDEX	include/git2/checkout.h	/^	GIT_CHECKOUT_DONT_WRITE_INDEX = (1u << 23),$/;"	e	enum:__anon137
GIT_CHECKOUT_FORCE	include/git2/checkout.h	/^	GIT_CHECKOUT_FORCE = (1u << 1),$/;"	e	enum:__anon137
GIT_CHECKOUT_NONE	include/git2/checkout.h	/^	GIT_CHECKOUT_NONE = 0, \/**< default is a dry run, no actual updates *\/$/;"	e	enum:__anon137
GIT_CHECKOUT_NOTIFY_ALL	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_ALL       = 0x0FFFFu$/;"	e	enum:__anon138
GIT_CHECKOUT_NOTIFY_CONFLICT	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_CONFLICT  = (1u << 0),$/;"	e	enum:__anon138
GIT_CHECKOUT_NOTIFY_DIRTY	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_DIRTY     = (1u << 1),$/;"	e	enum:__anon138
GIT_CHECKOUT_NOTIFY_IGNORED	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_IGNORED   = (1u << 4),$/;"	e	enum:__anon138
GIT_CHECKOUT_NOTIFY_NONE	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_NONE      = 0,$/;"	e	enum:__anon138
GIT_CHECKOUT_NOTIFY_UNTRACKED	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_UNTRACKED = (1u << 3),$/;"	e	enum:__anon138
GIT_CHECKOUT_NOTIFY_UPDATED	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_UPDATED   = (1u << 2),$/;"	e	enum:__anon138
GIT_CHECKOUT_NO_REFRESH	include/git2/checkout.h	/^	GIT_CHECKOUT_NO_REFRESH = (1u << 9),$/;"	e	enum:__anon137
GIT_CHECKOUT_OPTIONS_INIT	include/git2/checkout.h	298;"	d
GIT_CHECKOUT_OPTIONS_VERSION	include/git2/checkout.h	297;"	d
GIT_CHECKOUT_RECREATE_MISSING	include/git2/checkout.h	/^	GIT_CHECKOUT_RECREATE_MISSING = (1u << 2),$/;"	e	enum:__anon137
GIT_CHECKOUT_REMOVE_IGNORED	include/git2/checkout.h	/^	GIT_CHECKOUT_REMOVE_IGNORED = (1u << 6),$/;"	e	enum:__anon137
GIT_CHECKOUT_REMOVE_UNTRACKED	include/git2/checkout.h	/^	GIT_CHECKOUT_REMOVE_UNTRACKED = (1u << 5),$/;"	e	enum:__anon137
GIT_CHECKOUT_SAFE	include/git2/checkout.h	/^	GIT_CHECKOUT_SAFE = (1u << 0),$/;"	e	enum:__anon137
GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES	include/git2/checkout.h	/^	GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES = (1u << 18),$/;"	e	enum:__anon137
GIT_CHECKOUT_SKIP_UNMERGED	include/git2/checkout.h	/^	GIT_CHECKOUT_SKIP_UNMERGED = (1u << 10),$/;"	e	enum:__anon137
GIT_CHECKOUT_UPDATE_ONLY	include/git2/checkout.h	/^	GIT_CHECKOUT_UPDATE_ONLY = (1u << 7),$/;"	e	enum:__anon137
GIT_CHECKOUT_UPDATE_SUBMODULES	include/git2/checkout.h	/^	GIT_CHECKOUT_UPDATE_SUBMODULES = (1u << 16),$/;"	e	enum:__anon137
GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED	include/git2/checkout.h	/^	GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED = (1u << 17),$/;"	e	enum:__anon137
GIT_CHECKOUT_USE_OURS	include/git2/checkout.h	/^	GIT_CHECKOUT_USE_OURS = (1u << 11),$/;"	e	enum:__anon137
GIT_CHECKOUT_USE_THEIRS	include/git2/checkout.h	/^	GIT_CHECKOUT_USE_THEIRS = (1u << 12),$/;"	e	enum:__anon137
GIT_CHECKOUT__NOTIFY_CONFLICT_TREE	src/checkout.h	13;"	d
GIT_CHERRYPICK_FILE_MODE	src/cherrypick.c	21;"	d	file:
GIT_CHERRYPICK_HEAD_FILE	src/refs.h	38;"	d
GIT_CHERRYPICK_OPTIONS_INIT	include/git2/cherrypick.h	37;"	d
GIT_CHERRYPICK_OPTIONS_VERSION	include/git2/cherrypick.h	36;"	d
GIT_CLONE_LOCAL	include/git2/clone.h	/^	GIT_CLONE_LOCAL,$/;"	e	enum:__anon135
GIT_CLONE_LOCAL_AUTO	include/git2/clone.h	/^	GIT_CLONE_LOCAL_AUTO,$/;"	e	enum:__anon135
GIT_CLONE_LOCAL_NO_LINKS	include/git2/clone.h	/^	GIT_CLONE_LOCAL_NO_LINKS,$/;"	e	enum:__anon135
GIT_CLONE_NO_LOCAL	include/git2/clone.h	/^	GIT_CLONE_NO_LOCAL,$/;"	e	enum:__anon135
GIT_CLONE_OPTIONS_INIT	include/git2/clone.h	167;"	d
GIT_CLONE_OPTIONS_VERSION	include/git2/clone.h	166;"	d
GIT_COMMIT_GETTER	src/commit.c	475;"	d	file:
GIT_CONFIG_BACKEND_INIT	include/git2/sys/config.h	87;"	d
GIT_CONFIG_BACKEND_VERSION	include/git2/sys/config.h	86;"	d
GIT_CONFIG_FILENAME_GLOBAL	src/config.h	17;"	d
GIT_CONFIG_FILENAME_INREPO	src/config.h	20;"	d
GIT_CONFIG_FILENAME_PROGRAMDATA	src/config.h	15;"	d
GIT_CONFIG_FILENAME_SYSTEM	src/config.h	16;"	d
GIT_CONFIG_FILENAME_XDG	src/config.h	18;"	d
GIT_CONFIG_FILE_MODE	src/config.h	21;"	d
GIT_CONFIG_HIGHEST_LEVEL	include/git2/config.h	/^	GIT_CONFIG_HIGHEST_LEVEL = -1,$/;"	e	enum:__anon110
GIT_CONFIG_LEVEL_APP	include/git2/config.h	/^	GIT_CONFIG_LEVEL_APP = 6,$/;"	e	enum:__anon110
GIT_CONFIG_LEVEL_GLOBAL	include/git2/config.h	/^	GIT_CONFIG_LEVEL_GLOBAL = 4,$/;"	e	enum:__anon110
GIT_CONFIG_LEVEL_LOCAL	include/git2/config.h	/^	GIT_CONFIG_LEVEL_LOCAL = 5,$/;"	e	enum:__anon110
GIT_CONFIG_LEVEL_PROGRAMDATA	include/git2/config.h	/^	GIT_CONFIG_LEVEL_PROGRAMDATA = 1,$/;"	e	enum:__anon110
GIT_CONFIG_LEVEL_SYSTEM	include/git2/config.h	/^	GIT_CONFIG_LEVEL_SYSTEM = 2,$/;"	e	enum:__anon110
GIT_CONFIG_LEVEL_XDG	include/git2/config.h	/^	GIT_CONFIG_LEVEL_XDG = 3,$/;"	e	enum:__anon110
GIT_CPDIR_CHMOD_DIRS	src/fileops.h	/^	GIT_CPDIR_CHMOD_DIRS        = (1u << 4),$/;"	e	enum:__anon348
GIT_CPDIR_COPY_DOTFILES	src/fileops.h	/^	GIT_CPDIR_COPY_DOTFILES     = (1u << 2),$/;"	e	enum:__anon348
GIT_CPDIR_COPY_SYMLINKS	src/fileops.h	/^	GIT_CPDIR_COPY_SYMLINKS     = (1u << 1),$/;"	e	enum:__anon348
GIT_CPDIR_CREATE_EMPTY_DIRS	src/fileops.h	/^	GIT_CPDIR_CREATE_EMPTY_DIRS = (1u << 0),$/;"	e	enum:__anon348
GIT_CPDIR_LINK_FILES	src/fileops.h	/^	GIT_CPDIR_LINK_FILES        = (1u << 6),$/;"	e	enum:__anon348
GIT_CPDIR_OVERWRITE	src/fileops.h	/^	GIT_CPDIR_OVERWRITE         = (1u << 3),$/;"	e	enum:__anon348
GIT_CPDIR_SIMPLE_TO_MODE	src/fileops.h	/^	GIT_CPDIR_SIMPLE_TO_MODE    = (1u << 5),$/;"	e	enum:__anon348
GIT_CPDIR__MKDIR_DONE_FOR_TO_ROOT	src/fileops.c	900;"	d	file:
GIT_CREDTYPE_DEFAULT	include/git2/transport.h	/^	GIT_CREDTYPE_DEFAULT = (1u << 3),$/;"	e	enum:__anon80
GIT_CREDTYPE_SSH_CUSTOM	include/git2/transport.h	/^	GIT_CREDTYPE_SSH_CUSTOM = (1u << 2),$/;"	e	enum:__anon80
GIT_CREDTYPE_SSH_INTERACTIVE	include/git2/transport.h	/^	GIT_CREDTYPE_SSH_INTERACTIVE = (1u << 4),$/;"	e	enum:__anon80
GIT_CREDTYPE_SSH_KEY	include/git2/transport.h	/^	GIT_CREDTYPE_SSH_KEY = (1u << 1),$/;"	e	enum:__anon80
GIT_CREDTYPE_SSH_MEMORY	include/git2/transport.h	/^	GIT_CREDTYPE_SSH_MEMORY = (1u << 6),$/;"	e	enum:__anon80
GIT_CREDTYPE_USERNAME	include/git2/transport.h	/^	GIT_CREDTYPE_USERNAME = (1u << 5),$/;"	e	enum:__anon80
GIT_CREDTYPE_USERPASS_PLAINTEXT	include/git2/transport.h	/^	GIT_CREDTYPE_USERPASS_PLAINTEXT = (1u << 0),$/;"	e	enum:__anon80
GIT_CRLF_AUTO	src/filter.h	/^	GIT_CRLF_AUTO,$/;"	e	enum:__anon259
GIT_CRLF_BINARY	src/filter.h	/^	GIT_CRLF_BINARY = 0,$/;"	e	enum:__anon259
GIT_CRLF_CRLF	src/filter.h	/^	GIT_CRLF_CRLF,$/;"	e	enum:__anon259
GIT_CRLF_GUESS	src/filter.h	/^	GIT_CRLF_GUESS = -1,$/;"	e	enum:__anon259
GIT_CRLF_INPUT	src/filter.h	/^	GIT_CRLF_INPUT,$/;"	e	enum:__anon259
GIT_CRLF_TEXT	src/filter.h	/^	GIT_CRLF_TEXT,$/;"	e	enum:__anon259
GIT_CURL_BADSOCKET	src/curl_stream.c	21;"	d	file:
GIT_CURL_BADSOCKET	src/curl_stream.c	24;"	d	file:
GIT_CVAR_ABBREV	src/repository.h	/^	GIT_CVAR_ABBREV,        \/* core.abbrev *\/$/;"	e	enum:__anon316
GIT_CVAR_AUTO_CRLF	src/repository.h	/^	GIT_CVAR_AUTO_CRLF = 0, \/* core.autocrlf *\/$/;"	e	enum:__anon316
GIT_CVAR_CACHE_MAX	src/repository.h	/^	GIT_CVAR_CACHE_MAX$/;"	e	enum:__anon316
GIT_CVAR_EOL	src/repository.h	/^	GIT_CVAR_EOL,           \/* core.eol *\/$/;"	e	enum:__anon316
GIT_CVAR_FALSE	include/git2/config.h	/^	GIT_CVAR_FALSE = 0,$/;"	e	enum:__anon111
GIT_CVAR_FILEMODE	src/repository.h	/^	GIT_CVAR_FILEMODE,      \/* core.filemode *\/$/;"	e	enum:__anon316
GIT_CVAR_IGNORECASE	src/repository.h	/^	GIT_CVAR_IGNORECASE,    \/* core.ignorecase *\/$/;"	e	enum:__anon316
GIT_CVAR_IGNORESTAT	src/repository.h	/^	GIT_CVAR_IGNORESTAT,    \/* core.ignorestat *\/$/;"	e	enum:__anon316
GIT_CVAR_INT32	include/git2/config.h	/^	GIT_CVAR_INT32,$/;"	e	enum:__anon111
GIT_CVAR_LOGALLREFUPDATES	src/repository.h	/^	GIT_CVAR_LOGALLREFUPDATES, \/* core.logallrefupdates *\/$/;"	e	enum:__anon316
GIT_CVAR_NOT_CACHED	src/repository.h	/^	GIT_CVAR_NOT_CACHED = -1,$/;"	e	enum:__anon317
GIT_CVAR_PRECOMPOSE	src/repository.h	/^	GIT_CVAR_PRECOMPOSE,    \/* core.precomposeunicode *\/$/;"	e	enum:__anon316
GIT_CVAR_PROTECTHFS	src/repository.h	/^	GIT_CVAR_PROTECTHFS,    \/* core.protectHFS *\/$/;"	e	enum:__anon316
GIT_CVAR_PROTECTNTFS	src/repository.h	/^	GIT_CVAR_PROTECTNTFS,   \/* core.protectNTFS *\/$/;"	e	enum:__anon316
GIT_CVAR_SAFE_CRLF	src/repository.h	/^	GIT_CVAR_SAFE_CRLF,		\/* core.safecrlf *\/$/;"	e	enum:__anon316
GIT_CVAR_STRING	include/git2/config.h	/^	GIT_CVAR_STRING$/;"	e	enum:__anon111
GIT_CVAR_SYMLINKS	src/repository.h	/^	GIT_CVAR_SYMLINKS,      \/* core.symlinks *\/$/;"	e	enum:__anon316
GIT_CVAR_TRUE	include/git2/config.h	/^	GIT_CVAR_TRUE = 1,$/;"	e	enum:__anon111
GIT_CVAR_TRUSTCTIME	src/repository.h	/^	GIT_CVAR_TRUSTCTIME,    \/* core.trustctime *\/$/;"	e	enum:__anon316
GIT_DATE_RFC2822_SZ	src/util.h	57;"	d
GIT_DEFAULT_PORT	include/git2/net.h	22;"	d
GIT_DELTA_ADDED	include/git2/diff.h	/^	GIT_DELTA_ADDED = 1,	   \/**< entry does not exist in old version *\/$/;"	e	enum:__anon84
GIT_DELTA_CONFLICTED	include/git2/diff.h	/^	GIT_DELTA_CONFLICTED = 10, \/**< entry in the index is conflicted *\/$/;"	e	enum:__anon84
GIT_DELTA_COPIED	include/git2/diff.h	/^	GIT_DELTA_COPIED = 5,      \/**< entry was copied from another old entry *\/$/;"	e	enum:__anon84
GIT_DELTA_DELETED	include/git2/diff.h	/^	GIT_DELTA_DELETED = 2,	   \/**< entry does not exist in new version *\/$/;"	e	enum:__anon84
GIT_DELTA_IGNORED	include/git2/diff.h	/^	GIT_DELTA_IGNORED = 6,     \/**< entry is ignored item in workdir *\/$/;"	e	enum:__anon84
GIT_DELTA_MODIFIED	include/git2/diff.h	/^	GIT_DELTA_MODIFIED = 3,    \/**< entry content changed between old and new *\/$/;"	e	enum:__anon84
GIT_DELTA_RENAMED	include/git2/diff.h	/^	GIT_DELTA_RENAMED = 4,     \/**< entry was renamed between old and new *\/$/;"	e	enum:__anon84
GIT_DELTA_SIZE_MIN	src/delta.h	87;"	d
GIT_DELTA_TYPECHANGE	include/git2/diff.h	/^	GIT_DELTA_TYPECHANGE = 8,  \/**< type of entry changed between old and new *\/$/;"	e	enum:__anon84
GIT_DELTA_UNMODIFIED	include/git2/diff.h	/^	GIT_DELTA_UNMODIFIED = 0,  \/**< no changes *\/$/;"	e	enum:__anon84
GIT_DELTA_UNREADABLE	include/git2/diff.h	/^	GIT_DELTA_UNREADABLE = 9,  \/**< entry is unreadable *\/$/;"	e	enum:__anon84
GIT_DELTA_UNTRACKED	include/git2/diff.h	/^	GIT_DELTA_UNTRACKED = 7,   \/**< entry is untracked item in workdir *\/$/;"	e	enum:__anon84
GIT_DESCRIBE_ALL	include/git2/describe.h	/^	GIT_DESCRIBE_ALL,$/;"	e	enum:__anon107
GIT_DESCRIBE_DEFAULT	include/git2/describe.h	/^	GIT_DESCRIBE_DEFAULT,$/;"	e	enum:__anon107
GIT_DESCRIBE_DEFAULT_ABBREVIATED_SIZE	include/git2/describe.h	65;"	d
GIT_DESCRIBE_DEFAULT_MAX_CANDIDATES_TAGS	include/git2/describe.h	64;"	d
GIT_DESCRIBE_FORMAT_OPTIONS_INIT	include/git2/describe.h	101;"	d
GIT_DESCRIBE_FORMAT_OPTIONS_VERSION	include/git2/describe.h	100;"	d
GIT_DESCRIBE_OPTIONS_INIT	include/git2/describe.h	68;"	d
GIT_DESCRIBE_OPTIONS_VERSION	include/git2/describe.h	67;"	d
GIT_DESCRIBE_TAGS	include/git2/describe.h	/^	GIT_DESCRIBE_TAGS,$/;"	e	enum:__anon107
GIT_DESC_CONTENT	src/repo_template.h	36;"	d
GIT_DESC_FILE	src/repo_template.h	34;"	d
GIT_DESC_MODE	src/repo_template.h	35;"	d
GIT_DIFFCAPS_HAS_SYMLINKS	src/diff_generate.h	/^	GIT_DIFFCAPS_HAS_SYMLINKS     = (1 << 0), \/* symlinks on platform? *\/$/;"	e	enum:__anon241
GIT_DIFFCAPS_IGNORE_STAT	src/diff_generate.h	/^	GIT_DIFFCAPS_IGNORE_STAT      = (1 << 1), \/* use stat? *\/$/;"	e	enum:__anon241
GIT_DIFFCAPS_TRUST_CTIME	src/diff_generate.h	/^	GIT_DIFFCAPS_TRUST_CTIME      = (1 << 3), \/* use st_ctime? *\/$/;"	e	enum:__anon241
GIT_DIFFCAPS_TRUST_MODE_BITS	src/diff_generate.h	/^	GIT_DIFFCAPS_TRUST_MODE_BITS  = (1 << 2), \/* use st_mode? *\/$/;"	e	enum:__anon241
GIT_DIFFCAPS_USE_DEV	src/diff_generate.h	/^	GIT_DIFFCAPS_USE_DEV          = (1 << 4), \/* use st_dev? *\/$/;"	e	enum:__anon241
GIT_DIFF_BINARY_DELTA	include/git2/diff.h	/^	GIT_DIFF_BINARY_DELTA,$/;"	e	enum:__anon88
GIT_DIFF_BINARY_LITERAL	include/git2/diff.h	/^	GIT_DIFF_BINARY_LITERAL,$/;"	e	enum:__anon88
GIT_DIFF_BINARY_NONE	include/git2/diff.h	/^	GIT_DIFF_BINARY_NONE,$/;"	e	enum:__anon88
GIT_DIFF_BREAK_REWRITES	include/git2/diff.h	/^	GIT_DIFF_BREAK_REWRITES = (1u << 5),$/;"	e	enum:__anon94
GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY	include/git2/diff.h	/^	GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY  = (1u << 15),$/;"	e	enum:__anon94
GIT_DIFF_DISABLE_PATHSPEC_MATCH	include/git2/diff.h	/^	GIT_DIFF_DISABLE_PATHSPEC_MATCH = (1u << 12),$/;"	e	enum:__anon82
GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS	include/git2/diff.h	/^	GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS = (1u << 14),$/;"	e	enum:__anon82
GIT_DIFF_FILE_CONTENT_SRC__BLOB	src/diff_file.h	41;"	d
GIT_DIFF_FILE_CONTENT_SRC__BUF	src/diff_file.h	42;"	d
GIT_DIFF_FIND_ALL	include/git2/diff.h	/^	GIT_DIFF_FIND_ALL = (0x0ff),$/;"	e	enum:__anon94
GIT_DIFF_FIND_AND_BREAK_REWRITES	include/git2/diff.h	/^	GIT_DIFF_FIND_AND_BREAK_REWRITES =$/;"	e	enum:__anon94
GIT_DIFF_FIND_BY_CONFIG	include/git2/diff.h	/^	GIT_DIFF_FIND_BY_CONFIG = 0,$/;"	e	enum:__anon94
GIT_DIFF_FIND_COPIES	include/git2/diff.h	/^	GIT_DIFF_FIND_COPIES = (1u << 2),$/;"	e	enum:__anon94
GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED = (1u << 3),$/;"	e	enum:__anon94
GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE = (1u << 13),$/;"	e	enum:__anon94
GIT_DIFF_FIND_EXACT_MATCH_ONLY	include/git2/diff.h	/^	GIT_DIFF_FIND_EXACT_MATCH_ONLY = (1u << 14),$/;"	e	enum:__anon94
GIT_DIFF_FIND_FOR_UNTRACKED	include/git2/diff.h	/^	GIT_DIFF_FIND_FOR_UNTRACKED = (1u << 6),$/;"	e	enum:__anon94
GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE = 0,$/;"	e	enum:__anon94
GIT_DIFF_FIND_IGNORE_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_FIND_IGNORE_WHITESPACE = (1u << 12),$/;"	e	enum:__anon94
GIT_DIFF_FIND_OPTIONS_INIT	include/git2/diff.h	726;"	d
GIT_DIFF_FIND_OPTIONS_VERSION	include/git2/diff.h	725;"	d
GIT_DIFF_FIND_REMOVE_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_FIND_REMOVE_UNMODIFIED = (1u << 16),$/;"	e	enum:__anon94
GIT_DIFF_FIND_RENAMES	include/git2/diff.h	/^	GIT_DIFF_FIND_RENAMES = (1u << 0),$/;"	e	enum:__anon94
GIT_DIFF_FIND_RENAMES_FROM_REWRITES	include/git2/diff.h	/^	GIT_DIFF_FIND_RENAMES_FROM_REWRITES = (1u << 1),$/;"	e	enum:__anon94
GIT_DIFF_FIND_REWRITES	include/git2/diff.h	/^	GIT_DIFF_FIND_REWRITES = (1u << 4),$/;"	e	enum:__anon94
GIT_DIFF_FLAG_BINARY	include/git2/diff.h	/^	GIT_DIFF_FLAG_BINARY     = (1u << 0), \/**< file(s) treated as binary data *\/$/;"	e	enum:__anon83
GIT_DIFF_FLAG_EXISTS	include/git2/diff.h	/^	GIT_DIFF_FLAG_EXISTS     = (1u << 3), \/**< file exists at this side of the delta *\/$/;"	e	enum:__anon83
GIT_DIFF_FLAG_NOT_BINARY	include/git2/diff.h	/^	GIT_DIFF_FLAG_NOT_BINARY = (1u << 1), \/**< file(s) treated as text data *\/$/;"	e	enum:__anon83
GIT_DIFF_FLAG_VALID_ID	include/git2/diff.h	/^	GIT_DIFF_FLAG_VALID_ID   = (1u << 2), \/**< `id` value is known correct *\/$/;"	e	enum:__anon83
GIT_DIFF_FLAG__CLEAR_INTERNAL	src/diff_generate.h	36;"	d
GIT_DIFF_FLAG__FREE_BLOB	src/diff_generate.h	/^	GIT_DIFF_FLAG__FREE_BLOB  = (1 << 11), \/* release the blob when done *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__FREE_DATA	src/diff_generate.h	/^	GIT_DIFF_FLAG__FREE_DATA  = (1 << 8),  \/* internal file data is allocated *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__FREE_PATH	src/diff_generate.h	/^	GIT_DIFF_FLAG__FREE_PATH  = (1 << 7),  \/* `path` is allocated memory *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__HAS_SELF_SIMILARITY	src/diff_generate.h	/^	GIT_DIFF_FLAG__HAS_SELF_SIMILARITY = (1 << 20),$/;"	e	enum:__anon242
GIT_DIFF_FLAG__IS_RENAME_SOURCE	src/diff_generate.h	/^	GIT_DIFF_FLAG__IS_RENAME_SOURCE = (1 << 19),$/;"	e	enum:__anon242
GIT_DIFF_FLAG__IS_RENAME_TARGET	src/diff_generate.h	/^	GIT_DIFF_FLAG__IS_RENAME_TARGET = (1 << 18),$/;"	e	enum:__anon242
GIT_DIFF_FLAG__LOADED	src/diff_generate.h	/^	GIT_DIFF_FLAG__LOADED     = (1 << 12), \/* file data has been loaded *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__NO_DATA	src/diff_generate.h	/^	GIT_DIFF_FLAG__NO_DATA    = (1 << 10), \/* file data should not be loaded *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__TO_DELETE	src/diff_generate.h	/^	GIT_DIFF_FLAG__TO_DELETE  = (1 << 16), \/* delete entry during rename det. *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__TO_SPLIT	src/diff_generate.h	/^	GIT_DIFF_FLAG__TO_SPLIT   = (1 << 17), \/* split entry during rename det. *\/$/;"	e	enum:__anon242
GIT_DIFF_FLAG__UNMAP_DATA	src/diff_generate.h	/^	GIT_DIFF_FLAG__UNMAP_DATA = (1 << 9),  \/* internal file data is mmap'ed *\/$/;"	e	enum:__anon242
GIT_DIFF_FORCE_BINARY	include/git2/diff.h	/^	GIT_DIFF_FORCE_BINARY = (1u << 21),$/;"	e	enum:__anon82
GIT_DIFF_FORCE_TEXT	include/git2/diff.h	/^	GIT_DIFF_FORCE_TEXT = (1u << 20),$/;"	e	enum:__anon82
GIT_DIFF_FORMAT_EMAIL_EXCLUDE_SUBJECT_PATCH_MARKER	include/git2/diff.h	/^	GIT_DIFF_FORMAT_EMAIL_EXCLUDE_SUBJECT_PATCH_MARKER = (1 << 0),$/;"	e	enum:__anon99
GIT_DIFF_FORMAT_EMAIL_NONE	include/git2/diff.h	/^	GIT_DIFF_FORMAT_EMAIL_NONE = 0,$/;"	e	enum:__anon99
GIT_DIFF_FORMAT_EMAIL_OPTIONS_INIT	include/git2/diff.h	1352;"	d
GIT_DIFF_FORMAT_EMAIL_OPTIONS_VERSION	include/git2/diff.h	1351;"	d
GIT_DIFF_FORMAT_NAME_ONLY	include/git2/diff.h	/^	GIT_DIFF_FORMAT_NAME_ONLY    = 4u, \/**< like git diff --name-only *\/$/;"	e	enum:__anon97
GIT_DIFF_FORMAT_NAME_STATUS	include/git2/diff.h	/^	GIT_DIFF_FORMAT_NAME_STATUS  = 5u, \/**< like git diff --name-status *\/$/;"	e	enum:__anon97
GIT_DIFF_FORMAT_PATCH	include/git2/diff.h	/^	GIT_DIFF_FORMAT_PATCH        = 1u, \/**< full git diff *\/$/;"	e	enum:__anon97
GIT_DIFF_FORMAT_PATCH_HEADER	include/git2/diff.h	/^	GIT_DIFF_FORMAT_PATCH_HEADER = 2u, \/**< just the file headers of patch *\/$/;"	e	enum:__anon97
GIT_DIFF_FORMAT_RAW	include/git2/diff.h	/^	GIT_DIFF_FORMAT_RAW          = 3u, \/**< like git diff --raw *\/$/;"	e	enum:__anon97
GIT_DIFF_HUNK_HEADER_SIZE	include/git2/diff.h	457;"	d
GIT_DIFF_IGNORE_CASE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_CASE = (1u << 10),$/;"	e	enum:__anon82
GIT_DIFF_IGNORE_FILEMODE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_FILEMODE = (1u << 8),$/;"	e	enum:__anon82
GIT_DIFF_IGNORE_SUBMODULES	include/git2/diff.h	/^	GIT_DIFF_IGNORE_SUBMODULES = (1u << 9),$/;"	e	enum:__anon82
GIT_DIFF_IGNORE_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_WHITESPACE = (1u << 22),$/;"	e	enum:__anon82
GIT_DIFF_IGNORE_WHITESPACE_CHANGE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_WHITESPACE_CHANGE = (1u << 23),$/;"	e	enum:__anon82
GIT_DIFF_IGNORE_WHITESPACE_EOL	include/git2/diff.h	/^	GIT_DIFF_IGNORE_WHITESPACE_EOL = (1u << 24),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_CASECHANGE	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_CASECHANGE = (1u << 11),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_IGNORED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_IGNORED = (1u << 1),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_TYPECHANGE	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_TYPECHANGE = (1u << 6),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_TYPECHANGE_TREES	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_TYPECHANGE_TREES = (1u << 7),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_UNMODIFIED = (1u << 5),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_UNREADABLE	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_UNREADABLE = (1u << 16),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED = (1u << 17),$/;"	e	enum:__anon82
GIT_DIFF_INCLUDE_UNTRACKED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_UNTRACKED = (1u << 3),$/;"	e	enum:__anon82
GIT_DIFF_LINE_ADDITION	include/git2/diff.h	/^	GIT_DIFF_LINE_ADDITION  = '+',$/;"	e	enum:__anon92
GIT_DIFF_LINE_ADD_EOFNL	include/git2/diff.h	/^	GIT_DIFF_LINE_ADD_EOFNL = '>',     \/**< Old has no LF at end, new does *\/$/;"	e	enum:__anon92
GIT_DIFF_LINE_BINARY	include/git2/diff.h	/^	GIT_DIFF_LINE_BINARY    = 'B' \/**< For "Binary files x and y differ" *\/$/;"	e	enum:__anon92
GIT_DIFF_LINE_CONTEXT	include/git2/diff.h	/^	GIT_DIFF_LINE_CONTEXT   = ' ',$/;"	e	enum:__anon92
GIT_DIFF_LINE_CONTEXT_EOFNL	include/git2/diff.h	/^	GIT_DIFF_LINE_CONTEXT_EOFNL = '=', \/**< Both files have no LF at end *\/$/;"	e	enum:__anon92
GIT_DIFF_LINE_DELETION	include/git2/diff.h	/^	GIT_DIFF_LINE_DELETION  = '-',$/;"	e	enum:__anon92
GIT_DIFF_LINE_DEL_EOFNL	include/git2/diff.h	/^	GIT_DIFF_LINE_DEL_EOFNL = '<',     \/**< Old has LF at end, new does not *\/$/;"	e	enum:__anon92
GIT_DIFF_LINE_FILE_HDR	include/git2/diff.h	/^	GIT_DIFF_LINE_FILE_HDR  = 'F',$/;"	e	enum:__anon92
GIT_DIFF_LINE_HUNK_HDR	include/git2/diff.h	/^	GIT_DIFF_LINE_HUNK_HDR  = 'H',$/;"	e	enum:__anon92
GIT_DIFF_MINIMAL	include/git2/diff.h	/^	GIT_DIFF_MINIMAL = (1 << 29),$/;"	e	enum:__anon82
GIT_DIFF_NORMAL	include/git2/diff.h	/^	GIT_DIFF_NORMAL = 0,$/;"	e	enum:__anon82
GIT_DIFF_OPTIONS_INIT	include/git2/diff.h	430;"	d
GIT_DIFF_OPTIONS_VERSION	include/git2/diff.h	425;"	d
GIT_DIFF_PATIENCE	include/git2/diff.h	/^	GIT_DIFF_PATIENCE = (1u << 28),$/;"	e	enum:__anon82
GIT_DIFF_PERFDATA_INIT	include/git2/sys/diff.h	74;"	d
GIT_DIFF_PERFDATA_VERSION	include/git2/sys/diff.h	73;"	d
GIT_DIFF_RECURSE_IGNORED_DIRS	include/git2/diff.h	/^	GIT_DIFF_RECURSE_IGNORED_DIRS = (1u << 2),$/;"	e	enum:__anon82
GIT_DIFF_RECURSE_UNTRACKED_DIRS	include/git2/diff.h	/^	GIT_DIFF_RECURSE_UNTRACKED_DIRS = (1u << 4),$/;"	e	enum:__anon82
GIT_DIFF_REVERSE	include/git2/diff.h	/^	GIT_DIFF_REVERSE = (1u << 0),$/;"	e	enum:__anon82
GIT_DIFF_SHOW_BINARY	include/git2/diff.h	/^	GIT_DIFF_SHOW_BINARY = (1 << 30),$/;"	e	enum:__anon82
GIT_DIFF_SHOW_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_SHOW_UNMODIFIED = (1u << 26),$/;"	e	enum:__anon82
GIT_DIFF_SHOW_UNTRACKED_CONTENT	include/git2/diff.h	/^	GIT_DIFF_SHOW_UNTRACKED_CONTENT = (1u << 25),$/;"	e	enum:__anon82
GIT_DIFF_SKIP_BINARY_CHECK	include/git2/diff.h	/^	GIT_DIFF_SKIP_BINARY_CHECK = (1u << 13),$/;"	e	enum:__anon82
GIT_DIFF_STATS_FULL	include/git2/diff.h	/^	GIT_DIFF_STATS_FULL = (1u << 0),$/;"	e	enum:__anon98
GIT_DIFF_STATS_INCLUDE_SUMMARY	include/git2/diff.h	/^	GIT_DIFF_STATS_INCLUDE_SUMMARY = (1u << 3),$/;"	e	enum:__anon98
GIT_DIFF_STATS_NONE	include/git2/diff.h	/^	GIT_DIFF_STATS_NONE = 0,$/;"	e	enum:__anon98
GIT_DIFF_STATS_NUMBER	include/git2/diff.h	/^	GIT_DIFF_STATS_NUMBER = (1u << 2),$/;"	e	enum:__anon98
GIT_DIFF_STATS_SHORT	include/git2/diff.h	/^	GIT_DIFF_STATS_SHORT = (1u << 1),$/;"	e	enum:__anon98
GIT_DIFF_TYPE_GENERATED	src/diff.h	/^	GIT_DIFF_TYPE_GENERATED = 1,$/;"	e	enum:__anon262
GIT_DIFF_TYPE_PARSED	src/diff.h	/^	GIT_DIFF_TYPE_PARSED = 2,$/;"	e	enum:__anon262
GIT_DIFF_TYPE_UNKNOWN	src/diff.h	/^	GIT_DIFF_TYPE_UNKNOWN = 0,$/;"	e	enum:__anon262
GIT_DIFF_UPDATE_INDEX	include/git2/diff.h	/^	GIT_DIFF_UPDATE_INDEX = (1u << 15),$/;"	e	enum:__anon82
GIT_DIFF__VERBOSE	src/diff_generate.h	38;"	d
GIT_DIR	src/repository.h	27;"	d
GIT_DIRECTION_FETCH	include/git2/net.h	/^	GIT_DIRECTION_FETCH = 0,$/;"	e	enum:__anon51
GIT_DIRECTION_PUSH	include/git2/net.h	/^	GIT_DIRECTION_PUSH  = 1$/;"	e	enum:__anon51
GIT_DIR_FLAG_FALSE	src/attr_file.h	/^typedef enum { GIT_DIR_FLAG_TRUE = 1, GIT_DIR_FLAG_FALSE = 0, GIT_DIR_FLAG_UNKNOWN = -1 } git_dir_flag;$/;"	e	enum:__anon174
GIT_DIR_FLAG_TRUE	src/attr_file.h	/^typedef enum { GIT_DIR_FLAG_TRUE = 1, GIT_DIR_FLAG_FALSE = 0, GIT_DIR_FLAG_UNKNOWN = -1 } git_dir_flag;$/;"	e	enum:__anon174
GIT_DIR_FLAG_UNKNOWN	src/attr_file.h	/^typedef enum { GIT_DIR_FLAG_TRUE = 1, GIT_DIR_FLAG_FALSE = 0, GIT_DIR_FLAG_UNKNOWN = -1 } git_dir_flag;$/;"	e	enum:__anon174
GIT_DIR_MODE	src/repository.h	28;"	d
GIT_DIR_SHORTNAME	src/repository.h	32;"	d
GIT_EAMBIGUOUS	include/git2/errors.h	/^	GIT_EAMBIGUOUS = -5,		\/**< More than one object matches *\/$/;"	e	enum:__anon42
GIT_EAPPLIED	include/git2/errors.h	/^	GIT_EAPPLIED        = -18,	\/**< Patch\/merge has already been applied *\/$/;"	e	enum:__anon42
GIT_EAUTH	include/git2/errors.h	/^	GIT_EAUTH           = -16,      \/**< Authentication error *\/$/;"	e	enum:__anon42
GIT_EBAREREPO	include/git2/errors.h	/^	GIT_EBAREREPO       =  -8,	\/**< Operation not allowed on bare repository *\/$/;"	e	enum:__anon42
GIT_EBUFS	include/git2/errors.h	/^	GIT_EBUFS      = -6,		\/**< Output buffer too short to hold data *\/$/;"	e	enum:__anon42
GIT_ECERTIFICATE	include/git2/errors.h	/^	GIT_ECERTIFICATE    = -17,      \/**< Server certificate is invalid *\/$/;"	e	enum:__anon42
GIT_ECONFLICT	include/git2/errors.h	/^	GIT_ECONFLICT       = -13,	\/**< Checkout conflicts prevented operation *\/$/;"	e	enum:__anon42
GIT_EDIRECTORY	include/git2/errors.h	/^	GIT_EDIRECTORY      = -23,      \/**< The operation is not valid for a directory *\/$/;"	e	enum:__anon42
GIT_EEOF	include/git2/errors.h	/^	GIT_EEOF            = -20,      \/**< Unexpected EOF *\/$/;"	e	enum:__anon42
GIT_EEXISTS	include/git2/errors.h	/^	GIT_EEXISTS    = -4,		\/**< Object exists preventing operation *\/$/;"	e	enum:__anon42
GIT_EINVALID	include/git2/errors.h	/^	GIT_EINVALID        = -21,      \/**< Invalid operation or input *\/$/;"	e	enum:__anon42
GIT_EINVALIDSPEC	include/git2/errors.h	/^	GIT_EINVALIDSPEC    = -12,	\/**< Name\/ref spec was not in a valid format *\/$/;"	e	enum:__anon42
GIT_ELOCKED	include/git2/errors.h	/^	GIT_ELOCKED         = -14,	\/**< Lock file prevented operation *\/$/;"	e	enum:__anon42
GIT_EMERGECONFLICT	include/git2/errors.h	/^	GIT_EMERGECONFLICT  = -24,	\/**< A merge conflict exists and cannot continue *\/$/;"	e	enum:__anon42
GIT_EMODIFIED	include/git2/errors.h	/^	GIT_EMODIFIED       = -15,	\/**< Reference value does not match expected *\/$/;"	e	enum:__anon42
GIT_END_DECL	include/git2/common.h	15;"	d
GIT_END_DECL	include/git2/common.h	20;"	d
GIT_ENONFASTFORWARD	include/git2/errors.h	/^	GIT_ENONFASTFORWARD = -11,	\/**< Reference was not fast-forwardable *\/$/;"	e	enum:__anon42
GIT_ENOTFOUND	include/git2/errors.h	/^	GIT_ENOTFOUND  = -3,		\/**< Requested object could not be found *\/$/;"	e	enum:__anon42
GIT_EOL_CRLF	src/repository.h	/^	GIT_EOL_CRLF = 1,$/;"	e	enum:__anon317
GIT_EOL_DEFAULT	src/repository.h	/^	GIT_EOL_DEFAULT = GIT_EOL_NATIVE,$/;"	e	enum:__anon317
GIT_EOL_LF	src/repository.h	/^	GIT_EOL_LF = 2,$/;"	e	enum:__anon317
GIT_EOL_NATIVE	src/repository.h	/^	GIT_EOL_NATIVE = GIT_EOL_CRLF,$/;"	e	enum:__anon317
GIT_EOL_UNSET	src/repository.h	/^	GIT_EOL_UNSET = 0,$/;"	e	enum:__anon317
GIT_EPEEL	include/git2/errors.h	/^	GIT_EPEEL           = -19,      \/**< The requested peel operation is not possible *\/$/;"	e	enum:__anon42
GIT_ERROR	include/git2/errors.h	/^	GIT_ERROR      = -1,		\/**< Generic error *\/$/;"	e	enum:__anon42
GIT_EUNBORNBRANCH	include/git2/errors.h	/^	GIT_EUNBORNBRANCH   =  -9,	\/**< HEAD refers to branch with no commits *\/$/;"	e	enum:__anon42
GIT_EUNCOMMITTED	include/git2/errors.h	/^	GIT_EUNCOMMITTED    = -22,	\/**< Uncommitted changes in index prevented operation *\/$/;"	e	enum:__anon42
GIT_EUNMERGED	include/git2/errors.h	/^	GIT_EUNMERGED       = -10,	\/**< Merge in progress prevented operation *\/$/;"	e	enum:__anon42
GIT_EUSER	include/git2/errors.h	/^	GIT_EUSER      = -7,$/;"	e	enum:__anon42
GIT_EXTERN	include/git2/common.h	42;"	d
GIT_EXTERN	include/git2/common.h	46;"	d
GIT_EXTERN	include/git2/common.h	48;"	d
GIT_FEATURE_HTTPS	include/git2/common.h	/^	GIT_FEATURE_HTTPS	= (1 << 1),$/;"	e	enum:__anon70
GIT_FEATURE_NSEC	include/git2/common.h	/^	GIT_FEATURE_NSEC	= (1 << 3),$/;"	e	enum:__anon70
GIT_FEATURE_SSH	include/git2/common.h	/^	GIT_FEATURE_SSH		= (1 << 2),$/;"	e	enum:__anon70
GIT_FEATURE_THREADS	include/git2/common.h	/^	GIT_FEATURE_THREADS	= (1 << 0),$/;"	e	enum:__anon70
GIT_FETCH_HEAD_FILE	src/refs.h	35;"	d
GIT_FETCH_NO_PRUNE	include/git2/remote.h	/^	GIT_FETCH_NO_PRUNE,$/;"	e	enum:__anon53
GIT_FETCH_OPTIONS_INIT	include/git2/remote.h	565;"	d
GIT_FETCH_OPTIONS_VERSION	include/git2/remote.h	564;"	d
GIT_FETCH_PRUNE	include/git2/remote.h	/^	GIT_FETCH_PRUNE,$/;"	e	enum:__anon53
GIT_FETCH_PRUNE_UNSPECIFIED	include/git2/remote.h	/^	GIT_FETCH_PRUNE_UNSPECIFIED,$/;"	e	enum:__anon53
GIT_FILEBUF_APPEND	src/filebuf.h	19;"	d
GIT_FILEBUF_DEFLATE_SHIFT	src/filebuf.h	23;"	d
GIT_FILEBUF_DO_NOT_BUFFER	src/filebuf.h	22;"	d
GIT_FILEBUF_FORCE	src/filebuf.h	20;"	d
GIT_FILEBUF_HASH_CONTENTS	src/filebuf.h	18;"	d
GIT_FILEBUF_INIT	src/filebuf.h	53;"	d
GIT_FILEBUF_TEMPORARY	src/filebuf.h	21;"	d
GIT_FILEBUF_THREADS	src/filebuf.h	15;"	d
GIT_FILELOCK_EXTENSION	src/filebuf.h	25;"	d
GIT_FILELOCK_EXTLENGTH	src/filebuf.h	26;"	d
GIT_FILEMODE_BLOB	include/git2/types.h	/^	GIT_FILEMODE_BLOB                = 0100644,$/;"	e	enum:__anon146
GIT_FILEMODE_BLOB_EXECUTABLE	include/git2/types.h	/^	GIT_FILEMODE_BLOB_EXECUTABLE     = 0100755,$/;"	e	enum:__anon146
GIT_FILEMODE_BLOB_GROUP_WRITABLE	src/tree.h	64;"	d
GIT_FILEMODE_COMMIT	include/git2/types.h	/^	GIT_FILEMODE_COMMIT              = 0160000,$/;"	e	enum:__anon146
GIT_FILEMODE_DEFAULT	src/repository.h	/^	GIT_FILEMODE_DEFAULT = GIT_CVAR_TRUE,$/;"	e	enum:__anon317
GIT_FILEMODE_LINK	include/git2/types.h	/^	GIT_FILEMODE_LINK                = 0120000,$/;"	e	enum:__anon146
GIT_FILEMODE_TREE	include/git2/types.h	/^	GIT_FILEMODE_TREE                = 0040000,$/;"	e	enum:__anon146
GIT_FILEMODE_UNREADABLE	include/git2/types.h	/^	GIT_FILEMODE_UNREADABLE          = 0000000,$/;"	e	enum:__anon146
GIT_FILE_CONTENT_PREFIX	src/repository.c	37;"	d	file:
GIT_FILTER_ALLOW_UNSAFE	include/git2/filter.h	/^	GIT_FILTER_ALLOW_UNSAFE = (1u << 0),$/;"	e	enum:__anon76
GIT_FILTER_BYTES_TO_CHECK_NUL	src/filter.h	15;"	d
GIT_FILTER_CLEAN	include/git2/filter.h	/^	GIT_FILTER_CLEAN = GIT_FILTER_TO_ODB,$/;"	e	enum:__anon75
GIT_FILTER_CRLF	include/git2/sys/filter.h	29;"	d
GIT_FILTER_CRLF_PRIORITY	include/git2/sys/filter.h	35;"	d
GIT_FILTER_DEFAULT	include/git2/filter.h	/^	GIT_FILTER_DEFAULT = 0u,$/;"	e	enum:__anon76
GIT_FILTER_DRIVER_PRIORITY	include/git2/sys/filter.h	47;"	d
GIT_FILTER_IDENT	include/git2/sys/filter.h	30;"	d
GIT_FILTER_IDENT_PRIORITY	include/git2/sys/filter.h	40;"	d
GIT_FILTER_OPTIONS_INIT	src/filter.h	33;"	d
GIT_FILTER_SMUDGE	include/git2/filter.h	/^	GIT_FILTER_SMUDGE = GIT_FILTER_TO_WORKTREE,$/;"	e	enum:__anon75
GIT_FILTER_TO_ODB	include/git2/filter.h	/^	GIT_FILTER_TO_ODB = 1,$/;"	e	enum:__anon75
GIT_FILTER_TO_WORKTREE	include/git2/filter.h	/^	GIT_FILTER_TO_WORKTREE = 0,$/;"	e	enum:__anon75
GIT_FILTER_VERSION	include/git2/sys/filter.h	273;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	17;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	20;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	22;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	28;"	d
GIT_FORMAT_PRINTF	include/git2/common.h	53;"	d
GIT_FORMAT_PRINTF	include/git2/common.h	55;"	d
GIT_GLOBAL	src/global.h	36;"	d
GIT_HASHSIG_ALLOW_SMALL_FILES	include/git2/sys/hashsig.h	/^	GIT_HASHSIG_ALLOW_SMALL_FILES = (1 << 2)$/;"	e	enum:__anon57
GIT_HASHSIG_IGNORE_WHITESPACE	include/git2/sys/hashsig.h	/^	GIT_HASHSIG_IGNORE_WHITESPACE = (1 << 0),$/;"	e	enum:__anon57
GIT_HASHSIG_NORMAL	include/git2/sys/hashsig.h	/^	GIT_HASHSIG_NORMAL = 0,$/;"	e	enum:__anon57
GIT_HASHSIG_SMART_WHITESPACE	include/git2/sys/hashsig.h	/^	GIT_HASHSIG_SMART_WHITESPACE = (1 << 1),$/;"	e	enum:__anon57
GIT_HASH_CNG_DLL_NAME	src/hash/hash_win32.h	38;"	d
GIT_HASH_CNG_HASH_OBJECT_LEN	src/hash/hash_win32.h	44;"	d
GIT_HASH_CNG_HASH_REUSABLE	src/hash/hash_win32.h	47;"	d
GIT_HASH_CNG_HASH_TYPE	src/hash/hash_win32.h	41;"	d
GIT_HEAD_FILE	src/refs.h	33;"	d
GIT_HOOKS_DIR	src/repo_template.h	13;"	d
GIT_HOOKS_DIR_MODE	src/repo_template.h	14;"	d
GIT_HOOKS_README_CONTENT	src/repo_template.h	18;"	d
GIT_HOOKS_README_FILE	src/repo_template.h	16;"	d
GIT_HOOKS_README_MODE	src/repo_template.h	17;"	d
GIT_IDXENTRY_ADDED	include/git2/index.h	/^	GIT_IDXENTRY_ADDED             =  (1 << 3),$/;"	e	enum:__anon103
GIT_IDXENTRY_CONFLICTED	include/git2/index.h	/^	GIT_IDXENTRY_CONFLICTED        =  (1 << 7),$/;"	e	enum:__anon103
GIT_IDXENTRY_EXTENDED	include/git2/index.h	/^	GIT_IDXENTRY_EXTENDED  = (0x4000),$/;"	e	enum:__anon102
GIT_IDXENTRY_EXTENDED2	include/git2/index.h	/^	GIT_IDXENTRY_EXTENDED2      =  (1 << 15),$/;"	e	enum:__anon103
GIT_IDXENTRY_EXTENDED_FLAGS	include/git2/index.h	/^	GIT_IDXENTRY_EXTENDED_FLAGS = (GIT_IDXENTRY_INTENT_TO_ADD | GIT_IDXENTRY_SKIP_WORKTREE),$/;"	e	enum:__anon103
GIT_IDXENTRY_HASHED	include/git2/index.h	/^	GIT_IDXENTRY_HASHED            =  (1 << 4),$/;"	e	enum:__anon103
GIT_IDXENTRY_INTENT_TO_ADD	include/git2/index.h	/^	GIT_IDXENTRY_INTENT_TO_ADD  =  (1 << 13),$/;"	e	enum:__anon103
GIT_IDXENTRY_NAMEMASK	include/git2/index.h	79;"	d
GIT_IDXENTRY_NEW_SKIP_WORKTREE	include/git2/index.h	/^	GIT_IDXENTRY_NEW_SKIP_WORKTREE =  (1 << 9),$/;"	e	enum:__anon103
GIT_IDXENTRY_REMOVE	include/git2/index.h	/^	GIT_IDXENTRY_REMOVE            =  (1 << 1),$/;"	e	enum:__anon103
GIT_IDXENTRY_SKIP_WORKTREE	include/git2/index.h	/^	GIT_IDXENTRY_SKIP_WORKTREE  =  (1 << 14),$/;"	e	enum:__anon103
GIT_IDXENTRY_STAGE	include/git2/index.h	91;"	d
GIT_IDXENTRY_STAGEMASK	include/git2/index.h	80;"	d
GIT_IDXENTRY_STAGESHIFT	include/git2/index.h	81;"	d
GIT_IDXENTRY_STAGE_SET	include/git2/index.h	94;"	d
GIT_IDXENTRY_UNHASHED	include/git2/index.h	/^	GIT_IDXENTRY_UNHASHED          =  (1 << 5),$/;"	e	enum:__anon103
GIT_IDXENTRY_UNPACKED	include/git2/index.h	/^	GIT_IDXENTRY_UNPACKED          =  (1 << 8),$/;"	e	enum:__anon103
GIT_IDXENTRY_UPDATE	include/git2/index.h	/^	GIT_IDXENTRY_UPDATE            =  (1 << 0),$/;"	e	enum:__anon103
GIT_IDXENTRY_UPTODATE	include/git2/index.h	/^	GIT_IDXENTRY_UPTODATE          =  (1 << 2),$/;"	e	enum:__anon103
GIT_IDXENTRY_VALID	include/git2/index.h	/^	GIT_IDXENTRY_VALID     = (0x8000),$/;"	e	enum:__anon102
GIT_IDXENTRY_WT_REMOVE	include/git2/index.h	/^	GIT_IDXENTRY_WT_REMOVE         =  (1 << 6), \/**< remove in work directory *\/$/;"	e	enum:__anon103
GIT_IGNORECASE_DEFAULT	src/repository.h	/^	GIT_IGNORECASE_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon317
GIT_IGNORESTAT_DEFAULT	src/repository.h	/^	GIT_IGNORESTAT_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon317
GIT_IGNORE_CONFIG	src/attrcache.h	14;"	d
GIT_IGNORE_DEFAULT_RULES	src/ignore.c	11;"	d	file:
GIT_IGNORE_FALSE	src/ignore.h	/^	GIT_IGNORE_FALSE = 0,$/;"	e	enum:__anon332
GIT_IGNORE_FILE	src/ignore.h	14;"	d
GIT_IGNORE_FILE_INREPO	src/ignore.h	15;"	d
GIT_IGNORE_FILE_XDG	src/ignore.h	16;"	d
GIT_IGNORE_INTERNAL	src/ignore.c	9;"	d	file:
GIT_IGNORE_NOTFOUND	src/ignore.h	/^	GIT_IGNORE_NOTFOUND = -1,$/;"	e	enum:__anon332
GIT_IGNORE_TRUE	src/ignore.h	/^	GIT_IGNORE_TRUE = 1,$/;"	e	enum:__anon332
GIT_IGNORE_UNCHECKED	src/ignore.h	/^	GIT_IGNORE_UNCHECKED = -2,$/;"	e	enum:__anon332
GIT_INDEXCAP_FROM_OWNER	include/git2/index.h	/^	GIT_INDEXCAP_FROM_OWNER  = -1,$/;"	e	enum:__anon104
GIT_INDEXCAP_IGNORE_CASE	include/git2/index.h	/^	GIT_INDEXCAP_IGNORE_CASE = 1,$/;"	e	enum:__anon104
GIT_INDEXCAP_NO_FILEMODE	include/git2/index.h	/^	GIT_INDEXCAP_NO_FILEMODE = 2,$/;"	e	enum:__anon104
GIT_INDEXCAP_NO_SYMLINKS	include/git2/index.h	/^	GIT_INDEXCAP_NO_SYMLINKS = 4,$/;"	e	enum:__anon104
GIT_INDEXWRITER_INIT	src/index.h	150;"	d
GIT_INDEX_ADD_CHECK_PATHSPEC	include/git2/index.h	/^	GIT_INDEX_ADD_CHECK_PATHSPEC = (1u << 2),$/;"	e	enum:__anon105
GIT_INDEX_ADD_DEFAULT	include/git2/index.h	/^	GIT_INDEX_ADD_DEFAULT = 0,$/;"	e	enum:__anon105
GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH	include/git2/index.h	/^	GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH = (1u << 1),$/;"	e	enum:__anon105
GIT_INDEX_ADD_FORCE	include/git2/index.h	/^	GIT_INDEX_ADD_FORCE = (1u << 0),$/;"	e	enum:__anon105
GIT_INDEX_FILE	src/index.h	18;"	d
GIT_INDEX_FILE_MODE	src/index.h	19;"	d
GIT_INDEX_STAGE_ANCESTOR	include/git2/index.h	/^	GIT_INDEX_STAGE_ANCESTOR = 1,$/;"	e	enum:__anon106
GIT_INDEX_STAGE_ANY	include/git2/index.h	/^	GIT_INDEX_STAGE_ANY = -1,$/;"	e	enum:__anon106
GIT_INDEX_STAGE_NORMAL	include/git2/index.h	/^	GIT_INDEX_STAGE_NORMAL = 0,$/;"	e	enum:__anon106
GIT_INDEX_STAGE_OURS	include/git2/index.h	/^	GIT_INDEX_STAGE_OURS = 2,$/;"	e	enum:__anon106
GIT_INDEX_STAGE_THEIRS	include/git2/index.h	/^	GIT_INDEX_STAGE_THEIRS = 3,$/;"	e	enum:__anon106
GIT_INFO_DIR	src/repo_template.h	25;"	d
GIT_INFO_DIR_MODE	src/repo_template.h	26;"	d
GIT_INFO_EXCLUDE_CONTENT	src/repo_template.h	30;"	d
GIT_INFO_EXCLUDE_FILE	src/repo_template.h	28;"	d
GIT_INFO_EXCLUDE_MODE	src/repo_template.h	29;"	d
GIT_INIT_STRUCTURE	src/common.h	204;"	d
GIT_INIT_STRUCTURE_FROM_TEMPLATE	src/common.h	206;"	d
GIT_INLINE	src/checkout.c	/^GIT_INLINE(bool) conflict_pathspec_match($/;"	f
GIT_INLINE	src/checkout.c	/^GIT_INLINE(bool) is_workdir_base_or_new($/;"	f
GIT_INLINE	src/common.h	15;"	d
GIT_INLINE	src/common.h	17;"	d
GIT_INLINE	src/config_file.c	/^GIT_INLINE(bool) is_namechar(char c)$/;"	f
GIT_INLINE	src/diff_tform.c	/^GIT_INLINE(bool) delta_is_new_only(git_diff_delta *delta)$/;"	f
GIT_INLINE	src/diff_tform.c	/^GIT_INLINE(bool) delta_is_split(git_diff_delta *delta)$/;"	f
GIT_INLINE	src/indexer.c	/^GIT_INLINE(bool) has_entry(git_indexer *idx, git_oid *id)$/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) filesystem_iterator_current_is_ignored($/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) filesystem_iterator_examine_path($/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) filesystem_iterator_is_dot_git($/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) iterator_has_ended(git_iterator *iter, const char *path)$/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) iterator_has_started($/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(git_dir_flag) entry_dir_flag(git_index_entry *entry)$/;"	f
GIT_INLINE	src/merge.c	/^GIT_INLINE(bool) merge_diff_any_side_added_or_modified($/;"	f
GIT_INLINE	src/merge.c	/^GIT_INLINE(bool) path_is_prefixed(const char *parent, const char *child)$/;"	f
GIT_INLINE	src/patch_generate.c	/^GIT_INLINE(bool) should_skip_binary(git_patch_generated *patch, git_diff_file *file)$/;"	f
GIT_INLINE	src/patch_parse.c	/^GIT_INLINE(bool) parse_ctx_contains($/;"	f
GIT_INLINE	src/path.c	/^GIT_INLINE(bool) verify_char(unsigned char c, unsigned int flags)$/;"	f
GIT_INLINE	src/path.c	/^GIT_INLINE(bool) verify_dospath($/;"	f
GIT_INLINE	src/path.c	/^GIT_INLINE(bool) verify_dotgit_ntfs(git_repository *repo, const char *path, size_t len)$/;"	f
GIT_INLINE	src/pathspec.c	/^GIT_INLINE(size_t) pathspec_mark_pattern(git_bitvec *used, size_t pos)$/;"	f
GIT_INLINE	src/tree.c	/^GIT_INLINE(git_filemode_t) normalize_filemode(git_filemode_t filemode)$/;"	f
GIT_INLINE	src/tree.c	/^GIT_INLINE(size_t) count_slashes(const char *path)$/;"	f
GIT_INLINE	src/vector.c	/^GIT_INLINE(size_t) compute_new_size(git_vector *v)$/;"	f
GIT_ISBLOCKED	src/posix.h	74;"	d
GIT_ISBLOCKED	src/posix.h	76;"	d
GIT_ITERATOR_DONT_AUTOEXPAND	src/iterator.h	/^	GIT_ITERATOR_DONT_AUTOEXPAND  = (1u << 3),$/;"	e	enum:__anon253
GIT_ITERATOR_DONT_IGNORE_CASE	src/iterator.h	/^	GIT_ITERATOR_DONT_IGNORE_CASE = (1u << 1),$/;"	e	enum:__anon253
GIT_ITERATOR_DONT_PRECOMPOSE_UNICODE	src/iterator.h	/^	GIT_ITERATOR_DONT_PRECOMPOSE_UNICODE = (1u << 5),$/;"	e	enum:__anon253
GIT_ITERATOR_FIRST_ACCESS	src/iterator.c	12;"	d	file:
GIT_ITERATOR_HONOR_IGNORES	src/iterator.c	13;"	d	file:
GIT_ITERATOR_IGNORE_CASE	src/iterator.h	/^	GIT_ITERATOR_IGNORE_CASE = (1u << 0),$/;"	e	enum:__anon253
GIT_ITERATOR_IGNORE_DOT_GIT	src/iterator.c	14;"	d	file:
GIT_ITERATOR_INCLUDE_CONFLICTS	src/iterator.h	/^	GIT_ITERATOR_INCLUDE_CONFLICTS = (1u << 6),$/;"	e	enum:__anon253
GIT_ITERATOR_INCLUDE_TREES	src/iterator.h	/^	GIT_ITERATOR_INCLUDE_TREES    = (1u << 2),$/;"	e	enum:__anon253
GIT_ITERATOR_OPTIONS_INIT	src/iterator.h	63;"	d
GIT_ITERATOR_PRECOMPOSE_UNICODE	src/iterator.h	/^	GIT_ITERATOR_PRECOMPOSE_UNICODE = (1u << 4),$/;"	e	enum:__anon253
GIT_ITERATOR_STATUS_EMPTY	src/iterator.h	/^	GIT_ITERATOR_STATUS_EMPTY = 2,$/;"	e	enum:__anon254
GIT_ITERATOR_STATUS_FILTERED	src/iterator.h	/^	GIT_ITERATOR_STATUS_FILTERED = 3$/;"	e	enum:__anon254
GIT_ITERATOR_STATUS_IGNORED	src/iterator.h	/^	GIT_ITERATOR_STATUS_IGNORED = 1,$/;"	e	enum:__anon254
GIT_ITERATOR_STATUS_NORMAL	src/iterator.h	/^	GIT_ITERATOR_STATUS_NORMAL = 0,$/;"	e	enum:__anon254
GIT_ITERATOR_TYPE_EMPTY	src/iterator.h	/^	GIT_ITERATOR_TYPE_EMPTY = 0,$/;"	e	enum:__anon252
GIT_ITERATOR_TYPE_FS	src/iterator.h	/^	GIT_ITERATOR_TYPE_FS = 4,$/;"	e	enum:__anon252
GIT_ITERATOR_TYPE_INDEX	src/iterator.h	/^	GIT_ITERATOR_TYPE_INDEX = 2,$/;"	e	enum:__anon252
GIT_ITERATOR_TYPE_TREE	src/iterator.h	/^	GIT_ITERATOR_TYPE_TREE = 1,$/;"	e	enum:__anon252
GIT_ITERATOR_TYPE_WORKDIR	src/iterator.h	/^	GIT_ITERATOR_TYPE_WORKDIR = 3,$/;"	e	enum:__anon252
GIT_ITEROVER	include/git2/errors.h	/^	GIT_ITEROVER        = -31,	\/**< Signals end of iteration with iterator *\/$/;"	e	enum:__anon42
GIT_LOGALLREFUPDATES_DEFAULT	src/repository.h	/^	GIT_LOGALLREFUPDATES_DEFAULT = GIT_LOGALLREFUPDATES_UNSET,$/;"	e	enum:__anon317
GIT_LOGALLREFUPDATES_UNSET	src/repository.h	/^	GIT_LOGALLREFUPDATES_UNSET = 2,$/;"	e	enum:__anon317
GIT_LOOSE_PRIORITY	src/odb.c	29;"	d	file:
GIT_MAP_FILE	src/map.h	20;"	d
GIT_MAP_FIXED	src/map.h	24;"	d
GIT_MAP_PRIVATE	src/map.h	22;"	d
GIT_MAP_SHARED	src/map.h	21;"	d
GIT_MAP_TYPE	src/map.h	23;"	d
GIT_MEMORY_BARRIER	src/thread-utils.h	233;"	d
GIT_MEMORY_BARRIER	src/thread-utils.h	235;"	d
GIT_MEMORY_BARRIER	src/thread-utils.h	237;"	d
GIT_MERGE_ANALYSIS_FASTFORWARD	include/git2/merge.h	/^	GIT_MERGE_ANALYSIS_FASTFORWARD = (1 << 2),$/;"	e	enum:__anon133
GIT_MERGE_ANALYSIS_NONE	include/git2/merge.h	/^	GIT_MERGE_ANALYSIS_NONE = 0,$/;"	e	enum:__anon133
GIT_MERGE_ANALYSIS_NORMAL	include/git2/merge.h	/^	GIT_MERGE_ANALYSIS_NORMAL = (1 << 0),$/;"	e	enum:__anon133
GIT_MERGE_ANALYSIS_UNBORN	include/git2/merge.h	/^	GIT_MERGE_ANALYSIS_UNBORN = (1 << 3),$/;"	e	enum:__anon133
GIT_MERGE_ANALYSIS_UP_TO_DATE	include/git2/merge.h	/^	GIT_MERGE_ANALYSIS_UP_TO_DATE = (1 << 1),$/;"	e	enum:__anon133
GIT_MERGE_DEFAULT_RENAME_THRESHOLD	src/merge.h	23;"	d
GIT_MERGE_DEFAULT_TARGET_LIMIT	src/merge.h	24;"	d
GIT_MERGE_DIFF_BOTH_ADDED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_ADDED = (1 << 1),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_BOTH_DELETED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_DELETED = (1 << 2),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_BOTH_MODIFIED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_MODIFIED = (1 << 0),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_BOTH_RENAMED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_RENAMED = (1 << 7),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_BOTH_RENAMED_1_TO_2	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_RENAMED_1_TO_2 = (1 << 8),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_BOTH_RENAMED_2_TO_1	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_RENAMED_2_TO_1 = (1 << 9),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_DF_CHILD	src/merge.h	/^	GIT_MERGE_DIFF_DF_CHILD = (1 << 11),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_DIRECTORY_FILE	src/merge.h	/^	GIT_MERGE_DIFF_DIRECTORY_FILE = (1 << 10),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_MODIFIED_DELETED	src/merge.h	/^	GIT_MERGE_DIFF_MODIFIED_DELETED = (1 << 3),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_NONE	src/merge.h	/^	GIT_MERGE_DIFF_NONE = 0,$/;"	e	enum:__anon323
GIT_MERGE_DIFF_RENAMED_ADDED	src/merge.h	/^	GIT_MERGE_DIFF_RENAMED_ADDED = (1 << 6),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_RENAMED_DELETED	src/merge.h	/^	GIT_MERGE_DIFF_RENAMED_DELETED = (1 << 5),$/;"	e	enum:__anon323
GIT_MERGE_DIFF_RENAMED_MODIFIED	src/merge.h	/^	GIT_MERGE_DIFF_RENAMED_MODIFIED = (1 << 4),$/;"	e	enum:__anon323
GIT_MERGE_DRIVER_BINARY	include/git2/sys/merge.h	30;"	d
GIT_MERGE_DRIVER_TEXT	include/git2/sys/merge.h	29;"	d
GIT_MERGE_DRIVER_UNION	include/git2/sys/merge.h	31;"	d
GIT_MERGE_DRIVER_VERSION	include/git2/sys/merge.h	137;"	d
GIT_MERGE_FAIL_ON_CONFLICT	include/git2/merge.h	/^	GIT_MERGE_FAIL_ON_CONFLICT = (1 << 1),$/;"	e	enum:__anon127
GIT_MERGE_FILE_BINARY_SIZE	src/merge_file.c	26;"	d	file:
GIT_MERGE_FILE_DEFAULT	include/git2/merge.h	/^	GIT_MERGE_FILE_DEFAULT = 0,$/;"	e	enum:__anon129
GIT_MERGE_FILE_DIFF_MINIMAL	include/git2/merge.h	/^	GIT_MERGE_FILE_DIFF_MINIMAL = (1 << 7),$/;"	e	enum:__anon129
GIT_MERGE_FILE_DIFF_PATIENCE	include/git2/merge.h	/^	GIT_MERGE_FILE_DIFF_PATIENCE = (1 << 6),$/;"	e	enum:__anon129
GIT_MERGE_FILE_FAVOR_NORMAL	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_NORMAL = 0,$/;"	e	enum:__anon128
GIT_MERGE_FILE_FAVOR_OURS	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_OURS = 1,$/;"	e	enum:__anon128
GIT_MERGE_FILE_FAVOR_THEIRS	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_THEIRS = 2,$/;"	e	enum:__anon128
GIT_MERGE_FILE_FAVOR_UNION	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_UNION = 3,$/;"	e	enum:__anon128
GIT_MERGE_FILE_FAVOR__CONFLICTED	src/merge.h	/^	GIT_MERGE_FILE_FAVOR__CONFLICTED = 4,$/;"	e	enum:__anon322
GIT_MERGE_FILE_IGNORE_WHITESPACE	include/git2/merge.h	/^	GIT_MERGE_FILE_IGNORE_WHITESPACE = (1 << 3),$/;"	e	enum:__anon129
GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE	include/git2/merge.h	/^	GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE = (1 << 4),$/;"	e	enum:__anon129
GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL	include/git2/merge.h	/^	GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL = (1 << 5),$/;"	e	enum:__anon129
GIT_MERGE_FILE_INPUT_INIT	include/git2/merge.h	49;"	d
GIT_MERGE_FILE_INPUT_VERSION	include/git2/merge.h	48;"	d
GIT_MERGE_FILE_MODE	src/merge.h	21;"	d
GIT_MERGE_FILE_OPTIONS_INIT	include/git2/merge.h	197;"	d
GIT_MERGE_FILE_OPTIONS_VERSION	include/git2/merge.h	196;"	d
GIT_MERGE_FILE_SIDE_EXISTS	src/merge_file.c	28;"	d	file:
GIT_MERGE_FILE_SIMPLIFY_ALNUM	include/git2/merge.h	/^	GIT_MERGE_FILE_SIMPLIFY_ALNUM = (1 << 2),$/;"	e	enum:__anon129
GIT_MERGE_FILE_STYLE_DIFF3	include/git2/merge.h	/^	GIT_MERGE_FILE_STYLE_DIFF3 = (1 << 1),$/;"	e	enum:__anon129
GIT_MERGE_FILE_STYLE_MERGE	include/git2/merge.h	/^	GIT_MERGE_FILE_STYLE_MERGE = (1 << 0),$/;"	e	enum:__anon129
GIT_MERGE_FIND_RENAMES	include/git2/merge.h	/^	GIT_MERGE_FIND_RENAMES = (1 << 0),$/;"	e	enum:__anon127
GIT_MERGE_HEAD_FILE	src/refs.h	36;"	d
GIT_MERGE_INDEX_ENTRY_EXISTS	src/merge.c	52;"	d	file:
GIT_MERGE_INDEX_ENTRY_ISFILE	src/merge.c	53;"	d	file:
GIT_MERGE_MODE_FILE	src/merge.h	20;"	d
GIT_MERGE_MSG_FILE	src/merge.h	19;"	d
GIT_MERGE_NO_RECURSIVE	include/git2/merge.h	/^	GIT_MERGE_NO_RECURSIVE = (1 << 3),$/;"	e	enum:__anon127
GIT_MERGE_OPTIONS_INIT	include/git2/merge.h	293;"	d
GIT_MERGE_OPTIONS_VERSION	include/git2/merge.h	292;"	d
GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY	include/git2/merge.h	/^	GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY = (1 << 1),$/;"	e	enum:__anon134
GIT_MERGE_PREFERENCE_NONE	include/git2/merge.h	/^	GIT_MERGE_PREFERENCE_NONE = 0,$/;"	e	enum:__anon134
GIT_MERGE_PREFERENCE_NO_FASTFORWARD	include/git2/merge.h	/^	GIT_MERGE_PREFERENCE_NO_FASTFORWARD = (1 << 0),$/;"	e	enum:__anon134
GIT_MERGE_SKIP_REUC	include/git2/merge.h	/^	GIT_MERGE_SKIP_REUC = (1 << 2),$/;"	e	enum:__anon127
GIT_MERGE__VIRTUAL_BASE	src/merge.h	/^	GIT_MERGE__VIRTUAL_BASE = (1 << 31),$/;"	e	enum:__anon321
GIT_MKDIR_CHMOD	src/fileops.h	/^	GIT_MKDIR_CHMOD = 4,$/;"	e	enum:__anon346
GIT_MKDIR_CHMOD_PATH	src/fileops.h	/^	GIT_MKDIR_CHMOD_PATH = 8,$/;"	e	enum:__anon346
GIT_MKDIR_EXCL	src/fileops.h	/^	GIT_MKDIR_EXCL = 1,$/;"	e	enum:__anon346
GIT_MKDIR_PATH	src/fileops.h	/^	GIT_MKDIR_PATH = 2,$/;"	e	enum:__anon346
GIT_MKDIR_REMOVE_FILES	src/fileops.h	/^	GIT_MKDIR_REMOVE_FILES = 128,$/;"	e	enum:__anon346
GIT_MKDIR_REMOVE_SYMLINKS	src/fileops.h	/^	GIT_MKDIR_REMOVE_SYMLINKS = 256,$/;"	e	enum:__anon346
GIT_MKDIR_SKIP_LAST	src/fileops.h	/^	GIT_MKDIR_SKIP_LAST = 16,$/;"	e	enum:__anon346
GIT_MKDIR_SKIP_LAST2	src/fileops.h	/^	GIT_MKDIR_SKIP_LAST2 = 32,$/;"	e	enum:__anon346
GIT_MKDIR_VERIFY_DIR	src/fileops.h	/^	GIT_MKDIR_VERIFY_DIR = 64,$/;"	e	enum:__anon346
GIT_MMAP_VALIDATE	src/map.h	38;"	d
GIT_MODE_ISBLOB	src/fileops.h	254;"	d
GIT_MODE_PERMS_MASK	src/fileops.h	251;"	d
GIT_MODE_TYPE	src/fileops.h	253;"	d
GIT_MODE_TYPE_MASK	src/fileops.h	252;"	d
GIT_MODULES_FILE	src/submodule.c	26;"	d	file:
GIT_MULTIPLY_SIZET_OVERFLOW	src/common.h	217;"	d
GIT_NOTES_DEFAULT_MSG_ADD	src/notes.h	17;"	d
GIT_NOTES_DEFAULT_MSG_RM	src/notes.h	20;"	d
GIT_NOTES_DEFAULT_REF	src/notes.h	15;"	d
GIT_OBJECTS_DIR	src/odb.h	19;"	d
GIT_OBJECTS_INFO_DIR	src/repo_template.h	10;"	d
GIT_OBJECTS_PACK_DIR	src/repo_template.h	11;"	d
GIT_OBJECT_DIR_MODE	src/odb.h	20;"	d
GIT_OBJECT_FILE_MODE	src/odb.h	21;"	d
GIT_OBJ_ANY	include/git2/types.h	/^	GIT_OBJ_ANY = -2,		\/**< Object can be any of the following *\/$/;"	e	enum:__anon143
GIT_OBJ_BAD	include/git2/types.h	/^	GIT_OBJ_BAD = -1,		\/**< Object is invalid. *\/$/;"	e	enum:__anon143
GIT_OBJ_BLOB	include/git2/types.h	/^	GIT_OBJ_BLOB = 3,		\/**< A file revision object. *\/$/;"	e	enum:__anon143
GIT_OBJ_COMMIT	include/git2/types.h	/^	GIT_OBJ_COMMIT = 1,		\/**< A commit object. *\/$/;"	e	enum:__anon143
GIT_OBJ_OFS_DELTA	include/git2/types.h	/^	GIT_OBJ_OFS_DELTA = 6, \/**< A delta, base is given by an offset. *\/$/;"	e	enum:__anon143
GIT_OBJ_REF_DELTA	include/git2/types.h	/^	GIT_OBJ_REF_DELTA = 7, \/**< A delta, base is given by object id. *\/$/;"	e	enum:__anon143
GIT_OBJ_TAG	include/git2/types.h	/^	GIT_OBJ_TAG = 4,		\/**< An annotated tag object. *\/$/;"	e	enum:__anon143
GIT_OBJ_TREE	include/git2/types.h	/^	GIT_OBJ_TREE = 2,		\/**< A tree (directory listing) object. *\/$/;"	e	enum:__anon143
GIT_OBJ__EXT1	include/git2/types.h	/^	GIT_OBJ__EXT1 = 0,		\/**< Reserved for future use. *\/$/;"	e	enum:__anon143
GIT_OBJ__EXT2	include/git2/types.h	/^	GIT_OBJ__EXT2 = 5,		\/**< Reserved for future use. *\/$/;"	e	enum:__anon143
GIT_ODB_BACKEND_INIT	include/git2/sys/odb_backend.h	105;"	d
GIT_ODB_BACKEND_VERSION	include/git2/sys/odb_backend.h	104;"	d
GIT_OID_HEXSZ	include/git2/oid.h	26;"	d
GIT_OID_HEX_ZERO	include/git2/common.h	95;"	d
GIT_OID_MINPREFIXLEN	include/git2/oid.h	30;"	d
GIT_OID_RAWSZ	include/git2/oid.h	23;"	d
GIT_OK	include/git2/errors.h	/^	GIT_OK         =  0,		\/**< No error *\/$/;"	e	enum:__anon42
GIT_OPT_ENABLE_CACHING	include/git2/common.h	/^	GIT_OPT_ENABLE_CACHING,$/;"	e	enum:__anon71
GIT_OPT_ENABLE_STRICT_OBJECT_CREATION	include/git2/common.h	/^	GIT_OPT_ENABLE_STRICT_OBJECT_CREATION,$/;"	e	enum:__anon71
GIT_OPT_GET_CACHED_MEMORY	include/git2/common.h	/^	GIT_OPT_GET_CACHED_MEMORY,$/;"	e	enum:__anon71
GIT_OPT_GET_MWINDOW_MAPPED_LIMIT	include/git2/common.h	/^	GIT_OPT_GET_MWINDOW_MAPPED_LIMIT,$/;"	e	enum:__anon71
GIT_OPT_GET_MWINDOW_SIZE	include/git2/common.h	/^	GIT_OPT_GET_MWINDOW_SIZE,$/;"	e	enum:__anon71
GIT_OPT_GET_SEARCH_PATH	include/git2/common.h	/^	GIT_OPT_GET_SEARCH_PATH,$/;"	e	enum:__anon71
GIT_OPT_GET_TEMPLATE_PATH	include/git2/common.h	/^	GIT_OPT_GET_TEMPLATE_PATH,$/;"	e	enum:__anon71
GIT_OPT_GET_USER_AGENT	include/git2/common.h	/^	GIT_OPT_GET_USER_AGENT,$/;"	e	enum:__anon71
GIT_OPT_SET_CACHE_MAX_SIZE	include/git2/common.h	/^	GIT_OPT_SET_CACHE_MAX_SIZE,$/;"	e	enum:__anon71
GIT_OPT_SET_CACHE_OBJECT_LIMIT	include/git2/common.h	/^	GIT_OPT_SET_CACHE_OBJECT_LIMIT,$/;"	e	enum:__anon71
GIT_OPT_SET_MWINDOW_MAPPED_LIMIT	include/git2/common.h	/^	GIT_OPT_SET_MWINDOW_MAPPED_LIMIT,$/;"	e	enum:__anon71
GIT_OPT_SET_MWINDOW_SIZE	include/git2/common.h	/^	GIT_OPT_SET_MWINDOW_SIZE,$/;"	e	enum:__anon71
GIT_OPT_SET_SEARCH_PATH	include/git2/common.h	/^	GIT_OPT_SET_SEARCH_PATH,$/;"	e	enum:__anon71
GIT_OPT_SET_SSL_CERT_LOCATIONS	include/git2/common.h	/^	GIT_OPT_SET_SSL_CERT_LOCATIONS,$/;"	e	enum:__anon71
GIT_OPT_SET_SSL_CIPHERS	include/git2/common.h	/^	GIT_OPT_SET_SSL_CIPHERS,$/;"	e	enum:__anon71
GIT_OPT_SET_TEMPLATE_PATH	include/git2/common.h	/^	GIT_OPT_SET_TEMPLATE_PATH,$/;"	e	enum:__anon71
GIT_OPT_SET_USER_AGENT	include/git2/common.h	/^	GIT_OPT_SET_USER_AGENT,$/;"	e	enum:__anon71
GIT_ORIG_HEAD_FILE	src/refs.h	34;"	d
GIT_PACKBUILDER_ADDING_OBJECTS	include/git2/pack.h	/^	GIT_PACKBUILDER_ADDING_OBJECTS = 0,$/;"	e	enum:__anon113
GIT_PACKBUILDER_DELTAFICATION	include/git2/pack.h	/^	GIT_PACKBUILDER_DELTAFICATION = 1,$/;"	e	enum:__anon113
GIT_PACKBUILDER__MUTEX_OP	src/pack-objects.c	48;"	d	file:
GIT_PACKEDREFS_FILE	src/refs.h	29;"	d
GIT_PACKEDREFS_FILE_MODE	src/refs.h	31;"	d
GIT_PACKEDREFS_HEADER	src/refs.h	30;"	d
GIT_PACKED_PRIORITY	src/odb.c	30;"	d	file:
GIT_PACKREF_HAS_PEEL	src/refs.c	/^	GIT_PACKREF_HAS_PEEL = 1,$/;"	e	enum:__anon231	file:
GIT_PACKREF_WAS_LOOSE	src/refs.c	/^	GIT_PACKREF_WAS_LOOSE = 2$/;"	e	enum:__anon231	file:
GIT_PACK_BIG_FILE_THRESHOLD	src/pack-objects.h	27;"	d
GIT_PACK_CACHE_MEMORY_LIMIT	src/pack.h	76;"	d
GIT_PACK_CACHE_SIZE_LIMIT	src/pack.h	77;"	d
GIT_PACK_DELTA_CACHE_LIMIT	src/pack-objects.h	26;"	d
GIT_PACK_DELTA_CACHE_SIZE	src/pack-objects.h	25;"	d
GIT_PACK_DEPTH	src/pack-objects.h	24;"	d
GIT_PACK_FILE_MODE	src/pack.h	22;"	d
GIT_PACK_WINDOW	src/pack-objects.h	23;"	d
GIT_PASSTHROUGH	include/git2/errors.h	/^	GIT_PASSTHROUGH     = -30,	\/**< Internal only *\/$/;"	e	enum:__anon42
GIT_PATCH_GENERATED_ALLOCATED	src/patch_generate.h	/^	GIT_PATCH_GENERATED_ALLOCATED = (1 << 0),$/;"	e	enum:__anon219
GIT_PATCH_GENERATED_DIFFABLE	src/patch_generate.h	/^	GIT_PATCH_GENERATED_DIFFABLE = (1 << 3),$/;"	e	enum:__anon219
GIT_PATCH_GENERATED_DIFFED	src/patch_generate.h	/^	GIT_PATCH_GENERATED_DIFFED = (1 << 4),$/;"	e	enum:__anon219
GIT_PATCH_GENERATED_FLATTENED	src/patch_generate.h	/^	GIT_PATCH_GENERATED_FLATTENED = (1 << 5),$/;"	e	enum:__anon219
GIT_PATCH_GENERATED_INITIALIZED	src/patch_generate.h	/^	GIT_PATCH_GENERATED_INITIALIZED = (1 << 1),$/;"	e	enum:__anon219
GIT_PATCH_GENERATED_LOADED	src/patch_generate.h	/^	GIT_PATCH_GENERATED_LOADED = (1 << 2),$/;"	e	enum:__anon219
GIT_PATCH_OPTIONS_INIT	src/patch.h	62;"	d
GIT_PATHSPEC_DEFAULT	include/git2/pathspec.h	/^	GIT_PATHSPEC_DEFAULT        = 0,$/;"	e	enum:__anon136
GIT_PATHSPEC_FAILURES_ONLY	include/git2/pathspec.h	/^	GIT_PATHSPEC_FAILURES_ONLY  = (1u << 5),$/;"	e	enum:__anon136
GIT_PATHSPEC_FIND_FAILURES	include/git2/pathspec.h	/^	GIT_PATHSPEC_FIND_FAILURES  = (1u << 4),$/;"	e	enum:__anon136
GIT_PATHSPEC_IGNORE_CASE	include/git2/pathspec.h	/^	GIT_PATHSPEC_IGNORE_CASE    = (1u << 0),$/;"	e	enum:__anon136
GIT_PATHSPEC_NOMATCH	src/pathspec.h	54;"	d
GIT_PATHSPEC_NO_GLOB	include/git2/pathspec.h	/^	GIT_PATHSPEC_NO_GLOB        = (1u << 2),$/;"	e	enum:__anon136
GIT_PATHSPEC_NO_MATCH_ERROR	include/git2/pathspec.h	/^	GIT_PATHSPEC_NO_MATCH_ERROR = (1u << 3),$/;"	e	enum:__anon136
GIT_PATHSPEC_USE_CASE	include/git2/pathspec.h	/^	GIT_PATHSPEC_USE_CASE       = (1u << 1),$/;"	e	enum:__anon136
GIT_PATH_DIRITER_INIT	src/path.h	461;"	d
GIT_PATH_DIRITER_INIT	src/path.h	479;"	d
GIT_PATH_DIR_IGNORE_CASE	src/path.h	/^	GIT_PATH_DIR_IGNORE_CASE = (1u << 0),$/;"	e	enum:__anon311
GIT_PATH_DIR_INCLUDE_DOT_AND_DOTDOT	src/path.h	/^	GIT_PATH_DIR_INCLUDE_DOT_AND_DOTDOT = (1u << 2),$/;"	e	enum:__anon311
GIT_PATH_DIR_PRECOMPOSE_UNICODE	src/path.h	/^	GIT_PATH_DIR_PRECOMPOSE_UNICODE = (1u << 1),$/;"	e	enum:__anon311
GIT_PATH_EQUAL	src/path.h	/^enum { GIT_PATH_NOTEQUAL = 0, GIT_PATH_EQUAL = 1, GIT_PATH_PREFIX = 2 };$/;"	e	enum:__anon312
GIT_PATH_ICONV_INIT	src/path.h	421;"	d
GIT_PATH_LIST_SEPARATOR	include/git2/common.h	82;"	d
GIT_PATH_MAX	include/git2/common.h	90;"	d
GIT_PATH_NATIVE_ENCODING	src/path.h	407;"	d
GIT_PATH_NATIVE_ENCODING	src/path.h	409;"	d
GIT_PATH_NOTEQUAL	src/path.h	/^enum { GIT_PATH_NOTEQUAL = 0, GIT_PATH_EQUAL = 1, GIT_PATH_PREFIX = 2 };$/;"	e	enum:__anon312
GIT_PATH_PREFIX	src/path.h	/^enum { GIT_PATH_NOTEQUAL = 0, GIT_PATH_EQUAL = 1, GIT_PATH_PREFIX = 2 };$/;"	e	enum:__anon312
GIT_PATH_REJECT_BACKSLASH	src/path.h	579;"	d
GIT_PATH_REJECT_DOS_PATHS	src/path.h	583;"	d
GIT_PATH_REJECT_DOT_GIT	src/path.h	577;"	d
GIT_PATH_REJECT_DOT_GIT_HFS	src/path.h	586;"	d
GIT_PATH_REJECT_DOT_GIT_LITERAL	src/path.h	585;"	d
GIT_PATH_REJECT_DOT_GIT_NTFS	src/path.h	587;"	d
GIT_PATH_REJECT_FILESYSTEM_DEFAULTS	src/path.h	594;"	d
GIT_PATH_REJECT_FILESYSTEM_DEFAULTS	src/path.h	603;"	d
GIT_PATH_REJECT_INDEX_DEFAULTS	src/path.h	612;"	d
GIT_PATH_REJECT_NT_CHARS	src/path.h	584;"	d
GIT_PATH_REJECT_SLASH	src/path.h	578;"	d
GIT_PATH_REJECT_TRAILING_COLON	src/path.h	582;"	d
GIT_PATH_REJECT_TRAILING_DOT	src/path.h	580;"	d
GIT_PATH_REJECT_TRAILING_SPACE	src/path.h	581;"	d
GIT_PATH_REJECT_TRAVERSAL	src/path.h	576;"	d
GIT_PATH_REJECT_WORKDIR_DEFAULTS	src/path.h	608;"	d
GIT_PATH_REPO_ENCODING	src/path.h	404;"	d
GIT_PERMS_CANONICAL	src/fileops.h	248;"	d
GIT_PERMS_FOR_WRITE	src/fileops.h	249;"	d
GIT_PERMS_IS_EXEC	src/fileops.h	247;"	d
GIT_PKT_ACK	src/transports/smart.h	/^	GIT_PKT_ACK,$/;"	e	enum:git_pkt_type
GIT_PKT_CMD	src/transports/smart.h	/^	GIT_PKT_CMD,$/;"	e	enum:git_pkt_type
GIT_PKT_COMMENT	src/transports/smart.h	/^	GIT_PKT_COMMENT,$/;"	e	enum:git_pkt_type
GIT_PKT_DATA	src/transports/smart.h	/^	GIT_PKT_DATA,$/;"	e	enum:git_pkt_type
GIT_PKT_ERR	src/transports/smart.h	/^	GIT_PKT_ERR,$/;"	e	enum:git_pkt_type
GIT_PKT_FLUSH	src/transports/smart.h	/^	GIT_PKT_FLUSH,$/;"	e	enum:git_pkt_type
GIT_PKT_HAVE	src/transports/smart.h	/^	GIT_PKT_HAVE,$/;"	e	enum:git_pkt_type
GIT_PKT_NAK	src/transports/smart.h	/^	GIT_PKT_NAK,$/;"	e	enum:git_pkt_type
GIT_PKT_NG	src/transports/smart.h	/^	GIT_PKT_NG,$/;"	e	enum:git_pkt_type
GIT_PKT_OK	src/transports/smart.h	/^	GIT_PKT_OK,$/;"	e	enum:git_pkt_type
GIT_PKT_PACK	src/transports/smart.h	/^	GIT_PKT_PACK,$/;"	e	enum:git_pkt_type
GIT_PKT_PROGRESS	src/transports/smart.h	/^	GIT_PKT_PROGRESS,$/;"	e	enum:git_pkt_type
GIT_PKT_REF	src/transports/smart.h	/^	GIT_PKT_REF,$/;"	e	enum:git_pkt_type
GIT_PKT_UNPACK	src/transports/smart.h	/^	GIT_PKT_UNPACK,$/;"	e	enum:git_pkt_type
GIT_POOL_INIT	src/pool.h	38;"	d
GIT_POOL_INIT	src/pool.h	63;"	d
GIT_PQUEUE_FIXED_SIZE	src/pqueue.h	/^	GIT_PQUEUE_FIXED_SIZE = (GIT_VECTOR_FLAG_MAX << 1),$/;"	e	enum:__anon329
GIT_PRECOMPOSE_DEFAULT	src/repository.h	/^	GIT_PRECOMPOSE_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon317
GIT_PROTECTHFS_DEFAULT	src/repository.h	/^	GIT_PROTECTHFS_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon317
GIT_PROTECTNTFS_DEFAULT	src/repository.h	/^	GIT_PROTECTNTFS_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon317
GIT_PROT_EXEC	src/map.h	17;"	d
GIT_PROT_NONE	src/map.h	14;"	d
GIT_PROT_READ	src/map.h	15;"	d
GIT_PROT_WRITE	src/map.h	16;"	d
GIT_PROXY_AUTO	include/git2/proxy.h	/^	GIT_PROXY_AUTO,$/;"	e	enum:__anon124
GIT_PROXY_NONE	include/git2/proxy.h	/^	GIT_PROXY_NONE,$/;"	e	enum:__anon124
GIT_PROXY_OPTIONS_INIT	include/git2/proxy.h	80;"	d
GIT_PROXY_OPTIONS_VERSION	include/git2/proxy.h	79;"	d
GIT_PROXY_SPECIFIED	include/git2/proxy.h	/^	GIT_PROXY_SPECIFIED,$/;"	e	enum:__anon124
GIT_PUSH_OPTIONS_INIT	include/git2/remote.h	615;"	d
GIT_PUSH_OPTIONS_VERSION	include/git2/remote.h	614;"	d
GIT_REBASE_APPLY_APPLYING_FILE	src/refs.h	44;"	d
GIT_REBASE_APPLY_DIR	src/refs.h	42;"	d
GIT_REBASE_APPLY_REBASING_FILE	src/refs.h	43;"	d
GIT_REBASE_MERGE_DIR	src/refs.h	40;"	d
GIT_REBASE_MERGE_INTERACTIVE_FILE	src/refs.h	41;"	d
GIT_REBASE_NO_OPERATION	include/git2/rebase.h	122;"	d
GIT_REBASE_OPERATION_EDIT	include/git2/rebase.h	/^	GIT_REBASE_OPERATION_EDIT,$/;"	e	enum:__anon68
GIT_REBASE_OPERATION_EXEC	include/git2/rebase.h	/^	GIT_REBASE_OPERATION_EXEC,$/;"	e	enum:__anon68
GIT_REBASE_OPERATION_FIXUP	include/git2/rebase.h	/^	GIT_REBASE_OPERATION_FIXUP,$/;"	e	enum:__anon68
GIT_REBASE_OPERATION_PICK	include/git2/rebase.h	/^	GIT_REBASE_OPERATION_PICK = 0,$/;"	e	enum:__anon68
GIT_REBASE_OPERATION_REWORD	include/git2/rebase.h	/^	GIT_REBASE_OPERATION_REWORD,$/;"	e	enum:__anon68
GIT_REBASE_OPERATION_SQUASH	include/git2/rebase.h	/^	GIT_REBASE_OPERATION_SQUASH,$/;"	e	enum:__anon68
GIT_REBASE_OPTIONS_INIT	include/git2/rebase.h	117;"	d
GIT_REBASE_OPTIONS_VERSION	include/git2/rebase.h	116;"	d
GIT_REBASE_STATE_INIT	src/rebase.c	85;"	d	file:
GIT_REBASE_TYPE_APPLY	src/rebase.c	/^	GIT_REBASE_TYPE_APPLY = 1,$/;"	e	enum:__anon250	file:
GIT_REBASE_TYPE_INTERACTIVE	src/rebase.c	/^	GIT_REBASE_TYPE_INTERACTIVE = 3,$/;"	e	enum:__anon250	file:
GIT_REBASE_TYPE_MERGE	src/rebase.c	/^	GIT_REBASE_TYPE_MERGE = 2,$/;"	e	enum:__anon250	file:
GIT_REBASE_TYPE_NONE	src/rebase.c	/^	GIT_REBASE_TYPE_NONE = 0,$/;"	e	enum:__anon250	file:
GIT_REFCOUNT_DEC	src/util.h	379;"	d
GIT_REFCOUNT_INC	src/util.h	375;"	d
GIT_REFCOUNT_OWN	src/util.h	385;"	d
GIT_REFCOUNT_OWNER	src/util.h	389;"	d
GIT_REFCOUNT_VAL	src/util.h	391;"	d
GIT_REFDB_BACKEND_INIT	include/git2/sys/refdb_backend.h	173;"	d
GIT_REFDB_BACKEND_VERSION	include/git2/sys/refdb_backend.h	172;"	d
GIT_REFLOG_DIR	src/reflog.h	14;"	d
GIT_REFLOG_DIR_MODE	src/reflog.h	15;"	d
GIT_REFLOG_FILE_MODE	src/reflog.h	16;"	d
GIT_REFLOG_SIZE_MIN	src/reflog.h	18;"	d
GIT_REFNAME_MAX	src/refs.h	57;"	d
GIT_REFSPEC_TAGS	src/refspec.h	24;"	d
GIT_REFS_DIR	src/refs.h	18;"	d
GIT_REFS_DIR_MODE	src/refs.h	23;"	d
GIT_REFS_FILE_MODE	src/refs.h	24;"	d
GIT_REFS_HEADS_DIR	src/refs.h	19;"	d
GIT_REFS_HEADS_MASTER_FILE	src/refs.h	45;"	d
GIT_REFS_NOTES_DIR	src/refs.h	22;"	d
GIT_REFS_REMOTES_DIR	src/refs.h	21;"	d
GIT_REFS_STASH_FILE	src/refs.h	53;"	d
GIT_REFS_TAGS_DIR	src/refs.h	20;"	d
GIT_REFS_TAGS_DIR_LEN	src/tag.c	465;"	d	file:
GIT_REF_FORMAT_ALLOW_ONELEVEL	include/git2/refs.h	/^	GIT_REF_FORMAT_ALLOW_ONELEVEL = (1u << 0),$/;"	e	enum:__anon72
GIT_REF_FORMAT_NORMAL	include/git2/refs.h	/^	GIT_REF_FORMAT_NORMAL = 0u,$/;"	e	enum:__anon72
GIT_REF_FORMAT_REFSPEC_PATTERN	include/git2/refs.h	/^	GIT_REF_FORMAT_REFSPEC_PATTERN = (1u << 1),$/;"	e	enum:__anon72
GIT_REF_FORMAT_REFSPEC_SHORTHAND	include/git2/refs.h	/^	GIT_REF_FORMAT_REFSPEC_SHORTHAND = (1u << 2),$/;"	e	enum:__anon72
GIT_REF_FORMAT__PRECOMPOSE_UNICODE	src/refs.h	55;"	d
GIT_REF_INVALID	include/git2/types.h	/^	GIT_REF_INVALID = 0, \/**< Invalid reference *\/$/;"	e	enum:__anon144
GIT_REF_LISTALL	include/git2/types.h	/^	GIT_REF_LISTALL = GIT_REF_OID|GIT_REF_SYMBOLIC,$/;"	e	enum:__anon144
GIT_REF_OID	include/git2/types.h	/^	GIT_REF_OID = 1, \/**< A reference which points at an object id *\/$/;"	e	enum:__anon144
GIT_REF_SYMBOLIC	include/git2/types.h	/^	GIT_REF_SYMBOLIC = 2, \/**< A reference which points at another reference *\/$/;"	e	enum:__anon144
GIT_REF_TYPEMASK	src/refs.c	1017;"	d	file:
GIT_REMOTE_CALLBACKS_INIT	include/git2/remote.h	463;"	d
GIT_REMOTE_CALLBACKS_VERSION	include/git2/remote.h	462;"	d
GIT_REMOTE_COMPLETION_DOWNLOAD	include/git2/remote.h	/^	GIT_REMOTE_COMPLETION_DOWNLOAD,$/;"	e	enum:git_remote_completion_type
GIT_REMOTE_COMPLETION_ERROR	include/git2/remote.h	/^	GIT_REMOTE_COMPLETION_ERROR,$/;"	e	enum:git_remote_completion_type
GIT_REMOTE_COMPLETION_INDEXING	include/git2/remote.h	/^	GIT_REMOTE_COMPLETION_INDEXING,$/;"	e	enum:git_remote_completion_type
GIT_REMOTE_DOWNLOAD_TAGS_ALL	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_ALL,$/;"	e	enum:__anon54
GIT_REMOTE_DOWNLOAD_TAGS_AUTO	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_AUTO,$/;"	e	enum:__anon54
GIT_REMOTE_DOWNLOAD_TAGS_NONE	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_NONE,$/;"	e	enum:__anon54
GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED = 0,$/;"	e	enum:__anon54
GIT_REMOTE_ORIGIN	src/remote.h	17;"	d
GIT_RENAMED_REF_FILE	src/refs.h	26;"	d
GIT_REPARSE_DATA_BUFFER	src/win32/reparse.h	/^} GIT_REPARSE_DATA_BUFFER;$/;"	t	typeref:struct:_GIT_REPARSE_DATA_BUFFER
GIT_REPOSITORY_INIT_BARE	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_BARE              = (1u << 0),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE = (1u << 5),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_MKDIR	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_MKDIR             = (1u << 3),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_MKPATH	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_MKPATH            = (1u << 4),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_NO_DOTGIT_DIR	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_NO_DOTGIT_DIR     = (1u << 2),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_NO_REINIT	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_NO_REINIT         = (1u << 1),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_OPTIONS_INIT	include/git2/repository.h	290;"	d
GIT_REPOSITORY_INIT_OPTIONS_VERSION	include/git2/repository.h	289;"	d
GIT_REPOSITORY_INIT_RELATIVE_GITLINK	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_RELATIVE_GITLINK  = (1u << 6),$/;"	e	enum:__anon117
GIT_REPOSITORY_INIT_SHARED_ALL	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_SHARED_ALL   = 0002777,$/;"	e	enum:__anon118
GIT_REPOSITORY_INIT_SHARED_GROUP	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_SHARED_GROUP = 0002775,$/;"	e	enum:__anon118
GIT_REPOSITORY_INIT_SHARED_UMASK	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_SHARED_UMASK = 0,$/;"	e	enum:__anon118
GIT_REPOSITORY_INIT__HAS_DOTGIT	src/repository.h	/^	GIT_REPOSITORY_INIT__HAS_DOTGIT = (1u << 16),$/;"	e	enum:__anon318
GIT_REPOSITORY_INIT__IS_REINIT	src/repository.h	/^	GIT_REPOSITORY_INIT__IS_REINIT  = (1u << 18),$/;"	e	enum:__anon318
GIT_REPOSITORY_INIT__NATURAL_WD	src/repository.h	/^	GIT_REPOSITORY_INIT__NATURAL_WD = (1u << 17),$/;"	e	enum:__anon318
GIT_REPOSITORY_OPEN_BARE	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_BARE      = (1 << 2),$/;"	e	enum:__anon116
GIT_REPOSITORY_OPEN_CROSS_FS	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_CROSS_FS  = (1 << 1),$/;"	e	enum:__anon116
GIT_REPOSITORY_OPEN_FROM_ENV	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_FROM_ENV  = (1 << 4),$/;"	e	enum:__anon116
GIT_REPOSITORY_OPEN_NO_DOTGIT	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_NO_DOTGIT = (1 << 3),$/;"	e	enum:__anon116
GIT_REPOSITORY_OPEN_NO_SEARCH	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_NO_SEARCH = (1 << 0),$/;"	e	enum:__anon116
GIT_REPOSITORY_STATE_APPLY_MAILBOX	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_APPLY_MAILBOX,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_BISECT	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_BISECT,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_CHERRYPICK	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_CHERRYPICK,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_MERGE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_MERGE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_NONE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_NONE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_REBASE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REBASE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_REBASE_INTERACTIVE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REBASE_INTERACTIVE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_REBASE_MERGE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REBASE_MERGE,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_REVERT	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REVERT,$/;"	e	enum:__anon120
GIT_REPOSITORY_STATE_REVERT_SEQUENCE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REVERT_SEQUENCE,$/;"	e	enum:__anon120
GIT_REPO_VERSION	src/repository.c	41;"	d	file:
GIT_RESET_HARD	include/git2/reset.h	/^	GIT_RESET_HARD  = 3, \/**< MIXED plus changes in working tree discarded *\/$/;"	e	enum:__anon65
GIT_RESET_MIXED	include/git2/reset.h	/^	GIT_RESET_MIXED = 2, \/**< SOFT plus reset index to the commit *\/$/;"	e	enum:__anon65
GIT_RESET_SOFT	include/git2/reset.h	/^	GIT_RESET_SOFT  = 1, \/**< Move the head to the given commit *\/$/;"	e	enum:__anon65
GIT_RESTRICT	src/win32/thread.h	14;"	d
GIT_RESTRICT	src/win32/thread.h	16;"	d
GIT_REVERT_FILE_MODE	src/revert.c	20;"	d	file:
GIT_REVERT_HEAD_FILE	src/refs.h	37;"	d
GIT_REVERT_OPTIONS_INIT	include/git2/revert.h	37;"	d
GIT_REVERT_OPTIONS_VERSION	include/git2/revert.h	36;"	d
GIT_REVPARSE_MERGE_BASE	include/git2/revparse.h	/^	GIT_REVPARSE_MERGE_BASE     = 1 << 2,$/;"	e	enum:__anon73
GIT_REVPARSE_RANGE	include/git2/revparse.h	/^	GIT_REVPARSE_RANGE          = 1 << 1,$/;"	e	enum:__anon73
GIT_REVPARSE_SINGLE	include/git2/revparse.h	/^	GIT_REVPARSE_SINGLE         = 1 << 0,$/;"	e	enum:__anon73
GIT_RMDIR_EMPTY_HIERARCHY	src/fileops.h	/^	GIT_RMDIR_EMPTY_HIERARCHY = 0,$/;"	e	enum:__anon347
GIT_RMDIR_EMPTY_PARENTS	src/fileops.h	/^	GIT_RMDIR_EMPTY_PARENTS   = (1 << 2),$/;"	e	enum:__anon347
GIT_RMDIR_REMOVE_BLOCKERS	src/fileops.h	/^	GIT_RMDIR_REMOVE_BLOCKERS = (1 << 3),$/;"	e	enum:__anon347
GIT_RMDIR_REMOVE_FILES	src/fileops.h	/^	GIT_RMDIR_REMOVE_FILES    = (1 << 0),$/;"	e	enum:__anon347
GIT_RMDIR_SKIP_NONEMPTY	src/fileops.h	/^	GIT_RMDIR_SKIP_NONEMPTY   = (1 << 1),$/;"	e	enum:__anon347
GIT_RMDIR_SKIP_ROOT	src/fileops.h	/^	GIT_RMDIR_SKIP_ROOT       = (1 << 4),$/;"	e	enum:__anon347
GIT_RWLOCK_STATIC_INIT	src/thread-utils.h	163;"	d
GIT_RWLOCK_STATIC_INIT	src/unix/pthread.h	54;"	d
GIT_SAFE_CRLF_DEFAULT	src/repository.h	/^	GIT_SAFE_CRLF_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon317
GIT_SAFE_CRLF_FAIL	src/repository.h	/^	GIT_SAFE_CRLF_FAIL = 1,$/;"	e	enum:__anon317
GIT_SAFE_CRLF_FALSE	src/repository.h	/^	GIT_SAFE_CRLF_FALSE = 0,$/;"	e	enum:__anon317
GIT_SAFE_CRLF_WARN	src/repository.h	/^	GIT_SAFE_CRLF_WARN = 2,$/;"	e	enum:__anon317
GIT_SEQUENCER_DIR	src/refs.h	47;"	d
GIT_SEQUENCER_HEAD_FILE	src/refs.h	48;"	d
GIT_SEQUENCER_OPTIONS_FILE	src/refs.h	49;"	d
GIT_SEQUENCER_TODO_FILE	src/refs.h	50;"	d
GIT_SERVICE_RECEIVEPACK	include/git2/sys/transport.h	/^	GIT_SERVICE_RECEIVEPACK = 4,$/;"	e	enum:__anon59
GIT_SERVICE_RECEIVEPACK_LS	include/git2/sys/transport.h	/^	GIT_SERVICE_RECEIVEPACK_LS = 3,$/;"	e	enum:__anon59
GIT_SERVICE_UPLOADPACK	include/git2/sys/transport.h	/^	GIT_SERVICE_UPLOADPACK = 2,$/;"	e	enum:__anon59
GIT_SERVICE_UPLOADPACK_LS	include/git2/sys/transport.h	/^	GIT_SERVICE_UPLOADPACK_LS = 1,$/;"	e	enum:__anon59
GIT_SIDE_BAND_DATA	src/transports/smart.h	14;"	d
GIT_SIDE_BAND_ERROR	src/transports/smart.h	16;"	d
GIT_SIDE_BAND_PROGRESS	src/transports/smart.h	15;"	d
GIT_SOCKET	src/unix/posix.h	/^typedef int GIT_SOCKET;$/;"	t
GIT_SOCKET	src/win32/posix.h	/^typedef SOCKET GIT_SOCKET;$/;"	t
GIT_SORT_NONE	include/git2/revwalk.h	/^	GIT_SORT_NONE = 0,$/;"	e	enum:__anon66
GIT_SORT_REVERSE	include/git2/revwalk.h	/^	GIT_SORT_REVERSE = 1 << 2,$/;"	e	enum:__anon66
GIT_SORT_TIME	include/git2/revwalk.h	/^	GIT_SORT_TIME = 1 << 1,$/;"	e	enum:__anon66
GIT_SORT_TOPOLOGICAL	include/git2/revwalk.h	/^	GIT_SORT_TOPOLOGICAL = 1 << 0,$/;"	e	enum:__anon66
GIT_SRWLOCK	src/win32/thread.h	/^typedef struct { void *Ptr; } GIT_SRWLOCK;$/;"	t	typeref:struct:__anon286
GIT_SSL_DEFAULT_CIPHERS	src/openssl_stream.c	38;"	d	file:
GIT_STASH_APPLY_DEFAULT	include/git2/stash.h	/^	GIT_STASH_APPLY_DEFAULT = 0,$/;"	e	enum:__anon63
GIT_STASH_APPLY_OPTIONS_INIT	include/git2/stash.h	139;"	d
GIT_STASH_APPLY_OPTIONS_VERSION	include/git2/stash.h	138;"	d
GIT_STASH_APPLY_PROGRESS_ANALYZE_INDEX	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_ANALYZE_INDEX,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_ANALYZE_MODIFIED	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_ANALYZE_MODIFIED,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_ANALYZE_UNTRACKED	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_ANALYZE_UNTRACKED,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_CHECKOUT_MODIFIED	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_CHECKOUT_MODIFIED,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_CHECKOUT_UNTRACKED	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_CHECKOUT_UNTRACKED,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_DONE	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_DONE,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_LOADING_STASH	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_LOADING_STASH,$/;"	e	enum:__anon64
GIT_STASH_APPLY_PROGRESS_NONE	include/git2/stash.h	/^	GIT_STASH_APPLY_PROGRESS_NONE = 0,$/;"	e	enum:__anon64
GIT_STASH_APPLY_REINSTATE_INDEX	include/git2/stash.h	/^	GIT_STASH_APPLY_REINSTATE_INDEX = (1 << 0),$/;"	e	enum:__anon63
GIT_STASH_DEFAULT	include/git2/stash.h	/^	GIT_STASH_DEFAULT = 0,$/;"	e	enum:__anon62
GIT_STASH_FILE	src/refs.h	52;"	d
GIT_STASH_INCLUDE_IGNORED	include/git2/stash.h	/^	GIT_STASH_INCLUDE_IGNORED = (1 << 2),$/;"	e	enum:__anon62
GIT_STASH_INCLUDE_UNTRACKED	include/git2/stash.h	/^	GIT_STASH_INCLUDE_UNTRACKED = (1 << 1),$/;"	e	enum:__anon62
GIT_STASH_KEEP_INDEX	include/git2/stash.h	/^	GIT_STASH_KEEP_INDEX = (1 << 0),$/;"	e	enum:__anon62
GIT_STATUS_CONFLICTED	include/git2/status.h	/^	GIT_STATUS_CONFLICTED       = (1u << 15),$/;"	e	enum:__anon46
GIT_STATUS_CURRENT	include/git2/status.h	/^	GIT_STATUS_CURRENT = 0,$/;"	e	enum:__anon46
GIT_STATUS_IGNORED	include/git2/status.h	/^	GIT_STATUS_IGNORED          = (1u << 14),$/;"	e	enum:__anon46
GIT_STATUS_INDEX_DELETED	include/git2/status.h	/^	GIT_STATUS_INDEX_DELETED    = (1u << 2),$/;"	e	enum:__anon46
GIT_STATUS_INDEX_MODIFIED	include/git2/status.h	/^	GIT_STATUS_INDEX_MODIFIED   = (1u << 1),$/;"	e	enum:__anon46
GIT_STATUS_INDEX_NEW	include/git2/status.h	/^	GIT_STATUS_INDEX_NEW        = (1u << 0),$/;"	e	enum:__anon46
GIT_STATUS_INDEX_RENAMED	include/git2/status.h	/^	GIT_STATUS_INDEX_RENAMED    = (1u << 3),$/;"	e	enum:__anon46
GIT_STATUS_INDEX_TYPECHANGE	include/git2/status.h	/^	GIT_STATUS_INDEX_TYPECHANGE = (1u << 4),$/;"	e	enum:__anon46
GIT_STATUS_OPTIONS_INIT	include/git2/status.h	185;"	d
GIT_STATUS_OPTIONS_VERSION	include/git2/status.h	184;"	d
GIT_STATUS_OPT_DEFAULTS	include/git2/status.h	156;"	d
GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH	include/git2/status.h	/^	GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH           = (1u << 5),$/;"	e	enum:__anon48
GIT_STATUS_OPT_EXCLUDE_SUBMODULES	include/git2/status.h	/^	GIT_STATUS_OPT_EXCLUDE_SUBMODULES               = (1u << 3),$/;"	e	enum:__anon48
GIT_STATUS_OPT_INCLUDE_IGNORED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_IGNORED                  = (1u << 1),$/;"	e	enum:__anon48
GIT_STATUS_OPT_INCLUDE_UNMODIFIED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_UNMODIFIED               = (1u << 2),$/;"	e	enum:__anon48
GIT_STATUS_OPT_INCLUDE_UNREADABLE	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_UNREADABLE               = (1u << 14),$/;"	e	enum:__anon48
GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED  = (1u << 15),$/;"	e	enum:__anon48
GIT_STATUS_OPT_INCLUDE_UNTRACKED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_UNTRACKED                = (1u << 0),$/;"	e	enum:__anon48
GIT_STATUS_OPT_NO_REFRESH	include/git2/status.h	/^	GIT_STATUS_OPT_NO_REFRESH                       = (1u << 12),$/;"	e	enum:__anon48
GIT_STATUS_OPT_RECURSE_IGNORED_DIRS	include/git2/status.h	/^	GIT_STATUS_OPT_RECURSE_IGNORED_DIRS             = (1u << 6),$/;"	e	enum:__anon48
GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS	include/git2/status.h	/^	GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS           = (1u << 4),$/;"	e	enum:__anon48
GIT_STATUS_OPT_RENAMES_FROM_REWRITES	include/git2/status.h	/^	GIT_STATUS_OPT_RENAMES_FROM_REWRITES            = (1u << 11),$/;"	e	enum:__anon48
GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX	include/git2/status.h	/^	GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX            = (1u << 7),$/;"	e	enum:__anon48
GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR	include/git2/status.h	/^	GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR         = (1u << 8),$/;"	e	enum:__anon48
GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY	include/git2/status.h	/^	GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY          = (1u << 10),$/;"	e	enum:__anon48
GIT_STATUS_OPT_SORT_CASE_SENSITIVELY	include/git2/status.h	/^	GIT_STATUS_OPT_SORT_CASE_SENSITIVELY            = (1u << 9),$/;"	e	enum:__anon48
GIT_STATUS_OPT_UPDATE_INDEX	include/git2/status.h	/^	GIT_STATUS_OPT_UPDATE_INDEX                     = (1u << 13),$/;"	e	enum:__anon48
GIT_STATUS_SHOW_INDEX_AND_WORKDIR	include/git2/status.h	/^	GIT_STATUS_SHOW_INDEX_AND_WORKDIR = 0,$/;"	e	enum:__anon47
GIT_STATUS_SHOW_INDEX_ONLY	include/git2/status.h	/^	GIT_STATUS_SHOW_INDEX_ONLY = 1,$/;"	e	enum:__anon47
GIT_STATUS_SHOW_WORKDIR_ONLY	include/git2/status.h	/^	GIT_STATUS_SHOW_WORKDIR_ONLY = 2,$/;"	e	enum:__anon47
GIT_STATUS_WT_DELETED	include/git2/status.h	/^	GIT_STATUS_WT_DELETED       = (1u << 9),$/;"	e	enum:__anon46
GIT_STATUS_WT_MODIFIED	include/git2/status.h	/^	GIT_STATUS_WT_MODIFIED      = (1u << 8),$/;"	e	enum:__anon46
GIT_STATUS_WT_NEW	include/git2/status.h	/^	GIT_STATUS_WT_NEW           = (1u << 7),$/;"	e	enum:__anon46
GIT_STATUS_WT_RENAMED	include/git2/status.h	/^	GIT_STATUS_WT_RENAMED       = (1u << 11),$/;"	e	enum:__anon46
GIT_STATUS_WT_TYPECHANGE	include/git2/status.h	/^	GIT_STATUS_WT_TYPECHANGE    = (1u << 10),$/;"	e	enum:__anon46
GIT_STATUS_WT_UNREADABLE	include/git2/status.h	/^	GIT_STATUS_WT_UNREADABLE    = (1u << 12),$/;"	e	enum:__anon46
GIT_STDLIB_CALL	src/common.h	63;"	d
GIT_STDLIB_CALL	src/win32/msvc-compat.h	20;"	d
GIT_STREAM_RDONLY	include/git2/odb_backend.h	/^	GIT_STREAM_RDONLY = (1 << 1),$/;"	e	enum:__anon140
GIT_STREAM_RW	include/git2/odb_backend.h	/^	GIT_STREAM_RW = (GIT_STREAM_RDONLY | GIT_STREAM_WRONLY),$/;"	e	enum:__anon140
GIT_STREAM_VERSION	include/git2/sys/stream.h	16;"	d
GIT_STREAM_WRONLY	include/git2/odb_backend.h	/^	GIT_STREAM_WRONLY = (1 << 2),$/;"	e	enum:__anon140
GIT_SUBMODULE_IGNORE_ALL	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_ALL       = 4,  \/**< never dirty *\/$/;"	e	enum:__anon149
GIT_SUBMODULE_IGNORE_DIRTY	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_DIRTY     = 3,  \/**< only dirty if HEAD moved *\/$/;"	e	enum:__anon149
GIT_SUBMODULE_IGNORE_NONE	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_NONE      = 1,  \/**< any change or untracked == dirty *\/$/;"	e	enum:__anon149
GIT_SUBMODULE_IGNORE_UNSPECIFIED	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_UNSPECIFIED  = -1, \/**< use the submodule's configuration *\/$/;"	e	enum:__anon149
GIT_SUBMODULE_IGNORE_UNTRACKED	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_UNTRACKED = 2,  \/**< dirty if tracked files change *\/$/;"	e	enum:__anon149
GIT_SUBMODULE_RECURSE_NO	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_NO = 0,$/;"	e	enum:__anon150
GIT_SUBMODULE_RECURSE_ONDEMAND	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_ONDEMAND = 2,$/;"	e	enum:__anon150
GIT_SUBMODULE_RECURSE_YES	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_YES = 1,$/;"	e	enum:__anon150
GIT_SUBMODULE_STATUS_INDEX_ADDED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_INDEX_ADDED       = (1u << 4),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_INDEX_DELETED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_INDEX_DELETED     = (1u << 5),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_INDEX_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_INDEX_MODIFIED    = (1u << 6),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_IN_CONFIG	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_CONFIG         = (1u << 2),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_IN_HEAD	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_HEAD           = (1u << 0),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_IN_INDEX	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_INDEX          = (1u << 1),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_IN_WD	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_WD             = (1u << 3),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_IS_INDEX_UNMODIFIED	include/git2/submodule.h	98;"	d
GIT_SUBMODULE_STATUS_IS_UNMODIFIED	include/git2/submodule.h	95;"	d
GIT_SUBMODULE_STATUS_IS_WD_DIRTY	include/git2/submodule.h	105;"	d
GIT_SUBMODULE_STATUS_IS_WD_UNMODIFIED	include/git2/submodule.h	101;"	d
GIT_SUBMODULE_STATUS_WD_ADDED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_ADDED          = (1u << 8),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_WD_DELETED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_DELETED        = (1u << 9),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED = (1u << 11),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_WD_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_MODIFIED       = (1u << 10),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_WD_UNINITIALIZED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_UNINITIALIZED  = (1u << 7),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_WD_UNTRACKED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_UNTRACKED      = (1u << 13),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS_WD_WD_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_WD_MODIFIED    = (1u << 12),$/;"	e	enum:__anon141
GIT_SUBMODULE_STATUS__CLEAR_INTERNAL	src/submodule.h	120;"	d
GIT_SUBMODULE_STATUS__HEAD_NOT_SUBMODULE	src/submodule.h	/^	GIT_SUBMODULE_STATUS__HEAD_NOT_SUBMODULE  = (1u << 24),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__HEAD_OID_VALID	src/submodule.h	/^	GIT_SUBMODULE_STATUS__HEAD_OID_VALID      = (1u << 21),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__INDEX_FLAGS	include/git2/submodule.h	92;"	d
GIT_SUBMODULE_STATUS__INDEX_MULTIPLE_ENTRIES	src/submodule.h	/^	GIT_SUBMODULE_STATUS__INDEX_MULTIPLE_ENTRIES = (1u << 27),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__INDEX_NOT_SUBMODULE	src/submodule.h	/^	GIT_SUBMODULE_STATUS__INDEX_NOT_SUBMODULE = (1u << 25),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__INDEX_OID_VALID	src/submodule.h	/^	GIT_SUBMODULE_STATUS__INDEX_OID_VALID     = (1u << 22),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__IN_FLAGS	include/git2/submodule.h	91;"	d
GIT_SUBMODULE_STATUS__WD_FLAGS	include/git2/submodule.h	93;"	d
GIT_SUBMODULE_STATUS__WD_NOT_SUBMODULE	src/submodule.h	/^	GIT_SUBMODULE_STATUS__WD_NOT_SUBMODULE    = (1u << 26),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__WD_OID_VALID	src/submodule.h	/^	GIT_SUBMODULE_STATUS__WD_OID_VALID        = (1u << 23),$/;"	e	enum:__anon333
GIT_SUBMODULE_STATUS__WD_SCANNED	src/submodule.h	/^	GIT_SUBMODULE_STATUS__WD_SCANNED          = (1u << 20),$/;"	e	enum:__anon333
GIT_SUBMODULE_UPDATE_CHECKOUT	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_CHECKOUT = 1,$/;"	e	enum:__anon148
GIT_SUBMODULE_UPDATE_DEFAULT	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_DEFAULT  = 0$/;"	e	enum:__anon148
GIT_SUBMODULE_UPDATE_MERGE	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_MERGE    = 3,$/;"	e	enum:__anon148
GIT_SUBMODULE_UPDATE_NONE	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_NONE     = 4,$/;"	e	enum:__anon148
GIT_SUBMODULE_UPDATE_OPTIONS_INIT	include/git2/submodule.h	166;"	d
GIT_SUBMODULE_UPDATE_OPTIONS_VERSION	include/git2/submodule.h	165;"	d
GIT_SUBMODULE_UPDATE_REBASE	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_REBASE   = 2,$/;"	e	enum:__anon148
GIT_SYMLINKS_DEFAULT	src/repository.h	/^	GIT_SYMLINKS_DEFAULT = GIT_CVAR_TRUE,$/;"	e	enum:__anon317
GIT_SYMREF	src/refs.h	28;"	d
GIT_SYSDIR_GLOBAL	src/sysdir.h	/^	GIT_SYSDIR_GLOBAL = 1,$/;"	e	enum:__anon158
GIT_SYSDIR_PROGRAMDATA	src/sysdir.h	/^	GIT_SYSDIR_PROGRAMDATA = 3,$/;"	e	enum:__anon158
GIT_SYSDIR_SYSTEM	src/sysdir.h	/^	GIT_SYSDIR_SYSTEM = 0,$/;"	e	enum:__anon158
GIT_SYSDIR_TEMPLATE	src/sysdir.h	/^	GIT_SYSDIR_TEMPLATE = 4,$/;"	e	enum:__anon158
GIT_SYSDIR_XDG	src/sysdir.h	/^	GIT_SYSDIR_XDG    = 2,$/;"	e	enum:__anon158
GIT_SYSDIR__MAX	src/sysdir.h	/^	GIT_SYSDIR__MAX   = 5,$/;"	e	enum:__anon158
GIT_TRACE_DEBUG	include/git2/trace.h	/^	GIT_TRACE_DEBUG = 5,$/;"	e	enum:__anon109
GIT_TRACE_ERROR	include/git2/trace.h	/^	GIT_TRACE_ERROR = 2,$/;"	e	enum:__anon109
GIT_TRACE_FATAL	include/git2/trace.h	/^	GIT_TRACE_FATAL = 1,$/;"	e	enum:__anon109
GIT_TRACE_INFO	include/git2/trace.h	/^	GIT_TRACE_INFO = 4,$/;"	e	enum:__anon109
GIT_TRACE_NONE	include/git2/trace.h	/^	GIT_TRACE_NONE = 0,$/;"	e	enum:__anon109
GIT_TRACE_TRACE	include/git2/trace.h	/^	GIT_TRACE_TRACE = 6$/;"	e	enum:__anon109
GIT_TRACE_WARN	include/git2/trace.h	/^	GIT_TRACE_WARN = 3,$/;"	e	enum:__anon109
GIT_TRANSPORTFLAGS_NONE	include/git2/sys/transport.h	/^	GIT_TRANSPORTFLAGS_NONE = 0,$/;"	e	enum:__anon58
GIT_TRANSPORT_COUNT	src/transport.c	44;"	d	file:
GIT_TRANSPORT_INIT	include/git2/sys/transport.h	109;"	d
GIT_TRANSPORT_VERSION	include/git2/sys/transport.h	108;"	d
GIT_TREEWALK_POST	include/git2/tree.h	/^	GIT_TREEWALK_POST = 1, \/* Post-order *\/$/;"	e	enum:__anon121
GIT_TREEWALK_PRE	include/git2/tree.h	/^	GIT_TREEWALK_PRE = 0, \/* Pre-order *\/$/;"	e	enum:__anon121
GIT_TREE_UPDATE_REMOVE	include/git2/tree.h	/^	GIT_TREE_UPDATE_REMOVE,$/;"	e	enum:__anon122
GIT_TREE_UPDATE_UPSERT	include/git2/tree.h	/^	GIT_TREE_UPDATE_UPSERT,$/;"	e	enum:__anon122
GIT_TRUSTCTIME_DEFAULT	src/repository.h	/^	GIT_TRUSTCTIME_DEFAULT = GIT_CVAR_TRUE,$/;"	e	enum:__anon317
GIT_TYPEOF	src/cc-compat.h	33;"	d
GIT_TYPEOF	src/cc-compat.h	35;"	d
GIT_UNUSED	src/cc-compat.h	46;"	d
GIT_VECTOR_FLAG_MAX	src/vector.h	/^	GIT_VECTOR_FLAG_MAX = (1u << 1),$/;"	e	enum:__anon218
GIT_VECTOR_GET	src/vector.h	65;"	d
GIT_VECTOR_INIT	src/vector.h	27;"	d
GIT_VECTOR_SORTED	src/vector.h	/^	GIT_VECTOR_SORTED = (1u << 0),$/;"	e	enum:__anon218
GIT_WIN32	include/git2/common.h	59;"	d
GIT_WIN32__CRTDBG_STACKTRACE__LEAKS_SINCE_MARK	src/win32/w32_crtdbg_stacktrace.h	/^	GIT_WIN32__CRTDBG_STACKTRACE__LEAKS_SINCE_MARK = (1 << 1),$/;"	e	enum:git_win32__crtdbg_stacktrace_options
GIT_WIN32__CRTDBG_STACKTRACE__LEAKS_TOTAL	src/win32/w32_crtdbg_stacktrace.h	/^	GIT_WIN32__CRTDBG_STACKTRACE__LEAKS_TOTAL      = (1 << 2),$/;"	e	enum:git_win32__crtdbg_stacktrace_options
GIT_WIN32__CRTDBG_STACKTRACE__QUIET	src/win32/w32_crtdbg_stacktrace.h	/^	GIT_WIN32__CRTDBG_STACKTRACE__QUIET            = (1 << 3),$/;"	e	enum:git_win32__crtdbg_stacktrace_options
GIT_WIN32__CRTDBG_STACKTRACE__SET_MARK	src/win32/w32_crtdbg_stacktrace.h	/^	GIT_WIN32__CRTDBG_STACKTRACE__SET_MARK         = (1 << 0),$/;"	e	enum:git_win32__crtdbg_stacktrace_options
GIT_WIN32__STACK__MAX_FRAMES	src/win32/w32_stack.h	59;"	d
GIT_WINHTTP_AUTH_BASIC	src/transports/winhttp.c	/^	GIT_WINHTTP_AUTH_BASIC = 1,$/;"	e	enum:__anon179	file:
GIT_WINHTTP_AUTH_NEGOTIATE	src/transports/winhttp.c	/^	GIT_WINHTTP_AUTH_NEGOTIATE = 2,$/;"	e	enum:__anon179	file:
GIT_WIN_PATH_SHORTNAME	src/win32/path_w32.h	35;"	d
GIT_WIN_PATH_UTF16	src/win32/path_w32.h	21;"	d
GIT_WIN_PATH_UTF8	src/win32/path_w32.h	30;"	d
GIT_XDIFF_MAX_SIZE	src/diff_xdiff.h	17;"	d
GIT_ZSTREAM_DEFLATE	src/zstream.h	/^	GIT_ZSTREAM_DEFLATE,$/;"	e	enum:__anon293
GIT_ZSTREAM_INFLATE	src/zstream.h	/^	GIT_ZSTREAM_INFLATE,$/;"	e	enum:__anon293
GIT_ZSTREAM_INIT	src/zstream.h	28;"	d
GIT__USE_IDXMAP	src/idxmap.h	41;"	d
GIT__USE_IDXMAP_ICASE	src/idxmap.h	44;"	d
GIT__USE_OFFMAP	src/offmap.h	23;"	d
GIT__USE_OIDMAP	src/oidmap.h	30;"	d
GIT__USE_STRMAP	src/strmap.h	23;"	d
GIT__WIN32_NO_WRAP_DIR	src/win32/dir.c	7;"	d	file:
GUNZIP	deps/zlib/inflate.h	16;"	d
GZIP	deps/zlib/deflate.h	23;"	d
GenericReparseBuffer	src/win32/reparse.h	/^		} GenericReparseBuffer;$/;"	m	union:_GIT_REPARSE_DATA_BUFFER::__anon280	typeref:struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon283	access:public
GetSecurityId	deps/winhttp/urlmon.h	/^	LPVOID GetSecurityId;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
GetSecuritySite	deps/winhttp/urlmon.h	/^	LPVOID GetSecuritySite;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
GetZoneMappings	deps/winhttp/urlmon.h	/^	LPVOID GetZoneMappings;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
H	src/hash/hash_generic.h	/^	unsigned int H[5];$/;"	m	struct:git_hash_ctx	access:public
HASHSIG_HASH_MIX	src/hashsig.c	20;"	d	file:
HASHSIG_HASH_SHIFT	src/hashsig.c	18;"	d	file:
HASHSIG_HASH_START	src/hashsig.c	17;"	d	file:
HASHSIG_HEAP_MIN_SIZE	src/hashsig.c	24;"	d	file:
HASHSIG_HEAP_SIZE	src/hashsig.c	23;"	d	file:
HASHSIG_MAX_RUN	src/hashsig.c	16;"	d	file:
HASHSIG_SCALE	src/hashsig.c	14;"	d	file:
HASH_LIMIT	src/delta.c	11;"	d	file:
HAVE_MEMCPY	deps/zlib/zutil.h	200;"	d
HCRC	deps/zlib/inflate.h	/^    HCRC,       \/* i: waiting for header crc (gzip) *\/$/;"	e	enum:__anon28
HCRC_STATE	deps/zlib/deflate.h	58;"	d
HEAD	deps/zlib/inflate.h	/^    HEAD,       \/* i: waiting for magic header *\/$/;"	e	enum:__anon28
HEAD_FILE	src/rebase.c	32;"	d	file:
HEAD_NAME_FILE	src/rebase.c	30;"	d	file:
HEAP_LCHILD_OF	src/hashsig.c	41;"	d	file:
HEAP_PARENT_OF	src/hashsig.c	43;"	d	file:
HEAP_RCHILD_OF	src/hashsig.c	42;"	d	file:
HEAP_SIZE	deps/zlib/deflate.h	45;"	d
HINTERNET	deps/winhttp/winhttp.h	/^typedef LPVOID HINTERNET;$/;"	t
HR	tests/clar_libgit2_trace.c	122;"	d	file:
HTTP_BOTH	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	deps/http-parser/http_parser.h	183;"	d
HTTP_ERRNO_GEN	deps/http-parser/http_parser.h	187;"	d
HTTP_ERRNO_MAP	deps/http-parser/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	deps/http-parser/http_parser.h	141;"	d
HTTP_MAX_HEADER_SIZE	deps/http-parser/http_parser.h	57;"	d
HTTP_METHOD_MAP	deps/http-parser/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	deps/http-parser/http_parser.h	82;"	d
HTTP_PARSER_ERRNO	deps/http-parser/http_parser.h	191;"	d
HTTP_PARSER_STRICT	deps/http-parser/http_parser.h	53;"	d
HTTP_PARSER_VERSION_MAJOR	deps/http-parser/http_parser.h	27;"	d
HTTP_PARSER_VERSION_MINOR	deps/http-parser/http_parser.h	28;"	d
HTTP_REQUEST	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STATUS_ACCEPTED	deps/winhttp/winhttp.h	239;"	d
HTTP_STATUS_AMBIGUOUS	deps/winhttp/winhttp.h	245;"	d
HTTP_STATUS_BAD_GATEWAY	deps/winhttp/winhttp.h	271;"	d
HTTP_STATUS_BAD_METHOD	deps/winhttp/winhttp.h	257;"	d
HTTP_STATUS_BAD_REQUEST	deps/winhttp/winhttp.h	252;"	d
HTTP_STATUS_CONFLICT	deps/winhttp/winhttp.h	261;"	d
HTTP_STATUS_CONTINUE	deps/winhttp/winhttp.h	235;"	d
HTTP_STATUS_CREATED	deps/winhttp/winhttp.h	238;"	d
HTTP_STATUS_DENIED	deps/winhttp/winhttp.h	253;"	d
HTTP_STATUS_FIRST	deps/winhttp/winhttp.h	275;"	d
HTTP_STATUS_FORBIDDEN	deps/winhttp/winhttp.h	255;"	d
HTTP_STATUS_GATEWAY_TIMEOUT	deps/winhttp/winhttp.h	273;"	d
HTTP_STATUS_GONE	deps/winhttp/winhttp.h	262;"	d
HTTP_STATUS_LAST	deps/winhttp/winhttp.h	276;"	d
HTTP_STATUS_LENGTH_REQUIRED	deps/winhttp/winhttp.h	263;"	d
HTTP_STATUS_MOVED	deps/winhttp/winhttp.h	246;"	d
HTTP_STATUS_NONE_ACCEPTABLE	deps/winhttp/winhttp.h	258;"	d
HTTP_STATUS_NOT_FOUND	deps/winhttp/winhttp.h	256;"	d
HTTP_STATUS_NOT_MODIFIED	deps/winhttp/winhttp.h	249;"	d
HTTP_STATUS_NOT_SUPPORTED	deps/winhttp/winhttp.h	270;"	d
HTTP_STATUS_NO_CONTENT	deps/winhttp/winhttp.h	241;"	d
HTTP_STATUS_OK	deps/winhttp/winhttp.h	237;"	d
HTTP_STATUS_PARTIAL	deps/winhttp/winhttp.h	240;"	d
HTTP_STATUS_PARTIAL_CONTENT	deps/winhttp/winhttp.h	243;"	d
HTTP_STATUS_PAYMENT_REQ	deps/winhttp/winhttp.h	254;"	d
HTTP_STATUS_PRECOND_FAILED	deps/winhttp/winhttp.h	264;"	d
HTTP_STATUS_PROXY_AUTH_REQ	deps/winhttp/winhttp.h	259;"	d
HTTP_STATUS_REDIRECT	deps/winhttp/winhttp.h	247;"	d
HTTP_STATUS_REDIRECT_KEEP_VERB	deps/winhttp/winhttp.h	251;"	d
HTTP_STATUS_REDIRECT_METHOD	deps/winhttp/winhttp.h	248;"	d
HTTP_STATUS_REQUEST_TIMEOUT	deps/winhttp/winhttp.h	260;"	d
HTTP_STATUS_REQUEST_TOO_LARGE	deps/winhttp/winhttp.h	265;"	d
HTTP_STATUS_RESET_CONTENT	deps/winhttp/winhttp.h	242;"	d
HTTP_STATUS_RETRY_WITH	deps/winhttp/winhttp.h	268;"	d
HTTP_STATUS_SERVER_ERROR	deps/winhttp/winhttp.h	269;"	d
HTTP_STATUS_SERVICE_UNAVAIL	deps/winhttp/winhttp.h	272;"	d
HTTP_STATUS_SWITCH_PROTOCOLS	deps/winhttp/winhttp.h	236;"	d
HTTP_STATUS_UNSUPPORTED_MEDIA	deps/winhttp/winhttp.h	267;"	d
HTTP_STATUS_URI_TOO_LONG	deps/winhttp/winhttp.h	266;"	d
HTTP_STATUS_USE_PROXY	deps/winhttp/winhttp.h	250;"	d
HTTP_STATUS_VERSION_NOT_SUP	deps/winhttp/winhttp.h	274;"	d
HTTP_STATUS_WEBDAV_MULTI_STATUS	deps/winhttp/winhttp.h	244;"	d
HTTP_STRERROR_GEN	deps/http-parser/http_parser.c	402;"	d	file:
HTTP_STRERROR_GEN	deps/http-parser/http_parser.c	409;"	d	file:
HTTP_VERSION_INFO	deps/winhttp/winhttp.h	/^} HTTP_VERSION_INFO, *LPHTTP_VERSION_INFO;$/;"	t	typeref:struct:__anon25
ICU_BROWSER_MODE	deps/winhttp/winhttp.h	291;"	d
ICU_DECODE	deps/winhttp/winhttp.h	288;"	d
ICU_ENCODE_PERCENT	deps/winhttp/winhttp.h	292;"	d
ICU_ENCODE_SPACES_ONLY	deps/winhttp/winhttp.h	290;"	d
ICU_ESCAPE	deps/winhttp/winhttp.h	47;"	d
ICU_NO_ENCODE	deps/winhttp/winhttp.h	287;"	d
ICU_NO_META	deps/winhttp/winhttp.h	289;"	d
ID_BRANCH_A	tests/perf/merge.c	25;"	d	file:
ID_BRANCH_B	tests/perf/merge.c	26;"	d	file:
IID_IInternetSecurityManager	src/transports/winhttp.c	64;"	d	file:
IID_IInternetSecurityManager_mingw	src/transports/winhttp.c	/^static const IID IID_IInternetSecurityManager_mingw =$/;"	v	file:
IInternetSecurityManager	deps/winhttp/urlmon.h	/^struct IInternetSecurityManager$/;"	s
IInternetSecurityManager	deps/winhttp/urlmon.h	/^typedef struct IInternetSecurityManager IInternetSecurityManager;$/;"	t	typeref:struct:IInternetSecurityManager
IInternetSecurityManager::lpVtbl	deps/winhttp/urlmon.h	/^	CONST_VTBL struct IInternetSecurityManagerVtbl *lpVtbl;$/;"	m	struct:IInternetSecurityManager	typeref:struct:IInternetSecurityManager::IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl	deps/winhttp/urlmon.h	/^typedef struct IInternetSecurityManagerVtbl$/;"	s
IInternetSecurityManagerVtbl	deps/winhttp/urlmon.h	/^} IInternetSecurityManagerVtbl;$/;"	t	typeref:struct:IInternetSecurityManagerVtbl
IInternetSecurityManagerVtbl::AddRef	deps/winhttp/urlmon.h	/^	ULONG(STDMETHODCALLTYPE *AddRef)(IInternetSecurityManager *);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::GetSecurityId	deps/winhttp/urlmon.h	/^	LPVOID GetSecurityId;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::GetSecuritySite	deps/winhttp/urlmon.h	/^	LPVOID GetSecuritySite;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::GetZoneMappings	deps/winhttp/urlmon.h	/^	LPVOID GetZoneMappings;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::MapUrlToZone	deps/winhttp/urlmon.h	/^	HRESULT(STDMETHODCALLTYPE *MapUrlToZone)(IInternetSecurityManager *, LPCWSTR, DWORD *, DWORD);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::ProcessUrlAction	deps/winhttp/urlmon.h	/^	LPVOID ProcessUrlAction;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::QueryCustomPolicy	deps/winhttp/urlmon.h	/^	LPVOID QueryCustomPolicy;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::QueryInterface	deps/winhttp/urlmon.h	/^	HRESULT(STDMETHODCALLTYPE *QueryInterface)(IInternetSecurityManager *, REFIID, void **);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::Release	deps/winhttp/urlmon.h	/^	ULONG(STDMETHODCALLTYPE *Release)(IInternetSecurityManager *);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::SetSecuritySite	deps/winhttp/urlmon.h	/^	LPVOID SetSecuritySite;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
IInternetSecurityManagerVtbl::SetZoneMapping	deps/winhttp/urlmon.h	/^	LPVOID SetZoneMapping;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
INCLUDE_annotated_commit_h__	src/annotated_commit.h	8;"	d
INCLUDE_apply_h__	src/apply.h	8;"	d
INCLUDE_array_h__	src/array.h	8;"	d
INCLUDE_attr_file_h__	src/attr_file.h	8;"	d
INCLUDE_attr_h__	src/attr.h	8;"	d
INCLUDE_attrcache_h__	src/attrcache.h	8;"	d
INCLUDE_auth_negotiate_h__	src/transports/auth_negotiate.h	9;"	d
INCLUDE_bitvec_h__	src/bitvec.h	8;"	d
INCLUDE_blame_git__	src/blame_git.h	8;"	d
INCLUDE_blame_h__	src/blame.h	2;"	d
INCLUDE_blob_h__	src/blob.h	8;"	d
INCLUDE_branch_h__	src/branch.h	8;"	d
INCLUDE_buf_text_h__	src/buf_text.h	8;"	d
INCLUDE_buffer_h__	src/buffer.h	8;"	d
INCLUDE_cache_h__	src/cache.h	8;"	d
INCLUDE_checkout_h__	src/checkout.h	8;"	d
INCLUDE_cl_merge_helpers_h__	tests/merge/merge_helpers.h	2;"	d
INCLUDE_cl_push_util_h__	tests/online/push_util.h	2;"	d
INCLUDE_cl_status_helpers_h__	tests/status/status_helpers.h	2;"	d
INCLUDE_clone_h__	src/clone.h	8;"	d
INCLUDE_commit_h__	src/commit.h	8;"	d
INCLUDE_commit_list_h__	src/commit_list.h	8;"	d
INCLUDE_common_h__	src/common.h	8;"	d
INCLUDE_compat_h__	src/cc-compat.h	8;"	d
INCLUDE_config_file_h__	src/config_file.h	8;"	d
INCLUDE_config_h__	src/config.h	8;"	d
INCLUDE_curl_stream_h__	src/curl_stream.h	8;"	d
INCLUDE_diff_driver_h__	src/diff_driver.h	8;"	d
INCLUDE_diff_file_h__	src/diff_file.h	8;"	d
INCLUDE_diff_generate_h__	src/diff_generate.h	8;"	d
INCLUDE_diff_h__	src/diff.h	8;"	d
INCLUDE_diff_parse_h__	src/diff_parse.h	8;"	d
INCLUDE_diff_tform_h__	src/diff_tform.h	8;"	d
INCLUDE_diff_xdiff_h__	src/diff_xdiff.h	8;"	d
INCLUDE_dir_h__	src/win32/dir.h	8;"	d
INCLUDE_fetch_h__	src/fetch.h	8;"	d
INCLUDE_fetchhead_h__	src/fetchhead.h	8;"	d
INCLUDE_filebuf_h__	src/filebuf.h	8;"	d
INCLUDE_fileops_h__	src/fileops.h	8;"	d
INCLUDE_filter_crlf_h__	tests/filter/crlf.h	2;"	d
INCLUDE_filter_h__	src/filter.h	8;"	d
INCLUDE_fnmatch__compat_h__	src/fnmatch.h	29;"	d
INCLUDE_git_annotated_commit_h__	include/git2/annotated_commit.h	8;"	d
INCLUDE_git_attr_h__	include/git2/attr.h	8;"	d
INCLUDE_git_blame_h__	include/git2/blame.h	9;"	d
INCLUDE_git_blob_h__	include/git2/blob.h	8;"	d
INCLUDE_git_branch_h__	include/git2/branch.h	8;"	d
INCLUDE_git_buf_h__	include/git2/buffer.h	8;"	d
INCLUDE_git_checkout_h__	include/git2/checkout.h	8;"	d
INCLUDE_git_cherrypick_h__	include/git2/cherrypick.h	8;"	d
INCLUDE_git_clone_h__	include/git2/clone.h	8;"	d
INCLUDE_git_commit_h__	include/git2/commit.h	8;"	d
INCLUDE_git_common_h__	include/git2/common.h	8;"	d
INCLUDE_git_config_h__	include/git2/config.h	8;"	d
INCLUDE_git_cred_h__	src/transports/cred.h	8;"	d
INCLUDE_git_cred_helpers_h__	include/git2/cred_helpers.h	8;"	d
INCLUDE_git_delta_h__	src/delta.h	6;"	d
INCLUDE_git_describe_h__	include/git2/describe.h	8;"	d
INCLUDE_git_diff_h__	include/git2/diff.h	8;"	d
INCLUDE_git_errors_h__	include/git2/errors.h	8;"	d
INCLUDE_git_filter_h__	include/git2/filter.h	8;"	d
INCLUDE_git_findfile_h__	src/win32/findfile.h	9;"	d
INCLUDE_git_git_h__	include/git2.h	9;"	d
INCLUDE_git_global_h__	include/git2/global.h	8;"	d
INCLUDE_git_graph_h__	include/git2/graph.h	8;"	d
INCLUDE_git_ignore_h__	include/git2/ignore.h	8;"	d
INCLUDE_git_index_h__	include/git2/index.h	8;"	d
INCLUDE_git_merge_h__	include/git2/merge.h	8;"	d
INCLUDE_git_message_h__	include/git2/message.h	8;"	d
INCLUDE_git_net_h__	include/git2/net.h	8;"	d
INCLUDE_git_note_h__	include/git2/notes.h	8;"	d
INCLUDE_git_object_h__	include/git2/object.h	8;"	d
INCLUDE_git_odb_backend_h__	include/git2/odb_backend.h	8;"	d
INCLUDE_git_odb_h__	include/git2/odb.h	8;"	d
INCLUDE_git_oid_h__	include/git2/oid.h	8;"	d
INCLUDE_git_oidarray_h__	include/git2/oidarray.h	8;"	d
INCLUDE_git_openssl_h__	include/git2/sys/openssl.h	8;"	d
INCLUDE_git_pack_h__	include/git2/pack.h	8;"	d
INCLUDE_git_patch_h__	include/git2/patch.h	8;"	d
INCLUDE_git_path_w32_h__	src/win32/path_w32.h	8;"	d
INCLUDE_git_pathspec_h__	include/git2/pathspec.h	8;"	d
INCLUDE_git_proxy_h__	include/git2/proxy.h	8;"	d
INCLUDE_git_rebase_h__	include/git2/rebase.h	8;"	d
INCLUDE_git_refdb_h__	include/git2/refdb.h	8;"	d
INCLUDE_git_reflog_h__	include/git2/reflog.h	8;"	d
INCLUDE_git_refs_h__	include/git2/refs.h	8;"	d
INCLUDE_git_refspec_h__	include/git2/refspec.h	8;"	d
INCLUDE_git_remote_h__	include/git2/remote.h	8;"	d
INCLUDE_git_repository_h__	include/git2/repository.h	8;"	d
INCLUDE_git_reset_h__	include/git2/reset.h	8;"	d
INCLUDE_git_revert_h__	include/git2/revert.h	8;"	d
INCLUDE_git_revparse_h__	include/git2/revparse.h	8;"	d
INCLUDE_git_revwalk_h__	include/git2/revwalk.h	8;"	d
INCLUDE_git_signature_h__	include/git2/signature.h	8;"	d
INCLUDE_git_stash_h__	include/git2/stash.h	8;"	d
INCLUDE_git_status_h__	include/git2/status.h	8;"	d
INCLUDE_git_strarray_h__	include/git2/strarray.h	8;"	d
INCLUDE_git_submodule_h__	include/git2/submodule.h	8;"	d
INCLUDE_git_tag_h__	include/git2/tag.h	8;"	d
INCLUDE_git_time_h__	include/git2/sys/time.h	8;"	d
INCLUDE_git_trace_h__	include/git2/trace.h	8;"	d
INCLUDE_git_transaction_h__	include/git2/transaction.h	8;"	d
INCLUDE_git_transport_h__	include/git2/transport.h	8;"	d
INCLUDE_git_tree_h__	include/git2/tree.h	8;"	d
INCLUDE_git_types_h__	include/git2/types.h	8;"	d
INCLUDE_git_utfconv_h__	src/win32/utf-conv.h	8;"	d
INCLUDE_git_version_h__	include/git2/version.h	8;"	d
INCLUDE_git_win32_buffer_h__	src/win32/w32_buffer.h	8;"	d
INCLUDE_git_win32_error_h__	src/win32/error.h	9;"	d
INCLUDE_git_win32_reparse_h__	src/win32/reparse.h	9;"	d
INCLUDE_global_h__	src/global.h	8;"	d
INCLUDE_hash_common_crypto_h__	src/hash/hash_common_crypto.h	9;"	d
INCLUDE_hash_generic_h__	src/hash/hash_generic.h	9;"	d
INCLUDE_hash_h__	src/hash.h	8;"	d
INCLUDE_hash_openssl_h__	src/hash/hash_openssl.h	9;"	d
INCLUDE_hash_win32_h__	src/hash/hash_win32.h	9;"	d
INCLUDE_http_auth_h__	src/transports/auth.h	9;"	d
INCLUDE_idxmap_h__	src/idxmap.h	8;"	d
INCLUDE_ignore_h__	src/ignore.h	8;"	d
INCLUDE_index_h__	src/index.h	8;"	d
INCLUDE_integer_h__	src/integer.h	8;"	d
INCLUDE_iterator_h__	src/iterator.h	8;"	d
INCLUDE_map_h__	src/map.h	8;"	d
INCLUDE_merge_driver_h__	src/merge_driver.h	8;"	d
INCLUDE_merge_h__	src/merge.h	8;"	d
INCLUDE_message_h__	src/message.h	8;"	d
INCLUDE_mingw_compat__	src/win32/mingw-compat.h	8;"	d
INCLUDE_msvc_compat__	src/win32/msvc-compat.h	8;"	d
INCLUDE_mwindow__	src/mwindow.h	9;"	d
INCLUDE_netops_h__	src/netops.h	8;"	d
INCLUDE_note_h__	src/notes.h	8;"	d
INCLUDE_object_h__	src/object.h	8;"	d
INCLUDE_odb_h__	src/odb.h	8;"	d
INCLUDE_offmap_h__	src/offmap.h	8;"	d
INCLUDE_oid_h__	src/oid.h	8;"	d
INCLUDE_oidarray_h__	src/oidarray.h	8;"	d
INCLUDE_oidmap_h__	src/oidmap.h	8;"	d
INCLUDE_openssl_stream_h__	src/openssl_stream.h	8;"	d
INCLUDE_pack_h__	src/pack.h	9;"	d
INCLUDE_pack_objects_h__	src/pack-objects.h	9;"	d
INCLUDE_patch_generate_h__	src/patch_generate.h	8;"	d
INCLUDE_patch_h__	src/patch.h	8;"	d
INCLUDE_patch_parse_h__	src/patch_parse.h	8;"	d
INCLUDE_path_h__	src/path.h	8;"	d
INCLUDE_pathspec_h__	src/pathspec.h	8;"	d
INCLUDE_pool_h__	src/pool.h	8;"	d
INCLUDE_posix__unix_h__	src/unix/posix.h	8;"	d
INCLUDE_posix__w32_h__	src/win32/posix.h	8;"	d
INCLUDE_posix_h__	src/posix.h	8;"	d
INCLUDE_pqueue_h__	src/pqueue.h	8;"	d
INCLUDE_proxy_h__	src/proxy.h	8;"	d
INCLUDE_push_h__	src/push.h	8;"	d
INCLUDE_refdb_fs_h__	src/refdb_fs.h	8;"	d
INCLUDE_refdb_h__	src/refdb.h	8;"	d
INCLUDE_reflog_h__	src/reflog.h	8;"	d
INCLUDE_refs_h__	src/refs.h	8;"	d
INCLUDE_refspec_h__	src/refspec.h	8;"	d
INCLUDE_remote_h__	src/remote.h	8;"	d
INCLUDE_repo_template_h__	src/repo_template.h	8;"	d
INCLUDE_repository_h__	src/repository.h	8;"	d
INCLUDE_revwalk_h__	src/revwalk.h	8;"	d
INCLUDE_sha1_lookup_h__	src/sha1_lookup.h	8;"	d
INCLUDE_signature_h__	src/signature.h	8;"	d
INCLUDE_socket_stream_h__	src/socket_stream.h	8;"	d
INCLUDE_sorted_cache_h__	src/sortedcache.h	8;"	d
INCLUDE_ssh_h__	src/transports/ssh.h	8;"	d
INCLUDE_status_h__	src/status.h	8;"	d
INCLUDE_stransport_stream_h__	src/stransport_stream.h	8;"	d
INCLUDE_stream_h__	src/stream.h	8;"	d
INCLUDE_strlen_h__	src/strnlen.h	8;"	d
INCLUDE_strmap_h__	src/strmap.h	8;"	d
INCLUDE_submodule_h__	src/submodule.h	8;"	d
INCLUDE_sys_git_commit_h__	include/git2/sys/commit.h	8;"	d
INCLUDE_sys_git_config_backend_h__	include/git2/sys/config.h	8;"	d
INCLUDE_sys_git_diff_h__	include/git2/sys/diff.h	8;"	d
INCLUDE_sys_git_filter_h__	include/git2/sys/filter.h	8;"	d
INCLUDE_sys_git_index_h__	include/git2/sys/index.h	8;"	d
INCLUDE_sys_git_merge_h__	include/git2/sys/merge.h	8;"	d
INCLUDE_sys_git_odb_backend_h__	include/git2/sys/odb_backend.h	8;"	d
INCLUDE_sys_git_odb_mempack_h__	include/git2/sys/mempack.h	8;"	d
INCLUDE_sys_git_refdb_backend_h__	include/git2/sys/refdb_backend.h	8;"	d
INCLUDE_sys_git_refdb_h__	include/git2/sys/refs.h	8;"	d
INCLUDE_sys_git_reflog_h__	include/git2/sys/reflog.h	8;"	d
INCLUDE_sys_git_repository_h__	include/git2/sys/repository.h	8;"	d
INCLUDE_sys_git_stream_h__	include/git2/sys/stream.h	8;"	d
INCLUDE_sys_git_transport_h	include/git2/sys/remote.h	9;"	d
INCLUDE_sys_git_transport_h	include/git2/sys/transport.h	9;"	d
INCLUDE_sys_hashsig_h__	include/git2/sys/hashsig.h	8;"	d
INCLUDE_sysdir_h__	src/sysdir.h	8;"	d
INCLUDE_tag_h__	src/tag.h	8;"	d
INCLUDE_thread_utils_h__	src/thread-utils.h	8;"	d
INCLUDE_tls_stream_h__	src/tls_stream.h	8;"	d
INCLUDE_trace_h__	src/trace.h	8;"	d
INCLUDE_transaction_h__	src/transaction.h	8;"	d
INCLUDE_tree_cache_h__	src/tree-cache.h	9;"	d
INCLUDE_tree_h__	src/tree.h	8;"	d
INCLUDE_unix_pthread_h__	src/unix/pthread.h	9;"	d
INCLUDE_userdiff_h__	src/userdiff.h	8;"	d
INCLUDE_util_h__	src/util.h	8;"	d
INCLUDE_varint_h__	src/varint.h	8;"	d
INCLUDE_vector_h__	src/vector.h	8;"	d
INCLUDE_w32_crtdbg_stacktrace_h__	src/win32/w32_crtdbg_stacktrace.h	8;"	d
INCLUDE_w32_stack_h__	src/win32/w32_stack.h	9;"	d
INCLUDE_w32_util_h__	src/win32/w32_util.h	9;"	d
INCLUDE_win32_compat__	src/win32/win32-compat.h	8;"	d
INCLUDE_win32_thread_h__	src/win32/thread.h	9;"	d
INCLUDE_win32_version_h__	src/win32/version.h	8;"	d
INCLUDE_zstream_h__	src/zstream.h	8;"	d
INDEX_ACTION_ADDALL	src/index.c	/^	INDEX_ACTION_ADDALL = 3,$/;"	e	enum:__anon210	file:
INDEX_ACTION_NONE	src/index.c	/^	INDEX_ACTION_NONE = 0,$/;"	e	enum:__anon210	file:
INDEX_ACTION_REMOVE	src/index.c	/^	INDEX_ACTION_REMOVE = 2,$/;"	e	enum:__anon210	file:
INDEX_ACTION_UPDATE	src/index.c	/^	INDEX_ACTION_UPDATE = 1,$/;"	e	enum:__anon210	file:
INDEX_EXT_CONFLICT_NAME_SIG	src/index.c	/^static const char INDEX_EXT_CONFLICT_NAME_SIG[] = {'N', 'A', 'M', 'E'};$/;"	v	file:
INDEX_EXT_TREECACHE_SIG	src/index.c	/^static const char INDEX_EXT_TREECACHE_SIG[] = {'T', 'R', 'E', 'E'};$/;"	v	file:
INDEX_EXT_UNMERGED_SIG	src/index.c	/^static const char INDEX_EXT_UNMERGED_SIG[] = {'R', 'E', 'U', 'C'};$/;"	v	file:
INDEX_FOOTER_SIZE	src/index.c	/^static const size_t INDEX_FOOTER_SIZE = GIT_OID_RAWSZ;$/;"	v	file:
INDEX_HEADER_SIG	src/index.c	/^static const unsigned int INDEX_HEADER_SIG = 0x44495243;$/;"	v	file:
INDEX_HEADER_SIZE	src/index.c	/^static const size_t INDEX_HEADER_SIZE = 12;$/;"	v	file:
INDEX_OWNER	src/index.c	80;"	d	file:
INDEX_VERSION_NUMBER_COMP	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER_COMP = 4;$/;"	v	file:
INDEX_VERSION_NUMBER_DEFAULT	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER_DEFAULT = 2;$/;"	v	file:
INDEX_VERSION_NUMBER_EXT	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER_EXT = 3;$/;"	v	file:
INDEX_VERSION_NUMBER_LB	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER_LB = 2;$/;"	v	file:
INDEX_VERSION_NUMBER_UB	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER_UB = 4;$/;"	v	file:
INFLATE_EXTRA	tests/core/zstream.c	7;"	d	file:
INITBITS	deps/zlib/infback.c	150;"	d	file:
INITBITS	deps/zlib/inflate.c	481;"	d	file:
INIT_STATE	deps/zlib/deflate.h	54;"	d
INSERT_IN_MAP	src/index.c	40;"	d	file:
INSERT_IN_MAP_EX	src/index.c	33;"	d	file:
INSERT_STRING	deps/zlib/deflate.c	181;"	d	file:
INSERT_STRING	deps/zlib/deflate.c	186;"	d	file:
INSIDE_NOTWORD	deps/regex/regex_internal.h	/^  INSIDE_NOTWORD = PREV_NOTWORD_CONSTRAINT | NEXT_NOTWORD_CONSTRAINT,$/;"	e	enum:__anon3
INSIDE_WORD	deps/regex/regex_internal.h	/^  INSIDE_WORD = PREV_WORD_CONSTRAINT | NEXT_WORD_CONSTRAINT,$/;"	e	enum:__anon3
INT16_C	include/git2/stdint.h	231;"	d
INT16_MAX	include/git2/stdint.h	135;"	d
INT16_MIN	include/git2/stdint.h	134;"	d
INT32_C	include/git2/stdint.h	232;"	d
INT32_MAX	include/git2/stdint.h	137;"	d
INT32_MIN	include/git2/stdint.h	136;"	d
INT64_C	include/git2/stdint.h	233;"	d
INT64_MAX	include/git2/stdint.h	139;"	d
INT64_MIN	include/git2/stdint.h	138;"	d
INT8_C	include/git2/stdint.h	230;"	d
INT8_MAX	include/git2/stdint.h	133;"	d
INT8_MIN	include/git2/stdint.h	132;"	d
INTERNET_DEFAULT_HTTPS_PORT	deps/winhttp/winhttp.h	39;"	d
INTERNET_DEFAULT_HTTP_PORT	deps/winhttp/winhttp.h	38;"	d
INTERNET_DEFAULT_PORT	deps/winhttp/winhttp.h	37;"	d
INTERNET_PORT	deps/winhttp/winhttp.h	/^typedef WORD INTERNET_PORT;$/;"	t
INTERNET_SCHEME	deps/winhttp/winhttp.h	/^typedef int INTERNET_SCHEME, *LPINTERNET_SCHEME;$/;"	t
INTERNET_SCHEME_HTTP	deps/winhttp/winhttp.h	43;"	d
INTERNET_SCHEME_HTTPS	deps/winhttp/winhttp.h	44;"	d
INTMAX_C	include/git2/stdint.h	241;"	d
INTMAX_MAX	include/git2/stdint.h	186;"	d
INTMAX_MIN	include/git2/stdint.h	185;"	d
INTPTR_MAX	include/git2/stdint.h	176;"	d
INTPTR_MAX	include/git2/stdint.h	180;"	d
INTPTR_MIN	include/git2/stdint.h	175;"	d
INTPTR_MIN	include/git2/stdint.h	179;"	d
INT_FAST16_MAX	include/git2/stdint.h	163;"	d
INT_FAST16_MIN	include/git2/stdint.h	162;"	d
INT_FAST32_MAX	include/git2/stdint.h	165;"	d
INT_FAST32_MIN	include/git2/stdint.h	164;"	d
INT_FAST64_MAX	include/git2/stdint.h	167;"	d
INT_FAST64_MIN	include/git2/stdint.h	166;"	d
INT_FAST8_MAX	include/git2/stdint.h	161;"	d
INT_FAST8_MIN	include/git2/stdint.h	160;"	d
INT_LEAST16_MAX	include/git2/stdint.h	149;"	d
INT_LEAST16_MIN	include/git2/stdint.h	148;"	d
INT_LEAST32_MAX	include/git2/stdint.h	151;"	d
INT_LEAST32_MIN	include/git2/stdint.h	150;"	d
INT_LEAST64_MAX	include/git2/stdint.h	153;"	d
INT_LEAST64_MIN	include/git2/stdint.h	152;"	d
INT_LEAST8_MAX	include/git2/stdint.h	147;"	d
INT_LEAST8_MIN	include/git2/stdint.h	146;"	d
INVALID	src/hash/hash_win32.h	/^	INVALID = 0,$/;"	e	enum:hash_win32_prov_type
INVALID_SOCKET	src/unix/posix.h	17;"	d
IO_REPARSE_TAG_SYMLINK	src/win32/posix_w32.c	26;"	d	file:
IPATTERN	src/userdiff.h	203;"	d
IPATTERN	src/userdiff.h	31;"	d
IPos	deps/zlib/deflate.h	/^typedef unsigned IPos;$/;"	t
IS_ALPHA	deps/http-parser/http_parser.c	359;"	d	file:
IS_ALPHANUM	deps/http-parser/http_parser.c	361;"	d	file:
IS_BEGBUF_CONTEXT	deps/regex/regex_internal.h	521;"	d
IS_BIT_SET	src/win32/w32_crtdbg_stacktrace.c	248;"	d	file:
IS_ENDBUF_CONTEXT	deps/regex/regex_internal.h	522;"	d
IS_EPSILON_NODE	deps/regex/regex_internal.h	361;"	d
IS_HEX	deps/http-parser/http_parser.c	362;"	d	file:
IS_HOST_CHAR	deps/http-parser/http_parser.c	373;"	d	file:
IS_HOST_CHAR	deps/http-parser/http_parser.c	378;"	d	file:
IS_MARK	deps/http-parser/http_parser.c	363;"	d	file:
IS_NEWLINE	deps/regex/regex_internal.h	526;"	d
IS_NEWLINE_CONTEXT	deps/regex/regex_internal.h	520;"	d
IS_NUM	deps/http-parser/http_parser.c	360;"	d	file:
IS_ORDINARY_CONTEXT	deps/regex/regex_internal.h	523;"	d
IS_URL_CHAR	deps/http-parser/http_parser.c	372;"	d	file:
IS_URL_CHAR	deps/http-parser/http_parser.c	376;"	d	file:
IS_USERINFO_CHAR	deps/http-parser/http_parser.c	366;"	d	file:
IS_WIDE_NEWLINE	deps/regex/regex_internal.h	528;"	d
IS_WIDE_WORD_CHAR	deps/regex/regex_internal.h	527;"	d
IS_WORD_CHAR	deps/regex/regex_internal.h	525;"	d
IS_WORD_CONTEXT	deps/regex/regex_internal.h	519;"	d
ITERATOR_PATHLIST_FULL	src/iterator.c	/^	ITERATOR_PATHLIST_FULL = 4,$/;"	e	enum:__anon265	file:
ITERATOR_PATHLIST_IS_DIR	src/iterator.c	/^	ITERATOR_PATHLIST_IS_DIR = 2,$/;"	e	enum:__anon265	file:
ITERATOR_PATHLIST_IS_FILE	src/iterator.c	/^	ITERATOR_PATHLIST_IS_FILE = 1,$/;"	e	enum:__anon265	file:
ITERATOR_PATHLIST_IS_PARENT	src/iterator.c	/^	ITERATOR_PATHLIST_IS_PARENT = 3,$/;"	e	enum:__anon265	file:
ITERATOR_PATHLIST_NONE	src/iterator.c	/^	ITERATOR_PATHLIST_NONE = 0,$/;"	e	enum:__anon265	file:
InfoTemplate	tests/generate.py	/^    class InfoTemplate(Template):$/;"	c	class:Module	inherits:Template
KEEP_ALIVE	deps/http-parser/http_parser.c	126;"	d	file:
KHASH_DECLARE	src/khash.h	352;"	d
KHASH_INIT	src/khash.h	360;"	d
KHASH_INIT2	src/khash.h	356;"	d
KHASH_MAP_INIT_INT	src/khash.h	588;"	d
KHASH_MAP_INIT_INT64	src/khash.h	603;"	d
KHASH_MAP_INIT_STR	src/khash.h	619;"	d
KHASH_SET_INIT_INT	src/khash.h	580;"	d
KHASH_SET_INIT_INT64	src/khash.h	595;"	d
KHASH_SET_INIT_STR	src/khash.h	611;"	d
KNOWN_COMMIT_IN_ATTR_REPO	tests/reset/reset_helpers.h	4;"	d
KNOWN_COMMIT_IN_BARE_REPO	tests/reset/reset_helpers.h	3;"	d
LEN	deps/zlib/inflate.h	/^            LEN,        \/* i: waiting for length\/lit\/eob code *\/$/;"	e	enum:__anon28
LENEXT	deps/zlib/inflate.h	/^            LENEXT,     \/* i: waiting for length extra bits *\/$/;"	e	enum:__anon28
LENGTH	deps/zlib/inflate.h	/^    LENGTH,     \/* i: waiting for 32-bit length (gzip) *\/$/;"	e	enum:__anon28
LENGTH_CODES	deps/zlib/deflate.h	30;"	d
LENLENS	deps/zlib/inflate.h	/^        LENLENS,    \/* i: waiting for code length code lengths *\/$/;"	e	enum:__anon28
LENS	deps/zlib/inftrees.h	/^    LENS,$/;"	e	enum:__anon32
LEN_	deps/zlib/inflate.h	/^            LEN_,       \/* i: same as LEN below, but only first time in *\/$/;"	e	enum:__anon28
LF	deps/http-parser/http_parser.c	357;"	d	file:
LFLAGS	examples/Makefile	/^LFLAGS = -L..\/build -lgit2 -lz$/;"	m
LIBGIT2_SOVERSION	include/git2/version.h	16;"	d
LIBGIT2_VERSION	include/git2/version.h	10;"	d
LIBGIT2_VER_MAJOR	include/git2/version.h	11;"	d
LIBGIT2_VER_MINOR	include/git2/version.h	12;"	d
LIBGIT2_VER_PATCH	include/git2/version.h	14;"	d
LIBGIT2_VER_REVISION	include/git2/version.h	13;"	d
LIBSSH2_SESSION	include/git2/transport.h	/^typedef struct _LIBSSH2_SESSION LIBSSH2_SESSION;$/;"	t	typeref:struct:_LIBSSH2_SESSION
LIBSSH2_USERAUTH_KBDINT_PROMPT	include/git2/transport.h	/^typedef struct _LIBSSH2_USERAUTH_KBDINT_PROMPT LIBSSH2_USERAUTH_KBDINT_PROMPT;$/;"	t	typeref:struct:_LIBSSH2_USERAUTH_KBDINT_PROMPT
LIBSSH2_USERAUTH_KBDINT_RESPONSE	include/git2/transport.h	/^typedef struct _LIBSSH2_USERAUTH_KBDINT_RESPONSE LIBSSH2_USERAUTH_KBDINT_RESPONSE;$/;"	t	typeref:struct:_LIBSSH2_USERAUTH_KBDINT_RESPONSE
LINE_END	src/xdiff/xhistogram.c	52;"	d	file:
LINE_END_PTR	src/xdiff/xhistogram.c	53;"	d	file:
LINE_FIRST	deps/regex/regex_internal.h	/^  LINE_FIRST = PREV_NEWLINE_CONSTRAINT,$/;"	e	enum:__anon3
LINE_LAST	deps/regex/regex_internal.h	/^  LINE_LAST = NEXT_NEWLINE_CONSTRAINT,$/;"	e	enum:__anon3
LINE_MAP	src/xdiff/xhistogram.c	83;"	d	file:
LINK_ANCESTOR_OID	tests/checkout/conflict.c	19;"	d	file:
LINK_ANCESTOR_TARGET	tests/checkout/conflict.c	23;"	d	file:
LINK_OURS_OID	tests/checkout/conflict.c	20;"	d	file:
LINK_OURS_TARGET	tests/checkout/conflict.c	24;"	d	file:
LINK_THEIRS_OID	tests/checkout/conflict.c	21;"	d	file:
LINK_THEIRS_TARGET	tests/checkout/conflict.c	25;"	d	file:
LIT	deps/zlib/inflate.h	/^            LIT,        \/* o: waiting for output space to write literal *\/$/;"	e	enum:__anon28
LITERALS	deps/zlib/deflate.h	33;"	d
LIVE_EMPTYREPO_URL	tests/online/clone.c	10;"	d	file:
LIVE_REPO_URL	tests/clone/nonetwork.c	10;"	d	file:
LIVE_REPO_URL	tests/online/clone.c	9;"	d	file:
LIVE_REPO_URL	tests/online/fetchhead.c	8;"	d	file:
LOAD	deps/zlib/infback.c	128;"	d	file:
LOAD	deps/zlib/inflate.c	459;"	d	file:
LOOKS_LIKE_DRIVE_PREFIX	src/path.c	22;"	d	file:
LOOKUP_IN_MAP	src/index.c	42;"	d	file:
LOOSE_FN	tests/odb/freshen.c	22;"	d	file:
LOOSE_ID	tests/odb/freshen.c	21;"	d	file:
LOOSE_STR	tests/odb/freshen.c	20;"	d	file:
LOWER	deps/http-parser/http_parser.c	358;"	d	file:
LPHINTERNET	deps/winhttp/winhttp.h	/^typedef HINTERNET *LPHINTERNET;$/;"	t
LPHTTP_VERSION_INFO	deps/winhttp/winhttp.h	/^} HTTP_VERSION_INFO, *LPHTTP_VERSION_INFO;$/;"	t	typeref:struct:__anon25
LPINTERNET_PORT	deps/winhttp/winhttp.h	/^typedef INTERNET_PORT *LPINTERNET_PORT;$/;"	t
LPINTERNET_SCHEME	deps/winhttp/winhttp.h	/^typedef int INTERNET_SCHEME, *LPINTERNET_SCHEME;$/;"	t
LPURL_COMPONENTS	deps/winhttp/winhttp.h	/^} URL_COMPONENTS, *LPURL_COMPONENTS;$/;"	t	typeref:struct:__anon19
LPURL_COMPONENTSW	deps/winhttp/winhttp.h	/^typedef LPURL_COMPONENTS LPURL_COMPONENTSW;$/;"	t
LPWINHTTP_ASYNC_RESULT	deps/winhttp/winhttp.h	/^} WINHTTP_ASYNC_RESULT, *LPWINHTTP_ASYNC_RESULT;$/;"	t	typeref:struct:__anon20
LPWINHTTP_PROXY_INFO	deps/winhttp/winhttp.h	/^} WINHTTP_PROXY_INFO, *LPWINHTTP_PROXY_INFO;$/;"	t	typeref:struct:__anon22
LPWINHTTP_PROXY_INFOW	deps/winhttp/winhttp.h	/^typedef LPWINHTTP_PROXY_INFO LPWINHTTP_PROXY_INFOW;$/;"	t
L_CODES	deps/zlib/deflate.h	36;"	d
Len	deps/zlib/deflate.h	79;"	d
LocalAddress	deps/winhttp/winhttp.h	/^    SOCKADDR_STORAGE LocalAddress;$/;"	m	struct:__anon26	access:public
M	examples/blame.c	/^	int M;$/;"	m	struct:opts	file:	access:public
MANY_UTF8_CRLF_RAW	tests/filter/crlf.h	27;"	d
MANY_UTF8_LF_RAW	tests/filter/crlf.h	28;"	d
MAP_FAILED	src/map.h	27;"	d
MARK	deps/http-parser/http_parser.c	112;"	d	file:
MATCH	deps/zlib/inflate.h	/^            MATCH,      \/* o: waiting for output space to copy string *\/$/;"	e	enum:__anon28
MAX	deps/regex/regex_internal.c	/^MAX(size_t a, size_t b)$/;"	f	file:	signature:(size_t a, size_t b)
MAX	deps/regex/regex_internal.c	34;"	d	file:
MAX	src/tsort.c	19;"	d	file:
MAXBITS	deps/zlib/inftrees.c	9;"	d	file:
MAX_BITS	deps/zlib/deflate.h	48;"	d
MAX_BL_BITS	deps/zlib/trees.c	47;"	d	file:
MAX_CANDIDATES_TAGS	src/describe.c	422;"	d	file:
MAX_CNT	src/xdiff/xhistogram.c	50;"	d	file:
MAX_CONTENT_TYPE_LEN	src/transports/winhttp.c	30;"	d	file:
MAX_DIST	deps/zlib/deflate.h	286;"	d
MAX_FILEMODE_BYTES	src/tree.c	18;"	d	file:
MAX_INCLUDE_DEPTH	src/config_file.c	39;"	d	file:
MAX_MATCH	deps/zlib/zutil.h	76;"	d
MAX_MEM_LEVEL	deps/zlib/zconf.h	21;"	d
MAX_NESTING_LEVEL	src/refdb_fs.c	32;"	d	file:
MAX_NESTING_LEVEL	src/refs.c	30;"	d	file:
MAX_OIDS	tests/object/raw/short.c	116;"	d	file:
MAX_OIDS	tests/object/raw/short.c	123;"	d	file:
MAX_OIDS	tests/object/raw/short.c	136;"	d	file:
MAX_OIDS	tests/object/raw/short.c	68;"	d	file:
MAX_OP_SIZE	src/delta.c	268;"	d	file:
MAX_PATHSPEC	examples/status.c	50;"	d	file:
MAX_PTR	deps/zlib/zutil.c	199;"	d	file:
MAX_PTR	src/xdiff/xhistogram.c	49;"	d	file:
MAX_SHUTDOWN_CB	src/global.c	25;"	d	file:
MAX_SYMLINK_DEPTH	src/filebuf.c	199;"	d	file:
MAX_USED_TAGS	tests/object/tag/list.c	7;"	d	file:
MAX_WBITS	deps/zlib/zconf.h	28;"	d
MB_CHAR	deps/regex/regex_internal.h	/^  MB_CHAR,$/;"	e	enum:__anon14
MB_CUR_MAX	deps/regex/regex_internal.h	123;"	d
MEM	deps/zlib/inflate.h	/^    MEM,        \/* got an inflate() memory error -- remain here until reset *\/$/;"	e	enum:__anon28
MERGE_BRANCH_OID	tests/merge/workdir/dirty.c	10;"	d	file:
MESSAGE	tests/stash/save.c	191;"	d	file:
MESSAGES_COUNT	tests/notes/notes.c	254;"	d	file:
MIN	deps/http-parser/http_parser.c	37;"	d	file:
MIN	src/tsort.c	23;"	d	file:
MIN_ALLOCSIZE	src/vector.c	13;"	d	file:
MIN_LOOKAHEAD	deps/zlib/deflate.h	281;"	d
MIN_MATCH	deps/zlib/zutil.h	75;"	d
MIN_PROGRESS_UPDATE_INTERVAL	src/pack-objects.c	66;"	d	file:
MIN_PROGRESS_UPDATE_INTERVAL	src/transports/smart_protocol.c	20;"	d	file:
MKDIR_NORMAL	src/checkout.c	1379;"	d	file:
MKDIR_REMOVE_EXISTING	src/checkout.c	1381;"	d	file:
MOD	deps/zlib/adler32.c	40;"	d	file:
MOD	deps/zlib/adler32.c	59;"	d	file:
MOD28	deps/zlib/adler32.c	35;"	d	file:
MOD28	deps/zlib/adler32.c	60;"	d	file:
MOD63	deps/zlib/adler32.c	45;"	d	file:
MOD63	deps/zlib/adler32.c	61;"	d	file:
MODE_BITS_MASK	src/diff_generate.c	675;"	d	file:
MORE_CRLF_TEXT_AS_CRLF	tests/filter/crlf.h	17;"	d
MORE_CRLF_TEXT_AS_LF	tests/filter/crlf.h	22;"	d
MORE_CRLF_TEXT_RAW	tests/filter/crlf.h	12;"	d
MORE_LF_TEXT_AS_CRLF	tests/filter/crlf.h	18;"	d
MORE_LF_TEXT_AS_LF	tests/filter/crlf.h	23;"	d
MORE_LF_TEXT_RAW	tests/filter/crlf.h	13;"	d
MSB	src/util.h	49;"	d
MSGNUM_FILE	src/rebase.c	37;"	d	file:
MURMUR_BLOCK	src/util.c	434;"	d	file:
MY_MAX_FILENAME	src/win32/w32_stack.c	87;"	d	file:
MY_ROW_LIMIT	src/win32/w32_crtdbg_stacktrace.c	59;"	d	file:
MY_ZCALLOC	deps/zlib/zutil.c	191;"	d	file:
MY_ZCALLOC	deps/zlib/zutil.c	269;"	d	file:
MapUrlToZone	deps/winhttp/urlmon.h	/^	HRESULT(STDMETHODCALLTYPE *MapUrlToZone)(IInternetSecurityManager *, LPCWSTR, DWORD *, DWORD);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
MemoryBarrier	src/win32/mingw-compat.h	15;"	d
MemoryBarrier	src/win32/mingw-compat.h	17;"	d
Module	tests/generate.py	/^class Module(object):$/;"	c	inherits:object
MountPointReparseBuffer	src/win32/reparse.h	/^		} MountPointReparseBuffer;$/;"	m	union:_GIT_REPARSE_DATA_BUFFER::__anon280	typeref:struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
NAME	deps/zlib/inflate.h	/^    NAME,       \/* i: waiting for end of file name (gzip) *\/$/;"	e	enum:__anon28
NAME_STATE	deps/zlib/deflate.h	56;"	d
NEEDBITS	deps/zlib/infback.c	183;"	d	file:
NEEDBITS	deps/zlib/inflate.c	499;"	d	file:
NETIO_BUFSIZE	src/common.h	85;"	d
NETWORK_XFER_THRESHOLD	src/transports/smart_protocol.c	18;"	d	file:
NEWLINE	tests/filter/custom.c	17;"	d	file:
NEWLINE	tests/filter/custom.c	19;"	d	file:
NEWLINE_CHAR	deps/regex/regex_internal.h	146;"	d
NEW_BRANCH_NAME	tests/refs/branches/create.c	42;"	d	file:
NEW_BRANCH_NAME	tests/refs/branches/move.c	17;"	d	file:
NEW_MESSAGE	deps/http-parser/http_parser.c	394;"	d	file:
NEW_MESSAGE	deps/http-parser/http_parser.c	397;"	d	file:
NEXT_ENDBUF_CONSTRAINT	deps/regex/regex_internal.h	208;"	d
NEXT_NEWLINE_CONSTRAINT	deps/regex/regex_internal.h	206;"	d
NEXT_NOTWORD_CONSTRAINT	deps/regex/regex_internal.h	204;"	d
NEXT_PTR	src/xdiff/xhistogram.c	85;"	d	file:
NEXT_WORD_CONSTRAINT	deps/regex/regex_internal.h	203;"	d
NIL	deps/zlib/deflate.c	104;"	d	file:
NITEMS	tests/core/oidmap.c	11;"	d	file:
NMAX	deps/zlib/adler32.c	15;"	d	file:
NOFASTFORWARD_BRANCH	tests/merge/workdir/analysis.c	23;"	d	file:
NOFASTFORWARD_ID	tests/merge/workdir/analysis.c	24;"	d	file:
NONE	src/transports/http.c	/^	NONE,$/;"	e	enum:last_cb	file:
NON_EXISTING_FILEPATH	tests/core/path.c	489;"	d	file:
NON_EXISTING_HEAD	tests/repo/repo_helpers.h	3;"	d
NON_TYPE	deps/regex/regex_internal.h	/^  NON_TYPE = 0,$/;"	e	enum:__anon5
NON_UNIQUE	src/xdiff/xpatience.c	43;"	d	file:
NOTES_DEFAULT_REF	src/rebase.c	45;"	d	file:
NOTIFY_PROGRESS	src/stash.c	757;"	d	file:
NOT_SATISFY_NEXT_CONSTRAINT	deps/regex/regex_internal.h	536;"	d
NOT_SATISFY_PREV_CONSTRAINT	deps/regex/regex_internal.h	530;"	d
NOT_WORD_DELIM	deps/regex/regex_internal.h	/^  NOT_WORD_DELIM = NOT_WORD_DELIM_CONSTRAINT$/;"	e	enum:__anon3
NOT_WORD_DELIM_CONSTRAINT	deps/regex/regex_internal.h	210;"	d
NO_MBSUPPORT	deps/regex/config.h	5;"	d
NO_MEMCPY	deps/zlib/zutil.h	190;"	d
NO_MEMCPY	deps/zlib/zutil.h	197;"	d
NO_STRNLEN	src/strnlen.h	12;"	d
NREFS	tests/threads/refdb.c	28;"	d	file:
NUM_VARS	tests/core/env.c	12;"	d	file:
NUM_VARS	tests/core/env.c	7;"	d	file:
OBJECTS	examples/network/Makefile	/^OBJECTS = \\$/;"	m
OCTO1_BRANCH	tests/merge/workdir/setup.c	19;"	d	file:
OCTO1_OID	tests/merge/workdir/setup.c	20;"	d	file:
OCTO2_BRANCH	tests/merge/workdir/setup.c	22;"	d	file:
OCTO2_OID	tests/merge/workdir/setup.c	23;"	d	file:
OCTO3_BRANCH	tests/merge/workdir/setup.c	25;"	d	file:
OCTO3_OID	tests/merge/workdir/setup.c	26;"	d	file:
OCTO4_BRANCH	tests/merge/workdir/setup.c	28;"	d	file:
OCTO4_OID	tests/merge/workdir/setup.c	29;"	d	file:
OCTO5_BRANCH	tests/merge/workdir/setup.c	31;"	d	file:
OCTO5_OID	tests/merge/workdir/setup.c	32;"	d	file:
OF	deps/zlib/zconf.h	36;"	d
OFF	deps/zlib/inffast.c	25;"	d	file:
OFF	deps/zlib/inffast.c	28;"	d	file:
OID_ZERO	tests/online/push_util.c	/^const git_oid OID_ZERO = {{ 0 }};$/;"	v
OID_ZERO	tests/online/push_util.h	/^extern const git_oid OID_ZERO;$/;"	x
ONE_ANCESTOR_OID	tests/index/reuc.c	13;"	d	file:
ONE_LEVEL_AND_REFSPEC	tests/refs/normalize.c	351;"	d	file:
ONE_OUR_OID	tests/index/reuc.c	14;"	d	file:
ONE_THEIR_OID	tests/index/reuc.c	15;"	d	file:
ONTO_FILE	src/rebase.c	33;"	d	file:
ONTO_NAME_FILE	src/rebase.c	34;"	d	file:
OP_ALT	deps/regex/regex_internal.h	/^  OP_ALT = EPSILON_BIT | 2,$/;"	e	enum:__anon5
OP_BACK_REF	deps/regex/regex_internal.h	/^  OP_BACK_REF = 4,$/;"	e	enum:__anon5
OP_CHARSET_RANGE	deps/regex/regex_internal.h	/^  OP_CHARSET_RANGE,$/;"	e	enum:__anon5
OP_CLOSE_BRACKET	deps/regex/regex_internal.h	/^  OP_CLOSE_BRACKET,$/;"	e	enum:__anon5
OP_CLOSE_CHAR_CLASS	deps/regex/regex_internal.h	/^  OP_CLOSE_CHAR_CLASS,$/;"	e	enum:__anon5
OP_CLOSE_COLL_ELEM	deps/regex/regex_internal.h	/^  OP_CLOSE_COLL_ELEM,$/;"	e	enum:__anon5
OP_CLOSE_DUP_NUM	deps/regex/regex_internal.h	/^  OP_CLOSE_DUP_NUM,$/;"	e	enum:__anon5
OP_CLOSE_EQUIV_CLASS	deps/regex/regex_internal.h	/^  OP_CLOSE_EQUIV_CLASS,$/;"	e	enum:__anon5
OP_CLOSE_SUBEXP	deps/regex/regex_internal.h	/^  OP_CLOSE_SUBEXP = EPSILON_BIT | 1,$/;"	e	enum:__anon5
OP_DUP_ASTERISK	deps/regex/regex_internal.h	/^  OP_DUP_ASTERISK = EPSILON_BIT | 3,$/;"	e	enum:__anon5
OP_DUP_PLUS	deps/regex/regex_internal.h	/^  OP_DUP_PLUS = 18,$/;"	e	enum:__anon5
OP_DUP_QUESTION	deps/regex/regex_internal.h	/^  OP_DUP_QUESTION,$/;"	e	enum:__anon5
OP_NON_MATCH_LIST	deps/regex/regex_internal.h	/^  OP_NON_MATCH_LIST,$/;"	e	enum:__anon5
OP_NOTSPACE	deps/regex/regex_internal.h	/^  OP_NOTSPACE,$/;"	e	enum:__anon5
OP_NOTWORD	deps/regex/regex_internal.h	/^  OP_NOTWORD,$/;"	e	enum:__anon5
OP_OPEN_BRACKET	deps/regex/regex_internal.h	/^  OP_OPEN_BRACKET,$/;"	e	enum:__anon5
OP_OPEN_CHAR_CLASS	deps/regex/regex_internal.h	/^  OP_OPEN_CHAR_CLASS,$/;"	e	enum:__anon5
OP_OPEN_COLL_ELEM	deps/regex/regex_internal.h	/^  OP_OPEN_COLL_ELEM,$/;"	e	enum:__anon5
OP_OPEN_DUP_NUM	deps/regex/regex_internal.h	/^  OP_OPEN_DUP_NUM,$/;"	e	enum:__anon5
OP_OPEN_EQUIV_CLASS	deps/regex/regex_internal.h	/^  OP_OPEN_EQUIV_CLASS,$/;"	e	enum:__anon5
OP_OPEN_SUBEXP	deps/regex/regex_internal.h	/^  OP_OPEN_SUBEXP = EPSILON_BIT | 0,$/;"	e	enum:__anon5
OP_PERIOD	deps/regex/regex_internal.h	/^  OP_PERIOD = 5,$/;"	e	enum:__anon5
OP_SPACE	deps/regex/regex_internal.h	/^  OP_SPACE,$/;"	e	enum:__anon5
OP_UTF8_PERIOD	deps/regex/regex_internal.h	/^  OP_UTF8_PERIOD = 7,$/;"	e	enum:__anon5
OP_WORD	deps/regex/regex_internal.h	/^  OP_WORD,$/;"	e	enum:__anon5
ORIG_DETACHED_HEAD	src/rebase.c	43;"	d	file:
ORIG_HEAD	tests/merge/workdir/setup.c	14;"	d	file:
ORIG_HEAD_FILE	src/rebase.c	31;"	d	file:
OS	deps/zlib/inflate.h	/^    OS,         \/* i: waiting for extra flags and operating system (gzip) *\/$/;"	e	enum:__anon28
OS_CODE	deps/zlib/zutil.h	101;"	d
OS_CODE	deps/zlib/zutil.h	105;"	d
OS_CODE	deps/zlib/zutil.h	111;"	d
OS_CODE	deps/zlib/zutil.h	115;"	d
OS_CODE	deps/zlib/zutil.h	122;"	d
OS_CODE	deps/zlib/zutil.h	135;"	d
OS_CODE	deps/zlib/zutil.h	140;"	d
OS_CODE	deps/zlib/zutil.h	145;"	d
OS_CODE	deps/zlib/zutil.h	180;"	d
OS_CODE	deps/zlib/zutil.h	84;"	d
OURS_DIRECTORY_FILE	tests/merge/trees/automerge.c	21;"	d	file:
OURS_DIRECTORY_FILE	tests/merge/workdir/simple.c	24;"	d	file:
OUTPUT_DIFF	examples/diff.c	/^	OUTPUT_DIFF = (1 << 0),$/;"	e	enum:__anon34	file:
OUTPUT_NUMSTAT	examples/diff.c	/^	OUTPUT_NUMSTAT = (1 << 3),$/;"	e	enum:__anon34	file:
OUTPUT_SHORTSTAT	examples/diff.c	/^	OUTPUT_SHORTSTAT = (1 << 2),$/;"	e	enum:__anon34	file:
OUTPUT_STAT	examples/diff.c	/^	OUTPUT_STAT = (1 << 1),$/;"	e	enum:__anon34	file:
OUTPUT_SUMMARY	examples/diff.c	/^	OUTPUT_SUMMARY = (1 << 4)$/;"	e	enum:__anon34	file:
OWNING_SUBTRANSPORT	src/transports/git.c	15;"	d	file:
OWNING_SUBTRANSPORT	src/transports/http.c	36;"	d	file:
OWNING_SUBTRANSPORT	src/transports/ssh.c	22;"	d	file:
OWNING_SUBTRANSPORT	src/transports/winhttp.c	67;"	d	file:
O_BINARY	src/posix.h	53;"	d
O_CLOEXEC	src/posix.h	56;"	d
OptionParser	tests/generate.py	/^    from optparse import OptionParser$/;"	i
PACKED_FN	tests/odb/freshen.c	52;"	d	file:
PACKED_ID	tests/odb/freshen.c	51;"	d	file:
PACKED_STR	tests/odb/freshen.c	50;"	d	file:
PACKREF_CANNOT_PEEL	src/refdb_fs.c	/^	PACKREF_CANNOT_PEEL = 4,$/;"	e	enum:__anon202	file:
PACKREF_HAS_PEEL	src/refdb_fs.c	/^	PACKREF_HAS_PEEL = 1,$/;"	e	enum:__anon202	file:
PACKREF_SHADOWED	src/refdb_fs.c	/^	PACKREF_SHADOWED = 8,$/;"	e	enum:__anon202	file:
PACKREF_WAS_LOOSE	src/refdb_fs.c	/^	PACKREF_WAS_LOOSE = 2,$/;"	e	enum:__anon202	file:
PACK_IDX_SIGNATURE	src/pack.h	51;"	d
PACK_SIGNATURE	src/pack.h	24;"	d
PACK_VERSION	src/pack.h	25;"	d
PARENT1	src/commit_list.h	12;"	d
PARENT2	src/commit_list.h	13;"	d
PARENTS_PER_COMMIT	src/commit_list.h	18;"	d
PARSE_ERROR_EXT	src/transports/http.c	41;"	d	file:
PARSE_ERROR_GENERIC	src/transports/http.c	38;"	d	file:
PARSE_ERROR_REPLAY	src/transports/http.c	39;"	d	file:
PARSING_HEADER	deps/http-parser/http_parser.c	312;"	d	file:
PATCH_ADD_ORIGINAL	tests/patch/patch_common.h	319;"	d
PATCH_APPEND_NO_NL	tests/patch/patch_common.h	507;"	d
PATCH_BINARY_ADD	tests/patch/patch_common.h	628;"	d
PATCH_BINARY_DELETE	tests/patch/patch_common.h	641;"	d
PATCH_BINARY_DELTA	tests/patch/patch_common.h	618;"	d
PATCH_BINARY_LITERAL	tests/patch/patch_common.h	574;"	d
PATCH_BINARY_NOT_PRINTED	tests/patch/patch_common.h	665;"	d
PATCH_BINARY_NOT_REVERSIBLE	tests/patch/patch_common.h	655;"	d
PATCH_CACHE	tests/diff/diffiter.c	266;"	d	file:
PATCH_CORRUPT_GIT_HEADER	tests/patch/patch_common.h	519;"	d
PATCH_CORRUPT_MISSING_HUNK_HEADER	tests/patch/patch_common.h	550;"	d
PATCH_CORRUPT_MISSING_NEW_FILE	tests/patch/patch_common.h	527;"	d
PATCH_CORRUPT_MISSING_OLD_FILE	tests/patch/patch_common.h	535;"	d
PATCH_CORRUPT_NO_CHANGES	tests/patch/patch_common.h	543;"	d
PATCH_DELETE_ORIGINAL	tests/patch/patch_common.h	336;"	d
PATCH_EMPTY_CONTEXT	tests/patch/patch_common.h	481;"	d
PATCH_EMPTY_FILE_TO_ORIGINAL	tests/patch/patch_common.h	303;"	d
PATCH_IMAGE_INIT	src/apply.c	41;"	d	file:
PATCH_MODECHANGE_MODIFIED	tests/patch/patch_common.h	406;"	d
PATCH_MODECHANGE_UNCHANGED	tests/patch/patch_common.h	401;"	d
PATCH_NOISY	tests/patch/patch_common.h	423;"	d
PATCH_NOISY_NOCONTEXT	tests/patch/patch_common.h	429;"	d
PATCH_NOT_A_PATCH	tests/patch/patch_common.h	558;"	d
PATCH_ORIGINAL_TO_APPEND	tests/patch/patch_common.h	237;"	d
PATCH_ORIGINAL_TO_APPEND_NOCONTEXT	tests/patch/patch_common.h	248;"	d
PATCH_ORIGINAL_TO_CHANGE_FIRSTLINE	tests/patch/patch_common.h	64;"	d
PATCH_ORIGINAL_TO_CHANGE_LASTLINE	tests/patch/patch_common.h	89;"	d
PATCH_ORIGINAL_TO_CHANGE_MIDDLE	tests/patch/patch_common.h	27;"	d
PATCH_ORIGINAL_TO_CHANGE_MIDDLE_GROW	tests/patch/patch_common.h	157;"	d
PATCH_ORIGINAL_TO_CHANGE_MIDDLE_NOCONTEXT	tests/patch/patch_common.h	42;"	d
PATCH_ORIGINAL_TO_CHANGE_MIDDLE_SHRINK	tests/patch/patch_common.h	108;"	d
PATCH_ORIGINAL_TO_EMPTY_FILE	tests/patch/patch_common.h	287;"	d
PATCH_ORIGINAL_TO_MIDDLE_GROW_NOCONTEXT	tests/patch/patch_common.h	177;"	d
PATCH_ORIGINAL_TO_MIDDLE_SHRINK_NOCONTEXT	tests/patch/patch_common.h	125;"	d
PATCH_ORIGINAL_TO_PREPEND	tests/patch/patch_common.h	204;"	d
PATCH_ORIGINAL_TO_PREPEND_AND_APPEND	tests/patch/patch_common.h	269;"	d
PATCH_ORIGINAL_TO_PREPEND_NOCONTEXT	tests/patch/patch_common.h	215;"	d
PATCH_RENAME_EXACT	tests/patch/patch_common.h	353;"	d
PATCH_RENAME_EXACT_QUOTEDNAME	tests/patch/patch_common.h	377;"	d
PATCH_RENAME_SIMILAR	tests/patch/patch_common.h	359;"	d
PATCH_RENAME_SIMILAR_QUOTEDNAME	tests/patch/patch_common.h	383;"	d
PATCH_TRUNCATED_1	tests/patch/patch_common.h	435;"	d
PATCH_TRUNCATED_2	tests/patch/patch_common.h	448;"	d
PATCH_TRUNCATED_3	tests/patch/patch_common.h	461;"	d
PATHSPEC_DATATYPE_DIFF	src/pathspec.h	/^	PATHSPEC_DATATYPE_DIFF = 1,$/;"	e	enum:__anon326
PATHSPEC_DATATYPE_STRINGS	src/pathspec.h	/^	PATHSPEC_DATATYPE_STRINGS = 0,$/;"	e	enum:__anon326
PATH_MAGIC	src/sysdir.c	161;"	d	file:
PATH__ABSOLUTE_LEN	src/win32/path_w32.c	19;"	d	file:
PATH__NT_NAMESPACE	src/win32/path_w32.c	16;"	d	file:
PATH__NT_NAMESPACE_LEN	src/win32/path_w32.c	17;"	d	file:
PATTERNS	src/userdiff.h	204;"	d
PATTERNS	src/userdiff.h	29;"	d
PEELING_FULL	src/refdb_fs.c	/^	PEELING_FULL$/;"	e	enum:__anon203	file:
PEELING_NONE	src/refdb_fs.c	/^	PEELING_NONE = 0,$/;"	e	enum:__anon203	file:
PEELING_STANDARD	src/refdb_fs.c	/^	PEELING_STANDARD,$/;"	e	enum:__anon203	file:
PERF_TIMER_INIT	tests/perf/helper__perf__timer.h	19;"	d
PERF_TIMER_INIT	tests/perf/helper__perf__timer.h	9;"	d
PFGetFinalPathNameByHandleW	src/win32/posix_w32.c	/^typedef DWORD(WINAPI *PFGetFinalPathNameByHandleW)(HANDLE, LPWSTR, DWORD, DWORD);$/;"	t	file:
PKT_LEN_SIZE	src/transports/smart_pkt.c	23;"	d	file:
PQUEUE_LCHILD_OF	src/pqueue.c	11;"	d	file:
PQUEUE_PARENT_OF	src/pqueue.c	13;"	d	file:
PQUEUE_RCHILD_OF	src/pqueue.c	12;"	d	file:
PREFIX	src/remote.c	2425;"	d	file:
PREPARE_PACK	src/pack-objects.c	1360;"	d	file:
PREPARE_PACK	src/pack-objects.c	1413;"	d	file:
PRESET_DICT	deps/zlib/zutil.h	79;"	d
PREVIOUS_BRANCH	tests/merge/workdir/analysis.c	18;"	d	file:
PREV_BEGBUF_CONSTRAINT	deps/regex/regex_internal.h	207;"	d
PREV_NEWLINE_CONSTRAINT	deps/regex/regex_internal.h	205;"	d
PREV_NOTWORD_CONSTRAINT	deps/regex/regex_internal.h	202;"	d
PREV_WORD_CONSTRAINT	deps/regex/regex_internal.h	201;"	d
PRIX16	include/git2/inttypes.h	112;"	d
PRIX32	include/git2/inttypes.h	125;"	d
PRIX64	include/git2/inttypes.h	138;"	d
PRIX8	include/git2/inttypes.h	99;"	d
PRIXFAST16	include/git2/inttypes.h	120;"	d
PRIXFAST32	include/git2/inttypes.h	133;"	d
PRIXFAST64	include/git2/inttypes.h	146;"	d
PRIXFAST8	include/git2/inttypes.h	107;"	d
PRIXLEAST16	include/git2/inttypes.h	116;"	d
PRIXLEAST32	include/git2/inttypes.h	129;"	d
PRIXLEAST64	include/git2/inttypes.h	142;"	d
PRIXLEAST8	include/git2/inttypes.h	103;"	d
PRIXMAX	include/git2/inttypes.h	151;"	d
PRIXPTR	include/git2/inttypes.h	156;"	d
PRId16	include/git2/inttypes.h	68;"	d
PRId32	include/git2/inttypes.h	75;"	d
PRId64	include/git2/inttypes.h	82;"	d
PRId8	include/git2/inttypes.h	61;"	d
PRIdFAST16	include/git2/inttypes.h	72;"	d
PRIdFAST32	include/git2/inttypes.h	79;"	d
PRIdFAST64	include/git2/inttypes.h	86;"	d
PRIdFAST8	include/git2/inttypes.h	65;"	d
PRIdLEAST16	include/git2/inttypes.h	70;"	d
PRIdLEAST32	include/git2/inttypes.h	77;"	d
PRIdLEAST64	include/git2/inttypes.h	84;"	d
PRIdLEAST8	include/git2/inttypes.h	63;"	d
PRIdMAX	include/git2/inttypes.h	89;"	d
PRIdPTR	include/git2/inttypes.h	92;"	d
PRIdZ	src/cc-compat.h	52;"	d
PRIdZ	src/cc-compat.h	56;"	d
PRIi16	include/git2/inttypes.h	69;"	d
PRIi32	include/git2/inttypes.h	76;"	d
PRIi64	include/git2/inttypes.h	83;"	d
PRIi8	include/git2/inttypes.h	62;"	d
PRIiFAST16	include/git2/inttypes.h	73;"	d
PRIiFAST32	include/git2/inttypes.h	80;"	d
PRIiFAST64	include/git2/inttypes.h	87;"	d
PRIiFAST8	include/git2/inttypes.h	66;"	d
PRIiLEAST16	include/git2/inttypes.h	71;"	d
PRIiLEAST32	include/git2/inttypes.h	78;"	d
PRIiLEAST64	include/git2/inttypes.h	85;"	d
PRIiLEAST8	include/git2/inttypes.h	64;"	d
PRIiMAX	include/git2/inttypes.h	90;"	d
PRIiPTR	include/git2/inttypes.h	93;"	d
PRIo16	include/git2/inttypes.h	109;"	d
PRIo32	include/git2/inttypes.h	122;"	d
PRIo64	include/git2/inttypes.h	135;"	d
PRIo8	include/git2/inttypes.h	96;"	d
PRIoFAST16	include/git2/inttypes.h	117;"	d
PRIoFAST32	include/git2/inttypes.h	130;"	d
PRIoFAST64	include/git2/inttypes.h	143;"	d
PRIoFAST8	include/git2/inttypes.h	104;"	d
PRIoLEAST16	include/git2/inttypes.h	113;"	d
PRIoLEAST32	include/git2/inttypes.h	126;"	d
PRIoLEAST64	include/git2/inttypes.h	139;"	d
PRIoLEAST8	include/git2/inttypes.h	100;"	d
PRIoMAX	include/git2/inttypes.h	148;"	d
PRIoPTR	include/git2/inttypes.h	153;"	d
PRIu16	include/git2/inttypes.h	110;"	d
PRIu32	include/git2/inttypes.h	123;"	d
PRIu64	include/git2/inttypes.h	136;"	d
PRIu8	include/git2/inttypes.h	97;"	d
PRIuFAST16	include/git2/inttypes.h	118;"	d
PRIuFAST32	include/git2/inttypes.h	131;"	d
PRIuFAST64	include/git2/inttypes.h	144;"	d
PRIuFAST8	include/git2/inttypes.h	105;"	d
PRIuLEAST16	include/git2/inttypes.h	114;"	d
PRIuLEAST32	include/git2/inttypes.h	127;"	d
PRIuLEAST64	include/git2/inttypes.h	140;"	d
PRIuLEAST8	include/git2/inttypes.h	101;"	d
PRIuMAX	include/git2/inttypes.h	149;"	d
PRIuPTR	include/git2/inttypes.h	154;"	d
PRIuZ	examples/network/common.h	24;"	d
PRIuZ	examples/network/common.h	26;"	d
PRIuZ	src/cc-compat.h	50;"	d
PRIuZ	src/cc-compat.h	54;"	d
PRIuZ	tests/clar.c	64;"	d	file:
PRIuZ	tests/clar.c	81;"	d	file:
PRIx16	include/git2/inttypes.h	111;"	d
PRIx32	include/git2/inttypes.h	124;"	d
PRIx64	include/git2/inttypes.h	137;"	d
PRIx8	include/git2/inttypes.h	98;"	d
PRIxFAST16	include/git2/inttypes.h	119;"	d
PRIxFAST32	include/git2/inttypes.h	132;"	d
PRIxFAST64	include/git2/inttypes.h	145;"	d
PRIxFAST8	include/git2/inttypes.h	106;"	d
PRIxLEAST16	include/git2/inttypes.h	115;"	d
PRIxLEAST32	include/git2/inttypes.h	128;"	d
PRIxLEAST64	include/git2/inttypes.h	141;"	d
PRIxLEAST8	include/git2/inttypes.h	102;"	d
PRIxMAX	include/git2/inttypes.h	150;"	d
PRIxPTR	include/git2/inttypes.h	155;"	d
PRIxZ	src/cc-compat.h	51;"	d
PRIxZ	src/cc-compat.h	55;"	d
PRIxZ	tests/clar.c	67;"	d	file:
PRIxZ	tests/clar.c	84;"	d	file:
PROXY_CONNECTION	deps/http-parser/http_parser.c	120;"	d	file:
PTRDIFF_MAX	include/git2/stdint.h	193;"	d
PTRDIFF_MAX	include/git2/stdint.h	196;"	d
PTRDIFF_MIN	include/git2/stdint.h	192;"	d
PTRDIFF_MIN	include/git2/stdint.h	195;"	d
PULL	deps/zlib/infback.c	158;"	d	file:
PULLBYTE	deps/zlib/infback.c	172;"	d	file:
PULLBYTE	deps/zlib/inflate.c	489;"	d	file:
PUP	deps/zlib/inffast.c	26;"	d	file:
PUP	deps/zlib/inffast.c	29;"	d	file:
PUSH_NEXT	src/tsort.c	310;"	d	file:
PathBuffer	src/win32/reparse.h	/^			WCHAR  PathBuffer[1];$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
PathBuffer	src/win32/reparse.h	/^			WCHAR  PathBuffer[1];$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
Pos	deps/zlib/deflate.h	/^typedef ush Pos;$/;"	t
Posf	deps/zlib/deflate.h	/^typedef Pos FAR Posf;$/;"	t
PrintNameLength	src/win32/reparse.h	/^			USHORT PrintNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
PrintNameLength	src/win32/reparse.h	/^			USHORT PrintNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
PrintNameOffset	src/win32/reparse.h	/^			USHORT PrintNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
PrintNameOffset	src/win32/reparse.h	/^			USHORT PrintNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
ProcessUrlAction	deps/winhttp/urlmon.h	/^	LPVOID ProcessUrlAction;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
Ptr	src/win32/thread.h	/^typedef struct { void *Ptr; } GIT_SRWLOCK;$/;"	m	struct:__anon286	access:public
QUIET_FILE	src/rebase.c	35;"	d	file:
QueryCustomPolicy	deps/winhttp/urlmon.h	/^	LPVOID QueryCustomPolicy;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
QueryInterface	deps/winhttp/urlmon.h	/^	HRESULT(STDMETHODCALLTYPE *QueryInterface)(IInternetSecurityManager *, REFIID, void **);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
RABIN_SHIFT	src/delta.c	13;"	d	file:
RABIN_WINDOW	src/delta.c	14;"	d	file:
RANGE_ERROR	src/fnmatch.c	57;"	d	file:
RANGE_MATCH	src/fnmatch.c	55;"	d	file:
RANGE_NOMATCH	src/fnmatch.c	56;"	d	file:
RANK	deps/zlib/deflate.c	159;"	d	file:
REBASE_APPLY_DIR	src/rebase.c	27;"	d	file:
REBASE_DIR_MODE	src/rebase.c	47;"	d	file:
REBASE_FILE_MODE	src/rebase.c	48;"	d	file:
REBASE_MERGE_DIR	src/rebase.c	28;"	d	file:
REC	src/xdiff/xhistogram.c	91;"	d	file:
RECORD_CALLBACKS_INIT	tests/online/push_util.h	14;"	d
REFNAME_DECOMPOSED	tests/refs/unicode.c	42;"	d	file:
REGS_FIXED	deps/regex/regex.h	406;"	d
REGS_REALLOCATE	deps/regex/regex.h	405;"	d
REGS_UNALLOCATED	deps/regex/regex.h	404;"	d
REG_BADBR	deps/regex/regex.h	/^  REG_BADBR,		\/* Invalid contents of \\{\\}.  *\/$/;"	e	enum:__anon17
REG_BADBR_IDX	deps/regex/regcomp.c	161;"	d	file:
REG_BADPAT	deps/regex/regex.h	/^  REG_BADPAT,		\/* Invalid pattern.  *\/$/;"	e	enum:__anon17
REG_BADPAT_IDX	deps/regex/regcomp.c	137;"	d	file:
REG_BADRPT	deps/regex/regex.h	/^  REG_BADRPT,		\/* No preceding re for repetition op.  *\/$/;"	e	enum:__anon17
REG_BADRPT_IDX	deps/regex/regcomp.c	170;"	d	file:
REG_EBRACE	deps/regex/regex.h	/^  REG_EBRACE,		\/* Unmatched \\{.  *\/$/;"	e	enum:__anon17
REG_EBRACE_IDX	deps/regex/regcomp.c	158;"	d	file:
REG_EBRACK	deps/regex/regex.h	/^  REG_EBRACK,		\/* Unmatched left bracket.  *\/$/;"	e	enum:__anon17
REG_EBRACK_IDX	deps/regex/regcomp.c	152;"	d	file:
REG_ECOLLATE	deps/regex/regex.h	/^  REG_ECOLLATE,		\/* Inalid collating element.  *\/$/;"	e	enum:__anon17
REG_ECOLLATE_IDX	deps/regex/regcomp.c	140;"	d	file:
REG_ECTYPE	deps/regex/regex.h	/^  REG_ECTYPE,		\/* Invalid character class name.  *\/$/;"	e	enum:__anon17
REG_ECTYPE_IDX	deps/regex/regcomp.c	143;"	d	file:
REG_EEND	deps/regex/regex.h	/^  REG_EEND,		\/* Premature end.  *\/$/;"	e	enum:__anon17
REG_EEND_IDX	deps/regex/regcomp.c	173;"	d	file:
REG_EESCAPE	deps/regex/regex.h	/^  REG_EESCAPE,		\/* Trailing backslash.  *\/$/;"	e	enum:__anon17
REG_EESCAPE_IDX	deps/regex/regcomp.c	146;"	d	file:
REG_ENOSYS	deps/regex/regex.h	/^  REG_ENOSYS = -1,	\/* This will never happen for this implementation.  *\/$/;"	e	enum:__anon17
REG_EPAREN	deps/regex/regex.h	/^  REG_EPAREN,		\/* Parenthesis imbalance.  *\/$/;"	e	enum:__anon17
REG_EPAREN_IDX	deps/regex/regcomp.c	155;"	d	file:
REG_ERANGE	deps/regex/regex.h	/^  REG_ERANGE,		\/* Invalid range end.  *\/$/;"	e	enum:__anon17
REG_ERANGE_IDX	deps/regex/regcomp.c	164;"	d	file:
REG_ERPAREN	deps/regex/regex.h	/^  REG_ERPAREN		\/* Unmatched ) or \\); not returned from regcomp.  *\/$/;"	e	enum:__anon17
REG_ERPAREN_IDX	deps/regex/regcomp.c	179;"	d	file:
REG_ESIZE	deps/regex/regex.h	/^  REG_ESIZE,		\/* Compiled pattern bigger than 2^16 bytes.  *\/$/;"	e	enum:__anon17
REG_ESIZE_IDX	deps/regex/regcomp.c	176;"	d	file:
REG_ESPACE	deps/regex/regex.h	/^  REG_ESPACE,		\/* Ran out of memory.  *\/$/;"	e	enum:__anon17
REG_ESPACE_IDX	deps/regex/regcomp.c	167;"	d	file:
REG_ESUBREG	deps/regex/regex.h	/^  REG_ESUBREG,		\/* Invalid back reference.  *\/$/;"	e	enum:__anon17
REG_ESUBREG_IDX	deps/regex/regcomp.c	149;"	d	file:
REG_EXTENDED	deps/regex/regex.h	279;"	d
REG_ICASE	deps/regex/regex.h	283;"	d
REG_MSYSGIT_INSTALL	src/win32/findfile.c	16;"	d	file:
REG_MSYSGIT_INSTALL	src/win32/findfile.c	18;"	d	file:
REG_MSYSGIT_INSTALL_LOCAL	src/win32/findfile.c	13;"	d	file:
REG_NEGATE	src/diff_driver.c	/^	REG_NEGATE = (1 << 15) \/* get out of the way of existing flags *\/$/;"	e	enum:__anon240	file:
REG_NEWLINE	deps/regex/regex.h	288;"	d
REG_NOERROR	deps/regex/regex.h	/^  REG_NOERROR = 0,	\/* Success.  *\/$/;"	e	enum:__anon17
REG_NOERROR_IDX	deps/regex/regcomp.c	131;"	d	file:
REG_NOMATCH	deps/regex/regex.h	/^  REG_NOMATCH,		\/* Didn't find a match (for regexec).  *\/$/;"	e	enum:__anon17
REG_NOMATCH_IDX	deps/regex/regcomp.c	134;"	d	file:
REG_NOSUB	deps/regex/regex.h	292;"	d
REG_NOTBOL	deps/regex/regex.h	302;"	d
REG_NOTEOL	deps/regex/regex.h	305;"	d
REG_STARTEND	deps/regex/regex.h	309;"	d
REMOTE_INSTEADOF	tests/remote/insteadof.c	7;"	d	file:
REMOTE_ORIGIN	tests/remote/insteadof.c	6;"	d	file:
REMOVED_IN_BRANCH_REUC_ENTRY	tests/merge/trees/automerge.c	47;"	d	file:
REMOVED_IN_BRANCH_REUC_ENTRY	tests/merge/workdir/simple.c	64;"	d	file:
REMOVED_IN_MASTER_REUC_ENTRY	tests/merge/trees/automerge.c	52;"	d	file:
REMOVED_IN_MASTER_REUC_ENTRY	tests/merge/workdir/simple.c	69;"	d	file:
REP1024	tests/clar_libgit2.h	152;"	d
REP15	tests/clar_libgit2.h	149;"	d
REP16	tests/clar_libgit2.h	150;"	d
REP256	tests/clar_libgit2.h	151;"	d
REP4	tests/clar_libgit2.h	148;"	d
REPARSE_DATA_HEADER_SIZE	src/win32/reparse.h	43;"	d
REPARSE_DATA_MOUNTPOINT_HEADER_SIZE	src/win32/reparse.h	44;"	d
REPARSE_DATA_UNION_SIZE	src/win32/reparse.h	45;"	d
REPEAT	tests/object/cache.c	194;"	d	file:
REPEAT	tests/threads/refdb.c	25;"	d	file:
REPOSITORY_ALTERNATE_FOLDER	tests/repo/discover.c	17;"	d	file:
REPOSITORY_ALTERNATE_FOLDER_SUB	tests/repo/discover.c	18;"	d	file:
REPOSITORY_ALTERNATE_FOLDER_SUB_SUB	tests/repo/discover.c	19;"	d	file:
REPOSITORY_ALTERNATE_FOLDER_SUB_SUB_SUB	tests/repo/discover.c	20;"	d	file:
REPO_NAME	tests/stash/foreach.c	16;"	d	file:
REPO_PATH	tests/remote/insteadof.c	5;"	d	file:
REPZ_11_138	deps/zlib/trees.c	59;"	d	file:
REPZ_3_10	deps/zlib/trees.c	56;"	d	file:
REP_3_6	deps/zlib/trees.c	53;"	d	file:
RESTORE	deps/zlib/infback.c	139;"	d	file:
RESTORE	deps/zlib/inflate.c	470;"	d	file:
RESULT	src/commit_list.h	14;"	d
REVERSED_DATA_LEN	tests/filter/custom.c	29;"	d	file:
REVERSE_FILTER_PRIORITY	tests/filter/custom.c	14;"	d	file:
REWRITTEN_FILE	src/rebase.c	41;"	d	file:
RE_BACKSLASH_ESCAPE_IN_LISTS	deps/regex/regex.h	62;"	d
RE_BK_PLUS_QM	deps/regex/regex.h	67;"	d
RE_CARET_ANCHORS_HERE	deps/regex/regex.h	173;"	d
RE_CHAR_CLASSES	deps/regex/regex.h	73;"	d
RE_CONTEXT_INDEP_ANCHORS	deps/regex/regex.h	87;"	d
RE_CONTEXT_INDEP_OPS	deps/regex/regex.h	95;"	d
RE_CONTEXT_INVALID_DUP	deps/regex/regex.h	177;"	d
RE_CONTEXT_INVALID_OPS	deps/regex/regex.h	99;"	d
RE_DOT_NEWLINE	deps/regex/regex.h	103;"	d
RE_DOT_NOT_NULL	deps/regex/regex.h	107;"	d
RE_DUP_MAX	deps/regex/regex.h	268;"	d
RE_DUP_MAX	deps/regex/regex.h	271;"	d
RE_ENABLE_I18N	deps/regex/regex_internal.h	127;"	d
RE_HAT_LISTS_NOT_NEWLINE	deps/regex/regex.h	111;"	d
RE_ICASE	deps/regex/regex.h	168;"	d
RE_INTERVALS	deps/regex/regex.h	116;"	d
RE_INVALID_INTERVAL_ORD	deps/regex/regex.h	164;"	d
RE_LIMITED_OPS	deps/regex/regex.h	120;"	d
RE_NEWLINE_ALT	deps/regex/regex.h	124;"	d
RE_NO_BK_BRACES	deps/regex/regex.h	129;"	d
RE_NO_BK_PARENS	deps/regex/regex.h	133;"	d
RE_NO_BK_REFS	deps/regex/regex.h	137;"	d
RE_NO_BK_VBAR	deps/regex/regex.h	141;"	d
RE_NO_EMPTY_RANGES	deps/regex/regex.h	147;"	d
RE_NO_GNU_OPS	deps/regex/regex.h	159;"	d
RE_NO_POSIX_BACKTRACKING	deps/regex/regex.h	155;"	d
RE_NO_SUB	deps/regex/regex.h	181;"	d
RE_NREGS	deps/regex/regex.h	450;"	d
RE_SYNTAX_AWK	deps/regex/regex.h	197;"	d
RE_SYNTAX_ED	deps/regex/regex.h	231;"	d
RE_SYNTAX_EGREP	deps/regex/regex.h	220;"	d
RE_SYNTAX_EMACS	deps/regex/regex.h	195;"	d
RE_SYNTAX_GNU_AWK	deps/regex/regex.h	204;"	d
RE_SYNTAX_GREP	deps/regex/regex.h	215;"	d
RE_SYNTAX_POSIX_AWK	deps/regex/regex.h	210;"	d
RE_SYNTAX_POSIX_BASIC	deps/regex/regex.h	240;"	d
RE_SYNTAX_POSIX_EGREP	deps/regex/regex.h	226;"	d
RE_SYNTAX_POSIX_EXTENDED	deps/regex/regex.h	249;"	d
RE_SYNTAX_POSIX_MINIMAL_BASIC	deps/regex/regex.h	246;"	d
RE_SYNTAX_POSIX_MINIMAL_EXTENDED	deps/regex/regex.h	257;"	d
RE_SYNTAX_SED	deps/regex/regex.h	233;"	d
RE_TRANSLATE_TYPE	deps/regex/regex.h	353;"	d
RE_UNMATCHED_RIGHT_PAREN_ORD	deps/regex/regex.h	151;"	d
RM_RETRY_COUNT	tests/clar/fs.h	3;"	d
RM_RETRY_DELAY	tests/clar/fs.h	4;"	d
ROOM	deps/zlib/infback.c	210;"	d	file:
R_OK	src/posix.h	67;"	d
Release	deps/winhttp/urlmon.h	/^	ULONG(STDMETHODCALLTYPE *Release)(IInternetSecurityManager *);$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
RemoteAddress	deps/winhttp/winhttp.h	/^    SOCKADDR_STORAGE RemoteAddress;$/;"	m	struct:__anon26	access:public
ReparseDataLength	src/win32/reparse.h	/^	USHORT ReparseDataLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER	access:public
ReparseTag	src/win32/reparse.h	/^	ULONG  ReparseTag;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER	access:public
Reserved	src/win32/reparse.h	/^	USHORT Reserved;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER	access:public
SBC_MAX	deps/regex/regex_internal.h	141;"	d
SB_CHAR	deps/regex/regex_internal.h	/^  SB_CHAR,$/;"	e	enum:__anon14
SCHEME_HTTP	src/transports/winhttp.c	328;"	d	file:
SCHEME_HTTPS	src/transports/winhttp.c	329;"	d	file:
SCNX16	include/git2/inttypes.h	215;"	d
SCNX32	include/git2/inttypes.h	228;"	d
SCNX64	include/git2/inttypes.h	241;"	d
SCNX8	include/git2/inttypes.h	202;"	d
SCNXFAST16	include/git2/inttypes.h	223;"	d
SCNXFAST32	include/git2/inttypes.h	236;"	d
SCNXFAST64	include/git2/inttypes.h	249;"	d
SCNXFAST8	include/git2/inttypes.h	210;"	d
SCNXLEAST16	include/git2/inttypes.h	219;"	d
SCNXLEAST32	include/git2/inttypes.h	232;"	d
SCNXLEAST64	include/git2/inttypes.h	245;"	d
SCNXLEAST8	include/git2/inttypes.h	206;"	d
SCNXMAX	include/git2/inttypes.h	254;"	d
SCNXPTR	include/git2/inttypes.h	260;"	d
SCNXPTR	include/git2/inttypes.h	265;"	d
SCNd16	include/git2/inttypes.h	166;"	d
SCNd32	include/git2/inttypes.h	173;"	d
SCNd64	include/git2/inttypes.h	180;"	d
SCNd8	include/git2/inttypes.h	159;"	d
SCNdFAST16	include/git2/inttypes.h	170;"	d
SCNdFAST32	include/git2/inttypes.h	177;"	d
SCNdFAST64	include/git2/inttypes.h	184;"	d
SCNdFAST8	include/git2/inttypes.h	163;"	d
SCNdLEAST16	include/git2/inttypes.h	168;"	d
SCNdLEAST32	include/git2/inttypes.h	175;"	d
SCNdLEAST64	include/git2/inttypes.h	182;"	d
SCNdLEAST8	include/git2/inttypes.h	161;"	d
SCNdMAX	include/git2/inttypes.h	187;"	d
SCNdPTR	include/git2/inttypes.h	191;"	d
SCNdPTR	include/git2/inttypes.h	194;"	d
SCNi16	include/git2/inttypes.h	167;"	d
SCNi32	include/git2/inttypes.h	174;"	d
SCNi64	include/git2/inttypes.h	181;"	d
SCNi8	include/git2/inttypes.h	160;"	d
SCNiFAST16	include/git2/inttypes.h	171;"	d
SCNiFAST32	include/git2/inttypes.h	178;"	d
SCNiFAST64	include/git2/inttypes.h	185;"	d
SCNiFAST8	include/git2/inttypes.h	164;"	d
SCNiLEAST16	include/git2/inttypes.h	169;"	d
SCNiLEAST32	include/git2/inttypes.h	176;"	d
SCNiLEAST64	include/git2/inttypes.h	183;"	d
SCNiLEAST8	include/git2/inttypes.h	162;"	d
SCNiMAX	include/git2/inttypes.h	188;"	d
SCNiPTR	include/git2/inttypes.h	192;"	d
SCNiPTR	include/git2/inttypes.h	195;"	d
SCNo16	include/git2/inttypes.h	212;"	d
SCNo32	include/git2/inttypes.h	225;"	d
SCNo64	include/git2/inttypes.h	238;"	d
SCNo8	include/git2/inttypes.h	199;"	d
SCNoFAST16	include/git2/inttypes.h	220;"	d
SCNoFAST32	include/git2/inttypes.h	233;"	d
SCNoFAST64	include/git2/inttypes.h	246;"	d
SCNoFAST8	include/git2/inttypes.h	207;"	d
SCNoLEAST16	include/git2/inttypes.h	216;"	d
SCNoLEAST32	include/git2/inttypes.h	229;"	d
SCNoLEAST64	include/git2/inttypes.h	242;"	d
SCNoLEAST8	include/git2/inttypes.h	203;"	d
SCNoMAX	include/git2/inttypes.h	251;"	d
SCNoPTR	include/git2/inttypes.h	257;"	d
SCNoPTR	include/git2/inttypes.h	262;"	d
SCNu16	include/git2/inttypes.h	213;"	d
SCNu32	include/git2/inttypes.h	226;"	d
SCNu64	include/git2/inttypes.h	239;"	d
SCNu8	include/git2/inttypes.h	200;"	d
SCNuFAST16	include/git2/inttypes.h	221;"	d
SCNuFAST32	include/git2/inttypes.h	234;"	d
SCNuFAST64	include/git2/inttypes.h	247;"	d
SCNuFAST8	include/git2/inttypes.h	208;"	d
SCNuLEAST16	include/git2/inttypes.h	217;"	d
SCNuLEAST32	include/git2/inttypes.h	230;"	d
SCNuLEAST64	include/git2/inttypes.h	243;"	d
SCNuLEAST8	include/git2/inttypes.h	204;"	d
SCNuMAX	include/git2/inttypes.h	252;"	d
SCNuPTR	include/git2/inttypes.h	258;"	d
SCNuPTR	include/git2/inttypes.h	263;"	d
SCNx16	include/git2/inttypes.h	214;"	d
SCNx32	include/git2/inttypes.h	227;"	d
SCNx64	include/git2/inttypes.h	240;"	d
SCNx8	include/git2/inttypes.h	201;"	d
SCNxFAST16	include/git2/inttypes.h	222;"	d
SCNxFAST32	include/git2/inttypes.h	235;"	d
SCNxFAST64	include/git2/inttypes.h	248;"	d
SCNxFAST8	include/git2/inttypes.h	209;"	d
SCNxLEAST16	include/git2/inttypes.h	218;"	d
SCNxLEAST32	include/git2/inttypes.h	231;"	d
SCNxLEAST64	include/git2/inttypes.h	244;"	d
SCNxLEAST8	include/git2/inttypes.h	205;"	d
SCNxMAX	include/git2/inttypes.h	253;"	d
SCNxPTR	include/git2/inttypes.h	259;"	d
SCNxPTR	include/git2/inttypes.h	264;"	d
SECTION_BAR	tests/config/write.c	546;"	d	file:
SECTION_FOO	tests/config/write.c	536;"	d	file:
SECTION_FOO_WITH_COMMENT	tests/config/write.c	544;"	d	file:
SECURITY_FLAG_IGNORE_CERT_CN_INVALID	deps/winhttp/winhttp.h	280;"	d
SECURITY_FLAG_IGNORE_CERT_DATE_INVALID	deps/winhttp/winhttp.h	279;"	d
SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE	deps/winhttp/winhttp.h	281;"	d
SECURITY_FLAG_IGNORE_UNKNOWN_CA	deps/winhttp/winhttp.h	278;"	d
SECURITY_FLAG_SECURE	deps/winhttp/winhttp.h	282;"	d
SECURITY_FLAG_STRENGTH_MEDIUM	deps/winhttp/winhttp.h	284;"	d
SECURITY_FLAG_STRENGTH_STRONG	deps/winhttp/winhttp.h	285;"	d
SECURITY_FLAG_STRENGTH_WEAK	deps/winhttp/winhttp.h	283;"	d
SEEN	src/describe.c	296;"	d	file:
SEPARATOR	deps/zlib/trees.c	324;"	d	file:
SET_ERRNO	deps/http-parser/http_parser.c	54;"	d	file:
SET_REPO_CONFIG	src/repository.c	1388;"	d	file:
SHA_ASM	src/hash/hash_generic.c	21;"	d	file:
SHA_MIX	src/hash/hash_generic.c	103;"	d	file:
SHA_ROL	src/hash/hash_generic.c	22;"	d	file:
SHA_ROL	src/hash/hash_generic.c	28;"	d	file:
SHA_ROR	src/hash/hash_generic.c	23;"	d	file:
SHA_ROR	src/hash/hash_generic.c	29;"	d	file:
SHA_ROT	src/hash/hash_generic.c	27;"	d	file:
SHA_ROUND	src/hash/hash_generic.c	105;"	d	file:
SHA_SRC	src/hash/hash_generic.c	102;"	d	file:
SHOW_NONE	examples/cat-file.c	/^	SHOW_NONE = 3,$/;"	e	enum:__anon33	file:
SHOW_PRETTY	examples/cat-file.c	/^	SHOW_PRETTY = 4$/;"	e	enum:__anon33	file:
SHOW_SIZE	examples/cat-file.c	/^	SHOW_SIZE = 2,$/;"	e	enum:__anon33	file:
SHOW_TYPE	examples/cat-file.c	/^	SHOW_TYPE = 1,$/;"	e	enum:__anon33	file:
SIG_ATOMIC_MAX	include/git2/stdint.h	200;"	d
SIG_ATOMIC_MIN	include/git2/stdint.h	199;"	d
SIMILARITY_TEST_DATA_1	tests/core/buffer.c	883;"	d	file:
SIMPLE_BRACKET	deps/regex/regex_internal.h	/^  SIMPLE_BRACKET = 3,$/;"	e	enum:__anon5
SIZE_MAX	deps/regex/regex_internal.h	116;"	d
SIZE_MAX	include/git2/stdint.h	204;"	d
SIZE_MAX	include/git2/stdint.h	206;"	d
SKIP	examples/add.c	/^	SKIP = 1,$/;"	e	enum:print_options	file:
SKIP_COMMENTS	src/config_file.c	893;"	d	file:
SKIP_WHITESPACE	src/config_file.c	892;"	d	file:
SLOP	src/revwalk.c	392;"	d	file:
SM1	tests/submodule/modify.c	90;"	d	file:
SM2	tests/submodule/modify.c	91;"	d	file:
SM3	tests/submodule/modify.c	92;"	d	file:
SMALLEST	deps/zlib/trees.c	424;"	d	file:
SMALL_STACK_SIZE	src/pack.c	532;"	d	file:
SM_LIBGIT2	tests/submodule/modify.c	11;"	d	file:
SM_LIBGIT2_BRANCH	tests/submodule/modify.c	10;"	d	file:
SM_LIBGIT2_URL	tests/submodule/modify.c	9;"	d	file:
SRC_REPO	tests/perf/merge.c	13;"	d	file:
SSH_AUTH_KEYBOARD_INTERACTIVE	src/transports/ssh.c	769;"	d	file:
SSH_AUTH_PASSWORD	src/transports/ssh.c	768;"	d	file:
SSH_AUTH_PUBLICKEY	src/transports/ssh.c	767;"	d	file:
SSH_REPO_URL	tests/online/clone.c	15;"	d	file:
STALE	src/commit_list.h	15;"	d
STANDARD_OPEN_FLAGS	src/win32/posix_w32.c	36;"	d	file:
STANDARD_REPOSITORY	tests/repo/init.c	/^	STANDARD_REPOSITORY = 0,$/;"	e	enum:repo_mode	file:
STATE_NODE_CONTAINS	deps/regex/regexec.c	1592;"	d	file:
STATIC_TREES	deps/zlib/zutil.h	71;"	d
STATS_FULL_MIN_SCALE	src/diff_stats.c	13;"	d	file:
STATUS_INDEX_FLAGS	tests/index/addall.c	18;"	d	file:
STATUS_WT_FLAGS	tests/index/addall.c	23;"	d	file:
STAT_T	tests/clar.c	/^	typedef struct _stat STAT_T;$/;"	t	typeref:struct:_stat	file:
STAT_T	tests/clar.c	/^	typedef struct stat STAT_T;$/;"	t	typeref:struct:stat	file:
STORED	deps/zlib/inflate.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon28
STORED_BLOCK	deps/zlib/zutil.h	70;"	d
STR1000	tests/diff/workdir.c	1857;"	d	file:
STR200	tests/diff/workdir.c	1854;"	d	file:
STR3999Z	tests/diff/workdir.c	1858;"	d	file:
STR40	tests/diff/workdir.c	1853;"	d	file:
STR4000	tests/diff/workdir.c	1859;"	d	file:
STR7	tests/diff/workdir.c	1851;"	d	file:
STR8	tests/diff/workdir.c	1852;"	d	file:
STR999Z	tests/diff/workdir.c	1855;"	d	file:
STRCMP_CASESELECT	src/util.h	249;"	d
STRICT_CHECK	deps/http-parser/http_parser.c	387;"	d	file:
STRICT_CHECK	deps/http-parser/http_parser.c	396;"	d	file:
STRINGIFY	tests/core/structinit.c	7;"	d	file:
SUBEXP	deps/regex/regex_internal.h	/^  SUBEXP = 17,$/;"	e	enum:__anon5
SUBMODULE_MAIN_BRANCH	tests/merge/workdir/submodules.c	12;"	d	file:
SUBMODULE_OTHER2_BRANCH	tests/merge/workdir/submodules.c	14;"	d	file:
SUBMODULE_OTHER_BRANCH	tests/merge/workdir/submodules.c	13;"	d	file:
SUB_REPOSITORY_FOLDER	tests/repo/discover.c	11;"	d	file:
SUB_REPOSITORY_FOLDER_NAME	tests/repo/discover.c	10;"	d	file:
SUB_REPOSITORY_FOLDER_SUB	tests/repo/discover.c	13;"	d	file:
SUB_REPOSITORY_FOLDER_SUB_SUB	tests/repo/discover.c	14;"	d	file:
SUB_REPOSITORY_FOLDER_SUB_SUB_SUB	tests/repo/discover.c	15;"	d	file:
SUB_REPOSITORY_GITDIR	tests/repo/discover.c	12;"	d	file:
SUFFIX_FETCH	src/remote.c	2426;"	d	file:
SUFFIX_PUSH	src/remote.c	2427;"	d	file:
SYNC	deps/zlib/inflate.h	/^    SYNC        \/* looking for synchronization bytes to restart inflate() *\/$/;"	e	enum:__anon28
S_IFGITLINK	src/posix.h	17;"	d
S_IFLNK	src/posix.h	22;"	d
S_IREAD	tests/odb/loose.c	8;"	d	file:
S_ISDIR	src/posix.h	36;"	d
S_ISDIR	tests/clar.c	56;"	d	file:
S_ISFIFO	src/posix.h	44;"	d
S_ISGID	src/posix.h	49;"	d
S_ISGITLINK	src/posix.h	18;"	d
S_ISLNK	src/posix.h	32;"	d
S_ISREG	src/posix.h	40;"	d
S_IWRITE	tests/odb/loose.c	9;"	d	file:
S_IXUSR	src/posix.h	28;"	d
SetSecuritySite	deps/winhttp/urlmon.h	/^	LPVOID SetSecuritySite;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
SetZoneMapping	deps/winhttp/urlmon.h	/^	LPVOID SetZoneMapping;$/;"	m	struct:IInternetSecurityManagerVtbl	access:public
SubstituteNameLength	src/win32/reparse.h	/^			USHORT SubstituteNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
SubstituteNameLength	src/win32/reparse.h	/^			USHORT SubstituteNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
SubstituteNameOffset	src/win32/reparse.h	/^			USHORT SubstituteNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
SubstituteNameOffset	src/win32/reparse.h	/^			USHORT SubstituteNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
SymbolicLinkReparseBuffer	src/win32/reparse.h	/^		} SymbolicLinkReparseBuffer;$/;"	m	union:_GIT_REPARSE_DATA_BUFFER::__anon280	typeref:struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
T	deps/http-parser/http_parser.c	193;"	d	file:
T	deps/http-parser/http_parser.c	195;"	d	file:
T	deps/http-parser/http_parser.c	233;"	d	file:
T	src/delta.c	/^static const unsigned int T[256] = {$/;"	v	file:
TABLE	deps/zlib/inflate.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon28
TABLE_HASH	src/xdiff/xhistogram.c	108;"	d	file:
TBLS	deps/zlib/crc32.c	44;"	d	file:
TBLS	deps/zlib/crc32.c	46;"	d	file:
TEMP_REPO_FOLDER	tests/repo/discover.c	7;"	d	file:
TESTSTR	tests/core/buffer.c	7;"	d	file:
TESTSTR_4096	tests/core/buffer.c	11;"	d	file:
TESTSTR_8192	tests/core/buffer.c	12;"	d	file:
TEST_CONFIG	tests/config/new.c	7;"	d	file:
TEST_CONFIG	tests/config/stress.c	7;"	d	file:
TEST_DIR	tests/index/addall.c	7;"	d	file:
TEST_INDEX2_PATH	tests/index/tests.c	7;"	d	file:
TEST_INDEXBAD_PATH	tests/index/tests.c	9;"	d	file:
TEST_INDEXBIG_PATH	tests/index/tests.c	8;"	d	file:
TEST_INDEX_PATH	tests/index/conflicts.c	10;"	d	file:
TEST_INDEX_PATH	tests/index/names.c	11;"	d	file:
TEST_INDEX_PATH	tests/index/reuc.c	11;"	d	file:
TEST_INDEX_PATH	tests/index/stage.c	9;"	d	file:
TEST_INDEX_PATH	tests/index/tests.c	6;"	d	file:
TEST_INDEX_PATH	tests/merge/files.c	13;"	d	file:
TEST_INDEX_PATH	tests/merge/trees/automerge.c	13;"	d	file:
TEST_INDEX_PATH	tests/merge/trees/trivial.c	13;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/analysis.c	15;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/setup.c	12;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/simple.c	15;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/submodules.c	16;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/trivial.c	14;"	d	file:
TEST_REPO_PATH	tests/checkout/conflict.c	9;"	d	file:
TEST_REPO_PATH	tests/cherrypick/bare.c	10;"	d	file:
TEST_REPO_PATH	tests/cherrypick/workdir.c	10;"	d	file:
TEST_REPO_PATH	tests/index/conflicts.c	9;"	d	file:
TEST_REPO_PATH	tests/index/names.c	10;"	d	file:
TEST_REPO_PATH	tests/index/nsec.c	10;"	d	file:
TEST_REPO_PATH	tests/index/reuc.c	10;"	d	file:
TEST_REPO_PATH	tests/index/stage.c	8;"	d	file:
TEST_REPO_PATH	tests/merge/driver.c	7;"	d	file:
TEST_REPO_PATH	tests/merge/files.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/trees/automerge.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/trees/commits.c	10;"	d	file:
TEST_REPO_PATH	tests/merge/trees/modeconflict.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/trees/recursive.c	9;"	d	file:
TEST_REPO_PATH	tests/merge/trees/renames.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/trees/treediff.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/trees/trivial.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/trees/whitespace.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/analysis.c	14;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/dirty.c	9;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/recursive.c	10;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/renames.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/setup.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/simple.c	14;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/submodules.c	10;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/trivial.c	13;"	d	file:
TEST_REPO_PATH	tests/odb/emptyobjects.c	5;"	d	file:
TEST_REPO_PATH	tests/revert/bare.c	10;"	d	file:
TEST_REPO_PATH	tests/revert/workdir.c	10;"	d	file:
THEIRS_AUTOMERGE_BRANCH	tests/merge/trees/automerge.c	15;"	d	file:
THEIRS_DIRECTORY_FILE	tests/merge/trees/automerge.c	22;"	d	file:
THEIRS_DIRECTORY_FILE	tests/merge/workdir/simple.c	25;"	d	file:
THEIRS_SIMPLE_BRANCH	tests/merge/workdir/setup.c	16;"	d	file:
THEIRS_SIMPLE_BRANCH	tests/merge/workdir/simple.c	17;"	d	file:
THEIRS_SIMPLE_OID	tests/merge/workdir/setup.c	17;"	d	file:
THEIRS_SIMPLE_OID	tests/merge/workdir/simple.c	18;"	d	file:
THEIRS_UNRELATED_BRANCH	tests/merge/trees/automerge.c	17;"	d	file:
THEIRS_UNRELATED_BRANCH	tests/merge/workdir/simple.c	20;"	d	file:
THEIRS_UNRELATED_OID	tests/merge/trees/automerge.c	18;"	d	file:
THEIRS_UNRELATED_OID	tests/merge/workdir/simple.c	21;"	d	file:
THEIRS_UNRELATED_PARENT	tests/merge/trees/automerge.c	19;"	d	file:
THEIRS_UNRELATED_PARENT	tests/merge/workdir/simple.c	22;"	d	file:
THREADCOUNT	tests/object/cache.c	195;"	d	file:
THREADS	tests/threads/diff.c	23;"	d	file:
THREADS	tests/threads/refdb.c	26;"	d	file:
TIME	deps/zlib/inflate.h	/^    TIME,       \/* i: waiting for modification time (gzip) *\/$/;"	e	enum:__anon28
TIMEOUT_INFINITE	src/transports/winhttp.c	34;"	d	file:
TOKEN	deps/http-parser/http_parser.c	371;"	d	file:
TOKEN	deps/http-parser/http_parser.c	375;"	d	file:
TOOBIG	tests/buf/oom.c	5;"	d	file:
TOOBIG	tests/buf/oom.c	7;"	d	file:
TOO_FAR	deps/zlib/deflate.c	108;"	d	file:
TRANSACTION_CONFIG	src/transaction.c	/^	TRANSACTION_CONFIG,$/;"	e	enum:__anon207	file:
TRANSACTION_NONE	src/transaction.c	/^	TRANSACTION_NONE,$/;"	e	enum:__anon207	file:
TRANSACTION_REFS	src/transaction.c	/^	TRANSACTION_REFS,$/;"	e	enum:__anon207	file:
TRANSFER_ENCODING	deps/http-parser/http_parser.c	123;"	d	file:
TREE_ENTRY_CHECK_NAMELEN	src/tree.c	20;"	d	file:
TREE_IDX_ANCESTOR	src/merge.c	/^	TREE_IDX_ANCESTOR = 0,$/;"	e	enum:__anon200	file:
TREE_IDX_OURS	src/merge.c	/^	TREE_IDX_OURS = 1,$/;"	e	enum:__anon200	file:
TREE_IDX_THEIRS	src/merge.c	/^	TREE_IDX_THEIRS = 2$/;"	e	enum:__anon200	file:
TREE_OID_ANCESTOR	tests/merge/trees/treediff.c	13;"	d	file:
TREE_OID_BRANCH	tests/merge/trees/treediff.c	15;"	d	file:
TREE_OID_DF_ANCESTOR	tests/merge/trees/treediff.c	19;"	d	file:
TREE_OID_DF_SIDE1	tests/merge/trees/treediff.c	20;"	d	file:
TREE_OID_DF_SIDE2	tests/merge/trees/treediff.c	21;"	d	file:
TREE_OID_MASTER	tests/merge/trees/treediff.c	14;"	d	file:
TREE_OID_RENAMES1	tests/merge/trees/treediff.c	16;"	d	file:
TREE_OID_RENAMES2	tests/merge/trees/treediff.c	17;"	d	file:
TREE_OID_RENAME_CONFLICT_ANCESTOR	tests/merge/trees/treediff.c	23;"	d	file:
TREE_OID_RENAME_CONFLICT_OURS	tests/merge/trees/treediff.c	24;"	d	file:
TREE_OID_RENAME_CONFLICT_THEIRS	tests/merge/trees/treediff.c	25;"	d	file:
TRY_FREE	deps/zlib/zutil.h	247;"	d
TWO_ANCESTOR_OID	tests/index/reuc.c	17;"	d	file:
TWO_OUR_OID	tests/index/reuc.c	18;"	d	file:
TWO_THEIR_OID	tests/index/reuc.c	19;"	d	file:
TYPE	deps/zlib/inflate.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon28
TYPEDO	deps/zlib/inflate.h	/^        TYPEDO,     \/* i: same, but skip check to exit inflate on new block *\/$/;"	e	enum:__anon28
T_0_15	src/hash/hash_generic.c	110;"	d	file:
T_16_19	src/hash/hash_generic.c	111;"	d	file:
T_20_39	src/hash/hash_generic.c	112;"	d	file:
T_40_59	src/hash/hash_generic.c	113;"	d	file:
T_60_79	src/hash/hash_generic.c	114;"	d	file:
Template	tests/generate.py	/^    class Template(object):$/;"	c	class:Module	inherits:object
Template	tests/generate.py	/^from string import Template$/;"	i
TestSuite	tests/generate.py	/^class TestSuite(object):$/;"	c	inherits:object
Trace	deps/zlib/zutil.h	224;"	d
Trace	deps/zlib/zutil.h	231;"	d
Tracec	deps/zlib/zutil.h	227;"	d
Tracec	deps/zlib/zutil.h	234;"	d
Tracecv	deps/zlib/zutil.h	228;"	d
Tracecv	deps/zlib/zutil.h	235;"	d
Tracev	deps/zlib/zutil.h	225;"	d
Tracev	deps/zlib/zutil.h	232;"	d
Tracevv	deps/zlib/zutil.h	226;"	d
Tracevv	deps/zlib/zutil.h	233;"	d
U	src/delta.c	/^static const unsigned int U[256] = {$/;"	v	file:
UF_FRAGMENT	deps/http-parser/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	deps/http-parser/http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	deps/http-parser/http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	deps/http-parser/http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	deps/http-parser/http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	deps/http-parser/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	deps/http-parser/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	deps/http-parser/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
UINT16_C	include/git2/stdint.h	236;"	d
UINT16_MAX	include/git2/stdint.h	141;"	d
UINT31_MAX	src/indexer.c	25;"	d	file:
UINT32_C	include/git2/stdint.h	237;"	d
UINT32_MAX	include/git2/stdint.h	142;"	d
UINT64_C	include/git2/stdint.h	238;"	d
UINT64_MAX	include/git2/stdint.h	143;"	d
UINT8_C	include/git2/stdint.h	235;"	d
UINT8_MAX	include/git2/stdint.h	140;"	d
UINTMAX_C	include/git2/stdint.h	242;"	d
UINTMAX_MAX	include/git2/stdint.h	187;"	d
UINTPTR_MAX	include/git2/stdint.h	177;"	d
UINTPTR_MAX	include/git2/stdint.h	181;"	d
UINT_FAST16_MAX	include/git2/stdint.h	169;"	d
UINT_FAST32_MAX	include/git2/stdint.h	170;"	d
UINT_FAST64_MAX	include/git2/stdint.h	171;"	d
UINT_FAST8_MAX	include/git2/stdint.h	168;"	d
UINT_LEAST16_MAX	include/git2/stdint.h	155;"	d
UINT_LEAST32_MAX	include/git2/stdint.h	156;"	d
UINT_LEAST64_MAX	include/git2/stdint.h	157;"	d
UINT_LEAST8_MAX	include/git2/stdint.h	154;"	d
ULLONG_MAX	deps/http-parser/http_parser.c	33;"	d	file:
UNCHANGED_INDEX_ENTRY	tests/merge/trees/automerge.c	33;"	d	file:
UNCHANGED_INDEX_ENTRY	tests/merge/workdir/simple.c	41;"	d	file:
UNRELATED_NEW1	tests/merge/workdir/simple.c	46;"	d	file:
UNRELATED_NEW2	tests/merge/workdir/simple.c	49;"	d	file:
UNUSED	deps/regex/regex_internal.h	32;"	d
UNUSED	deps/regex/regex_internal.h	34;"	d
UNUSED	examples/network/common.c	10;"	d	file:
UNUSED	examples/network/common.c	12;"	d	file:
UNUSED	examples/network/common.c	14;"	d	file:
UPDATE	deps/zlib/inflate.c	433;"	d	file:
UPDATE	deps/zlib/inflate.c	436;"	d	file:
UPDATE	examples/add.c	/^	UPDATE = 4,$/;"	e	enum:print_options	file:
UPDATE_HASH	deps/zlib/deflate.c	167;"	d	file:
UPGRADE	deps/http-parser/http_parser.c	124;"	d	file:
UPTODATE_BRANCH	tests/merge/workdir/analysis.c	17;"	d	file:
URLZONE_INTRANET	deps/winhttp/urlmon.h	36;"	d
URLZONE_LOCAL_MACHINE	deps/winhttp/urlmon.h	35;"	d
URLZONE_TRUSTED	deps/winhttp/urlmon.h	37;"	d
URL_COMPONENTS	deps/winhttp/winhttp.h	/^} URL_COMPONENTS, *LPURL_COMPONENTS;$/;"	t	typeref:struct:__anon19
URL_COMPONENTSW	deps/winhttp/winhttp.h	/^typedef URL_COMPONENTS URL_COMPONENTSW;$/;"	t
USE_DEFAULT	src/diff_tform.c	305;"	d	file:
USE_DEFAULT	src/diff_tform.c	319;"	d	file:
UTF8_BOM	tests/filter/crlf.h	8;"	d
UUID_LENGTH_CCH	src/transports/winhttp.c	33;"	d	file:
UniqueGenerator	tests/resources/userdiff/after/file.php	/^class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/before/file.php	/^class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/expected/driver/diff.php	/^@@ -12,2 +12,3 @@ class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/expected/nodriver/diff.php	/^@@ -12,2 +12,3 @@ class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/expected/nodriver/diff.php	/^@@ -17,3 +18,3 @@ class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/expected/nodriver/diff.php	/^@@ -33,10 +34,10 @@ class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/files/file.php	/^class UniqueGenerator$/;"	c
VALUE	src/transports/http.c	/^	VALUE$/;"	e	enum:last_cb	file:
VERBOSE	examples/add.c	/^	VERBOSE = 2,$/;"	e	enum:print_options	file:
VERY_SECURE_ENCRYPTION	tests/filter/custom_helpers.c	7;"	d	file:
VOLUME_NAME_DOS	src/win32/mingw-compat.h	18;"	d
W	src/hash/hash_generic.c	96;"	d	file:
W	src/hash/hash_generic.h	/^	unsigned int W[16];$/;"	m	struct:git_hash_ctx	access:public
WCHAR_MAX	include/git2/stdint.h	215;"	d
WCHAR_MIN	include/git2/stdint.h	212;"	d
WC_ERR_INVALID_CHARS	src/win32/utf-conv.h	14;"	d
WIDEN	src/transports/winhttp.c	28;"	d	file:
WIDEN2	src/transports/winhttp.c	27;"	d	file:
WIDE_NEWLINE_CHAR	deps/regex/regex_internal.h	147;"	d
WIN32_IS_WSEP	src/win32/posix_w32.c	135;"	d	file:
WIN32_LEAN_AND_MEAN	src/thread-utils.c	12;"	d	file:
WIN32_MODE_MASK	src/win32/posix_w32.c	42;"	d	file:
WINHTTPAPI	deps/winhttp/winhttp.h	30;"	d
WINHTTP_ACCESS_TYPE_DEFAULT_PROXY	deps/winhttp/winhttp.h	61;"	d
WINHTTP_ACCESS_TYPE_NAMED_PROXY	deps/winhttp/winhttp.h	63;"	d
WINHTTP_ACCESS_TYPE_NO_PROXY	deps/winhttp/winhttp.h	62;"	d
WINHTTP_ADDREQ_FLAGS_MASK	deps/winhttp/winhttp.h	79;"	d
WINHTTP_ADDREQ_FLAG_ADD	deps/winhttp/winhttp.h	81;"	d
WINHTTP_ADDREQ_FLAG_ADD_IF_NEW	deps/winhttp/winhttp.h	80;"	d
WINHTTP_ADDREQ_FLAG_COALESCE	deps/winhttp/winhttp.h	84;"	d
WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA	deps/winhttp/winhttp.h	82;"	d
WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON	deps/winhttp/winhttp.h	83;"	d
WINHTTP_ADDREQ_FLAG_REPLACE	deps/winhttp/winhttp.h	85;"	d
WINHTTP_ADDREQ_INDEX_MASK	deps/winhttp/winhttp.h	78;"	d
WINHTTP_ASYNC_RESULT	deps/winhttp/winhttp.h	/^} WINHTTP_ASYNC_RESULT, *LPWINHTTP_ASYNC_RESULT;$/;"	t	typeref:struct:__anon20
WINHTTP_AUTH_SCHEME_BASIC	deps/winhttp/winhttp.h	445;"	d
WINHTTP_AUTH_SCHEME_DIGEST	deps/winhttp/winhttp.h	448;"	d
WINHTTP_AUTH_SCHEME_NEGOTIATE	deps/winhttp/winhttp.h	449;"	d
WINHTTP_AUTH_SCHEME_NTLM	deps/winhttp/winhttp.h	446;"	d
WINHTTP_AUTH_SCHEME_PASSPORT	deps/winhttp/winhttp.h	447;"	d
WINHTTP_AUTH_TARGET_PROXY	deps/winhttp/winhttp.h	452;"	d
WINHTTP_AUTH_TARGET_SERVER	deps/winhttp/winhttp.h	451;"	d
WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT	deps/winhttp/winhttp.h	152;"	d
WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH	deps/winhttp/winhttp.h	151;"	d
WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW	deps/winhttp/winhttp.h	150;"	d
WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM	deps/winhttp/winhttp.h	149;"	d
WINHTTP_AUTOPROXY_AUTO_DETECT	deps/winhttp/winhttp.h	517;"	d
WINHTTP_AUTOPROXY_CONFIG_URL	deps/winhttp/winhttp.h	518;"	d
WINHTTP_AUTOPROXY_OPTIONS	deps/winhttp/winhttp.h	/^} WINHTTP_AUTOPROXY_OPTIONS;$/;"	t	typeref:struct:__anon24
WINHTTP_AUTOPROXY_RUN_INPROCESS	deps/winhttp/winhttp.h	519;"	d
WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY	deps/winhttp/winhttp.h	520;"	d
WINHTTP_AUTO_DETECT_TYPE_DHCP	deps/winhttp/winhttp.h	514;"	d
WINHTTP_AUTO_DETECT_TYPE_DNS_A	deps/winhttp/winhttp.h	515;"	d
WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS	deps/winhttp/winhttp.h	415;"	d
WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS	deps/winhttp/winhttp.h	418;"	d
WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION	deps/winhttp/winhttp.h	403;"	d
WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER	deps/winhttp/winhttp.h	400;"	d
WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE	deps/winhttp/winhttp.h	411;"	d
WINHTTP_CALLBACK_FLAG_DETECTING_PROXY	deps/winhttp/winhttp.h	405;"	d
WINHTTP_CALLBACK_FLAG_HANDLES	deps/winhttp/winhttp.h	404;"	d
WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE	deps/winhttp/winhttp.h	410;"	d
WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE	deps/winhttp/winhttp.h	407;"	d
WINHTTP_CALLBACK_FLAG_READ_COMPLETE	deps/winhttp/winhttp.h	412;"	d
WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE	deps/winhttp/winhttp.h	402;"	d
WINHTTP_CALLBACK_FLAG_REDIRECT	deps/winhttp/winhttp.h	406;"	d
WINHTTP_CALLBACK_FLAG_REQUEST_ERROR	deps/winhttp/winhttp.h	414;"	d
WINHTTP_CALLBACK_FLAG_RESOLVE_NAME	deps/winhttp/winhttp.h	399;"	d
WINHTTP_CALLBACK_FLAG_SECURE_FAILURE	deps/winhttp/winhttp.h	408;"	d
WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE	deps/winhttp/winhttp.h	409;"	d
WINHTTP_CALLBACK_FLAG_SEND_REQUEST	deps/winhttp/winhttp.h	401;"	d
WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE	deps/winhttp/winhttp.h	413;"	d
WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION	deps/winhttp/winhttp.h	385;"	d
WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER	deps/winhttp/winhttp.h	380;"	d
WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER	deps/winhttp/winhttp.h	379;"	d
WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED	deps/winhttp/winhttp.h	386;"	d
WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE	deps/winhttp/winhttp.h	394;"	d
WINHTTP_CALLBACK_STATUS_DETECTING_PROXY	deps/winhttp/winhttp.h	389;"	d
WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID	deps/winhttp/winhttp.h	435;"	d
WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID	deps/winhttp/winhttp.h	436;"	d
WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED	deps/winhttp/winhttp.h	433;"	d
WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED	deps/winhttp/winhttp.h	431;"	d
WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE	deps/winhttp/winhttp.h	437;"	d
WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA	deps/winhttp/winhttp.h	434;"	d
WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT	deps/winhttp/winhttp.h	432;"	d
WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR	deps/winhttp/winhttp.h	438;"	d
WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING	deps/winhttp/winhttp.h	388;"	d
WINHTTP_CALLBACK_STATUS_HANDLE_CREATED	deps/winhttp/winhttp.h	387;"	d
WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE	deps/winhttp/winhttp.h	393;"	d
WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE	deps/winhttp/winhttp.h	391;"	d
WINHTTP_CALLBACK_STATUS_NAME_RESOLVED	deps/winhttp/winhttp.h	378;"	d
WINHTTP_CALLBACK_STATUS_READ_COMPLETE	deps/winhttp/winhttp.h	395;"	d
WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE	deps/winhttp/winhttp.h	383;"	d
WINHTTP_CALLBACK_STATUS_REDIRECT	deps/winhttp/winhttp.h	390;"	d
WINHTTP_CALLBACK_STATUS_REQUEST_ERROR	deps/winhttp/winhttp.h	397;"	d
WINHTTP_CALLBACK_STATUS_REQUEST_SENT	deps/winhttp/winhttp.h	382;"	d
WINHTTP_CALLBACK_STATUS_RESOLVING_NAME	deps/winhttp/winhttp.h	377;"	d
WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED	deps/winhttp/winhttp.h	384;"	d
WINHTTP_CALLBACK_STATUS_SECURE_FAILURE	deps/winhttp/winhttp.h	392;"	d
WINHTTP_CALLBACK_STATUS_SENDING_REQUEST	deps/winhttp/winhttp.h	381;"	d
WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE	deps/winhttp/winhttp.h	398;"	d
WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE	deps/winhttp/winhttp.h	396;"	d
WINHTTP_CERTIFICATE_INFO	deps/winhttp/winhttp.h	/^} WINHTTP_CERTIFICATE_INFO;$/;"	t	typeref:struct:__anon21
WINHTTP_CONNECTION_INFO	deps/winhttp/winhttp.h	/^} WINHTTP_CONNECTION_INFO;$/;"	t	typeref:struct:__anon26
WINHTTP_CONNS_PER_SERVER_UNLIMITED	deps/winhttp/winhttp.h	147;"	d
WINHTTP_CURRENT_USER_IE_PROXY_CONFIG	deps/winhttp/winhttp.h	/^} WINHTTP_CURRENT_USER_IE_PROXY_CONFIG;$/;"	t	typeref:struct:__anon23
WINHTTP_DEFAULT_ACCEPT_TYPES	deps/winhttp/winhttp.h	177;"	d
WINHTTP_DEFAULT_ACCEPT_TYPES	deps/winhttp/winhttp.h	69;"	d
WINHTTP_DISABLE_AUTHENTICATION	deps/winhttp/winhttp.h	167;"	d
WINHTTP_DISABLE_COOKIES	deps/winhttp/winhttp.h	165;"	d
WINHTTP_DISABLE_KEEP_ALIVE	deps/winhttp/winhttp.h	168;"	d
WINHTTP_DISABLE_PASSPORT_AUTH	deps/winhttp/winhttp.h	160;"	d
WINHTTP_DISABLE_PASSPORT_KEYRING	deps/winhttp/winhttp.h	162;"	d
WINHTTP_DISABLE_REDIRECTS	deps/winhttp/winhttp.h	166;"	d
WINHTTP_DISABLE_SPN_SERVER_PORT	deps/winhttp/winhttp.h	171;"	d
WINHTTP_ENABLE_PASSPORT_AUTH	deps/winhttp/winhttp.h	161;"	d
WINHTTP_ENABLE_PASSPORT_KEYRING	deps/winhttp/winhttp.h	163;"	d
WINHTTP_ENABLE_SPN_SERVER_PORT	deps/winhttp/winhttp.h	172;"	d
WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION	deps/winhttp/winhttp.h	170;"	d
WINHTTP_ENABLE_SSL_REVOCATION	deps/winhttp/winhttp.h	169;"	d
WINHTTP_ERROR_BASE	deps/winhttp/winhttp.h	184;"	d
WINHTTP_ERROR_LAST	deps/winhttp/winhttp.h	232;"	d
WINHTTP_FIRST_OPTION	deps/winhttp/winhttp.h	90;"	d
WINHTTP_FLAG_ASYNC	deps/winhttp/winhttp.h	50;"	d
WINHTTP_FLAG_BYPASS_PROXY_CACHE	deps/winhttp/winhttp.h	57;"	d
WINHTTP_FLAG_ESCAPE_DISABLE	deps/winhttp/winhttp.h	55;"	d
WINHTTP_FLAG_ESCAPE_DISABLE_QUERY	deps/winhttp/winhttp.h	56;"	d
WINHTTP_FLAG_ESCAPE_PERCENT	deps/winhttp/winhttp.h	53;"	d
WINHTTP_FLAG_NULL_CODEPAGE	deps/winhttp/winhttp.h	54;"	d
WINHTTP_FLAG_REFRESH	deps/winhttp/winhttp.h	58;"	d
WINHTTP_FLAG_SECURE	deps/winhttp/winhttp.h	59;"	d
WINHTTP_FLAG_SECURE_PROTOCOL_ALL	deps/winhttp/winhttp.h	443;"	d
WINHTTP_FLAG_SECURE_PROTOCOL_SSL2	deps/winhttp/winhttp.h	440;"	d
WINHTTP_FLAG_SECURE_PROTOCOL_SSL3	deps/winhttp/winhttp.h	441;"	d
WINHTTP_FLAG_SECURE_PROTOCOL_TLS1	deps/winhttp/winhttp.h	442;"	d
WINHTTP_HANDLE_TYPE_CONNECT	deps/winhttp/winhttp.h	428;"	d
WINHTTP_HANDLE_TYPE_REQUEST	deps/winhttp/winhttp.h	429;"	d
WINHTTP_HANDLE_TYPE_SESSION	deps/winhttp/winhttp.h	427;"	d
WINHTTP_HEADER_NAME_BY_INDEX	deps/winhttp/winhttp.h	74;"	d
WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH	deps/winhttp/winhttp.h	87;"	d
WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH	src/transports/winhttp.c	37;"	d	file:
WINHTTP_INVALID_STATUS_CALLBACK	deps/winhttp/winhttp.h	419;"	d
WINHTTP_LAST_OPTION	deps/winhttp/winhttp.h	141;"	d
WINHTTP_NO_ADDITIONAL_HEADERS	deps/winhttp/winhttp.h	180;"	d
WINHTTP_NO_ADDITIONAL_HEADERS	deps/winhttp/winhttp.h	71;"	d
WINHTTP_NO_HEADER_INDEX	deps/winhttp/winhttp.h	76;"	d
WINHTTP_NO_OUTPUT_BUFFER	deps/winhttp/winhttp.h	75;"	d
WINHTTP_NO_PROXY_BYPASS	deps/winhttp/winhttp.h	66;"	d
WINHTTP_NO_PROXY_NAME	deps/winhttp/winhttp.h	65;"	d
WINHTTP_NO_REFERER	deps/winhttp/winhttp.h	176;"	d
WINHTTP_NO_REFERER	deps/winhttp/winhttp.h	68;"	d
WINHTTP_NO_REQUEST_DATA	deps/winhttp/winhttp.h	181;"	d
WINHTTP_NO_REQUEST_DATA	deps/winhttp/winhttp.h	72;"	d
WINHTTP_OPTION_AUTOLOGON_POLICY	deps/winhttp/winhttp.h	117;"	d
WINHTTP_OPTION_CALLBACK	deps/winhttp/winhttp.h	91;"	d
WINHTTP_OPTION_CLIENT_CERT_CONTEXT	deps/winhttp/winhttp.h	110;"	d
WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST	deps/winhttp/winhttp.h	134;"	d
WINHTTP_OPTION_CODEPAGE	deps/winhttp/winhttp.h	114;"	d
WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH	deps/winhttp/winhttp.h	123;"	d
WINHTTP_OPTION_CONNECTION_INFO	deps/winhttp/winhttp.h	133;"	d
WINHTTP_OPTION_CONNECT_RETRIES	deps/winhttp/winhttp.h	94;"	d
WINHTTP_OPTION_CONNECT_TIMEOUT	deps/winhttp/winhttp.h	93;"	d
WINHTTP_OPTION_CONTEXT_VALUE	deps/winhttp/winhttp.h	109;"	d
WINHTTP_OPTION_DISABLE_FEATURE	deps/winhttp/winhttp.h	113;"	d
WINHTTP_OPTION_ENABLETRACING	deps/winhttp/winhttp.h	125;"	d
WINHTTP_OPTION_ENABLE_FEATURE	deps/winhttp/winhttp.h	119;"	d
WINHTTP_OPTION_EXTENDED_ERROR	deps/winhttp/winhttp.h	102;"	d
WINHTTP_OPTION_GLOBAL_PROXY_CREDS	deps/winhttp/winhttp.h	136;"	d
WINHTTP_OPTION_GLOBAL_SERVER_CREDS	deps/winhttp/winhttp.h	137;"	d
WINHTTP_OPTION_HANDLE_TYPE	deps/winhttp/winhttp.h	98;"	d
WINHTTP_OPTION_HTTP_VERSION	deps/winhttp/winhttp.h	112;"	d
WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER	deps/winhttp/winhttp.h	116;"	d
WINHTTP_OPTION_MAX_CONNS_PER_SERVER	deps/winhttp/winhttp.h	115;"	d
WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS	deps/winhttp/winhttp.h	129;"	d
WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE	deps/winhttp/winhttp.h	130;"	d
WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE	deps/winhttp/winhttp.h	132;"	d
WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE	deps/winhttp/winhttp.h	131;"	d
WINHTTP_OPTION_PARENT_HANDLE	deps/winhttp/winhttp.h	101;"	d
WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT	deps/winhttp/winhttp.h	121;"	d
WINHTTP_OPTION_PASSPORT_COBRANDING_URL	deps/winhttp/winhttp.h	122;"	d
WINHTTP_OPTION_PASSPORT_RETURN_URL	deps/winhttp/winhttp.h	127;"	d
WINHTTP_OPTION_PASSPORT_SIGN_OUT	deps/winhttp/winhttp.h	126;"	d
WINHTTP_OPTION_PASSWORD	deps/winhttp/winhttp.h	143;"	d
WINHTTP_OPTION_PEERDIST_EXTENSION_STATE	src/transports/winhttp.c	31;"	d	file:
WINHTTP_OPTION_PROXY	deps/winhttp/winhttp.h	107;"	d
WINHTTP_OPTION_PROXY_PASSWORD	deps/winhttp/winhttp.h	145;"	d
WINHTTP_OPTION_PROXY_USERNAME	deps/winhttp/winhttp.h	144;"	d
WINHTTP_OPTION_READ_BUFFER_SIZE	deps/winhttp/winhttp.h	99;"	d
WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT	deps/winhttp/winhttp.h	97;"	d
WINHTTP_OPTION_RECEIVE_TIMEOUT	deps/winhttp/winhttp.h	96;"	d
WINHTTP_OPTION_REDIRECT_POLICY	deps/winhttp/winhttp.h	128;"	d
WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS	deps/winhttp/winhttp.h	156;"	d
WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT	deps/winhttp/winhttp.h	158;"	d
WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP	deps/winhttp/winhttp.h	155;"	d
WINHTTP_OPTION_REDIRECT_POLICY_LAST	deps/winhttp/winhttp.h	157;"	d
WINHTTP_OPTION_REDIRECT_POLICY_NEVER	deps/winhttp/winhttp.h	154;"	d
WINHTTP_OPTION_REJECT_USERPWD_IN_URL	deps/winhttp/winhttp.h	139;"	d
WINHTTP_OPTION_REQUEST_PRIORITY	deps/winhttp/winhttp.h	111;"	d
WINHTTP_OPTION_RESOLVE_TIMEOUT	deps/winhttp/winhttp.h	92;"	d
WINHTTP_OPTION_SECURE_PROTOCOLS	deps/winhttp/winhttp.h	124;"	d
WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT	deps/winhttp/winhttp.h	104;"	d
WINHTTP_OPTION_SECURITY_FLAGS	deps/winhttp/winhttp.h	103;"	d
WINHTTP_OPTION_SECURITY_KEY_BITNESS	deps/winhttp/winhttp.h	106;"	d
WINHTTP_OPTION_SEND_TIMEOUT	deps/winhttp/winhttp.h	95;"	d
WINHTTP_OPTION_SERVER_CERT_CONTEXT	deps/winhttp/winhttp.h	118;"	d
WINHTTP_OPTION_SPN	deps/winhttp/winhttp.h	135;"	d
WINHTTP_OPTION_SPN_MASK	deps/winhttp/winhttp.h	173;"	d
WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT	deps/winhttp/winhttp.h	138;"	d
WINHTTP_OPTION_URL	deps/winhttp/winhttp.h	105;"	d
WINHTTP_OPTION_USERNAME	deps/winhttp/winhttp.h	142;"	d
WINHTTP_OPTION_USER_AGENT	deps/winhttp/winhttp.h	108;"	d
WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS	deps/winhttp/winhttp.h	140;"	d
WINHTTP_OPTION_WORKER_THREAD_COUNT	deps/winhttp/winhttp.h	120;"	d
WINHTTP_OPTION_WRITE_BUFFER_SIZE	deps/winhttp/winhttp.h	100;"	d
WINHTTP_PROXY_INFO	deps/winhttp/winhttp.h	/^} WINHTTP_PROXY_INFO, *LPWINHTTP_PROXY_INFO;$/;"	t	typeref:struct:__anon22
WINHTTP_PROXY_INFOW	deps/winhttp/winhttp.h	/^typedef WINHTTP_PROXY_INFO WINHTTP_PROXY_INFOW;$/;"	t
WINHTTP_QUERY_ACCEPT	deps/winhttp/winhttp.h	319;"	d
WINHTTP_QUERY_ACCEPT_CHARSET	deps/winhttp/winhttp.h	320;"	d
WINHTTP_QUERY_ACCEPT_ENCODING	deps/winhttp/winhttp.h	321;"	d
WINHTTP_QUERY_ACCEPT_LANGUAGE	deps/winhttp/winhttp.h	322;"	d
WINHTTP_QUERY_ACCEPT_RANGES	deps/winhttp/winhttp.h	337;"	d
WINHTTP_QUERY_AGE	deps/winhttp/winhttp.h	343;"	d
WINHTTP_QUERY_ALLOW	deps/winhttp/winhttp.h	302;"	d
WINHTTP_QUERY_AUTHENTICATION_INFO	deps/winhttp/winhttp.h	367;"	d
WINHTTP_QUERY_AUTHORIZATION	deps/winhttp/winhttp.h	323;"	d
WINHTTP_QUERY_CACHE_CONTROL	deps/winhttp/winhttp.h	344;"	d
WINHTTP_QUERY_CONNECTION	deps/winhttp/winhttp.h	318;"	d
WINHTTP_QUERY_CONTENT_BASE	deps/winhttp/winhttp.h	345;"	d
WINHTTP_QUERY_CONTENT_DESCRIPTION	deps/winhttp/winhttp.h	299;"	d
WINHTTP_QUERY_CONTENT_DISPOSITION	deps/winhttp/winhttp.h	342;"	d
WINHTTP_QUERY_CONTENT_ENCODING	deps/winhttp/winhttp.h	324;"	d
WINHTTP_QUERY_CONTENT_ID	deps/winhttp/winhttp.h	298;"	d
WINHTTP_QUERY_CONTENT_LANGUAGE	deps/winhttp/winhttp.h	301;"	d
WINHTTP_QUERY_CONTENT_LENGTH	deps/winhttp/winhttp.h	300;"	d
WINHTTP_QUERY_CONTENT_LOCATION	deps/winhttp/winhttp.h	346;"	d
WINHTTP_QUERY_CONTENT_MD5	deps/winhttp/winhttp.h	347;"	d
WINHTTP_QUERY_CONTENT_RANGE	deps/winhttp/winhttp.h	348;"	d
WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING	deps/winhttp/winhttp.h	297;"	d
WINHTTP_QUERY_CONTENT_TYPE	deps/winhttp/winhttp.h	296;"	d
WINHTTP_QUERY_COOKIE	deps/winhttp/winhttp.h	339;"	d
WINHTTP_QUERY_COST	deps/winhttp/winhttp.h	310;"	d
WINHTTP_QUERY_CUSTOM	deps/winhttp/winhttp.h	371;"	d
WINHTTP_QUERY_DATE	deps/winhttp/winhttp.h	304;"	d
WINHTTP_QUERY_DERIVED_FROM	deps/winhttp/winhttp.h	309;"	d
WINHTTP_QUERY_ETAG	deps/winhttp/winhttp.h	349;"	d
WINHTTP_QUERY_EXPECT	deps/winhttp/winhttp.h	363;"	d
WINHTTP_QUERY_EXPIRES	deps/winhttp/winhttp.h	305;"	d
WINHTTP_QUERY_FLAG_NUMBER	deps/winhttp/winhttp.h	374;"	d
WINHTTP_QUERY_FLAG_REQUEST_HEADERS	deps/winhttp/winhttp.h	372;"	d
WINHTTP_QUERY_FLAG_SYSTEMTIME	deps/winhttp/winhttp.h	373;"	d
WINHTTP_QUERY_FORWARDED	deps/winhttp/winhttp.h	325;"	d
WINHTTP_QUERY_FROM	deps/winhttp/winhttp.h	326;"	d
WINHTTP_QUERY_HOST	deps/winhttp/winhttp.h	350;"	d
WINHTTP_QUERY_IF_MATCH	deps/winhttp/winhttp.h	351;"	d
WINHTTP_QUERY_IF_MODIFIED_SINCE	deps/winhttp/winhttp.h	327;"	d
WINHTTP_QUERY_IF_NONE_MATCH	deps/winhttp/winhttp.h	352;"	d
WINHTTP_QUERY_IF_RANGE	deps/winhttp/winhttp.h	353;"	d
WINHTTP_QUERY_IF_UNMODIFIED_SINCE	deps/winhttp/winhttp.h	354;"	d
WINHTTP_QUERY_LAST_MODIFIED	deps/winhttp/winhttp.h	306;"	d
WINHTTP_QUERY_LINK	deps/winhttp/winhttp.h	311;"	d
WINHTTP_QUERY_LOCATION	deps/winhttp/winhttp.h	328;"	d
WINHTTP_QUERY_MAX	deps/winhttp/winhttp.h	370;"	d
WINHTTP_QUERY_MAX_FORWARDS	deps/winhttp/winhttp.h	355;"	d
WINHTTP_QUERY_MESSAGE_ID	deps/winhttp/winhttp.h	307;"	d
WINHTTP_QUERY_MIME_VERSION	deps/winhttp/winhttp.h	295;"	d
WINHTTP_QUERY_ORIG_URI	deps/winhttp/winhttp.h	329;"	d
WINHTTP_QUERY_PASSPORT_CONFIG	deps/winhttp/winhttp.h	369;"	d
WINHTTP_QUERY_PASSPORT_URLS	deps/winhttp/winhttp.h	368;"	d
WINHTTP_QUERY_PRAGMA	deps/winhttp/winhttp.h	312;"	d
WINHTTP_QUERY_PROXY_AUTHENTICATE	deps/winhttp/winhttp.h	336;"	d
WINHTTP_QUERY_PROXY_AUTHORIZATION	deps/winhttp/winhttp.h	356;"	d
WINHTTP_QUERY_PROXY_CONNECTION	deps/winhttp/winhttp.h	364;"	d
WINHTTP_QUERY_PROXY_SUPPORT	deps/winhttp/winhttp.h	366;"	d
WINHTTP_QUERY_PUBLIC	deps/winhttp/winhttp.h	303;"	d
WINHTTP_QUERY_RANGE	deps/winhttp/winhttp.h	357;"	d
WINHTTP_QUERY_RAW_HEADERS	deps/winhttp/winhttp.h	316;"	d
WINHTTP_QUERY_RAW_HEADERS_CRLF	deps/winhttp/winhttp.h	317;"	d
WINHTTP_QUERY_REFERER	deps/winhttp/winhttp.h	330;"	d
WINHTTP_QUERY_REFRESH	deps/winhttp/winhttp.h	341;"	d
WINHTTP_QUERY_REQUEST_METHOD	deps/winhttp/winhttp.h	340;"	d
WINHTTP_QUERY_RETRY_AFTER	deps/winhttp/winhttp.h	331;"	d
WINHTTP_QUERY_SERVER	deps/winhttp/winhttp.h	332;"	d
WINHTTP_QUERY_SET_COOKIE	deps/winhttp/winhttp.h	338;"	d
WINHTTP_QUERY_STATUS_CODE	deps/winhttp/winhttp.h	314;"	d
WINHTTP_QUERY_STATUS_TEXT	deps/winhttp/winhttp.h	315;"	d
WINHTTP_QUERY_TITLE	deps/winhttp/winhttp.h	333;"	d
WINHTTP_QUERY_TRANSFER_ENCODING	deps/winhttp/winhttp.h	358;"	d
WINHTTP_QUERY_UNLESS_MODIFIED_SINCE	deps/winhttp/winhttp.h	365;"	d
WINHTTP_QUERY_UPGRADE	deps/winhttp/winhttp.h	359;"	d
WINHTTP_QUERY_URI	deps/winhttp/winhttp.h	308;"	d
WINHTTP_QUERY_USER_AGENT	deps/winhttp/winhttp.h	334;"	d
WINHTTP_QUERY_VARY	deps/winhttp/winhttp.h	360;"	d
WINHTTP_QUERY_VERSION	deps/winhttp/winhttp.h	313;"	d
WINHTTP_QUERY_VIA	deps/winhttp/winhttp.h	361;"	d
WINHTTP_QUERY_WARNING	deps/winhttp/winhttp.h	362;"	d
WINHTTP_QUERY_WWW_AUTHENTICATE	deps/winhttp/winhttp.h	335;"	d
WINHTTP_STATUS_CALLBACK	deps/winhttp/winhttp.h	/^typedef VOID (CALLBACK *WINHTTP_STATUS_CALLBACK)(HINTERNET,DWORD_PTR,DWORD,LPVOID,DWORD);$/;"	t
WINHTTP_TIME_FORMAT_BUFSIZE	deps/winhttp/winhttp.h	454;"	d
WINT_MAX	include/git2/stdint.h	219;"	d
WINT_MIN	include/git2/stdint.h	218;"	d
WIN_INIT	deps/zlib/deflate.h	291;"	d
WORD_DEFAULT	src/userdiff.h	205;"	d
WORD_DEFAULT	src/userdiff.h	23;"	d
WORD_DELIM	deps/regex/regex_internal.h	/^  WORD_DELIM = WORD_DELIM_CONSTRAINT,$/;"	e	enum:__anon3
WORD_DELIM_CONSTRAINT	deps/regex/regex_internal.h	209;"	d
WORD_FIRST	deps/regex/regex_internal.h	/^  WORD_FIRST = PREV_NOTWORD_CONSTRAINT | NEXT_WORD_CONSTRAINT,$/;"	e	enum:__anon3
WORD_LAST	deps/regex/regex_internal.h	/^  WORD_LAST = PREV_WORD_CONSTRAINT | NEXT_NOTWORD_CONSTRAINT,$/;"	e	enum:__anon3
WORKDIR	tests/object/blob/write.c	9;"	d	file:
WRITE_BUFFER_SIZE	src/filebuf.c	/^static const size_t WRITE_BUFFER_SIZE = (4096 * 2);$/;"	v	file:
WRITE_ONE_BREAK	src/pack-objects.c	/^	WRITE_ONE_BREAK = 0, \/* writing this will bust the limit; not written *\/$/;"	e	enum:write_one_status	file:
WRITE_ONE_RECURSIVE	src/pack-objects.c	/^	WRITE_ONE_RECURSIVE = 2 \/* already scheduled to be written *\/$/;"	e	enum:write_one_status	file:
WRITE_ONE_SKIP	src/pack-objects.c	/^	WRITE_ONE_SKIP = -1, \/* already written *\/$/;"	e	enum:write_one_status	file:
WRITE_ONE_WRITTEN	src/pack-objects.c	/^	WRITE_ONE_WRITTEN = 1, \/* normal *\/$/;"	e	enum:write_one_status	file:
W_OK	src/posix.h	64;"	d
W_OK	tests/clar.c	53;"	d	file:
XDF_DIFF_ALG	src/xdiff/xdiff.h	42;"	d
XDF_DIFF_ALGORITHM_MASK	src/xdiff/xdiff.h	41;"	d
XDF_HISTOGRAM_DIFF	src/xdiff/xdiff.h	40;"	d
XDF_IGNORE_BLANK_LINES	src/xdiff/xdiff.h	44;"	d
XDF_IGNORE_WHITESPACE	src/xdiff/xdiff.h	34;"	d
XDF_IGNORE_WHITESPACE_AT_EOL	src/xdiff/xdiff.h	36;"	d
XDF_IGNORE_WHITESPACE_CHANGE	src/xdiff/xdiff.h	35;"	d
XDF_NEED_MINIMAL	src/xdiff/xdiff.h	33;"	d
XDF_PATIENCE_DIFF	src/xdiff/xdiff.h	39;"	d
XDF_WHITESPACE_FLAGS	src/xdiff/xdiff.h	37;"	d
XDIFFI_H	src/xdiff/xdiffi.h	24;"	d
XDIFF_H	src/xdiff/xdiff.h	26;"	d
XDL_ABS	src/xdiff/xmacros.h	31;"	d
XDL_ADDBITS	src/xdiff/xmacros.h	34;"	d
XDL_BDOP_CPY	src/xdiff/xdiff.h	55;"	d
XDL_BDOP_INS	src/xdiff/xdiff.h	54;"	d
XDL_BDOP_INSB	src/xdiff/xdiff.h	56;"	d
XDL_EMIT_COMMON	src/xdiff/xdiff.h	47;"	d
XDL_EMIT_FUNCCONTEXT	src/xdiff/xdiff.h	48;"	d
XDL_EMIT_FUNCNAMES	src/xdiff/xdiff.h	46;"	d
XDL_GUESS_NLINES1	src/xdiff/xprepare.c	29;"	d	file:
XDL_GUESS_NLINES2	src/xdiff/xprepare.c	30;"	d	file:
XDL_HASHLONG	src/xdiff/xmacros.h	36;"	d
XDL_HEUR_MIN_COST	src/xdiff/xdiffi.c	29;"	d	file:
XDL_ISDIGIT	src/xdiff/xmacros.h	32;"	d
XDL_ISSPACE	src/xdiff/xmacros.h	33;"	d
XDL_KPDIS_RUN	src/xdiff/xprepare.c	26;"	d	file:
XDL_K_HEUR	src/xdiff/xdiffi.c	32;"	d	file:
XDL_LE32_GET	src/xdiff/xmacros.h	46;"	d
XDL_LE32_PUT	src/xdiff/xmacros.h	38;"	d
XDL_LINE_MAX	src/xdiff/xdiffi.c	30;"	d	file:
XDL_MASKBITS	src/xdiff/xmacros.h	35;"	d
XDL_MAX	src/xdiff/xmacros.h	30;"	d
XDL_MAX_COST_MIN	src/xdiff/xdiffi.c	28;"	d	file:
XDL_MAX_EQLIMIT	src/xdiff/xprepare.c	27;"	d	file:
XDL_MERGE_DIFF3	src/xdiff/xdiff.h	70;"	d
XDL_MERGE_EAGER	src/xdiff/xdiff.h	60;"	d
XDL_MERGE_FAVOR_OURS	src/xdiff/xdiff.h	65;"	d
XDL_MERGE_FAVOR_THEIRS	src/xdiff/xdiff.h	66;"	d
XDL_MERGE_FAVOR_UNION	src/xdiff/xdiff.h	67;"	d
XDL_MERGE_MINIMAL	src/xdiff/xdiff.h	59;"	d
XDL_MERGE_ZEALOUS	src/xdiff/xdiff.h	61;"	d
XDL_MERGE_ZEALOUS_ALNUM	src/xdiff/xdiff.h	62;"	d
XDL_MIN	src/xdiff/xmacros.h	29;"	d
XDL_MMB_READONLY	src/xdiff/xdiff.h	50;"	d
XDL_MMF_ATOMIC	src/xdiff/xdiff.h	52;"	d
XDL_PTRFREE	src/xdiff/xmacros.h	37;"	d
XDL_SIMSCAN_WINDOW	src/xdiff/xprepare.c	28;"	d	file:
XDL_SNAKE_CNT	src/xdiff/xdiffi.c	31;"	d	file:
XEMIT_H	src/xdiff/xemit.h	24;"	d
XINCLUDE_H	src/xdiff/xinclude.h	24;"	d
XMACROS_H	src/xdiff/xmacros.h	24;"	d
XPREPARE_H	src/xdiff/xprepare.h	24;"	d
XTYPES_H	src/xdiff/xtypes.h	24;"	d
XUTILS_H	src/xdiff/xutils.h	24;"	d
XX	deps/http-parser/http_parser.c	132;"	d	file:
XX	deps/http-parser/http_parser.c	134;"	d	file:
XX	deps/http-parser/http_parser.h	117;"	d
XX	deps/http-parser/http_parser.h	119;"	d
ZALLOC	deps/zlib/zutil.h	244;"	d
ZCONF_H	deps/zlib/zconf.h	9;"	d
ZEXPORT	deps/zlib/zconf.h	31;"	d
ZEXPORTVA	deps/zlib/zconf.h	32;"	d
ZEXTERN	deps/zlib/zconf.h	30;"	d
ZFREE	deps/zlib/zutil.h	246;"	d
ZLIB_H	deps/zlib/zlib.h	32;"	d
ZLIB_INTERNAL	deps/zlib/zutil.h	17;"	d
ZLIB_INTERNAL	deps/zlib/zutil.h	19;"	d
ZLIB_VERNUM	deps/zlib/zlib.h	41;"	d
ZLIB_VERSION	deps/zlib/zlib.h	40;"	d
ZLIB_VER_MAJOR	deps/zlib/zlib.h	42;"	d
ZLIB_VER_MINOR	deps/zlib/zlib.h	43;"	d
ZLIB_VER_REVISION	deps/zlib/zlib.h	44;"	d
ZLIB_VER_SUBREVISION	deps/zlib/zlib.h	45;"	d
ZSTREAM_BUFFER_MIN_EXTRA	src/zstream.c	14;"	d	file:
ZSTREAM_BUFFER_SIZE	src/zstream.c	13;"	d	file:
ZSWAP32	deps/zlib/zutil.h	250;"	d
ZUTIL_H	deps/zlib/zutil.h	14;"	d
Z_ARG	deps/zlib/zconf.h	37;"	d
Z_ASCII	deps/zlib/zlib.h	201;"	d
Z_BEST_COMPRESSION	deps/zlib/zlib.h	188;"	d
Z_BEST_SPEED	deps/zlib/zlib.h	187;"	d
Z_BINARY	deps/zlib/zlib.h	199;"	d
Z_BLOCK	deps/zlib/zlib.h	169;"	d
Z_BUF_ERROR	deps/zlib/zlib.h	180;"	d
Z_DATA_ERROR	deps/zlib/zlib.h	178;"	d
Z_DEFAULT_COMPRESSION	deps/zlib/zlib.h	189;"	d
Z_DEFAULT_STRATEGY	deps/zlib/zlib.h	196;"	d
Z_DEFLATED	deps/zlib/zlib.h	205;"	d
Z_ERRNO	deps/zlib/zlib.h	176;"	d
Z_FILTERED	deps/zlib/zlib.h	192;"	d
Z_FINISH	deps/zlib/zlib.h	168;"	d
Z_FIXED	deps/zlib/zlib.h	195;"	d
Z_FULL_FLUSH	deps/zlib/zlib.h	167;"	d
Z_HUFFMAN_ONLY	deps/zlib/zlib.h	193;"	d
Z_MEM_ERROR	deps/zlib/zlib.h	179;"	d
Z_NEED_DICT	deps/zlib/zlib.h	175;"	d
Z_NO_COMPRESSION	deps/zlib/zlib.h	186;"	d
Z_NO_FLUSH	deps/zlib/zlib.h	164;"	d
Z_NULL	deps/zlib/zlib.h	208;"	d
Z_OK	deps/zlib/zlib.h	173;"	d
Z_PARTIAL_FLUSH	deps/zlib/zlib.h	165;"	d
Z_RLE	deps/zlib/zlib.h	194;"	d
Z_STREAM_END	deps/zlib/zlib.h	174;"	d
Z_STREAM_ERROR	deps/zlib/zlib.h	177;"	d
Z_SYNC_FLUSH	deps/zlib/zlib.h	166;"	d
Z_TEXT	deps/zlib/zlib.h	200;"	d
Z_TREES	deps/zlib/zlib.h	170;"	d
Z_UNKNOWN	deps/zlib/zlib.h	202;"	d
Z_VERSION_ERROR	deps/zlib/zlib.h	181;"	d
_GIT_REPARSE_DATA_BUFFER	src/win32/reparse.h	/^typedef struct _GIT_REPARSE_DATA_BUFFER {$/;"	s
_GIT_REPARSE_DATA_BUFFER::ReparseDataLength	src/win32/reparse.h	/^	USHORT ReparseDataLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER	access:public
_GIT_REPARSE_DATA_BUFFER::ReparseTag	src/win32/reparse.h	/^	ULONG  ReparseTag;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER	access:public
_GIT_REPARSE_DATA_BUFFER::Reserved	src/win32/reparse.h	/^	USHORT Reserved;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::GenericReparseBuffer	src/win32/reparse.h	/^		} GenericReparseBuffer;$/;"	m	union:_GIT_REPARSE_DATA_BUFFER::__anon280	typeref:struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon283	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::MountPointReparseBuffer	src/win32/reparse.h	/^		} MountPointReparseBuffer;$/;"	m	union:_GIT_REPARSE_DATA_BUFFER::__anon280	typeref:struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::SymbolicLinkReparseBuffer	src/win32/reparse.h	/^		} SymbolicLinkReparseBuffer;$/;"	m	union:_GIT_REPARSE_DATA_BUFFER::__anon280	typeref:struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281::Flags	src/win32/reparse.h	/^			ULONG  Flags;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281::PathBuffer	src/win32/reparse.h	/^			WCHAR  PathBuffer[1];$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281::PrintNameLength	src/win32/reparse.h	/^			USHORT PrintNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281::PrintNameOffset	src/win32/reparse.h	/^			USHORT PrintNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281::SubstituteNameLength	src/win32/reparse.h	/^			USHORT SubstituteNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281::SubstituteNameOffset	src/win32/reparse.h	/^			USHORT SubstituteNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon281	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282::PathBuffer	src/win32/reparse.h	/^			WCHAR  PathBuffer[1];$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282::PrintNameLength	src/win32/reparse.h	/^			USHORT PrintNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282::PrintNameOffset	src/win32/reparse.h	/^			USHORT PrintNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282::SubstituteNameLength	src/win32/reparse.h	/^			USHORT SubstituteNameLength;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282::SubstituteNameOffset	src/win32/reparse.h	/^			USHORT SubstituteNameOffset;$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon282	access:public
_GIT_REPARSE_DATA_BUFFER::__anon280::__anon283::DataBuffer	src/win32/reparse.h	/^			UCHAR DataBuffer[1];$/;"	m	struct:_GIT_REPARSE_DATA_BUFFER::__anon280::__anon283	access:public
_INCLUDE_git_indexer_h__	include/git2/indexer.h	8;"	d
_MAIN_CC	tests/clar.c	26;"	d	file:
_MAIN_CC	tests/clar.c	78;"	d	file:
_MSC_INTTYPES_H_	include/git2/inttypes.h	37;"	d
_MSC_STDINT_H_	include/git2/stdint.h	37;"	d
_PTRDIFF_T_DEFINED	deps/zlib/zutil.h	157;"	d
_REGEX_CONFIG_H_	deps/regex/config.h	2;"	d
_REGEX_H	deps/regex/regex.h	26;"	d
_REGEX_INTERNAL_H	deps/regex/regex_internal.h	22;"	d
_RE_DEFINE_LOCALE_FUNCTIONS	deps/regex/regex_internal.h	89;"	d
_RE_SYNTAX_POSIX_COMMON	deps/regex/regex.h	236;"	d
_SC_NPROCESSORS_ONLN	src/thread-utils.c	26;"	d	file:
_SC_NPROCESSORS_ONLN	src/thread-utils.c	28;"	d	file:
_S_IFLNK	src/posix.h	23;"	d
_S_IFLNK	src/posix.h	24;"	d
_W64	include/git2/stdint.h	60;"	d
_W64	include/git2/stdint.h	62;"	d
__AC_KHASH_H	src/khash.h	118;"	d
__CLAR_LIBGIT2_TIMER__	tests/clar_libgit2_timer.h	2;"	d
__CLAR_LIBGIT2_TRACE__	tests/clar_libgit2_trace.h	2;"	d
__CLAR_LIBGIT2__	tests/clar_libgit2.h	2;"	d
__CLAR_TEST_ATTR_EXPECT__	tests/attr/attr_expect.h	2;"	d
__CLAR_TEST_H__	tests/clar.h	8;"	d
__COMMON_H__	examples/network/common.h	2;"	d
__CUSTOM_URLMON_H	deps/winhttp/urlmon.h	11;"	d
__KHASH_IMPL	src/khash.h	206;"	d
__KHASH_PROTOTYPES	src/khash.h	197;"	d
__KHASH_TYPE	src/khash.h	189;"	d
__REPB_PREFIX	deps/regex/regex.h	358;"	d
__REPB_PREFIX	deps/regex/regex.h	360;"	d
__RE_TRANSLATE_TYPE	deps/regex/regex.h	351;"	d
__USE_GNU	deps/regex/regex.h	37;"	d
__WINE_WINHTTP_H	deps/winhttp/winhttp.h	22;"	d
__ac_HASH_UPPER	src/khash.h	/^static const double __ac_HASH_UPPER = 0.77;$/;"	v
__ac_Wang_hash	src/khash.h	/^static kh_inline khint_t __ac_Wang_hash(khint_t key)$/;"	f	signature:(khint_t key)
__ac_X31_hash_string	src/khash.h	/^static kh_inline khint_t __ac_X31_hash_string(const char *s)$/;"	f	signature:(const char *s)
__ac_fsize	src/khash.h	165;"	d
__ac_isdel	src/khash.h	158;"	d
__ac_iseither	src/khash.h	159;"	d
__ac_isempty	src/khash.h	157;"	d
__ac_set_isboth_false	src/khash.h	162;"	d
__ac_set_isdel_false	src/khash.h	160;"	d
__ac_set_isdel_true	src/khash.h	163;"	d
__ac_set_isempty_false	src/khash.h	161;"	d
__anon100::author	include/git2/diff.h	/^	const git_signature *author;$/;"	m	struct:__anon100	access:public
__anon100::body	include/git2/diff.h	/^	const char *body;$/;"	m	struct:__anon100	access:public
__anon100::flags	include/git2/diff.h	/^	git_diff_format_email_flags_t flags;$/;"	m	struct:__anon100	access:public
__anon100::id	include/git2/diff.h	/^	const git_oid *id;$/;"	m	struct:__anon100	access:public
__anon100::patch_no	include/git2/diff.h	/^	size_t patch_no;$/;"	m	struct:__anon100	access:public
__anon100::summary	include/git2/diff.h	/^	const char *summary;$/;"	m	struct:__anon100	access:public
__anon100::total_patches	include/git2/diff.h	/^	size_t total_patches;$/;"	m	struct:__anon100	access:public
__anon100::version	include/git2/diff.h	/^	unsigned int version;$/;"	m	struct:__anon100	access:public
__anon101::nanoseconds	include/git2/index.h	/^	uint32_t nanoseconds;$/;"	m	struct:__anon101	access:public
__anon101::seconds	include/git2/index.h	/^	int32_t seconds;$/;"	m	struct:__anon101	access:public
__anon108::abbreviated_size	include/git2/describe.h	/^	unsigned int abbreviated_size;$/;"	m	struct:__anon108	access:public
__anon108::always_use_long_format	include/git2/describe.h	/^	int always_use_long_format;$/;"	m	struct:__anon108	access:public
__anon108::dirty_suffix	include/git2/describe.h	/^	const char *dirty_suffix;$/;"	m	struct:__anon108	access:public
__anon108::version	include/git2/describe.h	/^	unsigned int version;$/;"	m	struct:__anon108	access:public
__anon10::node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:__anon10	access:public
__anon10::path	deps/regex/regex_internal.h	/^  state_array_t path;$/;"	m	struct:__anon10	access:public
__anon10::str_idx	deps/regex/regex_internal.h	/^  int str_idx; \/* The position NODE match at.  *\/$/;"	m	struct:__anon10	access:public
__anon112::cvar_type	include/git2/config.h	/^	git_cvar_t cvar_type;$/;"	m	struct:__anon112	access:public
__anon112::map_value	include/git2/config.h	/^	int map_value;$/;"	m	struct:__anon112	access:public
__anon112::str_match	include/git2/config.h	/^	const char *str_match;$/;"	m	struct:__anon112	access:public
__anon114::asize	include/git2/buffer.h	/^	size_t asize, size;$/;"	m	struct:__anon114	access:public
__anon114::ptr	include/git2/buffer.h	/^	char   *ptr;$/;"	m	struct:__anon114	access:public
__anon114::size	include/git2/buffer.h	/^	size_t asize, size;$/;"	m	struct:__anon114	access:public
__anon115::checkout_opts	include/git2/cherrypick.h	/^	git_checkout_options checkout_opts; \/**< Options for the checkout *\/$/;"	m	struct:__anon115	access:public
__anon115::mainline	include/git2/cherrypick.h	/^	unsigned int mainline;$/;"	m	struct:__anon115	access:public
__anon115::merge_opts	include/git2/cherrypick.h	/^	git_merge_options merge_opts; \/**< Options for the merging *\/$/;"	m	struct:__anon115	access:public
__anon115::version	include/git2/cherrypick.h	/^	unsigned int version;$/;"	m	struct:__anon115	access:public
__anon119::description	include/git2/repository.h	/^	const char *description;$/;"	m	struct:__anon119	access:public
__anon119::flags	include/git2/repository.h	/^	uint32_t    flags;$/;"	m	struct:__anon119	access:public
__anon119::initial_head	include/git2/repository.h	/^	const char *initial_head;$/;"	m	struct:__anon119	access:public
__anon119::mode	include/git2/repository.h	/^	uint32_t    mode;$/;"	m	struct:__anon119	access:public
__anon119::origin_url	include/git2/repository.h	/^	const char *origin_url;$/;"	m	struct:__anon119	access:public
__anon119::template_path	include/git2/repository.h	/^	const char *template_path;$/;"	m	struct:__anon119	access:public
__anon119::version	include/git2/repository.h	/^	unsigned int version;$/;"	m	struct:__anon119	access:public
__anon119::workdir_path	include/git2/repository.h	/^	const char *workdir_path;$/;"	m	struct:__anon119	access:public
__anon11::alasts	deps/regex/regex_internal.h	/^  int alasts; \/* Allocation size of LASTS.  *\/$/;"	m	struct:__anon11	access:public
__anon11::lasts	deps/regex/regex_internal.h	/^  re_sub_match_last_t **lasts;$/;"	m	struct:__anon11	access:public
__anon11::nlasts	deps/regex/regex_internal.h	/^  int nlasts; \/* The number of LASTS.  *\/$/;"	m	struct:__anon11	access:public
__anon11::node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:__anon11	access:public
__anon11::path	deps/regex/regex_internal.h	/^  state_array_t *path;$/;"	m	struct:__anon11	access:public
__anon11::str_idx	deps/regex/regex_internal.h	/^  int str_idx;$/;"	m	struct:__anon11	access:public
__anon123::action	include/git2/tree.h	/^	git_tree_update_t action;$/;"	m	struct:__anon123	access:public
__anon123::filemode	include/git2/tree.h	/^	git_filemode_t filemode;$/;"	m	struct:__anon123	access:public
__anon123::id	include/git2/tree.h	/^	git_oid id;$/;"	m	struct:__anon123	access:public
__anon123::path	include/git2/tree.h	/^	const char *path;$/;"	m	struct:__anon123	access:public
__anon125::certificate_check	include/git2/proxy.h	/^        git_transport_certificate_check_cb certificate_check;$/;"	m	struct:__anon125	access:public
__anon125::credentials	include/git2/proxy.h	/^	git_cred_acquire_cb credentials;$/;"	m	struct:__anon125	access:public
__anon125::payload	include/git2/proxy.h	/^	void *payload;$/;"	m	struct:__anon125	access:public
__anon125::type	include/git2/proxy.h	/^	git_proxy_t type;$/;"	m	struct:__anon125	access:public
__anon125::url	include/git2/proxy.h	/^	const char *url;$/;"	m	struct:__anon125	access:public
__anon125::version	include/git2/proxy.h	/^	unsigned int version;$/;"	m	struct:__anon125	access:public
__anon126::mode	include/git2/merge.h	/^	unsigned int mode;$/;"	m	struct:__anon126	access:public
__anon126::path	include/git2/merge.h	/^	const char *path;$/;"	m	struct:__anon126	access:public
__anon126::ptr	include/git2/merge.h	/^	const char *ptr;$/;"	m	struct:__anon126	access:public
__anon126::size	include/git2/merge.h	/^	size_t size;$/;"	m	struct:__anon126	access:public
__anon126::version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon126	access:public
__anon12::abkref_ents	deps/regex/regex_internal.h	/^  int abkref_ents;$/;"	m	struct:__anon12	access:public
__anon12::asub_tops	deps/regex/regex_internal.h	/^  int asub_tops;$/;"	m	struct:__anon12	access:public
__anon12::bkref_ents	deps/regex/regex_internal.h	/^  struct re_backref_cache_entry *bkref_ents;$/;"	m	struct:__anon12	typeref:struct:__anon12::re_backref_cache_entry	access:public
__anon12::dfa	deps/regex/regex_internal.h	/^  const re_dfa_t *const dfa;$/;"	m	struct:__anon12	access:public
__anon12::dfa	deps/regex/regex_internal.h	/^  const re_dfa_t *dfa;$/;"	m	struct:__anon12	access:public
__anon12::eflags	deps/regex/regex_internal.h	/^  int eflags;$/;"	m	struct:__anon12	access:public
__anon12::input	deps/regex/regex_internal.h	/^  re_string_t input;$/;"	m	struct:__anon12	access:public
__anon12::last_node	deps/regex/regex_internal.h	/^  int last_node;$/;"	m	struct:__anon12	access:public
__anon12::match_last	deps/regex/regex_internal.h	/^  int match_last;$/;"	m	struct:__anon12	access:public
__anon12::max_mb_elem_len	deps/regex/regex_internal.h	/^  int max_mb_elem_len;$/;"	m	struct:__anon12	access:public
__anon12::nbkref_ents	deps/regex/regex_internal.h	/^  int nbkref_ents;$/;"	m	struct:__anon12	access:public
__anon12::nsub_tops	deps/regex/regex_internal.h	/^  int nsub_tops;$/;"	m	struct:__anon12	access:public
__anon12::state_log	deps/regex/regex_internal.h	/^  re_dfastate_t **state_log;$/;"	m	struct:__anon12	access:public
__anon12::state_log_top	deps/regex/regex_internal.h	/^  int state_log_top;$/;"	m	struct:__anon12	access:public
__anon12::sub_tops	deps/regex/regex_internal.h	/^  re_sub_match_top_t **sub_tops;$/;"	m	struct:__anon12	access:public
__anon130::ancestor_label	include/git2/merge.h	/^	const char *ancestor_label;$/;"	m	struct:__anon130	access:public
__anon130::favor	include/git2/merge.h	/^	git_merge_file_favor_t favor;$/;"	m	struct:__anon130	access:public
__anon130::flags	include/git2/merge.h	/^	git_merge_file_flag_t flags;$/;"	m	struct:__anon130	access:public
__anon130::our_label	include/git2/merge.h	/^	const char *our_label;$/;"	m	struct:__anon130	access:public
__anon130::their_label	include/git2/merge.h	/^	const char *their_label;$/;"	m	struct:__anon130	access:public
__anon130::version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon130	access:public
__anon131::automergeable	include/git2/merge.h	/^	unsigned int automergeable;$/;"	m	struct:__anon131	access:public
__anon131::len	include/git2/merge.h	/^	size_t len;$/;"	m	struct:__anon131	access:public
__anon131::mode	include/git2/merge.h	/^	unsigned int mode;$/;"	m	struct:__anon131	access:public
__anon131::path	include/git2/merge.h	/^	const char *path;$/;"	m	struct:__anon131	access:public
__anon131::ptr	include/git2/merge.h	/^	const char *ptr;$/;"	m	struct:__anon131	access:public
__anon132::default_driver	include/git2/merge.h	/^	const char *default_driver;$/;"	m	struct:__anon132	access:public
__anon132::file_favor	include/git2/merge.h	/^	git_merge_file_favor_t file_favor;$/;"	m	struct:__anon132	access:public
__anon132::file_flags	include/git2/merge.h	/^	git_merge_file_flag_t file_flags;$/;"	m	struct:__anon132	access:public
__anon132::flags	include/git2/merge.h	/^	git_merge_flag_t flags;$/;"	m	struct:__anon132	access:public
__anon132::metric	include/git2/merge.h	/^	git_diff_similarity_metric *metric;$/;"	m	struct:__anon132	access:public
__anon132::recursion_limit	include/git2/merge.h	/^	unsigned int recursion_limit;$/;"	m	struct:__anon132	access:public
__anon132::rename_threshold	include/git2/merge.h	/^	unsigned int rename_threshold;$/;"	m	struct:__anon132	access:public
__anon132::target_limit	include/git2/merge.h	/^	unsigned int target_limit;$/;"	m	struct:__anon132	access:public
__anon132::version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon132	access:public
__anon139::chmod_calls	include/git2/checkout.h	/^	size_t chmod_calls;$/;"	m	struct:__anon139	access:public
__anon139::mkdir_calls	include/git2/checkout.h	/^	size_t mkdir_calls;$/;"	m	struct:__anon139	access:public
__anon139::stat_calls	include/git2/checkout.h	/^	size_t stat_calls;$/;"	m	struct:__anon139	access:public
__anon13::last_node	deps/regex/regex_internal.h	/^  int last_node;$/;"	m	struct:__anon13	access:public
__anon13::last_str_idx	deps/regex/regex_internal.h	/^  int last_str_idx;$/;"	m	struct:__anon13	access:public
__anon13::limited_states	deps/regex/regex_internal.h	/^  re_dfastate_t **limited_states;$/;"	m	struct:__anon13	access:public
__anon13::limits	deps/regex/regex_internal.h	/^  re_node_set limits;$/;"	m	struct:__anon13	access:public
__anon13::sifted_states	deps/regex/regex_internal.h	/^  re_dfastate_t **sifted_states;$/;"	m	struct:__anon13	access:public
__anon142::checkout_opts	include/git2/revert.h	/^	git_checkout_options checkout_opts; \/**< Options for the checkout *\/$/;"	m	struct:__anon142	access:public
__anon142::mainline	include/git2/revert.h	/^	unsigned int mainline;$/;"	m	struct:__anon142	access:public
__anon142::merge_opts	include/git2/revert.h	/^	git_merge_options merge_opts; \/**< Options for the merging *\/$/;"	m	struct:__anon142	access:public
__anon142::version	include/git2/revert.h	/^	unsigned int version;$/;"	m	struct:__anon142	access:public
__anon147::cert_type	include/git2/types.h	/^	git_cert_t cert_type;$/;"	m	struct:__anon147	access:public
__anon151::content	src/repo_template.h	/^	const char *content;$/;"	m	struct:__anon151	access:public
__anon151::mode	src/repo_template.h	/^	mode_t mode;$/;"	m	struct:__anon151	access:public
__anon151::path	src/repo_template.h	/^	const char *path;$/;"	m	struct:__anon151	access:public
__anon152::refcount	src/config_file.c	/^	git_atomic refcount;$/;"	m	struct:__anon152	file:	access:public
__anon152::values	src/config_file.c	/^	git_strmap *values;$/;"	m	struct:__anon152	file:	access:public
__anon153::parent	src/config_file.c	/^	git_config_backend parent;$/;"	m	struct:__anon153	file:	access:public
__anon153::values	src/config_file.c	/^	refcounted_strmap *values;$/;"	m	struct:__anon153	file:	access:public
__anon153::values_mutex	src/config_file.c	/^	git_mutex values_mutex;$/;"	m	struct:__anon153	file:	access:public
__anon154::file_path	src/config_file.c	/^	char  *file_path;$/;"	m	struct:__anon154	file:	access:public
__anon154::header	src/config_file.c	/^	diskfile_header header;$/;"	m	struct:__anon154	file:	access:public
__anon154::level	src/config_file.c	/^	git_config_level_t level;$/;"	m	struct:__anon154	file:	access:public
__anon154::locked	src/config_file.c	/^	bool locked;$/;"	m	struct:__anon154	file:	access:public
__anon154::locked_buf	src/config_file.c	/^	git_filebuf locked_buf;$/;"	m	struct:__anon154	file:	access:public
__anon154::locked_content	src/config_file.c	/^	git_buf locked_content;$/;"	m	struct:__anon154	file:	access:public
__anon154::readers	src/config_file.c	/^	git_array_t(struct reader) readers;$/;"	m	struct:__anon154	file:	access:public
__anon155::header	src/config_file.c	/^	diskfile_header header;$/;"	m	struct:__anon155	file:	access:public
__anon155::snapshot_from	src/config_file.c	/^	diskfile_backend *snapshot_from;$/;"	m	struct:__anon155	file:	access:public
__anon156::blob	src/diff_tform.c	/^	git_blob *blob;$/;"	m	struct:__anon156	file:	access:public
__anon156::data	src/diff_tform.c	/^	git_buf data;$/;"	m	struct:__anon156	file:	access:public
__anon156::file	src/diff_tform.c	/^	git_diff_file *file;$/;"	m	struct:__anon156	file:	access:public
__anon156::idx	src/diff_tform.c	/^	size_t idx;$/;"	m	struct:__anon156	file:	access:public
__anon156::odb_obj	src/diff_tform.c	/^	git_odb_object *odb_obj;$/;"	m	struct:__anon156	file:	access:public
__anon156::repo	src/diff_tform.c	/^	git_repository *repo;$/;"	m	struct:__anon156	file:	access:public
__anon156::src	src/diff_tform.c	/^	git_iterator_type_t src;$/;"	m	struct:__anon156	file:	access:public
__anon157::idx	src/diff_tform.c	/^	size_t   idx;$/;"	m	struct:__anon157	file:	access:public
__anon157::similarity	src/diff_tform.c	/^	uint16_t similarity;$/;"	m	struct:__anon157	file:	access:public
__anon159::bld	src/tree.c	/^	git_treebuilder *bld;$/;"	m	struct:__anon159	file:	access:public
__anon159::name	src/tree.c	/^	char *name;$/;"	m	struct:__anon159	file:	access:public
__anon159::tree	src/tree.c	/^	git_tree *tree;$/;"	m	struct:__anon159	file:	access:public
__anon15::__anon16::ch	deps/regex/regex_internal.h	/^    unsigned char ch;$/;"	m	union:__anon15::__anon16	access:public
__anon15::__anon16::name	deps/regex/regex_internal.h	/^    unsigned char *name;$/;"	m	union:__anon15::__anon16	access:public
__anon15::__anon16::wch	deps/regex/regex_internal.h	/^    wchar_t wch;$/;"	m	union:__anon15::__anon16	access:public
__anon15::opr	deps/regex/regex_internal.h	/^  } opr;$/;"	m	struct:__anon15	typeref:union:__anon15::__anon16	access:public
__anon15::type	deps/regex/regex_internal.h	/^  bracket_elem_type type;$/;"	m	struct:__anon15	access:public
__anon160::delta	src/patch_generate.c	/^	git_diff_delta delta;$/;"	m	struct:__anon160	file:	access:public
__anon160::patch	src/patch_generate.c	/^	git_patch_generated patch;$/;"	m	struct:__anon160	file:	access:public
__anon160::paths	src/patch_generate.c	/^	char paths[GIT_FLEX_ARRAY];$/;"	m	struct:__anon160	file:	access:public
__anon161::flags	src/userdiff.h	/^	int flags;$/;"	m	struct:__anon161	access:public
__anon161::fns	src/userdiff.h	/^	const char *fns;$/;"	m	struct:__anon161	access:public
__anon161::name	src/userdiff.h	/^	const char *name;$/;"	m	struct:__anon161	access:public
__anon161::words	src/userdiff.h	/^	const char *words;$/;"	m	struct:__anon161	access:public
__anon162::data	src/odb.h	/^	void *data;			\/**< Raw, decompressed object data. *\/$/;"	m	struct:__anon162	access:public
__anon162::len	src/odb.h	/^	size_t len;			\/**< Total number of bytes in data. *\/$/;"	m	struct:__anon162	access:public
__anon162::type	src/odb.h	/^	git_otype type;		\/**< Type of this object. *\/$/;"	m	struct:__anon162	access:public
__anon163::base	src/patch_parse.c	/^	git_patch base;$/;"	m	struct:__anon163	file:	access:public
__anon163::ctx	src/patch_parse.c	/^	git_patch_parse_ctx *ctx;$/;"	m	struct:__anon163	file:	access:public
__anon163::header_new_path	src/patch_parse.c	/^	char *header_old_path, *header_new_path;$/;"	m	struct:__anon163	file:	access:public
__anon163::header_old_path	src/patch_parse.c	/^	char *header_old_path, *header_new_path;$/;"	m	struct:__anon163	file:	access:public
__anon163::new_path	src/patch_parse.c	/^	char *old_path, *new_path;$/;"	m	struct:__anon163	file:	access:public
__anon163::new_prefix	src/patch_parse.c	/^	char *old_prefix, *new_prefix;$/;"	m	struct:__anon163	file:	access:public
__anon163::old_path	src/patch_parse.c	/^	char *old_path, *new_path;$/;"	m	struct:__anon163	file:	access:public
__anon163::old_prefix	src/patch_parse.c	/^	char *old_prefix, *new_prefix;$/;"	m	struct:__anon163	file:	access:public
__anon163::rename_new_path	src/patch_parse.c	/^	char *rename_old_path, *rename_new_path;$/;"	m	struct:__anon163	file:	access:public
__anon163::rename_old_path	src/patch_parse.c	/^	char *rename_old_path, *rename_new_path;$/;"	m	struct:__anon163	file:	access:public
__anon164::fn	src/patch_parse.c	/^	int(*fn)(git_patch_parsed *, git_patch_parse_ctx *);$/;"	m	struct:__anon164	file:	access:public
__anon164::str	src/patch_parse.c	/^	const char *str;$/;"	m	struct:__anon164	file:	access:public
__anon166::containing_dir	src/attr_file.h	/^	char *containing_dir;$/;"	m	struct:__anon166	access:public
__anon166::containing_dir_length	src/attr_file.h	/^	size_t containing_dir_length;$/;"	m	struct:__anon166	access:public
__anon166::flags	src/attr_file.h	/^	unsigned int flags;$/;"	m	struct:__anon166	access:public
__anon166::length	src/attr_file.h	/^	size_t length;$/;"	m	struct:__anon166	access:public
__anon166::pattern	src/attr_file.h	/^	char *pattern;$/;"	m	struct:__anon166	access:public
__anon167::assigns	src/attr_file.h	/^	git_vector assigns;		\/* vector of <git_attr_assignment*> *\/$/;"	m	struct:__anon167	access:public
__anon167::match	src/attr_file.h	/^	git_attr_fnmatch match;$/;"	m	struct:__anon167	access:public
__anon168::name	src/attr_file.h	/^	const char *name;$/;"	m	struct:__anon168	access:public
__anon168::name_hash	src/attr_file.h	/^	uint32_t name_hash;$/;"	m	struct:__anon168	access:public
__anon168::unused	src/attr_file.h	/^	git_refcount unused;$/;"	m	struct:__anon168	access:public
__anon169::name	src/attr_file.h	/^	char *name;$/;"	m	struct:__anon169	access:public
__anon169::name_hash	src/attr_file.h	/^	uint32_t name_hash;$/;"	m	struct:__anon169	access:public
__anon169::rc	src/attr_file.h	/^	git_refcount rc;		\/* for macros *\/$/;"	m	struct:__anon169	access:public
__anon169::value	src/attr_file.h	/^	const char *value;$/;"	m	struct:__anon169	access:public
__anon170::__anon171::oid	src/attr_file.h	/^		git_oid oid;$/;"	m	union:__anon170::__anon171	access:public
__anon170::__anon171::stamp	src/attr_file.h	/^		git_futils_filestamp stamp;$/;"	m	union:__anon170::__anon171	access:public
__anon170::cache_data	src/attr_file.h	/^	} cache_data;$/;"	m	struct:__anon170	typeref:union:__anon170::__anon171	access:public
__anon170::entry	src/attr_file.h	/^	git_attr_file_entry *entry;$/;"	m	struct:__anon170	access:public
__anon170::lock	src/attr_file.h	/^	git_mutex lock;$/;"	m	struct:__anon170	access:public
__anon170::nonexistent	src/attr_file.h	/^	unsigned int nonexistent:1;$/;"	m	struct:__anon170	access:public
__anon170::pool	src/attr_file.h	/^	git_pool pool;$/;"	m	struct:__anon170	access:public
__anon170::rc	src/attr_file.h	/^	git_refcount rc;$/;"	m	struct:__anon170	access:public
__anon170::rules	src/attr_file.h	/^	git_vector rules;			\/* vector of <rule*> or <fnmatch*> *\/$/;"	m	struct:__anon170	access:public
__anon170::session_key	src/attr_file.h	/^	int session_key;$/;"	m	struct:__anon170	access:public
__anon170::source	src/attr_file.h	/^	git_attr_file_source source;$/;"	m	struct:__anon170	access:public
__anon172::basename	src/attr_file.h	/^	char    *basename;$/;"	m	struct:__anon172	access:public
__anon172::full	src/attr_file.h	/^	git_buf  full;$/;"	m	struct:__anon172	access:public
__anon172::is_dir	src/attr_file.h	/^	int      is_dir;$/;"	m	struct:__anon172	access:public
__anon172::path	src/attr_file.h	/^	char    *path;$/;"	m	struct:__anon172	access:public
__anon173::init_setup	src/attr_file.h	/^	unsigned int init_setup:1,$/;"	m	struct:__anon173	access:public
__anon173::init_sysdir	src/attr_file.h	/^		init_sysdir:1;$/;"	m	struct:__anon173	access:public
__anon173::key	src/attr_file.h	/^	int key;$/;"	m	struct:__anon173	access:public
__anon173::sysdir	src/attr_file.h	/^	git_buf sysdir;$/;"	m	struct:__anon173	access:public
__anon173::tmp	src/attr_file.h	/^	git_buf tmp;$/;"	m	struct:__anon173	access:public
__anon175::chunk_buffer	src/transports/http.c	/^	char *chunk_buffer;$/;"	m	struct:__anon175	file:	access:public
__anon175::chunk_buffer_len	src/transports/http.c	/^	unsigned chunk_buffer_len;$/;"	m	struct:__anon175	file:	access:public
__anon175::chunked	src/transports/http.c	/^		chunked : 1,$/;"	m	struct:__anon175	file:	access:public
__anon175::parent	src/transports/http.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon175	file:	access:public
__anon175::received_response	src/transports/http.c	/^		received_response : 1,$/;"	m	struct:__anon175	file:	access:public
__anon175::redirect_count	src/transports/http.c	/^		redirect_count : 3;$/;"	m	struct:__anon175	file:	access:public
__anon175::redirect_url	src/transports/http.c	/^	char *redirect_url;$/;"	m	struct:__anon175	file:	access:public
__anon175::sent_request	src/transports/http.c	/^	unsigned sent_request : 1,$/;"	m	struct:__anon175	file:	access:public
__anon175::service	src/transports/http.c	/^	const char *service;$/;"	m	struct:__anon175	file:	access:public
__anon175::service_url	src/transports/http.c	/^	const char *service_url;$/;"	m	struct:__anon175	file:	access:public
__anon175::verb	src/transports/http.c	/^	const char *verb;$/;"	m	struct:__anon175	file:	access:public
__anon176::auth_contexts	src/transports/http.c	/^	git_vector auth_contexts;$/;"	m	struct:__anon176	file:	access:public
__anon176::connected	src/transports/http.c	/^	bool connected;$/;"	m	struct:__anon176	file:	access:public
__anon176::connection_data	src/transports/http.c	/^	gitno_connection_data connection_data;$/;"	m	struct:__anon176	file:	access:public
__anon176::content_type	src/transports/http.c	/^	char *content_type;$/;"	m	struct:__anon176	file:	access:public
__anon176::cred	src/transports/http.c	/^	git_cred *cred;$/;"	m	struct:__anon176	file:	access:public
__anon176::error	src/transports/http.c	/^	int error;$/;"	m	struct:__anon176	file:	access:public
__anon176::io	src/transports/http.c	/^	git_stream *io;$/;"	m	struct:__anon176	file:	access:public
__anon176::last_cb	src/transports/http.c	/^	enum last_cb last_cb;$/;"	m	struct:__anon176	typeref:enum:__anon176::last_cb	file:	access:public
__anon176::location	src/transports/http.c	/^	char *location;$/;"	m	struct:__anon176	file:	access:public
__anon176::owner	src/transports/http.c	/^	transport_smart *owner;$/;"	m	struct:__anon176	file:	access:public
__anon176::parent	src/transports/http.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon176	file:	access:public
__anon176::parse_buffer	src/transports/http.c	/^	gitno_buffer parse_buffer;$/;"	m	struct:__anon176	file:	access:public
__anon176::parse_buffer_data	src/transports/http.c	/^	char parse_buffer_data[NETIO_BUFSIZE];$/;"	m	struct:__anon176	file:	access:public
__anon176::parse_error	src/transports/http.c	/^	int parse_error;$/;"	m	struct:__anon176	file:	access:public
__anon176::parse_finished	src/transports/http.c	/^	unsigned parse_finished : 1;$/;"	m	struct:__anon176	file:	access:public
__anon176::parse_header_name	src/transports/http.c	/^	git_buf parse_header_name;$/;"	m	struct:__anon176	file:	access:public
__anon176::parse_header_value	src/transports/http.c	/^	git_buf parse_header_value;$/;"	m	struct:__anon176	file:	access:public
__anon176::parser	src/transports/http.c	/^	http_parser parser;$/;"	m	struct:__anon176	file:	access:public
__anon176::settings	src/transports/http.c	/^	http_parser_settings settings;$/;"	m	struct:__anon176	file:	access:public
__anon176::url_cred	src/transports/http.c	/^	git_cred *url_cred;$/;"	m	struct:__anon176	file:	access:public
__anon176::www_authenticate	src/transports/http.c	/^	git_vector www_authenticate;$/;"	m	struct:__anon176	file:	access:public
__anon177::buf_size	src/transports/http.c	/^	size_t buf_size;$/;"	m	struct:__anon177	file:	access:public
__anon177::buffer	src/transports/http.c	/^	char *buffer;$/;"	m	struct:__anon177	file:	access:public
__anon177::bytes_read	src/transports/http.c	/^	size_t *bytes_read;$/;"	m	struct:__anon177	file:	access:public
__anon177::s	src/transports/http.c	/^	http_stream *s;$/;"	m	struct:__anon177	file:	access:public
__anon177::t	src/transports/http.c	/^	http_subtransport *t;$/;"	m	struct:__anon177	file:	access:public
__anon178::cancelled	src/transports/local.c	/^	git_atomic cancelled;$/;"	m	struct:__anon178	file:	access:public
__anon178::connected	src/transports/local.c	/^	unsigned connected : 1,$/;"	m	struct:__anon178	file:	access:public
__anon178::direction	src/transports/local.c	/^	int direction;$/;"	m	struct:__anon178	file:	access:public
__anon178::error_cb	src/transports/local.c	/^	git_transport_message_cb error_cb;$/;"	m	struct:__anon178	file:	access:public
__anon178::flags	src/transports/local.c	/^	int flags;$/;"	m	struct:__anon178	file:	access:public
__anon178::have_refs	src/transports/local.c	/^		have_refs : 1;$/;"	m	struct:__anon178	file:	access:public
__anon178::message_cb_payload	src/transports/local.c	/^	void *message_cb_payload;$/;"	m	struct:__anon178	file:	access:public
__anon178::owner	src/transports/local.c	/^	git_remote *owner;$/;"	m	struct:__anon178	file:	access:public
__anon178::parent	src/transports/local.c	/^	git_transport parent;$/;"	m	struct:__anon178	file:	access:public
__anon178::progress_cb	src/transports/local.c	/^	git_transport_message_cb progress_cb;$/;"	m	struct:__anon178	file:	access:public
__anon178::refs	src/transports/local.c	/^	git_vector refs;$/;"	m	struct:__anon178	file:	access:public
__anon178::repo	src/transports/local.c	/^	git_repository *repo;$/;"	m	struct:__anon178	file:	access:public
__anon178::url	src/transports/local.c	/^	char *url;$/;"	m	struct:__anon178	file:	access:public
__anon180::chunk_buffer	src/transports/winhttp.c	/^	char *chunk_buffer;$/;"	m	struct:__anon180	file:	access:public
__anon180::chunk_buffer_len	src/transports/winhttp.c	/^	unsigned chunk_buffer_len;$/;"	m	struct:__anon180	file:	access:public
__anon180::chunked	src/transports/winhttp.c	/^		chunked : 1;$/;"	m	struct:__anon180	file:	access:public
__anon180::parent	src/transports/winhttp.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon180	file:	access:public
__anon180::post_body	src/transports/winhttp.c	/^	HANDLE post_body;$/;"	m	struct:__anon180	file:	access:public
__anon180::post_body_len	src/transports/winhttp.c	/^	DWORD post_body_len;$/;"	m	struct:__anon180	file:	access:public
__anon180::received_response	src/transports/winhttp.c	/^		received_response : 1,$/;"	m	struct:__anon180	file:	access:public
__anon180::request	src/transports/winhttp.c	/^	HINTERNET request;$/;"	m	struct:__anon180	file:	access:public
__anon180::request_uri	src/transports/winhttp.c	/^	wchar_t *request_uri;$/;"	m	struct:__anon180	file:	access:public
__anon180::sent_request	src/transports/winhttp.c	/^	unsigned sent_request : 1,$/;"	m	struct:__anon180	file:	access:public
__anon180::service	src/transports/winhttp.c	/^	const char *service;$/;"	m	struct:__anon180	file:	access:public
__anon180::service_url	src/transports/winhttp.c	/^	const char *service_url;$/;"	m	struct:__anon180	file:	access:public
__anon180::verb	src/transports/winhttp.c	/^	const wchar_t *verb;$/;"	m	struct:__anon180	file:	access:public
__anon181::auth_mechanism	src/transports/winhttp.c	/^	int auth_mechanism;$/;"	m	struct:__anon181	file:	access:public
__anon181::connection	src/transports/winhttp.c	/^	HINTERNET connection;$/;"	m	struct:__anon181	file:	access:public
__anon181::connection_data	src/transports/winhttp.c	/^	gitno_connection_data connection_data;$/;"	m	struct:__anon181	file:	access:public
__anon181::cred	src/transports/winhttp.c	/^	git_cred *cred;$/;"	m	struct:__anon181	file:	access:public
__anon181::owner	src/transports/winhttp.c	/^	transport_smart *owner;$/;"	m	struct:__anon181	file:	access:public
__anon181::parent	src/transports/winhttp.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon181	file:	access:public
__anon181::proxy_connection_data	src/transports/winhttp.c	/^	gitno_connection_data proxy_connection_data;$/;"	m	struct:__anon181	file:	access:public
__anon181::proxy_cred	src/transports/winhttp.c	/^	git_cred *proxy_cred;$/;"	m	struct:__anon181	file:	access:public
__anon181::session	src/transports/winhttp.c	/^	HINTERNET session;$/;"	m	struct:__anon181	file:	access:public
__anon181::url_cred	src/transports/winhttp.c	/^	git_cred *url_cred;$/;"	m	struct:__anon181	file:	access:public
__anon182::channel	src/transports/ssh.c	/^	LIBSSH2_CHANNEL *channel;$/;"	m	struct:__anon182	file:	access:public
__anon182::cmd	src/transports/ssh.c	/^	const char *cmd;$/;"	m	struct:__anon182	file:	access:public
__anon182::io	src/transports/ssh.c	/^	git_stream *io;$/;"	m	struct:__anon182	file:	access:public
__anon182::parent	src/transports/ssh.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon182	file:	access:public
__anon182::sent_command	src/transports/ssh.c	/^	unsigned sent_command : 1;$/;"	m	struct:__anon182	file:	access:public
__anon182::session	src/transports/ssh.c	/^	LIBSSH2_SESSION *session;$/;"	m	struct:__anon182	file:	access:public
__anon182::url	src/transports/ssh.c	/^	char *url;$/;"	m	struct:__anon182	file:	access:public
__anon183::cmd_receivepack	src/transports/ssh.c	/^	char *cmd_receivepack;$/;"	m	struct:__anon183	file:	access:public
__anon183::cmd_uploadpack	src/transports/ssh.c	/^	char *cmd_uploadpack;$/;"	m	struct:__anon183	file:	access:public
__anon183::cred	src/transports/ssh.c	/^	git_cred *cred;$/;"	m	struct:__anon183	file:	access:public
__anon183::current_stream	src/transports/ssh.c	/^	ssh_stream *current_stream;$/;"	m	struct:__anon183	file:	access:public
__anon183::owner	src/transports/ssh.c	/^	transport_smart *owner;$/;"	m	struct:__anon183	file:	access:public
__anon183::parent	src/transports/ssh.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon183	file:	access:public
__anon184::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon184	typeref:enum:__anon184::git_pkt_type	access:public
__anon185::capabilities	src/transports/smart.h	/^	char *capabilities;$/;"	m	struct:__anon185	access:public
__anon185::head	src/transports/smart.h	/^	git_remote_head head;$/;"	m	struct:__anon185	access:public
__anon185::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon185	typeref:enum:__anon185::git_pkt_type	access:public
__anon186::oid	src/transports/smart.h	/^	git_oid oid;$/;"	m	struct:__anon186	access:public
__anon186::status	src/transports/smart.h	/^	enum git_ack_status status;$/;"	m	struct:__anon186	typeref:enum:__anon186::git_ack_status	access:public
__anon186::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon186	typeref:enum:__anon186::git_pkt_type	access:public
__anon187::comment	src/transports/smart.h	/^	char comment[GIT_FLEX_ARRAY];$/;"	m	struct:__anon187	access:public
__anon187::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon187	typeref:enum:__anon187::git_pkt_type	access:public
__anon188::data	src/transports/smart.h	/^	char data[GIT_FLEX_ARRAY];$/;"	m	struct:__anon188	access:public
__anon188::len	src/transports/smart.h	/^	int len;$/;"	m	struct:__anon188	access:public
__anon188::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon188	typeref:enum:__anon188::git_pkt_type	access:public
__anon189::error	src/transports/smart.h	/^	char error[GIT_FLEX_ARRAY];$/;"	m	struct:__anon189	access:public
__anon189::len	src/transports/smart.h	/^	int len;$/;"	m	struct:__anon189	access:public
__anon189::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon189	typeref:enum:__anon189::git_pkt_type	access:public
__anon18::rm_eo	deps/regex/regex.h	/^  regoff_t rm_eo;  \/* Byte offset from string's start to substring's end.  *\/$/;"	m	struct:__anon18	access:public
__anon18::rm_so	deps/regex/regex.h	/^  regoff_t rm_so;  \/* Byte offset from string's start to substring's start.  *\/$/;"	m	struct:__anon18	access:public
__anon190::ref	src/transports/smart.h	/^	char *ref;$/;"	m	struct:__anon190	access:public
__anon190::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon190	typeref:enum:__anon190::git_pkt_type	access:public
__anon191::msg	src/transports/smart.h	/^	char *msg;$/;"	m	struct:__anon191	access:public
__anon191::ref	src/transports/smart.h	/^	char *ref;$/;"	m	struct:__anon191	access:public
__anon191::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon191	typeref:enum:__anon191::git_pkt_type	access:public
__anon192::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon192	typeref:enum:__anon192::git_pkt_type	access:public
__anon192::unpack_ok	src/transports/smart.h	/^	int unpack_ok;$/;"	m	struct:__anon192	access:public
__anon193::buffer	src/transports/smart.h	/^	gitno_buffer buffer;$/;"	m	struct:__anon193	access:public
__anon193::buffer_data	src/transports/smart.h	/^	char buffer_data[65536];$/;"	m	struct:__anon193	access:public
__anon193::cancelled	src/transports/smart.h	/^	git_atomic cancelled;$/;"	m	struct:__anon193	access:public
__anon193::caps	src/transports/smart.h	/^	transport_smart_caps caps;$/;"	m	struct:__anon193	access:public
__anon193::certificate_check_cb	src/transports/smart.h	/^	git_transport_certificate_check_cb certificate_check_cb;$/;"	m	struct:__anon193	access:public
__anon193::common	src/transports/smart.h	/^	git_vector common;$/;"	m	struct:__anon193	access:public
__anon193::connected	src/transports/smart.h	/^		connected : 1;$/;"	m	struct:__anon193	access:public
__anon193::cred_acquire_cb	src/transports/smart.h	/^	git_cred_acquire_cb cred_acquire_cb;$/;"	m	struct:__anon193	access:public
__anon193::cred_acquire_payload	src/transports/smart.h	/^	void *cred_acquire_payload;$/;"	m	struct:__anon193	access:public
__anon193::current_stream	src/transports/smart.h	/^	git_smart_subtransport_stream *current_stream;$/;"	m	struct:__anon193	access:public
__anon193::custom_headers	src/transports/smart.h	/^	git_strarray custom_headers;$/;"	m	struct:__anon193	access:public
__anon193::direction	src/transports/smart.h	/^	int direction;$/;"	m	struct:__anon193	access:public
__anon193::error_cb	src/transports/smart.h	/^	git_transport_message_cb error_cb;$/;"	m	struct:__anon193	access:public
__anon193::flags	src/transports/smart.h	/^	int flags;$/;"	m	struct:__anon193	access:public
__anon193::have_refs	src/transports/smart.h	/^		have_refs : 1,$/;"	m	struct:__anon193	access:public
__anon193::heads	src/transports/smart.h	/^	git_vector heads;$/;"	m	struct:__anon193	access:public
__anon193::message_cb_payload	src/transports/smart.h	/^	void *message_cb_payload;$/;"	m	struct:__anon193	access:public
__anon193::owner	src/transports/smart.h	/^	git_remote *owner;$/;"	m	struct:__anon193	access:public
__anon193::packetsize_cb	src/transports/smart.h	/^	packetsize_cb packetsize_cb;$/;"	m	struct:__anon193	access:public
__anon193::packetsize_payload	src/transports/smart.h	/^	void *packetsize_payload;$/;"	m	struct:__anon193	access:public
__anon193::parent	src/transports/smart.h	/^	git_transport parent;$/;"	m	struct:__anon193	access:public
__anon193::progress_cb	src/transports/smart.h	/^	git_transport_message_cb progress_cb;$/;"	m	struct:__anon193	access:public
__anon193::proxy	src/transports/smart.h	/^	git_proxy_options proxy;$/;"	m	struct:__anon193	access:public
__anon193::refs	src/transports/smart.h	/^	git_vector refs;$/;"	m	struct:__anon193	access:public
__anon193::rpc	src/transports/smart.h	/^	unsigned rpc : 1,$/;"	m	struct:__anon193	access:public
__anon193::url	src/transports/smart.h	/^	char *url;$/;"	m	struct:__anon193	access:public
__anon193::wrapped	src/transports/smart.h	/^	git_smart_subtransport *wrapped;$/;"	m	struct:__anon193	access:public
__anon194::challenge	src/transports/auth_negotiate.c	/^	char *challenge;$/;"	m	struct:__anon194	file:	access:public
__anon194::complete	src/transports/auth_negotiate.c	/^		complete : 1;$/;"	m	struct:__anon194	file:	access:public
__anon194::configured	src/transports/auth_negotiate.c	/^	unsigned configured : 1,$/;"	m	struct:__anon194	file:	access:public
__anon194::gss_context	src/transports/auth_negotiate.c	/^	gss_ctx_id_t gss_context;$/;"	m	struct:__anon194	file:	access:public
__anon194::oid	src/transports/auth_negotiate.c	/^	gss_OID oid;$/;"	m	struct:__anon194	file:	access:public
__anon194::parent	src/transports/auth_negotiate.c	/^	git_http_auth_context parent;$/;"	m	struct:__anon194	file:	access:public
__anon194::target	src/transports/auth_negotiate.c	/^	git_buf target;$/;"	m	struct:__anon194	file:	access:public
__anon196::credtypes	src/transports/auth.h	/^	git_credtype_t credtypes;$/;"	m	struct:__anon196	access:public
__anon196::init_context	src/transports/auth.h	/^	int (*init_context)($/;"	m	struct:__anon196	access:public
__anon196::name	src/transports/auth.h	/^	const char *name;$/;"	m	struct:__anon196	access:public
__anon196::type	src/transports/auth.h	/^	git_http_authtype_t type;$/;"	m	struct:__anon196	access:public
__anon197::cmd	src/transports/git.c	/^	const char *cmd;$/;"	m	struct:__anon197	file:	access:public
__anon197::io	src/transports/git.c	/^	git_stream *io;$/;"	m	struct:__anon197	file:	access:public
__anon197::parent	src/transports/git.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon197	file:	access:public
__anon197::sent_command	src/transports/git.c	/^	unsigned sent_command : 1;$/;"	m	struct:__anon197	file:	access:public
__anon197::url	src/transports/git.c	/^	char *url;$/;"	m	struct:__anon197	file:	access:public
__anon198::current_stream	src/transports/git.c	/^	git_proto_stream *current_stream;$/;"	m	struct:__anon198	file:	access:public
__anon198::owner	src/transports/git.c	/^	git_transport *owner;$/;"	m	struct:__anon198	file:	access:public
__anon198::parent	src/transports/git.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon198	file:	access:public
__anon199::owner	src/util.h	/^	void *owner;$/;"	m	struct:__anon199	access:public
__anon199::refcount	src/util.h	/^	git_atomic refcount;$/;"	m	struct:__anon199	access:public
__anon19::dwExtraInfoLength	deps/winhttp/winhttp.h	/^    DWORD   dwExtraInfoLength;$/;"	m	struct:__anon19	access:public
__anon19::dwHostNameLength	deps/winhttp/winhttp.h	/^    DWORD   dwHostNameLength;$/;"	m	struct:__anon19	access:public
__anon19::dwPasswordLength	deps/winhttp/winhttp.h	/^    DWORD   dwPasswordLength;$/;"	m	struct:__anon19	access:public
__anon19::dwSchemeLength	deps/winhttp/winhttp.h	/^    DWORD   dwSchemeLength;$/;"	m	struct:__anon19	access:public
__anon19::dwStructSize	deps/winhttp/winhttp.h	/^    DWORD   dwStructSize;$/;"	m	struct:__anon19	access:public
__anon19::dwUrlPathLength	deps/winhttp/winhttp.h	/^    DWORD   dwUrlPathLength;$/;"	m	struct:__anon19	access:public
__anon19::dwUserNameLength	deps/winhttp/winhttp.h	/^    DWORD   dwUserNameLength;$/;"	m	struct:__anon19	access:public
__anon19::lpszExtraInfo	deps/winhttp/winhttp.h	/^    LPWSTR  lpszExtraInfo;$/;"	m	struct:__anon19	access:public
__anon19::lpszHostName	deps/winhttp/winhttp.h	/^    LPWSTR  lpszHostName;$/;"	m	struct:__anon19	access:public
__anon19::lpszPassword	deps/winhttp/winhttp.h	/^    LPWSTR  lpszPassword;$/;"	m	struct:__anon19	access:public
__anon19::lpszScheme	deps/winhttp/winhttp.h	/^    LPWSTR  lpszScheme;$/;"	m	struct:__anon19	access:public
__anon19::lpszUrlPath	deps/winhttp/winhttp.h	/^    LPWSTR  lpszUrlPath;$/;"	m	struct:__anon19	access:public
__anon19::lpszUserName	deps/winhttp/winhttp.h	/^    LPWSTR  lpszUserName;$/;"	m	struct:__anon19	access:public
__anon19::nPort	deps/winhttp/winhttp.h	/^    INTERNET_PORT nPort;$/;"	m	struct:__anon19	access:public
__anon19::nScheme	deps/winhttp/winhttp.h	/^    INTERNET_SCHEME nScheme;$/;"	m	struct:__anon19	access:public
__anon201::driver	src/diff_driver.h	/^	git_diff_driver *driver;$/;"	m	struct:__anon201	access:public
__anon201::line	src/diff_driver.h	/^	git_buf line;$/;"	m	struct:__anon201	access:public
__anon201::match_line	src/diff_driver.h	/^	git_diff_find_context_line match_line;$/;"	m	struct:__anon201	access:public
__anon204::cache	src/refdb_fs.c	/^	git_sortedcache *cache;$/;"	m	struct:__anon204	file:	access:public
__anon204::glob	src/refdb_fs.c	/^	char *glob;$/;"	m	struct:__anon204	file:	access:public
__anon204::loose	src/refdb_fs.c	/^	git_vector loose;$/;"	m	struct:__anon204	file:	access:public
__anon204::loose_pos	src/refdb_fs.c	/^	size_t loose_pos;$/;"	m	struct:__anon204	file:	access:public
__anon204::packed_pos	src/refdb_fs.c	/^	size_t packed_pos;$/;"	m	struct:__anon204	file:	access:public
__anon204::parent	src/refdb_fs.c	/^	git_reference_iterator parent;$/;"	m	struct:__anon204	file:	access:public
__anon204::pool	src/refdb_fs.c	/^	git_pool pool;$/;"	m	struct:__anon204	file:	access:public
__anon205::__anon206::bits	src/bitvec.h	/^		uint64_t bits;$/;"	m	union:__anon205::__anon206	access:public
__anon205::__anon206::words	src/bitvec.h	/^		uint64_t *words;$/;"	m	union:__anon205::__anon206	access:public
__anon205::length	src/bitvec.h	/^	size_t length;$/;"	m	struct:__anon205	access:public
__anon205::u	src/bitvec.h	/^	} u;$/;"	m	struct:__anon205	typeref:union:__anon205::__anon206	access:public
__anon208::__anon209::id	src/transaction.c	/^		git_oid id;$/;"	m	union:__anon208::__anon209	file:	access:public
__anon208::__anon209::symbolic	src/transaction.c	/^		char *symbolic;$/;"	m	union:__anon208::__anon209	file:	access:public
__anon208::committed	src/transaction.c	/^	unsigned int committed :1,$/;"	m	struct:__anon208	file:	access:public
__anon208::message	src/transaction.c	/^	const char *message;$/;"	m	struct:__anon208	file:	access:public
__anon208::name	src/transaction.c	/^	const char *name;$/;"	m	struct:__anon208	file:	access:public
__anon208::payload	src/transaction.c	/^	void *payload;$/;"	m	struct:__anon208	file:	access:public
__anon208::ref_type	src/transaction.c	/^	git_ref_t ref_type;$/;"	m	struct:__anon208	file:	access:public
__anon208::reflog	src/transaction.c	/^	git_reflog *reflog;$/;"	m	struct:__anon208	file:	access:public
__anon208::remove	src/transaction.c	/^		remove :1;$/;"	m	struct:__anon208	file:	access:public
__anon208::sig	src/transaction.c	/^	git_signature *sig;$/;"	m	struct:__anon208	file:	access:public
__anon208::target	src/transaction.c	/^	} target;$/;"	m	struct:__anon208	typeref:union:__anon208::__anon209	file:	access:public
__anon20::dwError	deps/winhttp/winhttp.h	/^    DWORD dwError;$/;"	m	struct:__anon20	access:public
__anon20::dwResult	deps/winhttp/winhttp.h	/^    DWORD_PTR dwResult;$/;"	m	struct:__anon20	access:public
__anon211::args	src/commit.c	/^	va_list args;$/;"	m	struct:__anon211	file:	access:public
__anon211::total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon211	file:	access:public
__anon212::parents	src/commit.c	/^	const git_oid **parents;$/;"	m	struct:__anon212	file:	access:public
__anon212::total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon212	file:	access:public
__anon213::parents	src/commit.c	/^	const git_commit **parents;$/;"	m	struct:__anon213	file:	access:public
__anon213::repo	src/commit.c	/^	git_repository *repo;$/;"	m	struct:__anon213	file:	access:public
__anon213::total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon213	file:	access:public
__anon215::attr_session	src/checkout.c	/^	git_attr_session attr_session;$/;"	m	struct:__anon215	file:	access:public
__anon215::can_symlink	src/checkout.c	/^	int can_symlink;$/;"	m	struct:__anon215	file:	access:public
__anon215::completed_steps	src/checkout.c	/^	size_t completed_steps;$/;"	m	struct:__anon215	file:	access:public
__anon215::diff	src/checkout.c	/^	git_diff *diff;$/;"	m	struct:__anon215	file:	access:public
__anon215::index	src/checkout.c	/^	git_index *index;$/;"	m	struct:__anon215	file:	access:public
__anon215::mkdir_map	src/checkout.c	/^	git_strmap *mkdir_map;$/;"	m	struct:__anon215	file:	access:public
__anon215::opts	src/checkout.c	/^	git_checkout_options opts;$/;"	m	struct:__anon215	file:	access:public
__anon215::opts_free_baseline	src/checkout.c	/^	bool opts_free_baseline;$/;"	m	struct:__anon215	file:	access:public
__anon215::perfdata	src/checkout.c	/^	git_checkout_perfdata perfdata;$/;"	m	struct:__anon215	file:	access:public
__anon215::pfx	src/checkout.c	/^	char *pfx;$/;"	m	struct:__anon215	file:	access:public
__anon215::pool	src/checkout.c	/^	git_pool pool;$/;"	m	struct:__anon215	file:	access:public
__anon215::reload_submodules	src/checkout.c	/^	bool reload_submodules;$/;"	m	struct:__anon215	file:	access:public
__anon215::remove_conflicts	src/checkout.c	/^	git_vector remove_conflicts;$/;"	m	struct:__anon215	file:	access:public
__anon215::removes	src/checkout.c	/^	git_vector removes;$/;"	m	struct:__anon215	file:	access:public
__anon215::repo	src/checkout.c	/^	git_repository *repo;$/;"	m	struct:__anon215	file:	access:public
__anon215::strategy	src/checkout.c	/^	unsigned int strategy;$/;"	m	struct:__anon215	file:	access:public
__anon215::target	src/checkout.c	/^	git_iterator *target;$/;"	m	struct:__anon215	file:	access:public
__anon215::target_len	src/checkout.c	/^	size_t target_len;$/;"	m	struct:__anon215	file:	access:public
__anon215::target_path	src/checkout.c	/^	git_buf target_path;$/;"	m	struct:__anon215	file:	access:public
__anon215::tmp	src/checkout.c	/^	git_buf tmp;$/;"	m	struct:__anon215	file:	access:public
__anon215::total_steps	src/checkout.c	/^	size_t total_steps;$/;"	m	struct:__anon215	file:	access:public
__anon215::update_conflicts	src/checkout.c	/^	git_vector update_conflicts;$/;"	m	struct:__anon215	file:	access:public
__anon215::update_names	src/checkout.c	/^	git_vector *update_names;$/;"	m	struct:__anon215	file:	access:public
__anon215::update_reuc	src/checkout.c	/^	git_vector *update_reuc;$/;"	m	struct:__anon215	file:	access:public
__anon216::ancestor	src/checkout.c	/^	const git_index_entry *ancestor;$/;"	m	struct:__anon216	file:	access:public
__anon216::binary	src/checkout.c	/^		binary:1,$/;"	m	struct:__anon216	file:	access:public
__anon216::directoryfile	src/checkout.c	/^		directoryfile:1,$/;"	m	struct:__anon216	file:	access:public
__anon216::name_collision	src/checkout.c	/^	int name_collision:1,$/;"	m	struct:__anon216	file:	access:public
__anon216::one_to_two	src/checkout.c	/^		one_to_two:1,$/;"	m	struct:__anon216	file:	access:public
__anon216::ours	src/checkout.c	/^	const git_index_entry *ours;$/;"	m	struct:__anon216	file:	access:public
__anon216::submodule	src/checkout.c	/^		submodule:1;$/;"	m	struct:__anon216	file:	access:public
__anon216::theirs	src/checkout.c	/^	const git_index_entry *theirs;$/;"	m	struct:__anon216	file:	access:public
__anon21::dwKeySize	deps/winhttp/winhttp.h	/^    DWORD dwKeySize;$/;"	m	struct:__anon21	access:public
__anon21::ftExpiry	deps/winhttp/winhttp.h	/^    FILETIME ftExpiry;$/;"	m	struct:__anon21	access:public
__anon21::ftStart	deps/winhttp/winhttp.h	/^    FILETIME ftStart;$/;"	m	struct:__anon21	access:public
__anon21::lpszEncryptionAlgName	deps/winhttp/winhttp.h	/^    LPWSTR lpszEncryptionAlgName;$/;"	m	struct:__anon21	access:public
__anon21::lpszIssuerInfo	deps/winhttp/winhttp.h	/^    LPWSTR lpszIssuerInfo;$/;"	m	struct:__anon21	access:public
__anon21::lpszProtocolName	deps/winhttp/winhttp.h	/^    LPWSTR lpszProtocolName;$/;"	m	struct:__anon21	access:public
__anon21::lpszSignatureAlgName	deps/winhttp/winhttp.h	/^    LPWSTR lpszSignatureAlgName;$/;"	m	struct:__anon21	access:public
__anon21::lpszSubjectInfo	deps/winhttp/winhttp.h	/^    LPWSTR lpszSubjectInfo;$/;"	m	struct:__anon21	access:public
__anon221::packfile	src/refdb_fs.h	/^	git_strmap *packfile;$/;"	m	struct:__anon221	access:public
__anon221::packfile_time	src/refdb_fs.h	/^	time_t packfile_time;$/;"	m	struct:__anon221	access:public
__anon224::hunk	src/diff_xdiff.c	/^	git_diff_hunk hunk;$/;"	m	struct:__anon224	file:	access:public
__anon224::new_lineno	src/diff_xdiff.c	/^	int old_lineno, new_lineno;$/;"	m	struct:__anon224	file:	access:public
__anon224::old_lineno	src/diff_xdiff.c	/^	int old_lineno, new_lineno;$/;"	m	struct:__anon224	file:	access:public
__anon224::patch	src/diff_xdiff.c	/^	git_patch_generated *patch;$/;"	m	struct:__anon224	file:	access:public
__anon224::xd_new_data	src/diff_xdiff.c	/^	mmfile_t xd_old_data, xd_new_data;$/;"	m	struct:__anon224	file:	access:public
__anon224::xd_old_data	src/diff_xdiff.c	/^	mmfile_t xd_old_data, xd_new_data;$/;"	m	struct:__anon224	file:	access:public
__anon224::xo	src/diff_xdiff.c	/^	git_xdiff_output *xo;$/;"	m	struct:__anon224	file:	access:public
__anon225::current_thread	src/global.h	/^	git_thread *current_thread;$/;"	m	struct:__anon225	access:public
__anon225::error_buf	src/global.h	/^	git_buf error_buf;$/;"	m	struct:__anon225	access:public
__anon225::error_t	src/global.h	/^	git_error error_t;$/;"	m	struct:__anon225	access:public
__anon225::last_error	src/global.h	/^	git_error *last_error;$/;"	m	struct:__anon225	access:public
__anon225::oid_fmt	src/global.h	/^	char oid_fmt[GIT_OID_HEXSZ+1];$/;"	m	struct:__anon225	access:public
__anon226::lines	src/apply.c	/^	git_vector lines;$/;"	m	struct:__anon226	file:	access:public
__anon226::pool	src/apply.c	/^	git_pool pool;$/;"	m	struct:__anon226	file:	access:public
__anon227::deletions	src/diff_stats.c	/^	size_t deletions;$/;"	m	struct:__anon227	file:	access:public
__anon227::insertions	src/diff_stats.c	/^	size_t insertions;$/;"	m	struct:__anon227	file:	access:public
__anon229::flags	src/cache.h	/^	uint16_t   flags; \/* GIT_CACHE_STORE value *\/$/;"	m	struct:__anon229	access:public
__anon229::oid	src/cache.h	/^	git_oid    oid;$/;"	m	struct:__anon229	access:public
__anon229::refcount	src/cache.h	/^	git_atomic refcount;$/;"	m	struct:__anon229	access:public
__anon229::size	src/cache.h	/^	size_t     size;$/;"	m	struct:__anon229	access:public
__anon229::type	src/cache.h	/^	int16_t    type;  \/* git_otype value *\/$/;"	m	struct:__anon229	access:public
__anon22::dwAccessType	deps/winhttp/winhttp.h	/^    DWORD dwAccessType;$/;"	m	struct:__anon22	access:public
__anon22::lpszProxy	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxy;$/;"	m	struct:__anon22	access:public
__anon22::lpszProxyBypass	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxyBypass;$/;"	m	struct:__anon22	access:public
__anon230::lock	src/cache.h	/^	git_rwlock  lock;$/;"	m	struct:__anon230	access:public
__anon230::map	src/cache.h	/^	git_oidmap *map;$/;"	m	struct:__anon230	access:public
__anon230::used_memory	src/cache.h	/^	ssize_t     used_memory;$/;"	m	struct:__anon230	access:public
__anon232::cert_info	src/curl_stream.c	/^	git_cert_x509 cert_info;$/;"	m	struct:__anon232	file:	access:public
__anon232::cert_info_strings	src/curl_stream.c	/^	git_strarray cert_info_strings;$/;"	m	struct:__anon232	file:	access:public
__anon232::curl_error	src/curl_stream.c	/^	char curl_error[CURL_ERROR_SIZE + 1];$/;"	m	struct:__anon232	file:	access:public
__anon232::handle	src/curl_stream.c	/^	CURL *handle;$/;"	m	struct:__anon232	file:	access:public
__anon232::parent	src/curl_stream.c	/^	git_stream parent;$/;"	m	struct:__anon232	file:	access:public
__anon232::proxy	src/curl_stream.c	/^	git_proxy_options proxy;$/;"	m	struct:__anon232	file:	access:public
__anon232::proxy_cred	src/curl_stream.c	/^	git_cred *proxy_cred;$/;"	m	struct:__anon232	file:	access:public
__anon232::socket	src/curl_stream.c	/^	curl_socket_t socket;$/;"	m	struct:__anon232	file:	access:public
__anon233::base	src/diff_parse.h	/^	struct git_diff base;$/;"	m	struct:__anon233	typeref:struct:__anon233::git_diff	access:public
__anon233::patches	src/diff_parse.h	/^	git_vector patches;$/;"	m	struct:__anon233	access:public
__anon234::filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:__anon234	file:	access:public
__anon234::filter_name	src/filter.c	/^	const char *filter_name;$/;"	m	struct:__anon234	file:	access:public
__anon234::payload	src/filter.c	/^	void *payload;$/;"	m	struct:__anon234	file:	access:public
__anon235::attrdata	src/filter.c	/^	char *attrdata;$/;"	m	struct:__anon235	file:	access:public
__anon235::attrs	src/filter.c	/^	const char *attrs[GIT_FLEX_ARRAY];$/;"	m	struct:__anon235	file:	access:public
__anon235::filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:__anon235	file:	access:public
__anon235::filter_name	src/filter.c	/^	char *filter_name;$/;"	m	struct:__anon235	file:	access:public
__anon235::initialized	src/filter.c	/^	int initialized;$/;"	m	struct:__anon235	file:	access:public
__anon235::nattrs	src/filter.c	/^	size_t nattrs, nmatches;$/;"	m	struct:__anon235	file:	access:public
__anon235::nmatches	src/filter.c	/^	size_t nattrs, nmatches;$/;"	m	struct:__anon235	file:	access:public
__anon235::priority	src/filter.c	/^	int priority;$/;"	m	struct:__anon235	file:	access:public
__anon236::buf	src/diff_print.c	/^	git_buf *buf;$/;"	m	struct:__anon236	file:	access:public
__anon236::flags	src/diff_print.c	/^	uint32_t flags;$/;"	m	struct:__anon236	file:	access:public
__anon236::format	src/diff_print.c	/^	git_diff_format_t format;$/;"	m	struct:__anon236	file:	access:public
__anon236::id_strlen	src/diff_print.c	/^	int id_strlen;$/;"	m	struct:__anon236	file:	access:public
__anon236::line	src/diff_print.c	/^	git_diff_line line;$/;"	m	struct:__anon236	file:	access:public
__anon236::new_prefix	src/diff_print.c	/^	const char *new_prefix;$/;"	m	struct:__anon236	file:	access:public
__anon236::old_prefix	src/diff_print.c	/^	const char *old_prefix;$/;"	m	struct:__anon236	file:	access:public
__anon236::payload	src/diff_print.c	/^	void *payload;$/;"	m	struct:__anon236	file:	access:public
__anon236::print_cb	src/diff_print.c	/^	git_diff_line_cb print_cb;$/;"	m	struct:__anon236	file:	access:public
__anon236::strcomp	src/diff_print.c	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:__anon236	file:	access:public
__anon237::data	src/map.h	/^	void *data; \/* data bytes			*\/$/;"	m	struct:__anon237	access:public
__anon237::fmh	src/map.h	/^	HANDLE fmh; \/* file mapping handle *\/$/;"	m	struct:__anon237	access:public
__anon237::len	src/map.h	/^	size_t len; \/* data length			*\/$/;"	m	struct:__anon237	access:public
__anon239::flags	src/diff_driver.c	/^	int flags;$/;"	m	struct:__anon239	file:	access:public
__anon239::re	src/diff_driver.c	/^	regex_t re;$/;"	m	struct:__anon239	file:	access:public
__anon23::fAutoDetect	deps/winhttp/winhttp.h	/^    BOOL   fAutoDetect;$/;"	m	struct:__anon23	access:public
__anon23::lpszAutoConfigUrl	deps/winhttp/winhttp.h	/^    LPWSTR lpszAutoConfigUrl;$/;"	m	struct:__anon23	access:public
__anon23::lpszProxy	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxy;$/;"	m	struct:__anon23	access:public
__anon23::lpszProxyBypass	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxyBypass;$/;"	m	struct:__anon23	access:public
__anon243::prefix_len	src/patch.h	/^	uint32_t prefix_len;$/;"	m	struct:__anon243	access:public
__anon244::backend	src/odb.c	/^	git_odb_backend *backend;$/;"	m	struct:__anon244	file:	access:public
__anon244::disk_inode	src/odb.c	/^	ino_t disk_inode;$/;"	m	struct:__anon244	file:	access:public
__anon244::is_alternate	src/odb.c	/^	bool is_alternate;$/;"	m	struct:__anon244	file:	access:public
__anon244::priority	src/odb.c	/^	int priority;$/;"	m	struct:__anon244	file:	access:public
__anon245::buffer	src/odb.c	/^	char *buffer;$/;"	m	struct:__anon245	file:	access:public
__anon245::size	src/odb.c	/^	size_t size, written;$/;"	m	struct:__anon245	file:	access:public
__anon245::stream	src/odb.c	/^	git_odb_stream stream;$/;"	m	struct:__anon245	file:	access:public
__anon245::type	src/odb.c	/^	git_otype type;$/;"	m	struct:__anon245	file:	access:public
__anon245::written	src/odb.c	/^	size_t size, written;$/;"	m	struct:__anon245	file:	access:public
__anon246::found	src/attr.c	/^	git_attr_assignment *found;$/;"	m	struct:__anon246	file:	access:public
__anon246::name	src/attr.c	/^	git_attr_name name;$/;"	m	struct:__anon246	file:	access:public
__anon247::attr_session	src/attr.c	/^	git_attr_session *attr_session;$/;"	m	struct:__anon247	file:	access:public
__anon247::files	src/attr.c	/^	git_vector *files;$/;"	m	struct:__anon247	file:	access:public
__anon247::flags	src/attr.c	/^	uint32_t flags;$/;"	m	struct:__anon247	file:	access:public
__anon247::index	src/attr.c	/^	git_index *index;$/;"	m	struct:__anon247	file:	access:public
__anon247::repo	src/attr.c	/^	git_repository *repo;$/;"	m	struct:__anon247	file:	access:public
__anon247::workdir	src/attr.c	/^	const char *workdir;$/;"	m	struct:__anon247	file:	access:public
__anon248::cb	src/tag.c	/^	git_tag_foreach_cb cb;$/;"	m	struct:__anon248	file:	access:public
__anon248::cb_data	src/tag.c	/^	void *cb_data;$/;"	m	struct:__anon248	file:	access:public
__anon248::repo	src/tag.c	/^	git_repository *repo;$/;"	m	struct:__anon248	file:	access:public
__anon249::pattern	src/tag.c	/^	const char *pattern;$/;"	m	struct:__anon249	file:	access:public
__anon249::taglist	src/tag.c	/^	git_vector *taglist;$/;"	m	struct:__anon249	file:	access:public
__anon24::dwAutoDetectFlags	deps/winhttp/winhttp.h	/^    DWORD dwAutoDetectFlags;$/;"	m	struct:__anon24	access:public
__anon24::dwFlags	deps/winhttp/winhttp.h	/^    DWORD dwFlags;$/;"	m	struct:__anon24	access:public
__anon24::dwReserved	deps/winhttp/winhttp.h	/^    DWORD dwReserved;$/;"	m	struct:__anon24	access:public
__anon24::fAutoLogonIfChallenged	deps/winhttp/winhttp.h	/^    BOOL fAutoLogonIfChallenged;$/;"	m	struct:__anon24	access:public
__anon24::lpszAutoConfigUrl	deps/winhttp/winhttp.h	/^    LPCWSTR lpszAutoConfigUrl;$/;"	m	struct:__anon24	access:public
__anon24::lpvReserved	deps/winhttp/winhttp.h	/^    LPVOID lpvReserved;$/;"	m	struct:__anon24	access:public
__anon251::callback	src/diff_xdiff.h	/^	xdemitcb_t   callback;$/;"	m	struct:__anon251	access:public
__anon251::config	src/diff_xdiff.h	/^	xdemitconf_t config;$/;"	m	struct:__anon251	access:public
__anon251::output	src/diff_xdiff.h	/^	git_patch_generated_output output;$/;"	m	struct:__anon251	access:public
__anon251::params	src/diff_xdiff.h	/^	xpparam_t    params;$/;"	m	struct:__anon251	access:public
__anon255::end	src/iterator.h	/^	const char *end;$/;"	m	struct:__anon255	access:public
__anon255::flags	src/iterator.h	/^	unsigned int flags;$/;"	m	struct:__anon255	access:public
__anon255::pathlist	src/iterator.h	/^	git_strarray pathlist;$/;"	m	struct:__anon255	access:public
__anon255::start	src/iterator.h	/^	const char *start;$/;"	m	struct:__anon255	access:public
__anon256::advance	src/iterator.h	/^	int (*advance)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon256	access:public
__anon256::advance_into	src/iterator.h	/^	int (*advance_into)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon256	access:public
__anon256::advance_over	src/iterator.h	/^	int (*advance_over)($/;"	m	struct:__anon256	access:public
__anon256::current	src/iterator.h	/^	int (*current)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon256	access:public
__anon256::free	src/iterator.h	/^	void (*free)(git_iterator *);$/;"	m	struct:__anon256	access:public
__anon256::reset	src/iterator.h	/^	int (*reset)(git_iterator *);$/;"	m	struct:__anon256	access:public
__anon257::error_code	src/common.h	/^	int error_code;$/;"	m	struct:__anon257	access:public
__anon257::error_msg	src/common.h	/^	git_error error_msg;$/;"	m	struct:__anon257	access:public
__anon257::oom	src/common.h	/^	unsigned int oom : 1;$/;"	m	struct:__anon257	access:public
__anon25::dwMajorVersion	deps/winhttp/winhttp.h	/^    DWORD dwMajorVersion;$/;"	m	struct:__anon25	access:public
__anon25::dwMinorVersion	deps/winhttp/winhttp.h	/^    DWORD dwMinorVersion;$/;"	m	struct:__anon25	access:public
__anon260::attr_session	src/filter.h	/^	git_attr_session *attr_session;$/;"	m	struct:__anon260	access:public
__anon260::flags	src/filter.h	/^	uint32_t flags;$/;"	m	struct:__anon260	access:public
__anon260::temp_buf	src/filter.h	/^	git_buf *temp_buf;$/;"	m	struct:__anon260	access:public
__anon261::cmp	src/util.c	/^	git__sort_r_cmp cmp;$/;"	m	struct:__anon261	file:	access:public
__anon261::payload	src/util.c	/^	void *payload;$/;"	m	struct:__anon261	file:	access:public
__anon263::base	src/fileops.c	/^	const char *base;$/;"	m	struct:__anon263	file:	access:public
__anon263::baselen	src/fileops.c	/^	size_t baselen;$/;"	m	struct:__anon263	file:	access:public
__anon263::depth	src/fileops.c	/^	int depth;$/;"	m	struct:__anon263	file:	access:public
__anon263::flags	src/fileops.c	/^	uint32_t flags;$/;"	m	struct:__anon263	file:	access:public
__anon264::dirmode	src/fileops.c	/^	mode_t dirmode;$/;"	m	struct:__anon264	file:	access:public
__anon264::flags	src/fileops.c	/^	uint32_t flags;$/;"	m	struct:__anon264	file:	access:public
__anon264::from_prefix	src/fileops.c	/^	ssize_t from_prefix;$/;"	m	struct:__anon264	file:	access:public
__anon264::mkdir_flags	src/fileops.c	/^	uint32_t mkdir_flags;$/;"	m	struct:__anon264	file:	access:public
__anon264::to	src/fileops.c	/^	git_buf to;$/;"	m	struct:__anon264	file:	access:public
__anon264::to_root	src/fileops.c	/^	const char *to_root;$/;"	m	struct:__anon264	file:	access:public
__anon266::base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon266	file:	access:public
__anon266::cb	src/iterator.c	/^	git_iterator_callbacks cb;$/;"	m	struct:__anon266	file:	access:public
__anon267::parent_path	src/iterator.c	/^	const char *parent_path;$/;"	m	struct:__anon267	file:	access:public
__anon267::tree_entry	src/iterator.c	/^	git_tree_entry *tree_entry;$/;"	m	struct:__anon267	file:	access:public
__anon268::current	src/iterator.c	/^	tree_iterator_entry *current;$/;"	m	struct:__anon268	file:	access:public
__anon268::entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:__anon268	file:	access:public
__anon268::next_idx	src/iterator.c	/^	size_t next_idx;$/;"	m	struct:__anon268	file:	access:public
__anon268::path	src/iterator.c	/^	git_buf path;$/;"	m	struct:__anon268	file:	access:public
__anon268::similar_trees	src/iterator.c	/^	git_vector similar_trees;$/;"	m	struct:__anon268	file:	access:public
__anon268::tree	src/iterator.c	/^	git_tree *tree;$/;"	m	struct:__anon268	file:	access:public
__anon269::base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon269	file:	access:public
__anon269::entry	src/iterator.c	/^	git_index_entry entry;$/;"	m	struct:__anon269	file:	access:public
__anon269::entry_path	src/iterator.c	/^	git_buf entry_path;$/;"	m	struct:__anon269	file:	access:public
__anon269::entry_pool	src/iterator.c	/^	git_pool entry_pool;$/;"	m	struct:__anon269	file:	access:public
__anon269::root	src/iterator.c	/^	git_tree *root;$/;"	m	struct:__anon269	file:	access:public
__anon26::LocalAddress	deps/winhttp/winhttp.h	/^    SOCKADDR_STORAGE LocalAddress;$/;"	m	struct:__anon26	access:public
__anon26::RemoteAddress	deps/winhttp/winhttp.h	/^    SOCKADDR_STORAGE RemoteAddress;$/;"	m	struct:__anon26	access:public
__anon26::cbSize	deps/winhttp/winhttp.h	/^    DWORD cbSize;$/;"	m	struct:__anon26	access:public
__anon270::match	src/iterator.c	/^	iterator_pathlist_search_t match;$/;"	m	struct:__anon270	file:	access:public
__anon270::path	src/iterator.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon270	file:	access:public
__anon270::path_len	src/iterator.c	/^	size_t path_len;$/;"	m	struct:__anon270	file:	access:public
__anon270::st	src/iterator.c	/^	struct stat st;$/;"	m	struct:__anon270	typeref:struct:__anon270::stat	file:	access:public
__anon271::entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:__anon271	file:	access:public
__anon271::entry_pool	src/iterator.c	/^	git_pool entry_pool;$/;"	m	struct:__anon271	file:	access:public
__anon271::is_ignored	src/iterator.c	/^	int is_ignored;$/;"	m	struct:__anon271	file:	access:public
__anon271::next_idx	src/iterator.c	/^	size_t next_idx;$/;"	m	struct:__anon271	file:	access:public
__anon271::path_len	src/iterator.c	/^	size_t path_len;$/;"	m	struct:__anon271	file:	access:public
__anon272::base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon272	file:	access:public
__anon272::current_is_ignored	src/iterator.c	/^	int current_is_ignored;$/;"	m	struct:__anon272	file:	access:public
__anon272::current_path	src/iterator.c	/^	git_buf current_path;$/;"	m	struct:__anon272	file:	access:public
__anon272::dirload_flags	src/iterator.c	/^	unsigned int dirload_flags;$/;"	m	struct:__anon272	file:	access:public
__anon272::entry	src/iterator.c	/^	git_index_entry entry;$/;"	m	struct:__anon272	file:	access:public
__anon272::ignores	src/iterator.c	/^	git_ignores ignores;$/;"	m	struct:__anon272	file:	access:public
__anon272::index	src/iterator.c	/^	git_index *index;$/;"	m	struct:__anon272	file:	access:public
__anon272::index_snapshot	src/iterator.c	/^	git_vector index_snapshot;$/;"	m	struct:__anon272	file:	access:public
__anon272::root	src/iterator.c	/^	char *root;$/;"	m	struct:__anon272	file:	access:public
__anon272::root_len	src/iterator.c	/^	size_t root_len;$/;"	m	struct:__anon272	file:	access:public
__anon272::tmp_buf	src/iterator.c	/^	git_buf tmp_buf;$/;"	m	struct:__anon272	file:	access:public
__anon272::tree	src/iterator.c	/^	git_tree *tree;$/;"	m	struct:__anon272	file:	access:public
__anon273::base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon273	file:	access:public
__anon273::entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:__anon273	file:	access:public
__anon273::entry	src/iterator.c	/^	const git_index_entry *entry;$/;"	m	struct:__anon273	file:	access:public
__anon273::next_idx	src/iterator.c	/^	size_t next_idx;$/;"	m	struct:__anon273	file:	access:public
__anon273::skip_tree	src/iterator.c	/^	bool skip_tree;$/;"	m	struct:__anon273	file:	access:public
__anon273::tree_buf	src/iterator.c	/^	git_buf tree_buf;$/;"	m	struct:__anon273	file:	access:public
__anon273::tree_entry	src/iterator.c	/^	git_index_entry tree_entry;$/;"	m	struct:__anon273	file:	access:public
__anon274::driver	src/merge_driver.c	/^	git_merge_driver *driver;$/;"	m	struct:__anon274	file:	access:public
__anon274::initialized	src/merge_driver.c	/^	int initialized;$/;"	m	struct:__anon274	file:	access:public
__anon274::name	src/merge_driver.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:__anon274	file:	access:public
__anon275::file	src/index.h	/^	git_filebuf file;$/;"	m	struct:__anon275	access:public
__anon275::index	src/index.h	/^	git_index *index;$/;"	m	struct:__anon275	access:public
__anon275::should_write	src/index.h	/^	unsigned int should_write:1;$/;"	m	struct:__anon275	access:public
__anon276::cert_info	src/openssl_stream.c	/^	git_cert_x509 cert_info;$/;"	m	struct:__anon276	file:	access:public
__anon276::connected	src/openssl_stream.c	/^	bool connected;$/;"	m	struct:__anon276	file:	access:public
__anon276::host	src/openssl_stream.c	/^	char *host;$/;"	m	struct:__anon276	file:	access:public
__anon276::io	src/openssl_stream.c	/^	git_stream *io;$/;"	m	struct:__anon276	file:	access:public
__anon276::parent	src/openssl_stream.c	/^	git_stream parent;$/;"	m	struct:__anon276	file:	access:public
__anon276::ssl	src/openssl_stream.c	/^	SSL *ssl;$/;"	m	struct:__anon276	file:	access:public
__anon277::blob	src/diff_file.h	/^	const git_blob *blob;$/;"	m	struct:__anon277	access:public
__anon277::driver	src/diff_file.h	/^	git_diff_driver *driver;$/;"	m	struct:__anon277	access:public
__anon277::file	src/diff_file.h	/^	git_diff_file *file;$/;"	m	struct:__anon277	access:public
__anon277::flags	src/diff_file.h	/^	uint32_t flags;$/;"	m	struct:__anon277	access:public
__anon277::map	src/diff_file.h	/^	git_map map;$/;"	m	struct:__anon277	access:public
__anon277::opts_flags	src/diff_file.h	/^	uint32_t opts_flags;$/;"	m	struct:__anon277	access:public
__anon277::opts_max_size	src/diff_file.h	/^	git_off_t opts_max_size;$/;"	m	struct:__anon277	access:public
__anon277::repo	src/diff_file.h	/^	git_repository *repo;$/;"	m	struct:__anon277	access:public
__anon277::src	src/diff_file.h	/^	git_iterator_type_t src;$/;"	m	struct:__anon277	access:public
__anon278::as_path	src/diff_file.h	/^	const char *as_path;$/;"	m	struct:__anon278	access:public
__anon278::blob	src/diff_file.h	/^	const git_blob *blob;$/;"	m	struct:__anon278	access:public
__anon278::buf	src/diff_file.h	/^	const void *buf;$/;"	m	struct:__anon278	access:public
__anon278::buflen	src/diff_file.h	/^	size_t buflen;$/;"	m	struct:__anon278	access:public
__anon279::fbuf	src/blob.c	/^	git_filebuf fbuf;$/;"	m	struct:__anon279	file:	access:public
__anon279::hintpath	src/blob.c	/^	char *hintpath;$/;"	m	struct:__anon279	file:	access:public
__anon279::parent	src/blob.c	/^	git_writestream parent;$/;"	m	struct:__anon279	file:	access:public
__anon279::repo	src/blob.c	/^	git_repository *repo;$/;"	m	struct:__anon279	file:	access:public
__anon284::aux_id	src/win32/w32_stack.h	/^	unsigned int aux_id;$/;"	m	struct:__anon284	access:public
__anon284::frames	src/win32/w32_stack.h	/^	void *frames[GIT_WIN32__STACK__MAX_FRAMES];$/;"	m	struct:__anon284	access:public
__anon284::nr_frames	src/win32/w32_stack.h	/^	unsigned int nr_frames;$/;"	m	struct:__anon284	access:public
__anon285::param	src/win32/thread.h	/^	void *param;$/;"	m	struct:__anon285	access:public
__anon285::proc	src/win32/thread.h	/^	void *(*proc)(void *);$/;"	m	struct:__anon285	access:public
__anon285::result	src/win32/thread.h	/^	void *result;$/;"	m	struct:__anon285	access:public
__anon285::thread	src/win32/thread.h	/^	HANDLE thread;$/;"	m	struct:__anon285	access:public
__anon286::Ptr	src/win32/thread.h	/^typedef struct { void *Ptr; } GIT_SRWLOCK;$/;"	m	struct:__anon286	access:public
__anon287::__anon288::csec	src/win32/thread.h	/^		CRITICAL_SECTION csec;$/;"	m	union:__anon287::__anon288	access:public
__anon287::__anon288::srwl	src/win32/thread.h	/^		GIT_SRWLOCK srwl;$/;"	m	union:__anon287::__anon288	access:public
__anon287::native	src/win32/thread.h	/^	} native;$/;"	m	struct:__anon287	typeref:union:__anon287::__anon288	access:public
__anon289::len	src/win32/findfile.c	/^	DWORD len;$/;"	m	struct:__anon289	file:	access:public
__anon289::path	src/win32/findfile.c	/^	git_win32_path path;$/;"	m	struct:__anon289	file:	access:public
__anon290::dir	src/win32/dir.h	/^	char dir[GIT_FLEX_ARRAY];$/;"	m	struct:__anon290	access:public
__anon290::entry	src/win32/dir.h	/^	struct git__dirent entry;$/;"	m	struct:__anon290	typeref:struct:__anon290::git__dirent	access:public
__anon290::f	src/win32/dir.h	/^	WIN32_FIND_DATAW f;$/;"	m	struct:__anon290	access:public
__anon290::first	src/win32/dir.h	/^	int first;$/;"	m	struct:__anon290	access:public
__anon290::h	src/win32/dir.h	/^	HANDLE h;$/;"	m	struct:__anon290	access:public
__anon291::uid	src/win32/w32_crtdbg_stacktrace.c	/^	char uid[CRTDBG_STACKTRACE__UID_LEN + 1];$/;"	m	struct:__anon291	file:	access:public
__anon292::count_allocs	src/win32/w32_crtdbg_stacktrace.c	/^	unsigned int count_allocs; \/* times this alloc signature seen since init *\/$/;"	m	struct:__anon292	file:	access:public
__anon292::count_allocs_at_last_checkpoint	src/win32/w32_crtdbg_stacktrace.c	/^	unsigned int count_allocs_at_last_checkpoint; \/* times since last mark *\/$/;"	m	struct:__anon292	file:	access:public
__anon292::raw_data	src/win32/w32_crtdbg_stacktrace.c	/^	git_win32__stack__raw_data raw_data;$/;"	m	struct:__anon292	file:	access:public
__anon292::transient_count_leaks	src/win32/w32_crtdbg_stacktrace.c	/^	unsigned int transient_count_leaks; \/* sum of leaks *\/$/;"	m	struct:__anon292	file:	access:public
__anon292::uid	src/win32/w32_crtdbg_stacktrace.c	/^	git_win32__crtdbg_stacktrace__uid uid; \/* must be first *\/$/;"	m	struct:__anon292	file:	access:public
__anon294::in	src/zstream.h	/^	const char *in;$/;"	m	struct:__anon294	access:public
__anon294::in_len	src/zstream.h	/^	size_t in_len;$/;"	m	struct:__anon294	access:public
__anon294::type	src/zstream.h	/^	git_zstream_t type;$/;"	m	struct:__anon294	access:public
__anon294::z	src/zstream.h	/^	z_stream z;$/;"	m	struct:__anon294	access:public
__anon294::zerr	src/zstream.h	/^	int zerr;$/;"	m	struct:__anon294	access:public
__anon295::entries	src/pack.h	/^	git_offmap *entries;$/;"	m	struct:__anon295	access:public
__anon295::lock	src/pack.h	/^	git_mutex lock;$/;"	m	struct:__anon295	access:public
__anon295::memory_limit	src/pack.h	/^	size_t memory_limit;$/;"	m	struct:__anon295	access:public
__anon295::memory_used	src/pack.h	/^	size_t memory_used;$/;"	m	struct:__anon295	access:public
__anon295::use_ctr	src/pack.h	/^	size_t use_ctr;$/;"	m	struct:__anon295	access:public
__anon296::base	src/diff_generate.c	/^	struct git_diff base;$/;"	m	struct:__anon296	typeref:struct:__anon296::git_diff	file:	access:public
__anon296::diffcaps	src/diff_generate.c	/^	uint32_t diffcaps;$/;"	m	struct:__anon296	file:	access:public
__anon296::index_updated	src/diff_generate.c	/^	bool index_updated;$/;"	m	struct:__anon296	file:	access:public
__anon296::pathspec	src/diff_generate.c	/^	git_vector pathspec;$/;"	m	struct:__anon296	file:	access:public
__anon297::new_iter	src/diff_generate.c	/^	git_iterator *new_iter;$/;"	m	struct:__anon297	file:	access:public
__anon297::nitem	src/diff_generate.c	/^	const git_index_entry *nitem;$/;"	m	struct:__anon297	file:	access:public
__anon297::oitem	src/diff_generate.c	/^	const git_index_entry *oitem;$/;"	m	struct:__anon297	file:	access:public
__anon297::old_iter	src/diff_generate.c	/^	git_iterator *old_iter;$/;"	m	struct:__anon297	file:	access:public
__anon297::repo	src/diff_generate.c	/^	git_repository *repo;$/;"	m	struct:__anon297	file:	access:public
__anon298::cert_info	src/stransport_stream.c	/^	git_cert_x509 cert_info;$/;"	m	struct:__anon298	file:	access:public
__anon298::ctx	src/stransport_stream.c	/^	SSLContextRef ctx;$/;"	m	struct:__anon298	file:	access:public
__anon298::der_data	src/stransport_stream.c	/^	CFDataRef der_data;$/;"	m	struct:__anon298	file:	access:public
__anon298::io	src/stransport_stream.c	/^	git_stream *io;$/;"	m	struct:__anon298	file:	access:public
__anon298::parent	src/stransport_stream.c	/^	git_stream parent;$/;"	m	struct:__anon298	file:	access:public
__anon2::description	deps/http-parser/http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:	access:public
__anon2::name	deps/http-parser/http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:	access:public
__anon300::dst	src/date.c	/^	int dst;$/;"	m	struct:__anon300	file:	access:public
__anon300::name	src/date.c	/^	const char *name;$/;"	m	struct:__anon300	file:	access:public
__anon300::offset	src/date.c	/^	int offset;$/;"	m	struct:__anon300	file:	access:public
__anon301::children	src/oid.c	/^	node_index children[16];$/;"	m	union:__anon301	file:	access:public
__anon301::tail	src/oid.c	/^	const char *tail;$/;"	m	union:__anon301	file:	access:public
__anon304::name	src/submodule.c	/^	char *name;$/;"	m	struct:__anon304	file:	access:public
__anon304::path	src/submodule.c	/^	const char *path;$/;"	m	struct:__anon304	file:	access:public
__anon305::map	src/submodule.c	/^	git_strmap *map;$/;"	m	struct:__anon305	file:	access:public
__anon305::mods	src/submodule.c	/^	git_config *mods;$/;"	m	struct:__anon305	file:	access:public
__anon305::repo	src/submodule.c	/^	git_repository *repo;$/;"	m	struct:__anon305	file:	access:public
__anon306::item_size	src/pool.h	/^	uint32_t item_size;  \/* size of single alloc unit in bytes *\/$/;"	m	struct:__anon306	access:public
__anon306::page_size	src/pool.h	/^	uint32_t page_size;  \/* size of page in bytes *\/$/;"	m	struct:__anon306	access:public
__anon306::pages	src/pool.h	/^	git_pool_page *pages; \/* allocated pages *\/$/;"	m	struct:__anon306	access:public
__anon307::allocations	src/pool.h	/^	git_vector allocations;$/;"	m	struct:__anon307	access:public
__anon307::item_size	src/pool.h	/^	uint32_t item_size;$/;"	m	struct:__anon307	access:public
__anon307::page_size	src/pool.h	/^	uint32_t page_size;$/;"	m	struct:__anon307	access:public
__anon308::flags	src/branch.c	/^	unsigned int flags;$/;"	m	struct:__anon308	file:	access:public
__anon308::iter	src/branch.c	/^	git_reference_iterator *iter;$/;"	m	struct:__anon308	file:	access:public
__anon309::cfg_attr_file	src/attrcache.h	/^	char *cfg_attr_file; \/* cached value of core.attributesfile *\/$/;"	m	struct:__anon309	access:public
__anon309::cfg_excl_file	src/attrcache.h	/^	char *cfg_excl_file; \/* cached value of core.excludesfile *\/$/;"	m	struct:__anon309	access:public
__anon309::files	src/attrcache.h	/^	git_strmap *files;	 \/* hash path to git_attr_cache_entry records *\/$/;"	m	struct:__anon309	access:public
__anon309::lock	src/attrcache.h	/^	git_mutex lock;$/;"	m	struct:__anon309	access:public
__anon309::macros	src/attrcache.h	/^	git_strmap *macros;	 \/* hash name to vector<git_attr_assignment> *\/$/;"	m	struct:__anon309	access:public
__anon309::pool	src/attrcache.h	/^	git_pool  pool;$/;"	m	struct:__anon309	access:public
__anon310::free_item	src/sortedcache.h	/^	git_sortedcache_free_item_fn free_item;$/;"	m	struct:__anon310	access:public
__anon310::free_item_payload	src/sortedcache.h	/^	void         *free_item_payload;$/;"	m	struct:__anon310	access:public
__anon310::item_path_offset	src/sortedcache.h	/^	size_t       item_path_offset;$/;"	m	struct:__anon310	access:public
__anon310::items	src/sortedcache.h	/^	git_vector   items;$/;"	m	struct:__anon310	access:public
__anon310::lock	src/sortedcache.h	/^	git_rwlock   lock;$/;"	m	struct:__anon310	access:public
__anon310::map	src/sortedcache.h	/^	git_strmap   *map;$/;"	m	struct:__anon310	access:public
__anon310::path	src/sortedcache.h	/^	char         path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon310	access:public
__anon310::pool	src/sortedcache.h	/^	git_pool     pool;$/;"	m	struct:__anon310	access:public
__anon310::rc	src/sortedcache.h	/^	git_refcount rc;$/;"	m	struct:__anon310	access:public
__anon310::stamp	src/sortedcache.h	/^	git_futils_filestamp stamp;$/;"	m	struct:__anon310	access:public
__anon313::buf	src/path.h	/^	git_buf buf;$/;"	m	struct:__anon313	access:public
__anon313::map	src/path.h	/^	iconv_t map;$/;"	m	struct:__anon313	access:public
__anon314::val	src/thread-utils.h	/^	volatile long val;$/;"	m	struct:__anon314	access:public
__anon315::val	src/thread-utils.h	/^	__int64 val;$/;"	m	struct:__anon315	access:public
__anon319::data	src/hash.h	/^	void *data;$/;"	m	struct:__anon319	access:public
__anon319::len	src/hash.h	/^	size_t len;$/;"	m	struct:__anon319	access:public
__anon31::bits	deps/zlib/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon31	access:public
__anon31::op	deps/zlib/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon31	access:public
__anon31::val	deps/zlib/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon31	access:public
__anon320::id	src/pack-objects.h	/^	git_oid id;$/;"	m	struct:__anon320	access:public
__anon320::seen	src/pack-objects.h	/^		seen:1;$/;"	m	struct:__anon320	access:public
__anon320::uninteresting	src/pack-objects.h	/^	unsigned int uninteresting:1,$/;"	m	struct:__anon320	access:public
__anon324::conflicts	src/merge.h	/^	git_vector conflicts;$/;"	m	struct:__anon324	access:public
__anon324::pool	src/merge.h	/^	git_pool pool;$/;"	m	struct:__anon324	access:public
__anon324::repo	src/merge.h	/^	git_repository *repo;$/;"	m	struct:__anon324	access:public
__anon324::resolved	src/merge.h	/^	git_vector resolved;$/;"	m	struct:__anon324	access:public
__anon324::staged	src/merge.h	/^	git_vector staged;$/;"	m	struct:__anon324	access:public
__anon325::ancestor_entry	src/merge.h	/^	git_index_entry ancestor_entry;$/;"	m	struct:__anon325	access:public
__anon325::our_entry	src/merge.h	/^	git_index_entry our_entry;$/;"	m	struct:__anon325	access:public
__anon325::our_status	src/merge.h	/^	git_delta_t our_status;$/;"	m	struct:__anon325	access:public
__anon325::their_entry	src/merge.h	/^	git_index_entry their_entry;$/;"	m	struct:__anon325	access:public
__anon325::their_status	src/merge.h	/^	git_delta_t their_status;$/;"	m	struct:__anon325	access:public
__anon325::type	src/merge.h	/^	git_merge_diff_type_t type;$/;"	m	struct:__anon325	access:public
__anon327::content	src/patch_parse.h	/^	const char *content;$/;"	m	struct:__anon327	access:public
__anon327::content_len	src/patch_parse.h	/^	size_t content_len;$/;"	m	struct:__anon327	access:public
__anon327::line	src/patch_parse.h	/^	const char *line;$/;"	m	struct:__anon327	access:public
__anon327::line_len	src/patch_parse.h	/^	size_t line_len;$/;"	m	struct:__anon327	access:public
__anon327::line_num	src/patch_parse.h	/^	size_t line_num;$/;"	m	struct:__anon327	access:public
__anon327::opts	src/patch_parse.h	/^	git_patch_options opts;$/;"	m	struct:__anon327	access:public
__anon327::rc	src/patch_parse.h	/^	git_refcount rc;$/;"	m	struct:__anon327	access:public
__anon327::remain	src/patch_parse.h	/^	const char *remain;$/;"	m	struct:__anon327	access:public
__anon327::remain_len	src/patch_parse.h	/^	size_t remain_len;$/;"	m	struct:__anon327	access:public
__anon328::thread	src/unix/pthread.h	/^	pthread_t thread;$/;"	m	struct:__anon328	access:public
__anon330::host	src/socket_stream.h	/^	char *host;$/;"	m	struct:__anon330	access:public
__anon330::parent	src/socket_stream.h	/^	git_stream parent;$/;"	m	struct:__anon330	access:public
__anon330::port	src/socket_stream.h	/^	char *port;$/;"	m	struct:__anon330	access:public
__anon330::s	src/socket_stream.h	/^	GIT_SOCKET s;$/;"	m	struct:__anon330	access:public
__anon331::depth	src/ignore.h	/^	int depth;$/;"	m	struct:__anon331	access:public
__anon331::dir	src/ignore.h	/^	git_buf dir; \/* current directory reflected in ign_path *\/$/;"	m	struct:__anon331	access:public
__anon331::dir_root	src/ignore.h	/^	size_t dir_root; \/* offset in dir to repo root *\/$/;"	m	struct:__anon331	access:public
__anon331::ign_global	src/ignore.h	/^	git_vector ign_global;$/;"	m	struct:__anon331	access:public
__anon331::ign_internal	src/ignore.h	/^	git_attr_file *ign_internal;$/;"	m	struct:__anon331	access:public
__anon331::ign_path	src/ignore.h	/^	git_vector ign_path;$/;"	m	struct:__anon331	access:public
__anon331::ignore_case	src/ignore.h	/^	int ignore_case;$/;"	m	struct:__anon331	access:public
__anon331::repo	src/ignore.h	/^	git_repository *repo;$/;"	m	struct:__anon331	access:public
__anon334::asize	src/hashsig.c	/^	int size, asize;$/;"	m	struct:__anon334	file:	access:public
__anon334::cmp	src/hashsig.c	/^	hashsig_cmp cmp;$/;"	m	struct:__anon334	file:	access:public
__anon334::size	src/hashsig.c	/^	int size, asize;$/;"	m	struct:__anon334	file:	access:public
__anon334::values	src/hashsig.c	/^	hashsig_t values[HASHSIG_HEAP_SIZE];$/;"	m	struct:__anon334	file:	access:public
__anon335::ignore_ch	src/hashsig.c	/^	uint8_t ignore_ch[256];$/;"	m	struct:__anon335	file:	access:public
__anon335::use_ignores	src/hashsig.c	/^	int use_ignores;$/;"	m	struct:__anon335	file:	access:public
__anon336::file	src/config.c	/^	git_config_backend *file;$/;"	m	struct:__anon336	file:	access:public
__anon336::level	src/config.c	/^	git_config_level_t level;$/;"	m	struct:__anon336	file:	access:public
__anon336::rc	src/config.c	/^	git_refcount rc;$/;"	m	struct:__anon336	file:	access:public
__anon337::cfg	src/config.c	/^	const git_config *cfg;$/;"	m	struct:__anon337	file:	access:public
__anon337::current	src/config.c	/^	git_config_iterator *current;$/;"	m	struct:__anon337	file:	access:public
__anon337::i	src/config.c	/^	size_t i;$/;"	m	struct:__anon337	file:	access:public
__anon337::parent	src/config.c	/^	git_config_iterator parent;$/;"	m	struct:__anon337	file:	access:public
__anon337::regex	src/config.c	/^	regex_t regex;$/;"	m	struct:__anon337	file:	access:public
__anon339::have_regex	src/config.c	/^	int have_regex;$/;"	m	struct:__anon339	file:	access:public
__anon339::iter	src/config.c	/^	git_config_iterator *iter;$/;"	m	struct:__anon339	file:	access:public
__anon339::name	src/config.c	/^	char *name;$/;"	m	struct:__anon339	file:	access:public
__anon339::parent	src/config.c	/^	git_config_iterator parent;$/;"	m	struct:__anon339	file:	access:public
__anon339::regex	src/config.c	/^	regex_t regex;$/;"	m	struct:__anon339	file:	access:public
__anon340::free	src/object.c	/^	void (*free)(void *self);$/;"	m	struct:__anon340	file:	access:public
__anon340::parse	src/object.c	/^	int  (*parse)(void *self, git_odb_object *obj);$/;"	m	struct:__anon340	file:	access:public
__anon340::size	src/object.c	/^	size_t		size;	\/* size in bytes of the object structure *\/$/;"	m	struct:__anon340	file:	access:public
__anon340::str	src/object.c	/^	const char	*str;	\/* type name string *\/$/;"	m	struct:__anon340	file:	access:public
__anon342::bom	src/buf_text.h	/^	git_bom_t bom; \/* BOM found at head of text *\/$/;"	m	struct:__anon342	access:public
__anon342::cr	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
__anon342::crlf	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
__anon342::lf	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
__anon342::nonprintable	src/buf_text.h	/^	unsigned int printable, nonprintable; \/* These are just approximations! *\/$/;"	m	struct:__anon342	access:public
__anon342::nul	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
__anon342::printable	src/buf_text.h	/^	unsigned int printable, nonprintable; \/* These are just approximations! *\/$/;"	m	struct:__anon342	access:public
__anon343::size	src/odb_loose.c	/^	size_t	size; \/* object size *\/$/;"	m	struct:__anon343	file:	access:public
__anon343::type	src/odb_loose.c	/^	git_otype type; \/* object type *\/$/;"	m	struct:__anon343	file:	access:public
__anon344::fbuf	src/odb_loose.c	/^	git_filebuf fbuf;$/;"	m	struct:__anon344	file:	access:public
__anon344::stream	src/odb_loose.c	/^	git_odb_stream stream;$/;"	m	struct:__anon344	file:	access:public
__anon345::dir_len	src/odb_loose.c	/^	size_t dir_len;$/;"	m	struct:__anon345	file:	access:public
__anon345::found	src/odb_loose.c	/^	int found;				\/* number of matching$/;"	m	struct:__anon345	file:	access:public
__anon345::res_oid	src/odb_loose.c	/^	unsigned char res_oid[GIT_OID_HEXSZ];	\/* hex formatted oid of$/;"	m	struct:__anon345	file:	access:public
__anon345::short_oid	src/odb_loose.c	/^	unsigned char short_oid[GIT_OID_HEXSZ]; \/* hex formatted oid to match *\/$/;"	m	struct:__anon345	file:	access:public
__anon345::short_oid_len	src/odb_loose.c	/^	size_t short_oid_len;$/;"	m	struct:__anon345	file:	access:public
__anon349::ino	src/fileops.h	/^	unsigned int ino;$/;"	m	struct:__anon349	access:public
__anon349::mtime	src/fileops.h	/^	struct timespec mtime;$/;"	m	struct:__anon349	typeref:struct:__anon349::timespec	access:public
__anon349::size	src/fileops.h	/^	git_off_t  size;$/;"	m	struct:__anon349	access:public
__anon350::conflicts	tests/checkout/typechange.c	/^	int conflicts;$/;"	m	struct:__anon350	file:	access:public
__anon350::dirty	tests/checkout/typechange.c	/^	int dirty;$/;"	m	struct:__anon350	file:	access:public
__anon350::ignored	tests/checkout/typechange.c	/^	int ignored;$/;"	m	struct:__anon350	file:	access:public
__anon350::untracked	tests/checkout/typechange.c	/^	int untracked;$/;"	m	struct:__anon350	file:	access:public
__anon350::updates	tests/checkout/typechange.c	/^	int updates;$/;"	m	struct:__anon350	file:	access:public
__anon351::debug	tests/checkout/checkout_helpers.h	/^	int debug;$/;"	m	struct:__anon351	access:public
__anon351::n_conflicts	tests/checkout/checkout_helpers.h	/^	int n_conflicts;$/;"	m	struct:__anon351	access:public
__anon351::n_dirty	tests/checkout/checkout_helpers.h	/^	int n_dirty;$/;"	m	struct:__anon351	access:public
__anon351::n_ignored	tests/checkout/checkout_helpers.h	/^	int n_ignored;$/;"	m	struct:__anon351	access:public
__anon351::n_untracked	tests/checkout/checkout_helpers.h	/^	int n_untracked;$/;"	m	struct:__anon351	access:public
__anon351::n_updates	tests/checkout/checkout_helpers.h	/^	int n_updates;$/;"	m	struct:__anon351	access:public
__anon352::name	tests/online/push_util.h	/^	char *name;$/;"	m	struct:__anon352	access:public
__anon352::new_oid	tests/online/push_util.h	/^	git_oid new_oid;$/;"	m	struct:__anon352	access:public
__anon352::old_oid	tests/online/push_util.h	/^	git_oid old_oid;$/;"	m	struct:__anon352	access:public
__anon353::pack_progress_calls	tests/online/push_util.h	/^	int pack_progress_calls;$/;"	m	struct:__anon353	access:public
__anon353::statuses	tests/online/push_util.h	/^	git_vector statuses;$/;"	m	struct:__anon353	access:public
__anon353::transfer_progress_calls	tests/online/push_util.h	/^	int transfer_progress_calls;$/;"	m	struct:__anon353	access:public
__anon353::updated_tips	tests/online/push_util.h	/^	git_vector updated_tips;$/;"	m	struct:__anon353	access:public
__anon354::name	tests/online/push_util.h	/^	const char *name;$/;"	m	struct:__anon354	access:public
__anon354::oid	tests/online/push_util.h	/^	const git_oid *oid;$/;"	m	struct:__anon354	access:public
__anon355::msg	tests/online/push_util.h	/^	char *msg;$/;"	m	struct:__anon355	access:public
__anon355::ref	tests/online/push_util.h	/^	char *ref;$/;"	m	struct:__anon355	access:public
__anon355::success	tests/online/push_util.h	/^	int success;$/;"	m	struct:__anon355	access:public
__anon356::cancel_after	tests/core/path.c	/^	int cancel_after;$/;"	m	struct:__anon356	file:	access:public
__anon356::expect	tests/core/path.c	/^	char **expect;$/;"	m	struct:__anon356	file:	access:public
__anon356::expect_idx	tests/core/path.c	/^	int expect_idx;$/;"	m	struct:__anon356	file:	access:public
__anon357::extra	tests/core/oidmap.c	/^	size_t extra;$/;"	m	struct:__anon357	file:	access:public
__anon357::oid	tests/core/oidmap.c	/^	git_oid oid;$/;"	m	struct:__anon357	file:	access:public
__anon358::content	tests/core/vector.c	/^	int content;$/;"	m	struct:__anon358	file:	access:public
__anon358::count	tests/core/vector.c	/^	int count;$/;"	m	struct:__anon358	file:	access:public
__anon359::path	tests/core/sortedcache.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon359	file:	access:public
__anon359::smaller_value	tests/core/sortedcache.c	/^	char smaller_value;$/;"	m	struct:__anon359	file:	access:public
__anon359::value	tests/core/sortedcache.c	/^	int value;$/;"	m	struct:__anon359	file:	access:public
__anon360::error	tests/clar_libgit2.h	/^	int error;$/;"	m	struct:__anon360	access:public
__anon360::error_msg	tests/clar_libgit2.h	/^	char error_msg[4096];$/;"	m	struct:__anon360	access:public
__anon360::expr	tests/clar_libgit2.h	/^	const char *expr;$/;"	m	struct:__anon360	access:public
__anon360::file	tests/clar_libgit2.h	/^	const char *file;$/;"	m	struct:__anon360	access:public
__anon360::line	tests/clar_libgit2.h	/^	int line;$/;"	m	struct:__anon360	access:public
__anon361::count	tests/submodule/lookup.c	/^	int count;$/;"	m	struct:__anon361	file:	access:public
__anon362::counter	tests/submodule/status.c	/^	size_t counter;$/;"	m	struct:__anon362	file:	access:public
__anon362::paths	tests/submodule/status.c	/^	const char **paths;$/;"	m	struct:__anon362	file:	access:public
__anon362::statuses	tests/submodule/status.c	/^	int *statuses;$/;"	m	struct:__anon362	file:	access:public
__anon363::base	tests/odb/sorting.c	/^	git_odb_backend base;$/;"	m	struct:__anon363	file:	access:public
__anon363::position	tests/odb/sorting.c	/^	size_t position;$/;"	m	struct:__anon363	file:	access:public
__anon364::active_suite	tests/clar.c	/^	const char *active_suite;$/;"	m	struct:__anon364	file:	access:public
__anon364::active_test	tests/clar.c	/^	const char *active_test;$/;"	m	struct:__anon364	file:	access:public
__anon364::argc	tests/clar.c	/^	int argc;$/;"	m	struct:__anon364	file:	access:public
__anon364::argv	tests/clar.c	/^	char **argv;$/;"	m	struct:__anon364	file:	access:public
__anon364::errors	tests/clar.c	/^	struct clar_error *errors;$/;"	m	struct:__anon364	typeref:struct:__anon364::clar_error	file:	access:public
__anon364::exit_on_error	tests/clar.c	/^	int exit_on_error;$/;"	m	struct:__anon364	file:	access:public
__anon364::last_error	tests/clar.c	/^	struct clar_error *last_error;$/;"	m	struct:__anon364	typeref:struct:__anon364::clar_error	file:	access:public
__anon364::local_cleanup	tests/clar.c	/^	void (*local_cleanup)(void *);$/;"	m	struct:__anon364	file:	access:public
__anon364::local_cleanup_payload	tests/clar.c	/^	void *local_cleanup_payload;$/;"	m	struct:__anon364	file:	access:public
__anon364::pfn_trace_cb	tests/clar.c	/^	cl_trace_cb *pfn_trace_cb;$/;"	m	struct:__anon364	file:	access:public
__anon364::report_errors_only	tests/clar.c	/^	int report_errors_only;$/;"	m	struct:__anon364	file:	access:public
__anon364::report_suite_names	tests/clar.c	/^	int report_suite_names;$/;"	m	struct:__anon364	file:	access:public
__anon364::suites_ran	tests/clar.c	/^	int suites_ran;$/;"	m	struct:__anon364	file:	access:public
__anon364::test_status	tests/clar.c	/^	enum cl_test_status test_status;$/;"	m	struct:__anon364	typeref:enum:__anon364::cl_test_status	file:	access:public
__anon364::tests_ran	tests/clar.c	/^	int tests_ran;$/;"	m	struct:__anon364	file:	access:public
__anon364::total_errors	tests/clar.c	/^	int total_errors;$/;"	m	struct:__anon364	file:	access:public
__anon364::total_skipped	tests/clar.c	/^	int total_skipped;$/;"	m	struct:__anon364	file:	access:public
__anon364::trace_payload	tests/clar.c	/^	void *trace_payload;$/;"	m	struct:__anon364	file:	access:public
__anon364::trampoline	tests/clar.c	/^	jmp_buf trampoline;$/;"	m	struct:__anon364	file:	access:public
__anon364::trampoline_enabled	tests/clar.c	/^	int trampoline_enabled;$/;"	m	struct:__anon364	file:	access:public
__anon365::debug	tests/status/status_helpers.h	/^	bool debug;$/;"	m	struct:__anon365	access:public
__anon365::entry_count	tests/status/status_helpers.h	/^	int entry_count;$/;"	m	struct:__anon365	access:public
__anon365::expected_entry_count	tests/status/status_helpers.h	/^	int expected_entry_count;$/;"	m	struct:__anon365	access:public
__anon365::expected_paths	tests/status/status_helpers.h	/^	const char** expected_paths;$/;"	m	struct:__anon365	access:public
__anon365::expected_statuses	tests/status/status_helpers.h	/^	const unsigned int* expected_statuses;$/;"	m	struct:__anon365	access:public
__anon365::file	tests/status/status_helpers.h	/^	const char *file;$/;"	m	struct:__anon365	access:public
__anon365::line	tests/status/status_helpers.h	/^	int line;$/;"	m	struct:__anon365	access:public
__anon365::wrong_sorted_path	tests/status/status_helpers.h	/^	int wrong_sorted_path;$/;"	m	struct:__anon365	access:public
__anon365::wrong_status_flags_count	tests/status/status_helpers.h	/^	int wrong_status_flags_count;$/;"	m	struct:__anon365	access:public
__anon366::count	tests/status/status_helpers.h	/^	int count;$/;"	m	struct:__anon366	access:public
__anon366::debug	tests/status/status_helpers.h	/^	bool debug;$/;"	m	struct:__anon366	access:public
__anon366::status	tests/status/status_helpers.h	/^	unsigned int status;$/;"	m	struct:__anon366	access:public
__anon367::path	tests/diff/racediffiter.c	/^	const char *path;$/;"	m	struct:__anon367	file:	access:public
__anon367::t	tests/diff/racediffiter.c	/^	git_delta_t t;$/;"	m	struct:__anon367	file:	access:public
__anon368::basic_payload	tests/diff/racediffiter.c	/^	basic_payload *basic_payload;$/;"	m	struct:__anon368	file:	access:public
__anon368::dir	tests/diff/racediffiter.c	/^	const char *dir;$/;"	m	struct:__anon368	file:	access:public
__anon368::first_time	tests/diff/racediffiter.c	/^	bool first_time;$/;"	m	struct:__anon368	file:	access:public
__anon369::debug	tests/diff/diff_helpers.h	/^	int debug;$/;"	m	struct:__anon369	access:public
__anon369::file_status	tests/diff/diff_helpers.h	/^	int file_status[11]; \/* indexed by git_delta_t value *\/$/;"	m	struct:__anon369	access:public
__anon369::files	tests/diff/diff_helpers.h	/^	int files;$/;"	m	struct:__anon369	access:public
__anon369::files_binary	tests/diff/diff_helpers.h	/^	int files_binary;$/;"	m	struct:__anon369	access:public
__anon369::hunk_new_lines	tests/diff/diff_helpers.h	/^	int hunk_new_lines;$/;"	m	struct:__anon369	access:public
__anon369::hunk_old_lines	tests/diff/diff_helpers.h	/^	int hunk_old_lines;$/;"	m	struct:__anon369	access:public
__anon369::hunks	tests/diff/diff_helpers.h	/^	int hunks;$/;"	m	struct:__anon369	access:public
__anon369::line_adds	tests/diff/diff_helpers.h	/^	int line_adds;$/;"	m	struct:__anon369	access:public
__anon369::line_ctxt	tests/diff/diff_helpers.h	/^	int line_ctxt;$/;"	m	struct:__anon369	access:public
__anon369::line_dels	tests/diff/diff_helpers.h	/^	int line_dels;$/;"	m	struct:__anon369	access:public
__anon369::lines	tests/diff/diff_helpers.h	/^	int lines;$/;"	m	struct:__anon369	access:public
__anon369::names	tests/diff/diff_helpers.h	/^	const char **names;$/;"	m	struct:__anon369	access:public
__anon369::statuses	tests/diff/diff_helpers.h	/^	int *statuses;$/;"	m	struct:__anon369	access:public
__anon36::fn	examples/network/git2.c	/^	git_cb fn;$/;"	m	struct:__anon36	file:	access:public
__anon36::name	examples/network/git2.c	/^	char *name;$/;"	m	struct:__anon36	file:	access:public
__anon370::matched_pathspec	tests/diff/diff_helpers.h	/^	const char *matched_pathspec;$/;"	m	struct:__anon370	access:public
__anon370::path	tests/diff/diff_helpers.h	/^	const char *path;$/;"	m	struct:__anon370	access:public
__anon371::conflicts	tests/index/addall.c	/^	size_t conflicts;$/;"	m	struct:__anon371	file:	access:public
__anon371::ignores	tests/index/addall.c	/^	size_t ignores;$/;"	m	struct:__anon371	file:	access:public
__anon371::index_adds	tests/index/addall.c	/^	size_t index_adds;$/;"	m	struct:__anon371	file:	access:public
__anon371::index_dels	tests/index/addall.c	/^	size_t index_dels;$/;"	m	struct:__anon371	file:	access:public
__anon371::index_mods	tests/index/addall.c	/^	size_t index_mods;$/;"	m	struct:__anon371	file:	access:public
__anon371::wt_adds	tests/index/addall.c	/^	size_t wt_adds;$/;"	m	struct:__anon371	file:	access:public
__anon371::wt_dels	tests/index/addall.c	/^	size_t wt_dels;$/;"	m	struct:__anon371	file:	access:public
__anon371::wt_mods	tests/index/addall.c	/^	size_t wt_mods;$/;"	m	struct:__anon371	file:	access:public
__anon372::annotated_object_sha	tests/notes/notes.c	/^	const char *annotated_object_sha;$/;"	m	struct:__anon372	file:	access:public
__anon372::note_sha	tests/notes/notes.c	/^	const char *note_sha;$/;"	m	struct:__anon372	file:	access:public
__anon373::sha	tests/object/cache.c	/^	const char *sha;$/;"	m	struct:__anon373	file:	access:public
__anon373::type	tests/object/cache.c	/^	git_otype type;$/;"	m	struct:__anon373	file:	access:public
__anon374::attr	tests/object/tree/write.c	/^	unsigned int attr;$/;"	m	struct:__anon374	file:	access:public
__anon374::filename	tests/object/tree/write.c	/^	const char *filename;$/;"	m	struct:__anon374	file:	access:public
__anon375::filename	tests/clar_libgit2.c	/^	const char *filename;$/;"	m	struct:__anon375	file:	access:public
__anon375::filename_len	tests/clar_libgit2.c	/^	size_t filename_len;$/;"	m	struct:__anon375	file:	access:public
__anon376::fetchhead_vector	tests/fetchhead/nonetwork.c	/^	git_vector *fetchhead_vector;$/;"	m	struct:__anon376	file:	access:public
__anon376::idx	tests/fetchhead/nonetwork.c	/^	size_t idx;$/;"	m	struct:__anon376	file:	access:public
__anon377::header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon377	file:	access:public
__anon377::line	tests/commit/parse.c	/^	const char *line;$/;"	m	struct:__anon377	file:	access:public
__anon378::email	tests/commit/parse.c	/^	const char *email;$/;"	m	struct:__anon378	file:	access:public
__anon378::header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon378	file:	access:public
__anon378::name	tests/commit/parse.c	/^	const char *name;$/;"	m	struct:__anon378	file:	access:public
__anon378::offset	tests/commit/parse.c	/^	int offset;$/;"	m	struct:__anon378	file:	access:public
__anon378::string	tests/commit/parse.c	/^	const char *string;$/;"	m	struct:__anon378	file:	access:public
__anon378::time	tests/commit/parse.c	/^	git_time_t time;$/;"	m	struct:__anon378	file:	access:public
__anon379::header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon379	file:	access:public
__anon379::string	tests/commit/parse.c	/^	const char *string;$/;"	m	struct:__anon379	file:	access:public
__anon38::force	examples/tag.c	/^	int force;$/;"	m	struct:__anon38	file:	access:public
__anon38::message	examples/tag.c	/^	const char *message;$/;"	m	struct:__anon38	file:	access:public
__anon38::num_lines	examples/tag.c	/^	int num_lines;$/;"	m	struct:__anon38	file:	access:public
__anon38::pattern	examples/tag.c	/^	const char *pattern;$/;"	m	struct:__anon38	file:	access:public
__anon38::tag_name	examples/tag.c	/^	const char *tag_name;$/;"	m	struct:__anon38	file:	access:public
__anon38::target	examples/tag.c	/^	const char *target;$/;"	m	struct:__anon38	file:	access:public
__anon39::opts	examples/tag.c	/^	tag_options *opts;$/;"	m	struct:__anon39	file:	access:public
__anon39::repo	examples/tag.c	/^	git_repository *repo;$/;"	m	struct:__anon39	file:	access:public
__anon40::commit_count	examples/describe.c	/^	size_t commit_count;$/;"	m	struct:__anon40	file:	access:public
__anon40::commits	examples/describe.c	/^	const char **commits;$/;"	m	struct:__anon40	file:	access:public
__anon40::describe_options	examples/describe.c	/^	git_describe_options describe_options;$/;"	m	struct:__anon40	file:	access:public
__anon40::format_options	examples/describe.c	/^	git_describe_format_options format_options;$/;"	m	struct:__anon40	file:	access:public
__anon43::klass	include/git2/errors.h	/^	int klass;$/;"	m	struct:__anon43	access:public
__anon43::message	include/git2/errors.h	/^	char *message;$/;"	m	struct:__anon43	access:public
__anon45::quot	include/git2/inttypes.h	/^   intmax_t quot;$/;"	m	struct:__anon45	access:public
__anon45::rem	include/git2/inttypes.h	/^   intmax_t rem;$/;"	m	struct:__anon45	access:public
__anon49::flags	include/git2/status.h	/^	unsigned int      flags;$/;"	m	struct:__anon49	access:public
__anon49::pathspec	include/git2/status.h	/^	git_strarray      pathspec;$/;"	m	struct:__anon49	access:public
__anon49::show	include/git2/status.h	/^	git_status_show_t show;$/;"	m	struct:__anon49	access:public
__anon49::version	include/git2/status.h	/^	unsigned int      version;$/;"	m	struct:__anon49	access:public
__anon4::alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:__anon4	access:public
__anon4::elems	deps/regex/regex_internal.h	/^  int *elems;$/;"	m	struct:__anon4	access:public
__anon4::nelem	deps/regex/regex_internal.h	/^  int nelem;$/;"	m	struct:__anon4	access:public
__anon50::head_to_index	include/git2/status.h	/^	git_diff_delta *head_to_index;$/;"	m	struct:__anon50	access:public
__anon50::index_to_workdir	include/git2/status.h	/^	git_diff_delta *index_to_workdir;$/;"	m	struct:__anon50	access:public
__anon50::status	include/git2/status.h	/^	git_status_t status;$/;"	m	struct:__anon50	access:public
__anon52::dst	include/git2/remote.h	/^	git_oid dst;$/;"	m	struct:__anon52	access:public
__anon52::dst_refname	include/git2/remote.h	/^	char *dst_refname;$/;"	m	struct:__anon52	access:public
__anon52::src	include/git2/remote.h	/^	git_oid src;$/;"	m	struct:__anon52	access:public
__anon52::src_refname	include/git2/remote.h	/^	char *src_refname;$/;"	m	struct:__anon52	access:public
__anon55::callbacks	include/git2/remote.h	/^	git_remote_callbacks callbacks;$/;"	m	struct:__anon55	access:public
__anon55::custom_headers	include/git2/remote.h	/^	git_strarray custom_headers;$/;"	m	struct:__anon55	access:public
__anon55::download_tags	include/git2/remote.h	/^	git_remote_autotag_option_t download_tags;$/;"	m	struct:__anon55	access:public
__anon55::proxy_opts	include/git2/remote.h	/^	git_proxy_options proxy_opts;$/;"	m	struct:__anon55	access:public
__anon55::prune	include/git2/remote.h	/^	git_fetch_prune_t prune;$/;"	m	struct:__anon55	access:public
__anon55::update_fetchhead	include/git2/remote.h	/^	int update_fetchhead;$/;"	m	struct:__anon55	access:public
__anon55::version	include/git2/remote.h	/^	int version;$/;"	m	struct:__anon55	access:public
__anon56::callbacks	include/git2/remote.h	/^	git_remote_callbacks callbacks;$/;"	m	struct:__anon56	access:public
__anon56::custom_headers	include/git2/remote.h	/^	git_strarray custom_headers;$/;"	m	struct:__anon56	access:public
__anon56::pb_parallelism	include/git2/remote.h	/^	unsigned int pb_parallelism;$/;"	m	struct:__anon56	access:public
__anon56::proxy_opts	include/git2/remote.h	/^	git_proxy_options proxy_opts;$/;"	m	struct:__anon56	access:public
__anon56::version	include/git2/remote.h	/^	unsigned int version;$/;"	m	struct:__anon56	access:public
__anon60::oid_calculations	include/git2/sys/diff.h	/^	size_t oid_calculations; \/**< Number of ID calculations *\/$/;"	m	struct:__anon60	access:public
__anon60::stat_calls	include/git2/sys/diff.h	/^	size_t stat_calls; \/**< Number of stat() calls performed *\/$/;"	m	struct:__anon60	access:public
__anon60::version	include/git2/sys/diff.h	/^	unsigned int version;$/;"	m	struct:__anon60	access:public
__anon67::checkout_options	include/git2/rebase.h	/^	git_checkout_options checkout_options;$/;"	m	struct:__anon67	access:public
__anon67::inmemory	include/git2/rebase.h	/^	int inmemory;$/;"	m	struct:__anon67	access:public
__anon67::merge_options	include/git2/rebase.h	/^	git_merge_options merge_options;$/;"	m	struct:__anon67	access:public
__anon67::quiet	include/git2/rebase.h	/^	int quiet;$/;"	m	struct:__anon67	access:public
__anon67::rewrite_notes_ref	include/git2/rebase.h	/^	const char *rewrite_notes_ref;$/;"	m	struct:__anon67	access:public
__anon67::version	include/git2/rebase.h	/^	unsigned int version;$/;"	m	struct:__anon67	access:public
__anon69::exec	include/git2/rebase.h	/^	const char *exec;$/;"	m	struct:__anon69	access:public
__anon69::id	include/git2/rebase.h	/^	const git_oid id;$/;"	m	struct:__anon69	access:public
__anon69::type	include/git2/rebase.h	/^	git_rebase_operation_t type;$/;"	m	struct:__anon69	access:public
__anon6::char_classes	deps/regex/regex_internal.h	/^  wctype_t *char_classes;$/;"	m	struct:__anon6	access:public
__anon6::coll_syms	deps/regex/regex_internal.h	/^  int32_t *coll_syms;$/;"	m	struct:__anon6	access:public
__anon6::equiv_classes	deps/regex/regex_internal.h	/^  int32_t *equiv_classes;$/;"	m	struct:__anon6	access:public
__anon6::mbchars	deps/regex/regex_internal.h	/^  wchar_t *mbchars;$/;"	m	struct:__anon6	access:public
__anon6::nchar_classes	deps/regex/regex_internal.h	/^  int nchar_classes;$/;"	m	struct:__anon6	access:public
__anon6::ncoll_syms	deps/regex/regex_internal.h	/^  int ncoll_syms;$/;"	m	struct:__anon6	access:public
__anon6::nequiv_classes	deps/regex/regex_internal.h	/^  int nequiv_classes;$/;"	m	struct:__anon6	access:public
__anon6::nmbchars	deps/regex/regex_internal.h	/^  int nmbchars;$/;"	m	struct:__anon6	access:public
__anon6::non_match	deps/regex/regex_internal.h	/^  unsigned int non_match : 1;$/;"	m	struct:__anon6	access:public
__anon6::nranges	deps/regex/regex_internal.h	/^  int nranges;$/;"	m	struct:__anon6	access:public
__anon6::range_ends	deps/regex/regex_internal.h	/^  uint32_t *range_ends;$/;"	m	struct:__anon6	access:public
__anon6::range_ends	deps/regex/regex_internal.h	/^  wchar_t *range_ends;$/;"	m	struct:__anon6	access:public
__anon6::range_starts	deps/regex/regex_internal.h	/^  uint32_t *range_starts;$/;"	m	struct:__anon6	access:public
__anon6::range_starts	deps/regex/regex_internal.h	/^  wchar_t *range_starts;$/;"	m	struct:__anon6	access:public
__anon74::flags	include/git2/revparse.h	/^	unsigned int flags;$/;"	m	struct:__anon74	access:public
__anon74::from	include/git2/revparse.h	/^	git_object *from;$/;"	m	struct:__anon74	access:public
__anon74::to	include/git2/revparse.h	/^	git_object *to;$/;"	m	struct:__anon74	access:public
__anon78::hash_md5	include/git2/transport.h	/^	unsigned char hash_md5[16];$/;"	m	struct:__anon78	access:public
__anon78::hash_sha1	include/git2/transport.h	/^	unsigned char hash_sha1[20];$/;"	m	struct:__anon78	access:public
__anon78::parent	include/git2/transport.h	/^	git_cert parent;$/;"	m	struct:__anon78	access:public
__anon78::type	include/git2/transport.h	/^	git_cert_ssh_t type;$/;"	m	struct:__anon78	access:public
__anon79::data	include/git2/transport.h	/^	void *data;$/;"	m	struct:__anon79	access:public
__anon79::len	include/git2/transport.h	/^	size_t len;$/;"	m	struct:__anon79	access:public
__anon79::parent	include/git2/transport.h	/^	git_cert parent;$/;"	m	struct:__anon79	access:public
__anon7::__anon8::c	deps/regex/regex_internal.h	/^    unsigned char c;		\/* for CHARACTER *\/$/;"	m	union:__anon7::__anon8	access:public
__anon7::__anon8::ctx_type	deps/regex/regex_internal.h	/^    re_context_type ctx_type;	\/* for ANCHOR *\/$/;"	m	union:__anon7::__anon8	access:public
__anon7::__anon8::idx	deps/regex/regex_internal.h	/^    int idx;			\/* for BACK_REF *\/$/;"	m	union:__anon7::__anon8	access:public
__anon7::__anon8::mbcset	deps/regex/regex_internal.h	/^    re_charset_t *mbcset;	\/* for COMPLEX_BRACKET *\/$/;"	m	union:__anon7::__anon8	access:public
__anon7::__anon8::sbcset	deps/regex/regex_internal.h	/^    re_bitset_ptr_t sbcset;	\/* for SIMPLE_BRACKET *\/$/;"	m	union:__anon7::__anon8	access:public
__anon7::accept_mb	deps/regex/regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:__anon7	access:public
__anon7::constraint	deps/regex/regex_internal.h	/^  unsigned int constraint : 10;	\/* context constraint *\/$/;"	m	struct:__anon7	access:public
__anon7::duplicated	deps/regex/regex_internal.h	/^  unsigned int duplicated : 1;$/;"	m	struct:__anon7	access:public
__anon7::mb_partial	deps/regex/regex_internal.h	/^  unsigned int mb_partial : 1;$/;"	m	struct:__anon7	access:public
__anon7::opr	deps/regex/regex_internal.h	/^  } opr;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon8	access:public
__anon7::opt_subexp	deps/regex/regex_internal.h	/^  unsigned int opt_subexp : 1;$/;"	m	struct:__anon7	access:public
__anon7::type	deps/regex/regex_internal.h	/^  re_token_type_t type : 8;$/;"	m	struct:__anon7	access:public
__anon7::type	deps/regex/regex_internal.h	/^  re_token_type_t type;$/;"	m	struct:__anon7	access:public
__anon7::word_char	deps/regex/regex_internal.h	/^  unsigned int word_char : 1;$/;"	m	struct:__anon7	access:public
__anon81::parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:__anon81	access:public
__anon81::password	include/git2/transport.h	/^	char *password;$/;"	m	struct:__anon81	access:public
__anon81::username	include/git2/transport.h	/^	char *username;$/;"	m	struct:__anon81	access:public
__anon85::flags	include/git2/diff.h	/^	uint32_t    flags;$/;"	m	struct:__anon85	access:public
__anon85::id	include/git2/diff.h	/^	git_oid     id;$/;"	m	struct:__anon85	access:public
__anon85::id_abbrev	include/git2/diff.h	/^	uint16_t    id_abbrev;$/;"	m	struct:__anon85	access:public
__anon85::mode	include/git2/diff.h	/^	uint16_t    mode;$/;"	m	struct:__anon85	access:public
__anon85::path	include/git2/diff.h	/^	const char *path;$/;"	m	struct:__anon85	access:public
__anon85::size	include/git2/diff.h	/^	git_off_t   size;$/;"	m	struct:__anon85	access:public
__anon86::flags	include/git2/diff.h	/^	uint32_t      flags;	   \/**< git_diff_flag_t values *\/$/;"	m	struct:__anon86	access:public
__anon86::new_file	include/git2/diff.h	/^	git_diff_file new_file;$/;"	m	struct:__anon86	access:public
__anon86::nfiles	include/git2/diff.h	/^	uint16_t      nfiles;	   \/**< number of files in this delta *\/$/;"	m	struct:__anon86	access:public
__anon86::old_file	include/git2/diff.h	/^	git_diff_file old_file;$/;"	m	struct:__anon86	access:public
__anon86::similarity	include/git2/diff.h	/^	uint16_t      similarity;  \/**< for RENAMED and COPIED, value 0-100 *\/$/;"	m	struct:__anon86	access:public
__anon86::status	include/git2/diff.h	/^	git_delta_t   status;$/;"	m	struct:__anon86	access:public
__anon87::context_lines	include/git2/diff.h	/^	uint32_t    context_lines;    \/**< defaults to 3 *\/$/;"	m	struct:__anon87	access:public
__anon87::flags	include/git2/diff.h	/^	uint32_t flags;            \/**< defaults to GIT_DIFF_NORMAL *\/$/;"	m	struct:__anon87	access:public
__anon87::id_abbrev	include/git2/diff.h	/^	uint16_t    id_abbrev;       \/**< default 'core.abbrev' or 7 if unset *\/$/;"	m	struct:__anon87	access:public
__anon87::ignore_submodules	include/git2/diff.h	/^	git_submodule_ignore_t ignore_submodules; \/**< submodule ignore rule *\/$/;"	m	struct:__anon87	access:public
__anon87::interhunk_lines	include/git2/diff.h	/^	uint32_t    interhunk_lines;  \/**< defaults to 0 *\/$/;"	m	struct:__anon87	access:public
__anon87::max_size	include/git2/diff.h	/^	git_off_t   max_size;         \/**< defaults to 512MB *\/$/;"	m	struct:__anon87	access:public
__anon87::new_prefix	include/git2/diff.h	/^	const char *new_prefix;       \/**< defaults to "b" *\/$/;"	m	struct:__anon87	access:public
__anon87::notify_cb	include/git2/diff.h	/^	git_diff_notify_cb   notify_cb;$/;"	m	struct:__anon87	access:public
__anon87::old_prefix	include/git2/diff.h	/^	const char *old_prefix;       \/**< defaults to "a" *\/$/;"	m	struct:__anon87	access:public
__anon87::pathspec	include/git2/diff.h	/^	git_strarray       pathspec;     \/**< defaults to include all paths *\/$/;"	m	struct:__anon87	access:public
__anon87::payload	include/git2/diff.h	/^	void                *payload;$/;"	m	struct:__anon87	access:public
__anon87::progress_cb	include/git2/diff.h	/^	git_diff_progress_cb progress_cb;$/;"	m	struct:__anon87	access:public
__anon87::version	include/git2/diff.h	/^	unsigned int version;      \/**< version for the struct *\/$/;"	m	struct:__anon87	access:public
__anon89::data	include/git2/diff.h	/^	const char *data;$/;"	m	struct:__anon89	access:public
__anon89::datalen	include/git2/diff.h	/^	size_t datalen;$/;"	m	struct:__anon89	access:public
__anon89::inflatedlen	include/git2/diff.h	/^	size_t inflatedlen;$/;"	m	struct:__anon89	access:public
__anon89::type	include/git2/diff.h	/^	git_diff_binary_t type;$/;"	m	struct:__anon89	access:public
__anon90::contains_data	include/git2/diff.h	/^	unsigned int contains_data;$/;"	m	struct:__anon90	access:public
__anon90::new_file	include/git2/diff.h	/^	git_diff_binary_file new_file; \/**< The contents of the new file. *\/$/;"	m	struct:__anon90	access:public
__anon90::old_file	include/git2/diff.h	/^	git_diff_binary_file old_file; \/**< The contents of the old file. *\/$/;"	m	struct:__anon90	access:public
__anon91::header	include/git2/diff.h	/^	char   header[GIT_DIFF_HUNK_HEADER_SIZE];   \/** Header text, NUL-byte terminated *\/$/;"	m	struct:__anon91	access:public
__anon91::header_len	include/git2/diff.h	/^	size_t header_len;    \/** Number of bytes in header text *\/$/;"	m	struct:__anon91	access:public
__anon91::new_lines	include/git2/diff.h	/^	int    new_lines;     \/** Number of lines in new_file *\/$/;"	m	struct:__anon91	access:public
__anon91::new_start	include/git2/diff.h	/^	int    new_start;     \/** Starting line number in new_file *\/$/;"	m	struct:__anon91	access:public
__anon91::old_lines	include/git2/diff.h	/^	int    old_lines;     \/** Number of lines in old_file *\/$/;"	m	struct:__anon91	access:public
__anon91::old_start	include/git2/diff.h	/^	int    old_start;     \/** Starting line number in old_file *\/$/;"	m	struct:__anon91	access:public
__anon93::content	include/git2/diff.h	/^	const char *content; \/**< Pointer to diff text, not NUL-byte terminated *\/$/;"	m	struct:__anon93	access:public
__anon93::content_len	include/git2/diff.h	/^	size_t content_len;  \/**< Number of bytes of data *\/$/;"	m	struct:__anon93	access:public
__anon93::content_offset	include/git2/diff.h	/^	git_off_t content_offset; \/**< Offset in the original file to the content *\/$/;"	m	struct:__anon93	access:public
__anon93::new_lineno	include/git2/diff.h	/^	int    new_lineno;   \/**< Line number in new file or -1 for deleted line *\/$/;"	m	struct:__anon93	access:public
__anon93::num_lines	include/git2/diff.h	/^	int    num_lines;    \/**< Number of newline characters in content *\/$/;"	m	struct:__anon93	access:public
__anon93::old_lineno	include/git2/diff.h	/^	int    old_lineno;   \/**< Line number in old file or -1 for added line *\/$/;"	m	struct:__anon93	access:public
__anon93::origin	include/git2/diff.h	/^	char   origin;       \/**< A git_diff_line_t value *\/$/;"	m	struct:__anon93	access:public
__anon95::buffer_signature	include/git2/diff.h	/^	int (*buffer_signature)($/;"	m	struct:__anon95	access:public
__anon95::file_signature	include/git2/diff.h	/^	int (*file_signature)($/;"	m	struct:__anon95	access:public
__anon95::free_signature	include/git2/diff.h	/^	void (*free_signature)(void *sig, void *payload);$/;"	m	struct:__anon95	access:public
__anon95::payload	include/git2/diff.h	/^	void *payload;$/;"	m	struct:__anon95	access:public
__anon95::similarity	include/git2/diff.h	/^	int (*similarity)(int *score, void *siga, void *sigb, void *payload);$/;"	m	struct:__anon95	access:public
__anon96::break_rewrite_threshold	include/git2/diff.h	/^	uint16_t break_rewrite_threshold;$/;"	m	struct:__anon96	access:public
__anon96::copy_threshold	include/git2/diff.h	/^	uint16_t copy_threshold;$/;"	m	struct:__anon96	access:public
__anon96::flags	include/git2/diff.h	/^	uint32_t flags;$/;"	m	struct:__anon96	access:public
__anon96::metric	include/git2/diff.h	/^	git_diff_similarity_metric *metric;$/;"	m	struct:__anon96	access:public
__anon96::rename_from_rewrite_threshold	include/git2/diff.h	/^	uint16_t rename_from_rewrite_threshold;$/;"	m	struct:__anon96	access:public
__anon96::rename_limit	include/git2/diff.h	/^	size_t rename_limit;$/;"	m	struct:__anon96	access:public
__anon96::rename_threshold	include/git2/diff.h	/^	uint16_t rename_threshold;$/;"	m	struct:__anon96	access:public
__anon96::version	include/git2/diff.h	/^	unsigned int version;$/;"	m	struct:__anon96	access:public
__anon9::alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:__anon9	access:public
__anon9::array	deps/regex/regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:__anon9	access:public
__anon9::next_idx	deps/regex/regex_internal.h	/^  int next_idx;$/;"	m	struct:__anon9	access:public
__attribute	deps/regex/regex_internal.h	169;"	d
__attribute	deps/regex/regex_internal.h	171;"	d
__btowc	deps/regex/regex_internal.h	159;"	d
__call	tests/resources/userdiff/after/file.php	/^    public function __call($name, $arguments)$/;"	f
__call	tests/resources/userdiff/before/file.php	/^    public function __call($name, $arguments)$/;"	f
__call	tests/resources/userdiff/expected/driver/diff.php	/^@@ -33,10 +34,10 @@ public function __call($name, $arguments)$/;"	f
__call	tests/resources/userdiff/files/file.php	/^    public function __call($name, $arguments)$/;"	f
__compat_regexec	deps/regex/regexec.c	/^__compat_regexec (const regex_t *__restrict preg,$/;"	f	signature:(const regex_t *__restrict preg, const char *__restrict string, size_t nmatch, regmatch_t pmatch[], int eflags)
__construct	tests/resources/userdiff/after/file.php	/^    public function __construct(Generator $generator, $maxRetries)$/;"	f
__construct	tests/resources/userdiff/before/file.php	/^    public function __construct(Generator $generator, $maxRetries)$/;"	f
__construct	tests/resources/userdiff/expected/driver/diff.php	/^@@ -17,3 +18,3 @@ public function __construct(Generator $generator, $maxRetries)$/;"	f
__construct	tests/resources/userdiff/files/file.php	/^    public function __construct(Generator $generator, $maxRetries)$/;"	f
__get	tests/resources/userdiff/after/file.php	/^    public function __get($attribute)$/;"	f
__get	tests/resources/userdiff/before/file.php	/^    public function __get($attribute)$/;"	f
__get	tests/resources/userdiff/files/file.php	/^    public function __get($attribute)$/;"	f
__has_builtin	src/common.h	22;"	d
__init__	tests/generate.py	/^        def __init__(self, module):$/;"	m	class:Module.Template	access:public
__init__	tests/generate.py	/^    def __init__(self, name):$/;"	m	class:Module	access:public
__init__	tests/generate.py	/^    def __init__(self, path):$/;"	m	class:TestSuite	access:public
__iswctype	deps/regex/regex_internal.h	156;"	d
__iswctype	deps/regex/regex_internal.h	158;"	d
__libc_lock_define	deps/regex/regex_internal.h	61;"	d
__libc_lock_init	deps/regex/regex_internal.h	62;"	d
__libc_lock_lock	deps/regex/regex_internal.h	63;"	d
__libc_lock_unlock	deps/regex/regex_internal.h	64;"	d
__libc_use_alloca	deps/regex/regex_internal.h	468;"	d
__libc_use_alloca	deps/regex/regex_internal.h	475;"	d
__libc_use_alloca	deps/regex/regex_internal.h	479;"	d
__mbrtowc	deps/regex/regex_internal.h	160;"	d
__mempcpy	deps/regex/regex_internal.h	161;"	d
__mempcpy	deps/regex/regex_internal.h	162;"	d
__regfree	deps/regex/regex_internal.h	164;"	d
__restrict	deps/regex/regex.h	546;"	d
__restrict	deps/regex/regex.h	548;"	d
__restrict_arr	deps/regex/regex.h	556;"	d
__restrict_arr	deps/regex/regex.h	558;"	d
__state	src/global.c	/^static git_global_st __state;$/;"	v	file:
__wcrtomb	deps/regex/regex_internal.h	163;"	d
__wctype	deps/regex/regex_internal.h	152;"	d
__wctype	deps/regex/regex_internal.h	154;"	d
_a	tests/threads/diff.c	/^static git_tree *_a, *_b;$/;"	v	file:
_alloc_size	src/vector.h	/^	size_t _alloc_size;$/;"	m	struct:git_vector	access:public
_b	tests/threads/diff.c	/^static git_tree *_a, *_b;$/;"	v	file:
_buf	tests/buf/splice.c	/^static git_buf _buf;$/;"	v	file:
_cfg	tests/notes/notesref.c	/^static git_config *_cfg;$/;"	v	file:
_check_counts	tests/threads/diff.c	/^static int _check_counts;$/;"	v	file:
_check_dir_contents	src/path.c	/^static bool _check_dir_contents($/;"	f	file:	signature:( git_buf *dir, const char *sub, bool (*predicate)(const char *))
_cl_repo	tests/clar_libgit2.c	/^static git_repository *_cl_repo = NULL;$/;"	v	file:
_cl_restore_home	tests/clar_libgit2.c	/^static char *_cl_restore_home = NULL;$/;"	v	file:
_cl_sandbox	tests/clar_libgit2.c	/^static const char *_cl_sandbox = NULL;$/;"	v	file:
_cl_trace_cb__event_handler	tests/clar_libgit2_trace.c	/^void _cl_trace_cb__event_handler($/;"	f	signature:( cl_trace_event ev, const char *suite_name, const char *test_name, void *payload)
_clar	tests/clar.c	/^} _clar;$/;"	v	typeref:struct:__anon364	file:
_clar_path	tests/clar/sandbox.h	/^static char _clar_path[4096];$/;"	v
_cmp	src/vector.h	/^	git_vector_cmp _cmp;$/;"	m	struct:git_vector	access:public
_commits	tests/pack/packbuilder.c	/^static git_vector _commits;$/;"	v	file:
_commits_is_initialized	tests/pack/packbuilder.c	/^static int _commits_is_initialized;$/;"	v	file:
_config	src/repository.h	/^	git_config *_config;$/;"	m	struct:git_repository	access:public
_config	tests/network/remote/createthenload.c	/^static git_config *_config;$/;"	v	file:
_counts	tests/threads/diff.c	/^static git_atomic _counts[4];$/;"	v	file:
_cp_r_callback	src/fileops.c	/^static int _cp_r_callback(void *ref, git_buf *from)$/;"	f	file:	signature:(void *ref, git_buf *from)
_cp_r_mkdir	src/fileops.c	/^static int _cp_r_mkdir(cp_r_info *info, git_buf *from)$/;"	f	file:	signature:(cp_r_info *info, git_buf *from)
_cvar_map_autocrlf	src/config_cache.c	/^static git_cvar_map _cvar_map_autocrlf[] = {$/;"	v	file:
_cvar_map_eol	src/config_cache.c	/^static git_cvar_map _cvar_map_eol[] = {$/;"	v	file:
_cvar_map_int	src/config_cache.c	/^static git_cvar_map _cvar_map_int[] = {$/;"	v	file:
_cvar_map_safecrlf	src/config_cache.c	/^static git_cvar_map _cvar_map_safecrlf[] = {$/;"	v	file:
_cvar_maps	src/config_cache.c	/^static struct map_data _cvar_maps[] = {$/;"	v	typeref:struct:map_data	file:
_dirent_loose_load	src/refdb_fs.c	/^static int _dirent_loose_load(void *payload, git_buf *full_path)$/;"	f	file:	signature:(void *payload, git_buf *full_path)
_dist_code	deps/zlib/deflate.h	/^  extern const uch ZLIB_INTERNAL _dist_code[];$/;"	x
_dist_code	deps/zlib/deflate.h	/^  extern uch ZLIB_INTERNAL _dist_code[];$/;"	x
_dist_code	deps/zlib/trees.c	/^uch _dist_code[DIST_CODE_LEN];$/;"	v
_dist_code	deps/zlib/trees.h	/^const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {$/;"	v
_dummy	tests/network/remote/push.c	/^static git_repository *_repo, *_dummy;$/;"	v	file:
_entries	tests/object/tree/write.c	/^} _entries[] = {$/;"	v	typeref:struct:__anon374	file:
_extend	tests/core/ftruncate.c	/^static void _extend(git_off_t i64len)$/;"	f	file:	signature:(git_off_t i64len)
_fake	tests/odb/backend/nonrefreshing.c	/^static fake_backend *_fake;$/;"	v	file:
_findfile_path	src/win32/findfile.c	/^} _findfile_path;$/;"	t	typeref:struct:__anon289	file:
_fixture	tests/revwalk/basic.c	/^static const char *_fixture = NULL;$/;"	v	file:
_git_action	src/transports/git.c	/^static int _git_action($/;"	f	file:	signature:( git_smart_subtransport_stream **stream, git_smart_subtransport *subtransport, const char *url, git_smart_service_t action)
_git_close	src/transports/git.c	/^static int _git_close(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
_git_free	src/transports/git.c	/^static void _git_free(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
_git_receivepack	src/transports/git.c	/^static int _git_receivepack($/;"	f	file:	signature:( git_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
_git_receivepack_ls	src/transports/git.c	/^static int _git_receivepack_ls($/;"	f	file:	signature:( git_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
_git_repository_open_ext_from_env	src/repository.c	/^static int _git_repository_open_ext_from_env($/;"	f	file:	signature:( git_repository **out, const char *start_path)
_git_ssh_authenticate_session	src/transports/ssh.c	/^static int _git_ssh_authenticate_session($/;"	f	file:	signature:( LIBSSH2_SESSION* session, git_cred* cred)
_git_ssh_session_create	src/transports/ssh.c	/^static int _git_ssh_session_create($/;"	f	file:	signature:( LIBSSH2_SESSION** session, git_stream *io)
_git_ssh_setup_conn	src/transports/ssh.c	/^static int _git_ssh_setup_conn($/;"	f	file:	signature:( ssh_subtransport *t, const char *url, const char *cmd, git_smart_subtransport_stream **stream)
_git_trace_cb__debug	tests/clar_libgit2_trace.c	/^static void _git_trace_cb__debug(git_trace_level_t level, const char *msg)$/;"	f	file:	signature:(git_trace_level_t level, const char *msg)
_git_trace_cb__debug	tests/clar_libgit2_trace.c	35;"	d	file:
_git_trace_cb__printf	tests/clar_libgit2_trace.c	/^static void _git_trace_cb__printf(git_trace_level_t level, const char *msg)$/;"	f	file:	signature:(git_trace_level_t level, const char *msg)
_git_uploadpack	src/transports/git.c	/^static int _git_uploadpack($/;"	f	file:	signature:( git_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
_git_uploadpack_ls	src/transports/git.c	/^static int _git_uploadpack_ls($/;"	f	file:	signature:( git_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
_global_path	tests/repo/init.c	/^static git_buf _global_path = GIT_BUF_INIT;$/;"	v	file:
_halloc	deps/zlib/zutil.c	272;"	d	file:
_head_id	tests/revwalk/hidecb.c	/^static git_oid _head_id;$/;"	v	file:
_hfree	deps/zlib/zutil.c	273;"	d	file:
_index	src/repository.h	/^	git_index *_index;$/;"	m	struct:git_repository	access:public
_index	tests/index/read_index.c	/^static git_index *_index;$/;"	v	file:
_index	tests/rebase/iterator.c	/^static git_index *_index;$/;"	v	file:
_index	tests/rebase/setup.c	/^static git_index *_index;$/;"	v	file:
_index	tests/reset/default.c	/^static git_index *_index;$/;"	v	file:
_indexer	tests/pack/packbuilder.c	/^static git_indexer *_indexer;$/;"	v	file:
_init_mutex	src/global.c	/^static pthread_mutex_t _init_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
_length_code	deps/zlib/deflate.h	/^  extern const uch ZLIB_INTERNAL _length_code[];$/;"	x
_length_code	deps/zlib/deflate.h	/^  extern uch ZLIB_INTERNAL _length_code[];$/;"	x
_length_code	deps/zlib/trees.c	/^uch _length_code[MAX_MATCH-MIN_MATCH+1];$/;"	v
_length_code	deps/zlib/trees.h	/^const uch ZLIB_INTERNAL _length_code[MAX_MATCH-MIN_MATCH+1]= {$/;"	v
_load_trace_params	tests/clar_libgit2_trace.c	/^static void _load_trace_params(void)$/;"	f	file:	signature:(void)
_mutex	src/global.c	/^static volatile LONG _mutex = 0;$/;"	v	file:
_name	tests/config/multivar.c	/^static const char *_name = "remote.ab.url";$/;"	v	file:
_note	tests/notes/notesref.c	/^static git_note *_note;$/;"	v	file:
_odb	src/repository.h	/^	git_odb *_odb;$/;"	m	struct:git_repository	access:public
_odb	tests/odb/foreach.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/mixed.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/packed.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/packed_one.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/sorting.c	/^static git_odb *_odb;$/;"	v	file:
_oid	tests/odb/backend/nonrefreshing.c	/^static git_oid _oid;$/;"	v	file:
_oid_b1	tests/online/push.c	/^static git_oid _oid_b1;$/;"	v	file:
_oid_b2	tests/online/push.c	/^static git_oid _oid_b2;$/;"	v	file:
_oid_b3	tests/online/push.c	/^static git_oid _oid_b3;$/;"	v	file:
_oid_b4	tests/online/push.c	/^static git_oid _oid_b4;$/;"	v	file:
_oid_b5	tests/online/push.c	/^static git_oid _oid_b5;$/;"	v	file:
_oid_b6	tests/online/push.c	/^static git_oid _oid_b6;$/;"	v	file:
_once_init	src/global.c	/^static pthread_once_t _once_init = PTHREAD_ONCE_INIT;$/;"	v	file:
_packbuilder	tests/pack/packbuilder.c	/^static git_packbuilder *_packbuilder;$/;"	v	file:
_path	tests/repo/state.c	/^static git_buf _path;$/;"	v	file:
_pathspecs	tests/reset/default.c	/^static git_strarray _pathspecs;$/;"	v	file:
_record_cbs	tests/online/push.c	/^static git_remote_callbacks _record_cbs = RECORD_CALLBACKS_INIT(&_record_cbs_data);$/;"	v	file:
_record_cbs_data	tests/online/push.c	/^static record_callbacks_data _record_cbs_data = {{ 0 }};$/;"	v	file:
_refdb	src/repository.h	/^	git_refdb *_refdb;$/;"	m	struct:git_repository	access:public
_refspec	tests/network/remote/remotes.c	/^static const git_refspec *_refspec;$/;"	v	file:
_remote	tests/network/remote/createthenload.c	/^static git_remote *_remote;$/;"	v	file:
_remote	tests/network/remote/push.c	/^static git_remote *_remote;$/;"	v	file:
_remote	tests/network/remote/remotes.c	/^static git_remote *_remote;$/;"	v	file:
_remote	tests/online/push.c	/^static git_remote *_remote;$/;"	v	file:
_remote_default	tests/online/push.c	/^static char *_remote_default = NULL;$/;"	v	file:
_remote_name	tests/network/remote/rename.c	/^static const char *_remote_name = "test";$/;"	v	file:
_remote_pass	tests/online/clone.c	/^static char *_remote_pass = NULL;$/;"	v	file:
_remote_pass	tests/online/push.c	/^static char *_remote_pass = NULL;$/;"	v	file:
_remote_proxy_pass	tests/online/clone.c	/^static char *_remote_proxy_pass = NULL;$/;"	v	file:
_remote_proxy_url	tests/online/clone.c	/^static char *_remote_proxy_url = NULL;$/;"	v	file:
_remote_proxy_user	tests/online/clone.c	/^static char *_remote_proxy_user = NULL;$/;"	v	file:
_remote_ssh_fingerprint	tests/online/clone.c	/^static char *_remote_ssh_fingerprint = NULL;$/;"	v	file:
_remote_ssh_key	tests/online/push.c	/^static char *_remote_ssh_key = NULL;$/;"	v	file:
_remote_ssh_passphrase	tests/online/clone.c	/^static char *_remote_ssh_passphrase = NULL;$/;"	v	file:
_remote_ssh_passphrase	tests/online/push.c	/^static char *_remote_ssh_passphrase = NULL;$/;"	v	file:
_remote_ssh_privkey	tests/online/clone.c	/^static char *_remote_ssh_privkey = NULL;$/;"	v	file:
_remote_ssh_pubkey	tests/online/clone.c	/^static char *_remote_ssh_pubkey = NULL;$/;"	v	file:
_remote_ssh_pubkey	tests/online/push.c	/^static char *_remote_ssh_pubkey = NULL;$/;"	v	file:
_remote_url	tests/online/clone.c	/^static char *_remote_url = NULL;$/;"	v	file:
_remote_url	tests/online/push.c	/^static char *_remote_url = NULL;$/;"	v	file:
_remote_user	tests/online/clone.c	/^static char *_remote_user = NULL;$/;"	v	file:
_remote_user	tests/online/push.c	/^static char *_remote_user = NULL;$/;"	v	file:
_rename_helper	tests/status/renames.c	/^static void _rename_helper($/;"	f	file:	signature:( git_repository *repo, const char *from, const char *to, const char *extra)
_render_callback	tests/generate.py	/^        def _render_callback(self, cb):$/;"	m	class:Module.Template	access:public
_replacer	tests/generate.py	/^        def _replacer(match):$/;"	f	function:Module._skip_comments	access:public
_repo	tests/commit/commit.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/commit/parent.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/diff/stats.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/graph/descendant_of.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/index/read_index.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/createthenload.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/delete.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/push.c	/^static git_repository *_repo, *_dummy;$/;"	v	file:
_repo	tests/network/remote/remotes.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/rename.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/notes/notes.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/notes/notesref.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/object/shortid.c	/^git_repository *_repo;$/;"	v
_repo	tests/object/tree/duplicateentries.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/odb/backend/nobackend.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/odb/backend/nonrefreshing.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/odb/foreach.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/online/fetch.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/online/push.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/pack/packbuilder.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/repo/hashfile.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/repo/init.c	/^static git_repository *_repo = NULL;$/;"	v	file:
_repo	tests/repo/message.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/repo/state.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/reset/default.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/revwalk/basic.c	/^static git_repository *_repo = NULL;$/;"	v	file:
_repo	tests/revwalk/hidecb.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/revwalk/mergebase.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/revwalk/signatureparsing.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/threads/diff.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/threads/iterator.c	/^static git_repository *_repo;$/;"	v	file:
_repo2	tests/revwalk/mergebase.c	/^static git_repository *_repo2;$/;"	v	file:
_revwalker	tests/pack/packbuilder.c	/^static git_revwalk *_revwalker;$/;"	v	file:
_sig	tests/notes/notes.c	/^static git_signature *_sig;$/;"	v	file:
_sig	tests/notes/notesref.c	/^static git_signature *_sig;$/;"	v	file:
_skip_comments	tests/generate.py	/^    def _skip_comments(self, text):$/;"	m	class:Module	access:public
_sm_ignore_map	src/submodule.c	/^static git_cvar_map _sm_ignore_map[] = {$/;"	v	file:
_sm_recurse_map	src/submodule.c	/^static git_cvar_map _sm_recurse_map[] = {$/;"	v	file:
_sm_update_map	src/submodule.c	/^static git_cvar_map _sm_update_map[] = {$/;"	v	file:
_ssh_action	src/transports/ssh.c	/^static int _ssh_action($/;"	f	file:	signature:( git_smart_subtransport_stream **stream, git_smart_subtransport *subtransport, const char *url, git_smart_service_t action)
_ssh_close	src/transports/ssh.c	/^static int _ssh_close(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
_ssh_free	src/transports/ssh.c	/^static void _ssh_free(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
_stats	tests/diff/stats.c	/^static git_diff_stats *_stats;$/;"	v	file:
_stats	tests/pack/packbuilder.c	/^static git_transfer_progress _stats;$/;"	v	file:
_struct_count	tests/core/vector.c	/^static int _struct_count = 0;$/;"	v	file:
_tag_blob	tests/online/push.c	/^static git_oid _tag_blob;$/;"	v	file:
_tag_commit	tests/online/push.c	/^static git_oid _tag_commit;$/;"	v	file:
_tag_lightweight	tests/online/push.c	/^static git_oid _tag_lightweight;$/;"	v	file:
_tag_tag	tests/online/push.c	/^static git_oid _tag_tag;$/;"	v	file:
_tag_tree	tests/online/push.c	/^static git_oid _tag_tree;$/;"	v	file:
_target	tests/reset/default.c	/^static git_object *_target;$/;"	v	file:
_tls_index	src/global.c	/^static DWORD _tls_index;$/;"	v	file:
_tls_key	src/global.c	/^static pthread_key_t _tls_key;$/;"	v	file:
_tmp_path	tests/repo/init.c	/^static git_buf _tmp_path = GIT_BUF_INIT;$/;"	v	file:
_tr_align	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_align(s)$/;"	f
_tr_flush_bits	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_flush_bits(s)$/;"	f
_tr_flush_block	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)$/;"	f
_tr_init	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_init(s)$/;"	f
_tr_stored_block	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_stored_block(s, buf, stored_len, last)$/;"	f
_tr_tally	deps/zlib/trees.c	/^int ZLIB_INTERNAL _tr_tally (s, dist, lc)$/;"	f
_tr_tally_dist	deps/zlib/deflate.h	330;"	d
_tr_tally_dist	deps/zlib/deflate.h	342;"	d
_tr_tally_lit	deps/zlib/deflate.h	323;"	d
_tr_tally_lit	deps/zlib/deflate.h	341;"	d
_trace_debug_close	tests/clar_libgit2_trace.c	44;"	d	file:
_trace_printf_close	tests/clar_libgit2_trace.c	/^static void _trace_printf_close(void)$/;"	f	file:	signature:(void)
_transport	tests/transport/register.c	/^static git_transport _transport = GIT_TRANSPORT_INIT;$/;"	v	file:
_walk	tests/revwalk/basic.c	/^static git_revwalk *_walk = NULL;$/;"	v	file:
_walk	tests/revwalk/signatureparsing.c	/^static git_revwalk *_walk;$/;"	v	file:
a	tests/diff/tree.c	/^static git_tree *a, *b;$/;"	v	file:
a	tests/trace/windows/stacktrace.c	/^static void a(void)$/;"	f	file:	signature:(void)
abbreviated_size	include/git2/describe.h	/^	unsigned int abbreviated_size;$/;"	m	struct:__anon108	access:public
abkref_ents	deps/regex/regex_internal.h	/^  int abkref_ents;$/;"	m	struct:__anon12	access:public
abort_diff	tests/diff/notify.c	/^static int abort_diff($/;"	f	file:	signature:( const git_diff *diff_so_far, const git_diff_delta *delta_to_add, const char *matched_pathspec, void *payload)
abort_test	tests/clar.c	/^static void abort_test(void)$/;"	f	file:	signature:(void)
aborting_progress_cb	tests/stash/apply.c	/^int aborting_progress_cb($/;"	f	signature:( git_stash_apply_progress_t progress, void *payload)
accept_mb	deps/regex/regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:__anon7	access:public
accept_mb	deps/regex/regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:re_dfastate_t	access:public
access	tests/clar.c	38;"	d	file:
ack_pkt	src/transports/smart_pkt.c	/^static int ack_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
acquire_init_state_context	deps/regex/regexec.c	/^acquire_init_state_context (reg_errcode_t *err, const re_match_context_t *mctx,$/;"	f	signature:(reg_errcode_t *err, const re_match_context_t *mctx, int idx)
action	examples/cat-file.c	/^	int action;$/;"	m	struct:opts	file:	access:public
action	include/git2/sys/transport.h	/^	int (* action)($/;"	m	struct:git_smart_subtransport	access:public
action	include/git2/tree.h	/^	git_tree_update_t action;$/;"	m	struct:__anon123	access:public
action_create_lighweight_tag	examples/tag.c	/^static void action_create_lighweight_tag(tag_state *state)$/;"	f	file:	signature:(tag_state *state)
action_create_tag	examples/tag.c	/^static void action_create_tag(tag_state *state)$/;"	f	file:	signature:(tag_state *state)
action_delete_tag	examples/tag.c	/^static void action_delete_tag(tag_state *state)$/;"	f	file:	signature:(tag_state *state)
action_list_tags	examples/tag.c	/^static void action_list_tags(tag_state *state)$/;"	f	file:	signature:(tag_state *state)
active_refspecs	src/remote.h	/^	git_vector active_refspecs;$/;"	m	struct:git_remote	access:public
active_reg_t	deps/regex/regex.h	/^typedef unsigned long int active_reg_t;$/;"	t
active_suite	tests/clar.c	/^	const char *active_suite;$/;"	m	struct:__anon364	file:	access:public
active_test	tests/clar.c	/^	const char *active_test;$/;"	m	struct:__anon364	file:	access:public
add_and_check_mode	tests/index/filemodes.c	54;"	d	file:
add_and_check_mode_	tests/index/filemodes.c	/^static void add_and_check_mode_($/;"	f	file:	signature:( git_index *index, const char *filename, unsigned int expect_mode, const char *file, int line)
add_backend_internal	src/odb.c	/^static int add_backend_internal($/;"	f	file:	signature:( git_odb *odb, git_odb_backend *backend, int priority, bool is_alternate, ino_t disk_inode)
add_blame_entry	src/blame_git.c	/^static void add_blame_entry(git_blame *blame, git_blame__entry *e)$/;"	f	file:	signature:(git_blame *blame, git_blame__entry *e)
add_blob_and_filter	tests/filter/ident.c	/^static void add_blob_and_filter($/;"	f	file:	signature:( const char *data, git_filter_list *fl, const char *expected)
add_conflict	tests/checkout/index.c	/^static void add_conflict(git_index *index, const char *path)$/;"	f	file:	signature:(git_index *index, const char *path)
add_conflict	tests/iterator/index.c	/^static void add_conflict($/;"	f	file:	signature:( git_index *index, const char *ancestor_path, const char *our_path, const char *their_path)
add_conflicts	tests/index/read_index.c	/^static void add_conflicts(git_index *index, const char *filename)$/;"	f	file:	signature:(git_index *index, const char *filename)
add_default_backends	src/odb.c	/^static int add_default_backends($/;"	f	file:	signature:( git_odb *db, const char *objects_dir, bool as_alternates, int alternate_depth)
add_descendants_to_write_order	src/pack-objects.c	/^static void add_descendants_to_write_order(git_pobject **wo, size_t *endp,$/;"	f	file:	signature:(git_pobject **wo, size_t *endp, git_pobject *po)
add_entry_and_check_mode	tests/index/filemodes.c	156;"	d	file:
add_entry_and_check_mode_	tests/index/filemodes.c	/^static void add_entry_and_check_mode_($/;"	f	file:	signature:( git_index *index, bool from_file, git_filemode_t mode, const char *file, int line)
add_epsilon_src_nodes	deps/regex/regexec.c	/^add_epsilon_src_nodes (const re_dfa_t *dfa, re_node_set *dest_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *dest_nodes, const re_node_set *candidates)
add_fake_conflicts	tests/object/tree/duplicateentries.c	/^static void add_fake_conflicts(git_index *index)$/;"	f	file:	signature:(git_index *index)
add_family_to_write_order	src/pack-objects.c	/^static void add_family_to_write_order(git_pobject **wo, size_t *endp,$/;"	f	file:	signature:(git_pobject **wo, size_t *endp, git_pobject *po)
add_invalid_filename	tests/index/tests.c	/^static void add_invalid_filename(git_repository *repo, const char *fn)$/;"	f	file:	signature:(git_repository *repo, const char *fn)
add_one_to_index	tests/status/ignore.c	/^static void add_one_to_index(const char *file)$/;"	f	file:	signature:(const char *file)
add_parents_to_list	src/revwalk.c	/^static int add_parents_to_list(git_revwalk *walk, git_commit_list_node *commit, git_commit_list **list)$/;"	f	file:	signature:(git_revwalk *walk, git_commit_list_node *commit, git_commit_list **list)
add_push_report_pkt	src/transports/smart_protocol.c	/^static int add_push_report_pkt(git_push *push, git_pkt *pkt)$/;"	f	file:	signature:(git_push *push, git_pkt *pkt)
add_push_report_sideband_pkt	src/transports/smart_protocol.c	/^static int add_push_report_sideband_pkt(git_push *push, git_pkt_data *data_pkt, git_buf *data_pkt_buf)$/;"	f	file:	signature:(git_push *push, git_pkt_data *data_pkt, git_buf *data_pkt_buf)
add_ref	src/transports/local.c	/^static int add_ref(transport_local *t, const char *name)$/;"	f	file:	signature:(transport_local *t, const char *name)
add_ref_from_push_spec	src/transports/smart_protocol.c	/^static int add_ref_from_push_spec(git_vector *refs, push_spec *push_spec)$/;"	f	file:	signature:(git_vector *refs, push_spec *push_spec)
add_refspec	src/remote.c	/^static int add_refspec(git_remote *remote, const char *string, bool is_fetch)$/;"	f	file:	signature:(git_remote *remote, const char *string, bool is_fetch)
add_refspec_to	src/remote.c	/^static int add_refspec_to(git_vector *vector, const char *string, bool is_fetch)$/;"	f	file:	signature:(git_vector *vector, const char *string, bool is_fetch)
add_repo_as_submodule	src/index.c	/^static int add_repo_as_submodule(git_index_entry **out, git_index *index, const char *path)$/;"	f	file:	signature:(git_index_entry **out, git_index *index, const char *path)
add_revision	examples/log.c	/^static int add_revision(struct log_state *s, const char *revstr)$/;"	f	file:	signature:(struct log_state *s, const char *revstr)
add_submodule_to_index	tests/submodule/status.c	/^static void add_submodule_to_index(const char *name)$/;"	f	file:	signature:(const char *name)
add_submodule_with_commit	tests/submodule/lookup.c	/^static void add_submodule_with_commit(const char *name)$/;"	f	file:	signature:(const char *name)
add_to_cache	src/filebuf.c	/^GIT_INLINE(void) add_to_cache(git_filebuf *file, const void *buf, size_t len)$/;"	f	signature:(git_filebuf *file, const void *buf, size_t len)
add_to_known_names	src/describe.c	/^static int add_to_known_names($/;"	f	file:	signature:( git_repository *repo, git_oidmap *names, const char *path, const git_oid *peeled, unsigned int prio, const git_oid *sha1)
add_to_workdir	tests/attr/repo.c	/^static void add_to_workdir(const char *filename, const char *content)$/;"	f	file:	signature:(const char *filename, const char *content)
add_to_write_order	src/pack-objects.c	/^GIT_INLINE(void) add_to_write_order(git_pobject **wo, size_t *endp,$/;"	f	signature:(git_pobject **wo, size_t *endp, git_pobject *po)
add_update	src/push.c	/^static int add_update(git_push *push, push_spec *spec)$/;"	f	file:	signature:(git_push *push, push_spec *spec)
addall_cancel_at	tests/index/addall.c	/^static int addall_cancel_at($/;"	f	file:	signature:( const char *path, const char *matched_pathspec, void *payload)
addall_create_test_repo	tests/index/addall.c	/^static void addall_create_test_repo(bool check_every_step)$/;"	f	file:	signature:(bool check_every_step)
addall_match_prefix	tests/index/addall.c	/^static int addall_match_prefix($/;"	f	file:	signature:( const char *path, const char *matched_pathspec, void *payload)
addall_match_suffix	tests/index/addall.c	/^static int addall_match_suffix($/;"	f	file:	signature:( const char *path, const char *matched_pathspec, void *payload)
added	src/commit_list.h	/^			 added:1,$/;"	m	struct:git_commit_list_node	access:public
addrinfo	src/posix.h	/^struct addrinfo {$/;"	s
addrinfo::ai_addr	src/posix.h	/^	struct sockaddr *ai_addr;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr	access:public
addrinfo::ai_addr_in	src/posix.h	/^	struct sockaddr_in ai_addr_in;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr_in	access:public
addrinfo::ai_addrlen	src/posix.h	/^	size_t ai_addrlen;$/;"	m	struct:addrinfo	access:public
addrinfo::ai_family	src/posix.h	/^	int ai_family;$/;"	m	struct:addrinfo	access:public
addrinfo::ai_hostent	src/posix.h	/^	struct hostent *ai_hostent;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::hostent	access:public
addrinfo::ai_next	src/posix.h	/^	struct addrinfo *ai_next;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo	access:public
addrinfo::ai_port	src/posix.h	/^	long ai_port;$/;"	m	struct:addrinfo	access:public
addrinfo::ai_protocol	src/posix.h	/^	int ai_protocol;$/;"	m	struct:addrinfo	access:public
addrinfo::ai_servent	src/posix.h	/^	struct servent *ai_servent;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::servent	access:public
addrinfo::ai_socktype	src/posix.h	/^	int ai_socktype;$/;"	m	struct:addrinfo	access:public
adler	deps/zlib/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s	access:public
adler32	deps/zlib/adler32.c	/^uLong ZEXPORT adler32(adler, buf, len)$/;"	f
adler32_combine	deps/zlib/adler32.c	/^uLong ZEXPORT adler32_combine(adler1, adler2, len2)$/;"	f
adler32_combine	deps/zlib/zlib.h	1713;"	d
adler32_combine64	deps/zlib/adler32.c	/^uLong ZEXPORT adler32_combine64(adler1, adler2, len2)$/;"	f
adler32_combine_	deps/zlib/adler32.c	/^local uLong adler32_combine_(adler1, adler2, len2)$/;"	f
advance	src/iterator.h	/^	int (*advance)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon256	access:public
advance_delta_offset	src/indexer.c	/^static int advance_delta_offset(git_indexer *idx, git_otype type)$/;"	f	file:	signature:(git_indexer *idx, git_otype type)
advance_into	src/iterator.h	/^	int (*advance_into)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon256	access:public
advance_over	src/iterator.h	/^	int (*advance_over)($/;"	m	struct:__anon256	access:public
affected	tests/merge/workdir/dirty.c	/^static char *affected[][5] = {$/;"	v	file:
after	examples/log.c	/^	git_time_t after;$/;"	m	struct:log_options	file:	access:public
ahead_behind	src/graph.c	/^static int ahead_behind(git_commit_list_node *one, git_commit_list_node *two,$/;"	f	file:	signature:(git_commit_list_node *one, git_commit_list_node *two, size_t *ahead, size_t *behind)
ai_addr	src/posix.h	/^	struct sockaddr *ai_addr;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr	access:public
ai_addr_in	src/posix.h	/^	struct sockaddr_in ai_addr_in;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr_in	access:public
ai_addrlen	src/posix.h	/^	size_t ai_addrlen;$/;"	m	struct:addrinfo	access:public
ai_family	src/posix.h	/^	int ai_family;$/;"	m	struct:addrinfo	access:public
ai_hostent	src/posix.h	/^	struct hostent *ai_hostent;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::hostent	access:public
ai_next	src/posix.h	/^	struct addrinfo *ai_next;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo	access:public
ai_port	src/posix.h	/^	long ai_port;$/;"	m	struct:addrinfo	access:public
ai_protocol	src/posix.h	/^	int ai_protocol;$/;"	m	struct:addrinfo	access:public
ai_servent	src/posix.h	/^	struct servent *ai_servent;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::servent	access:public
ai_socktype	src/posix.h	/^	int ai_socktype;$/;"	m	struct:addrinfo	access:public
alasts	deps/regex/regex_internal.h	/^  int alasts; \/* Allocation size of LASTS.  *\/$/;"	m	struct:__anon11	access:public
alien	tests/diff/blob.c	/^static git_blob *d, *alien;$/;"	v	file:
all_iter	src/config.c	/^} all_iter;$/;"	t	typeref:struct:__anon337	file:
all_iter_free	src/config.c	/^static void all_iter_free(git_config_iterator *_iter)$/;"	f	file:	signature:(git_config_iterator *_iter)
all_iter_glob_free	src/config.c	/^static void all_iter_glob_free(git_config_iterator *_iter)$/;"	f	file:	signature:(git_config_iterator *_iter)
all_iter_glob_next	src/config.c	/^static int all_iter_glob_next(git_config_entry **entry, git_config_iterator *_iter)$/;"	f	file:	signature:(git_config_entry **entry, git_config_iterator *_iter)
all_iter_next	src/config.c	/^static int all_iter_next(git_config_entry **entry, git_config_iterator *_iter)$/;"	f	file:	signature:(git_config_entry **entry, git_config_iterator *_iter)
all_submodules	src/submodule.c	/^static int all_submodules(git_repository *repo, git_strmap *map)$/;"	f	file:	signature:(git_repository *repo, git_strmap *map)
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:__anon4	access:public
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:__anon9	access:public
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:re_fail_stack_t	access:public
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:re_state_table_entry	access:public
alloc	src/tsort.c	/^	size_t alloc;$/;"	m	struct:tsort_store	file:	access:public
alloc	src/xdiff/xpatience.c	/^	int nr, alloc;$/;"	m	struct:hashmap	file:	access:public
alloc	src/xdiff/xprepare.c	/^	long alloc;$/;"	m	struct:s_xdlclassifier	file:	access:public
alloc_entry	src/tree.c	/^static git_tree_entry *alloc_entry(const char *filename, size_t filename_len, const git_oid *id)$/;"	f	file:	signature:(const char *filename, size_t filename_len, const git_oid *id)
alloc_func	deps/zlib/zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
alloc_parents	src/commit_list.c	/^static git_commit_list_node **alloc_parents($/;"	f	file:	signature:( git_revwalk *walk, git_commit_list_node *commit, size_t n_parents)
alloc_ref	src/refs.c	/^static git_reference *alloc_ref(const char *name)$/;"	f	file:	signature:(const char *name)
alloc_size	src/pool.c	/^static uint32_t alloc_size(git_pool *pool, uint32_t count)$/;"	f	file:	signature:(git_pool *pool, uint32_t count)
alloc_struct	tests/core/vector.c	/^static my_struct *alloc_struct(int value)$/;"	f	file:	signature:(int value)
alloca	deps/regex/regex.c	63;"	d	file:
alloca	deps/regex/regex.c	64;"	d	file:
allocations	src/pool.h	/^	git_vector allocations;$/;"	m	struct:__anon307	access:public
allow_fetch	include/git2/submodule.h	/^	int allow_fetch;$/;"	m	struct:git_submodule_update_options	access:public
always_use_long_format	include/git2/describe.h	/^	int always_use_long_format;$/;"	m	struct:__anon108	access:public
ambiguous	src/status.c	/^	int ambiguous;$/;"	m	struct:status_file_info	file:	access:public
analysis_from_branch	tests/merge/workdir/analysis.c	/^static void analysis_from_branch($/;"	f	file:	signature:( git_merge_analysis_t *merge_analysis, git_merge_preference_t *merge_pref, const char *branchname)
analyze	deps/regex/regcomp.c	/^analyze (regex_t *preg)$/;"	f	file:	signature:(regex_t *preg)
ancestor	include/git2/sys/index.h	/^	char *ancestor;$/;"	m	struct:git_index_name_entry	access:public
ancestor	src/checkout.c	/^	const git_index_entry *ancestor;$/;"	m	struct:__anon216	file:	access:public
ancestor	src/merge_driver.h	/^	const git_index_entry *ancestor;$/;"	m	struct:git_merge_driver_source	access:public
ancestor	src/xdiff/xdiff.h	/^	const char *ancestor;	\/* label for orig *\/$/;"	m	struct:s_xmparam	access:public
ancestor	tests/checkout/conflict.c	/^	char ancestor[64];$/;"	m	struct:checkout_name_entry	file:	access:public
ancestor	tests/merge/merge_helpers.h	/^	struct merge_index_with_status ancestor;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status	access:public
ancestor_entry	src/merge.h	/^	git_index_entry ancestor_entry;$/;"	m	struct:__anon325	access:public
ancestor_label	include/git2/checkout.h	/^	const char *ancestor_label; \/**< the name of the common ancestor side of conflicts *\/$/;"	m	struct:git_checkout_options	access:public
ancestor_label	include/git2/merge.h	/^	const char *ancestor_label;$/;"	m	struct:__anon130	access:public
ancestor_mode	tests/merge/merge_helpers.h	/^	unsigned int ancestor_mode;$/;"	m	struct:merge_reuc_entry	access:public
ancestor_oid_str	tests/merge/merge_helpers.h	/^	char ancestor_oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_reuc_entry	access:public
ancestor_path	tests/merge/merge_helpers.h	/^	char ancestor_path[128];$/;"	m	struct:merge_name_entry	access:public
ancur	src/xdiff/xtypes.h	/^	chanode_t *ancur;$/;"	m	struct:s_chastore	access:public
annotated_commit_cb_data	tests/merge/workdir/setup.c	/^struct annotated_commit_cb_data {$/;"	s	file:
annotated_commit_cb_data::i	tests/merge/workdir/setup.c	/^	unsigned int i;$/;"	m	struct:annotated_commit_cb_data	file:	access:public
annotated_commit_cb_data::len	tests/merge/workdir/setup.c	/^	unsigned int len;$/;"	m	struct:annotated_commit_cb_data	file:	access:public
annotated_commit_cb_data::oid_str	tests/merge/workdir/setup.c	/^	const char **oid_str;$/;"	m	struct:annotated_commit_cb_data	file:	access:public
annotated_commit_foreach_cb	tests/merge/workdir/setup.c	/^static int annotated_commit_foreach_cb(const git_oid *oid, void *payload)$/;"	f	file:	signature:(const git_oid *oid, void *payload)
annotated_commit_init	src/annotated_commit.c	/^static int annotated_commit_init($/;"	f	file:	signature:( git_annotated_commit **out, git_commit *commit, const char *description)
annotated_commit_init_from_id	src/annotated_commit.c	/^static int annotated_commit_init_from_id($/;"	f	file:	signature:( git_annotated_commit **out, git_repository *repo, const git_oid *id, const char *description)
annotated_object_sha	tests/notes/notes.c	/^	const char *annotated_object_sha;$/;"	m	struct:__anon372	file:	access:public
any_left_hand_identifier	src/revparse.c	/^static bool any_left_hand_identifier(git_object *object, git_reference *reference, size_t identifier_len)$/;"	f	file:	signature:(git_object *object, git_reference *reference, size_t identifier_len)
append	include/git2/odb_backend.h	/^	int (*append)(git_odb_writepack *writepack, const void *data, size_t size, git_transfer_progress *stats);$/;"	m	struct:git_odb_writepack	access:public
append_abbreviated_oid	src/stash.c	/^static int append_abbreviated_oid(git_buf *out, const git_oid *b_commit)$/;"	f	file:	signature:(git_buf *out, const git_oid *b_commit)
append_ceiling_dir	tests/repo/discover.c	/^static void append_ceiling_dir(git_buf *ceiling_dirs, const char *path)$/;"	f	file:	signature:(git_buf *ceiling_dirs, const char *path)
append_commit_description	src/stash.c	/^static int append_commit_description(git_buf *out, git_commit* commit)$/;"	f	file:	signature:(git_buf *out, git_commit* commit)
append_entry	src/config_file.c	/^static int append_entry(git_strmap *values, cvar_t *var)$/;"	f	file:	signature:(git_strmap *values, cvar_t *var)
append_entry	src/tree.c	/^static int append_entry($/;"	f	file:	signature:( git_treebuilder *bld, const char *filename, const git_oid *id, git_filemode_t filemode)
append_symref	src/transports/smart_protocol.c	/^static int append_symref(const char **out, git_vector *symrefs, const char *ptr)$/;"	f	file:	signature:(const char **out, git_vector *symrefs, const char *ptr)
append_to_pack	src/indexer.c	/^static int append_to_pack(git_indexer *idx, const void *data, size_t size)$/;"	f	file:	signature:(git_indexer *idx, const void *data, size_t size)
apply	include/git2/sys/filter.h	/^	git_filter_apply_fn    apply;$/;"	m	struct:git_filter	access:public
apply	include/git2/sys/merge.h	/^	git_merge_driver_apply_fn    apply;$/;"	m	struct:git_merge_driver	access:public
apply_basic_credential	src/transports/winhttp.c	/^static int apply_basic_credential(HINTERNET request, git_cred *cred)$/;"	f	file:	signature:(HINTERNET request, git_cred *cred)
apply_basic_credential_proxy	src/transports/winhttp.c	/^static int apply_basic_credential_proxy(HINTERNET request, git_cred *cred)$/;"	f	file:	signature:(HINTERNET request, git_cred *cred)
apply_binary	src/apply.c	/^static int apply_binary($/;"	f	file:	signature:( git_buf *out, const char *source, size_t source_len, git_patch *patch)
apply_binary_delta	src/apply.c	/^static int apply_binary_delta($/;"	f	file:	signature:( git_buf *out, const char *source, size_t source_len, git_diff_binary_file *binary_file)
apply_buf	tests/apply/fromdiff.c	/^static int apply_buf($/;"	f	file:	signature:( const char *old, const char *oldname, const char *new, const char *newname, const char *patch_expected, const git_diff_options *diff_opts)
apply_credentials	src/transports/http.c	/^static int apply_credentials(git_buf *buf, http_subtransport *t)$/;"	f	file:	signature:(git_buf *buf, http_subtransport *t)
apply_default_credentials	src/transports/winhttp.c	/^static int apply_default_credentials(HINTERNET request)$/;"	f	file:	signature:(HINTERNET request)
apply_each_file	src/index.c	/^static int apply_each_file(const git_diff_delta *delta, float progress, void *payload)$/;"	f	file:	signature:(const git_diff_delta *delta, float progress, void *payload)
apply_err	src/apply.c	19;"	d	file:
apply_gitbuf	tests/apply/fromdiff.c	/^static int apply_gitbuf($/;"	f	file:	signature:( const git_buf *old, const char *oldname, const git_buf *new, const char *newname, const char *patch_expected, const git_diff_options *diff_opts)
apply_hunk	src/apply.c	/^static int apply_hunk($/;"	f	file:	signature:( patch_image *image, git_patch *patch, git_patch_hunk *hunk)
apply_hunks	src/apply.c	/^static int apply_hunks($/;"	f	file:	signature:( git_buf *out, const char *source, size_t source_len, git_patch *patch)
apply_insteadof	src/remote.c	/^char *apply_insteadof(git_config *config, const char *url, int direction)$/;"	f	signature:(git_config *config, const char *url, int direction)
apply_patchfile	tests/apply/fromfile.c	/^static int apply_patchfile($/;"	f	file:	signature:( const char *old, size_t old_len, const char *new, size_t new_len, const char *patchfile, const char *filename_expected, unsigned int mode_expected)
apply_proxy_config	src/transports/http.c	/^static int apply_proxy_config(http_subtransport *t)$/;"	f	file:	signature:(http_subtransport *t)
apply_proxy_creds	src/curl_stream.c	/^static int apply_proxy_creds(curl_stream *s)$/;"	f	file:	signature:(curl_stream *s)
apply_splits_and_deletes	src/diff_tform.c	/^static int apply_splits_and_deletes($/;"	f	file:	signature:( git_diff *diff, size_t expected_size, bool actually_split)
approxidate_alpha	src/date.c	/^static const char *approxidate_alpha(const char *date, struct tm *tm, struct tm *now, int *num, int *touched)$/;"	f	file:	signature:(const char *date, struct tm *tm, struct tm *now, int *num, int *touched)
approxidate_digit	src/date.c	/^static const char *approxidate_digit(const char *date, struct tm *tm, int *num)$/;"	f	file:	signature:(const char *date, struct tm *tm, int *num)
approxidate_str	src/date.c	/^static git_time_t approxidate_str(const char *date,$/;"	f	file:	signature:(const char *date, time_t time_sec, int *error_ret)
are_symlinks_supported	src/repository.c	/^static bool are_symlinks_supported(const char *wd_path)$/;"	f	file:	signature:(const char *wd_path)
argc	examples/common.h	/^	int    argc;$/;"	m	struct:args_info	access:public
argc	examples/remote.c	/^	int argc;$/;"	m	struct:opts	file:	access:public
argc	tests/clar.c	/^	int argc;$/;"	m	struct:__anon364	file:	access:public
args	src/commit.c	/^	va_list args;$/;"	m	struct:__anon211	file:	access:public
args_info	examples/common.h	/^struct args_info {$/;"	s
args_info	examples/describe.c	/^typedef struct args_info args_info;$/;"	t	typeref:struct:args_info	file:
args_info	examples/tag.c	/^typedef struct args_info args_info;$/;"	t	typeref:struct:args_info	file:
args_info::argc	examples/common.h	/^	int    argc;$/;"	m	struct:args_info	access:public
args_info::argv	examples/common.h	/^	char **argv;$/;"	m	struct:args_info	access:public
args_info::pos	examples/common.h	/^	int    pos;$/;"	m	struct:args_info	access:public
argv	examples/common.h	/^	char **argv;$/;"	m	struct:args_info	access:public
argv	examples/remote.c	/^	char **argv;$/;"	m	struct:opts	file:	access:public
argv	tests/clar.c	/^	char **argv;$/;"	m	struct:__anon364	file:	access:public
array	deps/regex/regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:__anon9	access:public
array	deps/regex/regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:re_state_table_entry	access:public
array	include/git2/oidarray.h	/^GIT_EXTERN(void) git_oidarray_free(git_oidarray *array);$/;"	v
array	include/git2/strarray.h	/^GIT_EXTERN(void) git_strarray_free(git_strarray *array);$/;"	v
as_path	src/diff_file.h	/^	const char *as_path;$/;"	m	struct:__anon278	access:public
asize	include/git2/buffer.h	/^	size_t asize, size;$/;"	m	struct:__anon114	access:public
asize	script/user_model.c	/^	size_t asize, size;$/;"	m	struct:git_buf	file:	access:public
asize	src/hashsig.c	/^	int size, asize;$/;"	m	struct:__anon334	file:	access:public
ask_and_apply_proxy_creds	src/curl_stream.c	/^static int ask_and_apply_proxy_creds(curl_stream *s)$/;"	f	file:	signature:(curl_stream *s)
assert__submodule_exists	tests/submodule/submodule_helpers.c	/^void assert__submodule_exists($/;"	f	signature:( git_repository *repo, const char *name, const char *msg, const char *file, int line)
assert_all_refnames_match	tests/refs/iterator.c	/^static void assert_all_refnames_match(git_vector *output)$/;"	f	file:	signature:(git_vector *output)
assert_allowed	tests/object/tree/write.c	456;"	d	file:
assert_allowed	tests/object/tree/write.c	488;"	d	file:
assert_appends	tests/refs/reflog/reflog.c	/^static void assert_appends(const git_signature *committer, const git_oid *oid)$/;"	f	file:	signature:(const git_signature *committer, const git_oid *oid)
assert_at_end	tests/iterator/iterator_helpers.c	/^static void assert_at_end(git_iterator *i, bool verbose)$/;"	f	file:	signature:(git_iterator *i, bool verbose)
assert_binary_blobs_comparison	tests/diff/blob.c	/^static void assert_binary_blobs_comparison(diff_expects *expected)$/;"	f	file:	signature:(diff_expects *expected)
assert_blob_creation	tests/object/blob/write.c	/^static void assert_blob_creation(const char *path_to_file, const char *blob_from_path, blob_creator_fn creator)$/;"	f	file:	signature:(const char *path_to_file, const char *blob_from_path, blob_creator_fn creator)
assert_blob_oid	tests/stash/save.c	/^static void assert_blob_oid(const char* revision, const char* expected_oid)$/;"	f	file:	signature:(const char* revision, const char* expected_oid)
assert_branch_has_been_found	tests/refs/branches/iterator.c	/^static void assert_branch_has_been_found(struct expectations *findings, const char* expected_branch_name)$/;"	f	file:	signature:(struct expectations *findings, const char* expected_branch_name)
assert_branch_matches_name	tests/refs/branches/create.c	/^static void assert_branch_matches_name($/;"	f	file:	signature:( const char *expected, const char *lookup_as)
assert_called_notifications	tests/diff/notify.c	/^static int assert_called_notifications($/;"	f	file:	signature:( const git_diff *diff_so_far, const git_diff_delta *delta_to_add, const char *matched_pathspec, void *payload)
assert_cannot_create_remote	tests/network/remote/remotes.c	/^void assert_cannot_create_remote(const char *name, int expected_error)$/;"	f	signature:(const char *name, int expected_error)
assert_changed_single_one_line_file	tests/diff/blob.c	/^static void assert_changed_single_one_line_file($/;"	f	file:	signature:( diff_expects *expected, git_delta_t mod)
assert_commit_body	tests/commit/commit.c	/^void assert_commit_body(const char *expected, const char *given)$/;"	f	signature:(const char *expected, const char *given)
assert_commit_is_head	tests/object/commit/commitstagedfile.c	151;"	d	file:
assert_commit_is_head_	tests/object/commit/commitstagedfile.c	/^static void assert_commit_is_head_(git_commit *c, const char *file, int line)$/;"	f	file:	signature:(git_commit *c, const char *file, int line)
assert_commit_message_contains	tests/stash/save.c	/^static void assert_commit_message_contains(const char *revision, const char *fragment)$/;"	f	file:	signature:(const char *revision, const char *fragment)
assert_commit_summary	tests/commit/commit.c	/^void assert_commit_summary(const char *expected, const char *given)$/;"	f	signature:(const char *expected, const char *given)
assert_commit_tree_has_n_entries	tests/object/commit/commitstagedfile.c	/^static void assert_commit_tree_has_n_entries(git_commit *c, int count)$/;"	f	file:	signature:(git_commit *c, int count)
assert_common_dirlen	tests/core/path.c	656;"	d	file:
assert_config_entry_existence	tests/config/config_helpers.c	/^void assert_config_entry_existence($/;"	f	signature:( git_repository *repo, const char *name, bool is_supposed_to_exist)
assert_config_entry_on_init	tests/repo/init.c	/^static void assert_config_entry_on_init($/;"	f	file:	signature:( const char *config_key, int expected_value)
assert_config_entry_on_init_bytype	tests/repo/init.c	/^static void assert_config_entry_on_init_bytype($/;"	f	file:	signature:( const char *config_key, int expected_value, bool is_bare)
assert_config_entry_value	tests/config/config_helpers.c	/^void assert_config_entry_value($/;"	f	signature:( git_repository *repo, const char *name, const char *expected_value)
assert_config_value	tests/config/stress.c	/^void assert_config_value(git_config *config, const char *key, const char *value)$/;"	f	signature:(git_config *config, const char *key, const char *value)
assert_conflict	tests/checkout/tree.c	/^void assert_conflict($/;"	f	signature:( const char *entry_path, const char *new_content, const char *parent_sha, const char *commit_sha)
assert_content_in_index	tests/reset/default.c	/^static void assert_content_in_index($/;"	f	file:	signature:( git_strarray *pathspecs, bool should_exist, git_strarray *expected_shas)
assert_correct_reflog	tests/clone/nonetwork.c	/^static void assert_correct_reflog(const char *name)$/;"	f	file:	signature:(const char *name)
assert_default_branch	tests/network/remote/defaultbranch.c	/^static void assert_default_branch(const char *should)$/;"	f	file:	signature:(const char *should)
assert_delta_binary	tests/diff/workdir.c	/^static void assert_delta_binary(git_diff *diff, size_t idx, int is_binary)$/;"	f	file:	signature:(git_diff *diff, size_t idx, int is_binary)
assert_describe	tests/describe/describe_helpers.c	/^void assert_describe($/;"	f	signature:( const char *expected_output, const char *revparse_spec, git_repository *repo, git_describe_options *opts, git_describe_format_options *fmt_opts)
assert_describe_workdir	tests/describe/describe_helpers.c	/^void assert_describe_workdir($/;"	f	signature:( const char *expected_output, git_repository *repo, git_describe_options *opts, git_describe_format_options *fmt_opts)
assert_dir_exists	tests/checkout/typechange.c	/^static void assert_dir_exists(const char *path)$/;"	f	file:	signature:(const char *path)
assert_email_match	tests/diff/format_email.c	/^static void assert_email_match($/;"	f	file:	signature:( const char *expected, const char *oidstr, git_diff_format_email_options *opts)
assert_file_exists	tests/checkout/typechange.c	/^static void assert_file_exists(const char *path)$/;"	f	file:	signature:(const char *path)
assert_found_objects	tests/odb/mixed.c	/^static void assert_found_objects(git_odb_expand_id *ids)$/;"	f	file:	signature:(git_odb_expand_id *ids)
assert_hard_link	tests/core/copy.c	/^void assert_hard_link(const char *path)$/;"	f	signature:(const char *path)
assert_has_reflog	tests/refs/reflog/reflog.c	/^static void assert_has_reflog(bool expected_result, const char *name)$/;"	f	file:	signature:(bool expected_result, const char *name)
assert_head_is_correctly_detached	tests/repo/head.c	/^static void assert_head_is_correctly_detached(void)$/;"	f	file:	signature:(void)
assert_head_reflog	tests/repo/head.c	/^static void assert_head_reflog(git_repository *repo, size_t idx,$/;"	f	file:	signature:(git_repository *repo, size_t idx, const char *old_id, const char *new_id, const char *message)
assert_hooks_match	tests/repo/init.c	/^static void assert_hooks_match($/;"	f	file:	signature:( const char *template_dir, const char *repo_dir, const char *hook_path, bool core_filemode)
assert_identical_blobs_comparison	tests/diff/blob.c	/^static void assert_identical_blobs_comparison(diff_expects *expected)$/;"	f	file:	signature:(diff_expects *expected)
assert_ignore_case	tests/status/worktree.c	/^static void assert_ignore_case($/;"	f	file:	signature:( bool should_ignore_case, int expected_lower_cased_file_status, int expected_camel_cased_file_status)
assert_ignore_change	tests/submodule/modify.c	/^void assert_ignore_change(git_submodule_ignore_t ignore)$/;"	f	signature:(git_submodule_ignore_t ignore)
assert_ignored	tests/status/ignore.c	29;"	d	file:
assert_ignored_	tests/status/ignore.c	/^static void assert_ignored_($/;"	f	file:	signature:( bool expected, const char *filepath, const char *file, int line)
assert_invalid_config_key_name	tests/config/validkeyname.c	/^static void assert_invalid_config_key_name(const char *name)$/;"	f	file:	signature:(const char *name)
assert_invalid_config_section_name	tests/config/rename.c	/^static void assert_invalid_config_section_name($/;"	f	file:	signature:( git_repository *repo, const char *name)
assert_invalid_rtransform	tests/network/refspecs.c	/^static void assert_invalid_rtransform(const char *refspec, const char *name)$/;"	f	file:	signature:(const char *refspec, const char *name)
assert_invalid_single_spec	tests/refs/revparse.c	/^static void assert_invalid_single_spec(const char *invalid_spec)$/;"	f	file:	signature:(const char *invalid_spec)
assert_invalid_transform	tests/network/refspecs.c	/^static void assert_invalid_transform(const char *refspec, const char *name)$/;"	f	file:	signature:(const char *refspec, const char *name)
assert_is_branch	tests/refs/read.c	/^static void assert_is_branch(const char *name, bool expected_branchness)$/;"	f	file:	signature:(const char *name, bool expected_branchness)
assert_is_ignored	tests/attr/ignore.c	31;"	d	file:
assert_is_ignored	tests/status/ignore.c	31;"	d	file:
assert_is_ignored_	tests/attr/ignore.c	/^static void assert_is_ignored_($/;"	f	file:	signature:( bool expected, const char *filepath, const char *file, int line)
assert_is_note	tests/refs/read.c	/^static void assert_is_note(const char *name, bool expected_noteness)$/;"	f	file:	signature:(const char *name, bool expected_noteness)
assert_is_tag	tests/refs/read.c	/^static void assert_is_tag(const char *name, bool expected_tagness)$/;"	f	file:	signature:(const char *name, bool expected_tagness)
assert_master_for_merge	tests/fetchhead/nonetwork.c	/^static int assert_master_for_merge(const char *ref, const char *url, const git_oid *id, unsigned int is_merge, void *data)$/;"	f	file:	signature:(const char *ref, const char *url, const git_oid *id, unsigned int is_merge, void *data)
assert_merge_and_or_remote_key_missing	tests/refs/branches/upstream.c	/^static void assert_merge_and_or_remote_key_missing(git_repository *repository, const git_commit *target, const char *entry_name)$/;"	f	file:	signature:(git_repository *repository, const git_commit *target, const char *entry_name)
assert_mergebase_many	tests/revwalk/mergebase.c	/^static void assert_mergebase_many(const char *expected_sha, int count, ...)$/;"	f	file:	signature:(const char *expected_sha, int count, ...)
assert_mergebase_octopus	tests/revwalk/mergebase.c	/^static void assert_mergebase_octopus(const char *expected_sha, int count, ...)$/;"	f	file:	signature:(const char *expected_sha, int count, ...)
assert_message_prettifying	tests/object/message.c	/^static void assert_message_prettifying(char *expected_output, char *input, int strip_comments)$/;"	f	file:	signature:(char *expected_output, char *input, int strip_comments)
assert_mode_seems_okay	tests/repo/init.c	/^static void assert_mode_seems_okay($/;"	f	file:	signature:( const char *base, const char *path, git_filemode_t expect_mode, bool expect_setgid, bool core_filemode)
assert_name_and_email	tests/commit/signature.c	/^static void assert_name_and_email($/;"	f	file:	signature:( const char *expected_name, const char *expected_email, const char *name, const char *email)
assert_name_is	tests/checkout/icase.c	/^static void assert_name_is(const char *expected)$/;"	f	file:	signature:(const char *expected)
assert_name_too_long	tests/win32/longpath.c	/^void assert_name_too_long(void)$/;"	f	signature:(void)
assert_named_chunked_blob	tests/object/blob/fromstream.c	/^static void assert_named_chunked_blob(const char *expected_sha, const char *fake_name)$/;"	f	file:	signature:(const char *expected_sha, const char *fake_name)
assert_no_reflog_update	tests/refs/reflog/reflog.c	/^static void assert_no_reflog_update(void)$/;"	f	file:	signature:(void)
assert_note_equal	tests/notes/notes.c	/^static void assert_note_equal(git_note *note, char *message, git_oid *note_oid) {$/;"	f	file:	signature:(git_note *note, char *message, git_oid *note_oid)
assert_notfound_objects	tests/odb/mixed.c	/^static void assert_notfound_objects(git_odb_expand_id *ids)$/;"	f	file:	signature:(git_odb_expand_id *ids)
assert_nth_gen_parent	tests/commit/parent.c	/^static void assert_nth_gen_parent(unsigned int gen, const char *expected_oid)$/;"	f	file:	signature:(unsigned int gen, const char *expected_oid)
assert_object_oid	tests/stash/save.c	/^static void assert_object_oid(const char* revision, const char* expected_oid, git_otype type)$/;"	f	file:	signature:(const char* revision, const char* expected_oid, git_otype type)
assert_on_branch	tests/checkout/checkout_helpers.c	/^void assert_on_branch(git_repository *repo, const char *branch)$/;"	f	signature:(git_repository *repo, const char *branch)
assert_one_modified	tests/diff/blob.c	/^static void assert_one_modified($/;"	f	file:	signature:( int hunks, int lines, int ctxt, int adds, int dels, diff_expects *exp)
assert_one_modified_with_lines	tests/diff/blob.c	/^static void assert_one_modified_with_lines(diff_expects *expected, int lines)$/;"	f	file:	signature:(diff_expects *expected, int lines)
assert_patch_matches_blobs	tests/diff/blob.c	/^static void assert_patch_matches_blobs($/;"	f	file:	signature:( git_patch *p, git_blob *a, git_blob *b, int hunks, int l0, int l1, int ctxt, int adds, int dels)
assert_peel	tests/object/peel.c	/^static void assert_peel($/;"	f	file:	signature:( const char *sha, git_otype requested_type, const char* expected_sha, git_otype expected_type)
assert_peel	tests/refs/peel.c	/^static void assert_peel($/;"	f	file:	signature:( const char *ref_name, git_otype requested_type, const char* expected_sha, git_otype expected_type)
assert_peel_error	tests/object/peel.c	/^static void assert_peel_error(int error, const char *sha, git_otype requested_type)$/;"	f	file:	signature:(int error, const char *sha, git_otype requested_type)
assert_peel_error	tests/refs/peel.c	/^static void assert_peel_error(int error, const char *ref_name, git_otype requested_type)$/;"	f	file:	signature:(int error, const char *ref_name, git_otype requested_type)
assert_peel_generic	tests/refs/peel.c	/^static void assert_peel_generic($/;"	f	file:	signature:( git_repository *repo, const char *ref_name, git_otype requested_type, const char* expected_sha, git_otype expected_type)
assert_proper_normalization	tests/attr/repo.c	/^static void assert_proper_normalization(git_index *index, const char *filename, const char *expected_sha)$/;"	f	file:	signature:(git_index *index, const char *filename, const char *expected_sha)
assert_recurse_change	tests/submodule/modify.c	/^void assert_recurse_change(git_submodule_recurse_t recurse)$/;"	f	signature:(git_submodule_recurse_t recurse)
assert_ref_exists	tests/network/fetchlocal.c	/^void assert_ref_exists(git_repository *repo, const char *name)$/;"	f	signature:(git_repository *repo, const char *name)
assert_refspec	tests/network/refspecs.c	/^static void assert_refspec(unsigned int direction, const char *input, bool is_expected_to_be_valid)$/;"	f	file:	signature:(unsigned int direction, const char *input, bool is_expected_to_be_valid)
assert_repo_state	tests/repo/state.c	/^static void assert_repo_state(git_repository_state_t state)$/;"	f	file:	signature:(git_repository_state_t state)
assert_reset_soft	tests/reset/soft.c	/^static void assert_reset_soft(bool should_be_detached)$/;"	f	file:	signature:(bool should_be_detached)
assert_resolve_relative	tests/core/path.c	/^static void assert_resolve_relative($/;"	f	file:	signature:( git_buf *buf, const char *expected, const char *path)
assert_retrieval	tests/refs/branches/iterator.c	/^static void assert_retrieval(unsigned int flags, unsigned int expected_count)$/;"	f	file:	signature:(unsigned int flags, unsigned int expected_count)
assert_retrieval	tests/refs/foreachglob.c	/^static void assert_retrieval(const char *glob, int expected_count)$/;"	f	file:	signature:(const char *glob, int expected_count)
assert_shorthand	tests/refs/shorthand.c	/^void assert_shorthand(git_repository *repo, const char *refname, const char *shorthand)$/;"	f	signature:(git_repository *repo, const char *refname, const char *shorthand)
assert_show	tests/status/worktree.c	/^void assert_show($/;"	f	signature:( const int entry_counts, const char *entry_paths[], const unsigned int entry_statuses[], git_repository *repo, git_status_show_t show, unsigned int extra_flags)
assert_signature	tests/refs/reflog/reflog.c	/^static void assert_signature(const git_signature *expected, const git_signature *actual)$/;"	f	file:	signature:(const git_signature *expected, const git_signature *actual)
assert_status	tests/stash/stash_helpers.c	/^void assert_status($/;"	f	signature:( git_repository *repo, const char *path, int status_flags)
assert_submodule_exists	tests/submodule/submodule_helpers.h	16;"	d
assert_submodule_url	tests/submodule/add.c	/^static void assert_submodule_url(const char* name, const char *url)$/;"	f	file:	signature:(const char* name, const char *url)
assert_submodule_url_is_synced	tests/submodule/modify.c	/^static void assert_submodule_url_is_synced($/;"	f	file:	signature:( git_submodule *sm, const char *parent_key, const char *child_key)
assert_tree_from_path	tests/object/tree/frompath.c	/^static void assert_tree_from_path($/;"	f	file:	signature:( git_tree *root, const char *path, const char *expected_entry_name)
assert_unescape	tests/core/buffer.c	/^static void assert_unescape(char *expected, char *to_unescape) {$/;"	f	file:	signature:(char *expected, char *to_unescape)
assert_update_change	tests/submodule/modify.c	/^void assert_update_change(git_submodule_update_t update)$/;"	f	signature:(git_submodule_update_t update)
assert_valid_transform	tests/network/refspecs.c	/^static void assert_valid_transform(const char *refspec, const char *name, const char *result)$/;"	f	file:	signature:(const char *refspec, const char *name, const char *result)
assert_vector	tests/core/vector.c	/^static void assert_vector(git_vector *x, void *expected[], size_t len)$/;"	f	file:	signature:(git_vector *x, void *expected[], size_t len)
assert_workdir_matches_tree	tests/checkout/typechange.c	/^static void assert_workdir_matches_tree($/;"	f	file:	signature:( git_repository *repo, const git_oid *id, const char *root, bool recurse)
assert_zlib_equal	tests/core/zstream.c	42;"	d	file:
assert_zlib_equal_	tests/core/zstream.c	/^static void assert_zlib_equal_($/;"	f	file:	signature:( const void *expected, size_t e_len, const void *compressed, size_t c_len, const char *msg, const char *file, int line)
assigns	src/attr_file.h	/^	git_vector assigns;		\/* vector of <git_attr_assignment*> *\/$/;"	m	struct:__anon167	access:public
asub_tops	deps/regex/regex_internal.h	/^  int asub_tops;$/;"	m	struct:__anon12	access:public
at_least_one_cb	src/repository.c	/^static int at_least_one_cb(const char *refname, void *payload)$/;"	f	file:	signature:(const char *refname, void *payload)
attr	src/tree.h	/^	uint16_t attr;$/;"	m	struct:git_tree_entry	access:public
attr	tests/attr/attr_expect.h	/^	const char *attr;$/;"	m	struct:attr_expected	access:public
attr	tests/object/tree/write.c	/^	unsigned int attr;$/;"	m	struct:__anon374	file:	access:public
attr_cache__free	src/attrcache.c	/^static void attr_cache__free(git_attr_cache *cache)$/;"	f	file:	signature:(git_attr_cache *cache)
attr_cache__lookup_path	src/attrcache.c	/^static int attr_cache__lookup_path($/;"	f	file:	signature:( char **out, git_config *cfg, const char *key, const char *fallback)
attr_cache_lock	src/attrcache.c	/^GIT_INLINE(int) attr_cache_lock(git_attr_cache *cache)$/;"	f	signature:(git_attr_cache *cache)
attr_cache_lookup	src/attrcache.c	/^static int attr_cache_lookup($/;"	f	file:	signature:( git_attr_file **out_file, git_attr_file_entry **out_entry, git_repository *repo, git_attr_session *attr_session, git_attr_file_source source, const char *base, const char *filename)
attr_cache_lookup_entry	src/attrcache.c	/^GIT_INLINE(git_attr_file_entry *) attr_cache_lookup_entry($/;"	f	signature:( git_attr_cache *cache, const char *path)
attr_cache_make_entry	src/attrcache.c	/^static int attr_cache_make_entry($/;"	f	file:	signature:( git_attr_file_entry **out, git_repository *repo, const char *path)
attr_cache_remove	src/attrcache.c	/^static int attr_cache_remove(git_attr_cache *cache, git_attr_file *file)$/;"	f	file:	signature:(git_attr_cache *cache, git_attr_file *file)
attr_cache_unlock	src/attrcache.c	/^GIT_INLINE(void) attr_cache_unlock(git_attr_cache *cache)$/;"	f	signature:(git_attr_cache *cache)
attr_cache_upsert	src/attrcache.c	/^static int attr_cache_upsert(git_attr_cache *cache, git_attr_file *file)$/;"	f	file:	signature:(git_attr_cache *cache, git_attr_file *file)
attr_check_expected	tests/attr/attr_expect.h	/^GIT_INLINE(void) attr_check_expected($/;"	f	signature:( enum attr_expect_t expected, const char *expected_str, const char *name, const char *value)
attr_decide_sources	src/attr.c	/^static int attr_decide_sources($/;"	f	file:	signature:( uint32_t flags, bool has_wd, bool has_index, git_attr_file_source *srcs)
attr_expect_t	tests/attr/attr_expect.h	/^enum attr_expect_t {$/;"	g
attr_expected	tests/attr/attr_expect.h	/^struct attr_expected {$/;"	s
attr_expected::attr	tests/attr/attr_expect.h	/^	const char *attr;$/;"	m	struct:attr_expected	access:public
attr_expected::expected	tests/attr/attr_expect.h	/^	enum attr_expect_t expected;$/;"	m	struct:attr_expected	typeref:enum:attr_expected::attr_expect_t	access:public
attr_expected::expected_str	tests/attr/attr_expect.h	/^	const char *expected_str;$/;"	m	struct:attr_expected	access:public
attr_expected::path	tests/attr/attr_expect.h	/^	const char *path;$/;"	m	struct:attr_expected	access:public
attr_file_free	src/attr_file.c	/^static void attr_file_free(git_attr_file *file)$/;"	f	file:	signature:(git_attr_file *file)
attr_file_oid_from_index	src/attr_file.c	/^static int attr_file_oid_from_index($/;"	f	file:	signature:( git_oid *oid, git_repository *repo, const char *path)
attr_get_many_info	src/attr.c	/^} attr_get_many_info;$/;"	t	typeref:struct:__anon246	file:
attr_session	src/attr.c	/^	git_attr_session *attr_session;$/;"	m	struct:__anon247	file:	access:public
attr_session	src/checkout.c	/^	git_attr_session attr_session;$/;"	m	struct:__anon215	file:	access:public
attr_session	src/filter.h	/^	git_attr_session *attr_session;$/;"	m	struct:__anon260	access:public
attr_session_key	src/repository.h	/^	git_atomic attr_session_key;$/;"	m	struct:git_repository	access:public
attr_setup	src/attr.c	/^static int attr_setup(git_repository *repo, git_attr_session *attr_session)$/;"	f	file:	signature:(git_repository *repo, git_attr_session *attr_session)
attr_walk_up_info	src/attr.c	/^} attr_walk_up_info;$/;"	t	typeref:struct:__anon247	file:
attrcache	src/repository.h	/^	git_attr_cache *attrcache;$/;"	m	struct:git_repository	access:public
attrdata	src/filter.c	/^	char *attrdata;$/;"	m	struct:__anon235	file:	access:public
attribute_hidden	deps/regex/regcomp.c	/^const char __re_error_msgid[] attribute_hidden =$/;"	v
attribute_hidden	deps/regex/regcomp.c	/^const size_t __re_error_msgid_idx[] attribute_hidden =$/;"	v
attribute_hidden	deps/regex/regex_internal.h	/^extern const char __re_error_msgid[] attribute_hidden;$/;"	x
attribute_hidden	deps/regex/regex_internal.h	/^extern const size_t __re_error_msgid_idx[] attribute_hidden;$/;"	x
attribute_hidden	deps/regex/regex_internal.h	165;"	d
attributes	include/git2/sys/filter.h	/^	const char            *attributes;$/;"	m	struct:git_filter	access:public
attrs	src/filter.c	/^	const char *attrs[GIT_FLEX_ARRAY];$/;"	m	struct:__anon235	file:	access:public
attrs	tests/checkout/crlf.c	/^	const char *attrs;$/;"	m	struct:compare_data	file:	access:public
auth_context_match	src/transports/http.c	/^static int auth_context_match($/;"	f	file:	signature:( git_http_auth_context **out, http_subtransport *t, bool (*scheme_match)(git_http_auth_scheme *scheme, void *data), void *data)
auth_contexts	src/transports/http.c	/^	git_vector auth_contexts;$/;"	m	struct:__anon176	file:	access:public
auth_mechanism	src/transports/winhttp.c	/^	int auth_mechanism;$/;"	m	struct:__anon181	file:	access:public
auth_schemes	src/transports/http.c	/^git_http_auth_scheme auth_schemes[] = {$/;"	v
author	examples/log.c	/^	const char *author;$/;"	m	struct:log_options	file:	access:public
author	include/git2/diff.h	/^	const git_signature *author;$/;"	m	struct:__anon100	access:public
author	src/commit.h	/^	git_signature *author;$/;"	m	struct:git_commit	access:public
author	src/notes.h	/^	git_signature *author;$/;"	m	struct:git_note	access:public
auto_crlf	src/crlf.c	/^	int auto_crlf;$/;"	m	struct:crlf_attrs	file:	access:public
autocrlf	tests/checkout/crlf.c	/^	const char *autocrlf;$/;"	m	struct:compare_data	file:	access:public
automergeable	include/git2/merge.h	/^	unsigned int automergeable;$/;"	m	struct:__anon131	access:public
automergeable_id	tests/merge/driver.c	/^static git_oid automergeable_id;$/;"	v	file:
aux_cb_alloc__1	tests/trace/windows/stacktrace.c	/^static void aux_cb_alloc__1(unsigned int *aux_id)$/;"	f	file:	signature:(unsigned int *aux_id)
aux_cb_lookup__1	tests/trace/windows/stacktrace.c	/^static void aux_cb_lookup__1(unsigned int aux_id, char *aux_msg, unsigned int aux_msg_len)$/;"	f	file:	signature:(unsigned int aux_id, char *aux_msg, unsigned int aux_msg_len)
aux_id	src/win32/w32_stack.h	/^	unsigned int aux_id;$/;"	m	struct:__anon284	access:public
avail	src/pool.c	/^	uint32_t avail;$/;"	m	struct:git_pool_page	file:	access:public
avail_in	deps/zlib/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s	access:public
avail_out	deps/zlib/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s	access:public
b	tests/diff/tree.c	/^static git_tree *a, *b;$/;"	v	file:
b	tests/trace/windows/stacktrace.c	/^static void b(void)$/;"	f	file:	signature:(void)
back	deps/zlib/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state	access:public
backend	include/git2/odb_backend.h	/^	git_odb_backend *backend;$/;"	m	struct:git_odb_stream	access:public
backend	include/git2/odb_backend.h	/^	git_odb_backend *backend;$/;"	m	struct:git_odb_writepack	access:public
backend	include/git2/sys/config.h	/^	git_config_backend *backend;$/;"	m	struct:git_config_iterator	access:public
backend	src/odb.c	/^	git_odb_backend *backend;$/;"	m	struct:__anon244	file:	access:public
backend	src/refdb.h	/^	git_refdb_backend *backend;$/;"	m	struct:git_refdb	access:public
backend_free	src/config_file.c	/^static void backend_free(git_config_backend *_backend)$/;"	f	file:	signature:(git_config_backend *_backend)
backend_internal	src/odb.c	/^} backend_internal;$/;"	t	typeref:struct:__anon244	file:
backend_readonly_free	src/config_file.c	/^static void backend_readonly_free(git_config_backend *_backend)$/;"	f	file:	signature:(git_config_backend *_backend)
backend_sort_cmp	src/odb.c	/^static int backend_sort_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
backends	src/odb.h	/^	git_vector backends;$/;"	m	struct:git_odb	access:public
bad_object_sha1	src/pack.h	/^	git_oid *bad_object_sha1; \/* array of git_oid *\/$/;"	m	struct:git_pack_file	access:public
bad_tag_id	tests/object/tag/read.c	/^static const char *bad_tag_id = "eda9f45a2a98d4c17a09d681d88569fa4ea91755";$/;"	v	file:
badly_tagged_commit	tests/object/tag/read.c	/^static const char *badly_tagged_commit = "e90810b8df3e80c413d903f631643c716887138d";$/;"	v	file:
bare	examples/init.c	/^	int bare;$/;"	m	struct:opts	file:	access:public
bare	include/git2/clone.h	/^	int bare;$/;"	m	struct:git_clone_options	access:public
base	src/checkout.c	/^	git_writestream base;$/;"	m	struct:checkout_stream	file:	access:public
base	src/diff_generate.c	/^	struct git_diff base;$/;"	m	struct:__anon296	typeref:struct:__anon296::git_diff	file:	access:public
base	src/diff_parse.h	/^	struct git_diff base;$/;"	m	struct:__anon233	typeref:struct:__anon233::git_diff	access:public
base	src/fileops.c	/^	const char *base;$/;"	m	struct:__anon263	file:	access:public
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon266	file:	access:public
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon269	file:	access:public
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon272	file:	access:public
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon273	file:	access:public
base	src/merge_driver.h	/^	git_merge_driver base;$/;"	m	struct:git_merge_driver__builtin	access:public
base	src/patch_generate.h	/^	struct git_patch base;$/;"	m	struct:git_patch_generated	typeref:struct:git_patch_generated::git_patch	access:public
base	src/patch_parse.c	/^	git_patch base;$/;"	m	struct:__anon163	file:	access:public
base	tests/filter/file.c	/^	git_writestream base;$/;"	m	struct:buf_writestream	file:	access:public
base	tests/merge/driver.c	/^	git_merge_driver base;$/;"	m	struct:test_merge_driver	file:	access:public
base	tests/odb/sorting.c	/^	git_odb_backend base;$/;"	m	struct:__anon363	file:	access:public
base64_decode	src/buffer.c	/^static const int8_t base64_decode[] = {$/;"	v	file:
base64_encode	src/buffer.c	/^static const char base64_encode[] =$/;"	v	file:
base85_decode	src/buffer.c	/^static const int8_t base85_decode[] = {$/;"	v	file:
base85_encode	src/buffer.c	/^static const char base85_encode[] =$/;"	v	file:
base_dist	deps/zlib/trees.c	/^local int base_dist[D_CODES];$/;"	v
base_dist	deps/zlib/trees.h	/^local const int base_dist[D_CODES] = {$/;"	v
base_key	src/pack.h	/^	git_off_t base_key;$/;"	m	struct:pack_chain_elem	access:public
base_length	deps/zlib/trees.c	/^local int base_length[LENGTH_CODES];$/;"	v
base_length	deps/zlib/trees.h	/^local const int base_length[LENGTH_CODES] = {$/;"	v
base_obj	tests/pack/indexer.c	/^static const unsigned char base_obj[] = { 07, 076 };$/;"	v	file:
base_obj_len	tests/pack/indexer.c	/^static const unsigned int base_obj_len = 2;$/;"	v	file:
baselen	src/fileops.c	/^	size_t baselen;$/;"	m	struct:__anon263	file:	access:public
baseline	include/git2/checkout.h	/^	git_tree *baseline;$/;"	m	struct:git_checkout_options	access:public
baseline_index	include/git2/checkout.h	/^	git_index *baseline_index; \/**< expected content of workdir, expressed as an index. *\/$/;"	m	struct:git_checkout_options	access:public
baseline_tests	tests/submodule/lookup.c	/^static void baseline_tests(void)$/;"	f	file:	signature:(void)
basename	src/attr_file.h	/^	char    *basename;$/;"	m	struct:__anon172	access:public
bases	src/pack.h	/^	git_pack_cache bases; \/* delta base cache *\/$/;"	m	struct:git_pack_file	access:public
basic_context	src/transports/auth.c	/^static git_http_auth_context basic_context = {$/;"	v	file:
basic_diff_status	tests/diff/workdir.c	/^static void basic_diff_status(git_diff **out, const git_diff_options *opts)$/;"	f	file:	signature:(git_diff **out, const git_diff_options *opts)
basic_next_token	src/transports/auth.c	/^static int basic_next_token($/;"	f	file:	signature:( git_buf *out, git_http_auth_context *ctx, git_cred *c)
basic_payload	tests/diff/racediffiter.c	/^	basic_payload *basic_payload;$/;"	m	struct:__anon368	file:	access:public
basic_payload	tests/diff/racediffiter.c	/^} basic_payload;$/;"	t	typeref:struct:__anon367	file:
bdiffparam_t	src/xdiff/xdiff.h	/^} bdiffparam_t;$/;"	t	typeref:struct:s_bdiffparam
before	examples/log.c	/^	git_time_t before;$/;"	m	struct:log_options	file:	access:public
begin1	src/xdiff/xhistogram.c	/^	unsigned int begin1, end1;$/;"	m	struct:region	file:	access:public
begin2	src/xdiff/xhistogram.c	/^	unsigned int begin2, end2;$/;"	m	struct:region	file:	access:public
bi_buf	deps/zlib/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state	access:public
bi_flush	deps/zlib/trees.c	/^local void bi_flush(s)$/;"	f
bi_reverse	deps/zlib/trees.c	/^local unsigned bi_reverse(code, len)$/;"	f
bi_valid	deps/zlib/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state	access:public
bi_windup	deps/zlib/trees.c	/^local void bi_windup(s)$/;"	f
big_file_threshold	src/pack-objects.h	/^	size_t big_file_threshold;$/;"	m	struct:git_packbuilder	access:public
bin_tree_storage_t	deps/regex/regex_internal.h	/^struct bin_tree_storage_t$/;"	s
bin_tree_storage_t	deps/regex/regex_internal.h	/^typedef struct bin_tree_storage_t bin_tree_storage_t;$/;"	t	typeref:struct:bin_tree_storage_t
bin_tree_storage_t::data	deps/regex/regex_internal.h	/^  bin_tree_t data[BIN_TREE_STORAGE_SIZE];$/;"	m	struct:bin_tree_storage_t	access:public
bin_tree_storage_t::next	deps/regex/regex_internal.h	/^  struct bin_tree_storage_t *next;$/;"	m	struct:bin_tree_storage_t	typeref:struct:bin_tree_storage_t::bin_tree_storage_t	access:public
bin_tree_t	deps/regex/regex_internal.h	/^struct bin_tree_t$/;"	s
bin_tree_t	deps/regex/regex_internal.h	/^typedef struct bin_tree_t bin_tree_t;$/;"	t	typeref:struct:bin_tree_t
bin_tree_t::first	deps/regex/regex_internal.h	/^  struct bin_tree_t *first;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::left	deps/regex/regex_internal.h	/^  struct bin_tree_t *left;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::next	deps/regex/regex_internal.h	/^  struct bin_tree_t *next;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::node_idx	deps/regex/regex_internal.h	/^  int node_idx;$/;"	m	struct:bin_tree_t	access:public
bin_tree_t::parent	deps/regex/regex_internal.h	/^  struct bin_tree_t *parent;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::right	deps/regex/regex_internal.h	/^  struct bin_tree_t *right;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::token	deps/regex/regex_internal.h	/^  re_token_t token;$/;"	m	struct:bin_tree_t	access:public
binary	src/checkout.c	/^		binary:1,$/;"	m	struct:__anon216	file:	access:public
binary	src/patch.h	/^	git_diff_binary binary;$/;"	m	struct:git_patch	access:public
binary_cb	src/patch_generate.h	/^	git_diff_binary_cb binary_cb;$/;"	m	struct:git_patch_generated_output	access:public
binary_cb	tests/diff/binary.c	/^static int binary_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_binary *binary, void *payload)
binary_flags	src/diff_driver.c	/^	uint32_t binary_flags;$/;"	m	struct:git_diff_driver	file:	access:public
binary_opts	tests/apply/fromdiff.c	/^static git_diff_options binary_opts = GIT_DIFF_OPTIONS_INIT;$/;"	v	file:
binary_search	src/xdiff/xpatience.c	/^static int binary_search(struct entry **sequence, int longest,$/;"	f	file:	signature:(struct entry **sequence, int longest, struct entry *entry)
binsearch	src/tsort.c	/^static int binsearch($/;"	f	file:	signature:( void **dst, const void *x, size_t size, git__sort_r_cmp cmp, void *payload)
bio_create	src/openssl_stream.c	/^static int bio_create(BIO *b)$/;"	f	file:	signature:(BIO *b)
bio_ctrl	src/openssl_stream.c	/^static long bio_ctrl(BIO *b, int cmd, long num, void *ptr)$/;"	f	file:	signature:(BIO *b, int cmd, long num, void *ptr)
bio_destroy	src/openssl_stream.c	/^static int bio_destroy(BIO *b)$/;"	f	file:	signature:(BIO *b)
bio_gets	src/openssl_stream.c	/^static int bio_gets(BIO *b, char *buf, int len)$/;"	f	file:	signature:(BIO *b, char *buf, int len)
bio_puts	src/openssl_stream.c	/^static int bio_puts(BIO *b, const char *str)$/;"	f	file:	signature:(BIO *b, const char *str)
bio_read	src/openssl_stream.c	/^static int bio_read(BIO *b, char *buf, int len)$/;"	f	file:	signature:(BIO *b, char *buf, int len)
bio_write	src/openssl_stream.c	/^static int bio_write(BIO *b, const char *buf, int len)$/;"	f	file:	signature:(BIO *b, const char *buf, int len)
bisort	src/tsort.c	/^static void bisort($/;"	f	file:	signature:( void **dst, size_t start, size_t size, git__sort_r_cmp cmp, void *payload)
bitflip_filter_apply	tests/filter/custom_helpers.c	/^int bitflip_filter_apply($/;"	f	signature:( git_filter *self, void **payload, git_buf *to, const git_buf *from, const git_filter_source *source)
bitflip_filter_free	tests/filter/custom_helpers.c	/^static void bitflip_filter_free(git_filter *f)$/;"	f	file:	signature:(git_filter *f)
bitflipped_and_reversed_data	tests/filter/custom.c	/^static unsigned char bitflipped_and_reversed_data[] =$/;"	v	file:
bits	deps/zlib/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state	access:public
bits	deps/zlib/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon31	access:public
bits	src/bitvec.h	/^		uint64_t bits;$/;"	m	union:__anon205::__anon206	access:public
bits_sent	deps/zlib/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state	access:public
bitset_clear	deps/regex/regex_internal.h	193;"	d
bitset_contain	deps/regex/regex_internal.h	195;"	d
bitset_copy	deps/regex/regex_internal.h	199;"	d
bitset_empty	deps/regex/regex_internal.h	197;"	d
bitset_mask	deps/regex/regex_internal.h	/^bitset_mask (bitset_t dest, const bitset_t src)$/;"	f	signature:(bitset_t dest, const bitset_t src)
bitset_merge	deps/regex/regex_internal.h	/^bitset_merge (bitset_t dest, const bitset_t src)$/;"	f	signature:(bitset_t dest, const bitset_t src)
bitset_not	deps/regex/regex_internal.h	/^bitset_not (bitset_t set)$/;"	f	signature:(bitset_t set)
bitset_set	deps/regex/regex_internal.h	191;"	d
bitset_set_all	deps/regex/regex_internal.h	198;"	d
bitset_t	deps/regex/regex_internal.h	/^typedef bitset_word_t bitset_t[BITSET_WORDS];$/;"	t
bitset_word_t	deps/regex/regex_internal.h	/^typedef unsigned long int bitset_word_t;$/;"	t
bitsizeof	src/util.h	48;"	d
bkref_ents	deps/regex/regex_internal.h	/^  struct re_backref_cache_entry *bkref_ents;$/;"	m	struct:__anon12	typeref:struct:__anon12::re_backref_cache_entry	access:public
bl_count	deps/zlib/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state	access:public
bl_desc	deps/zlib/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
bl_order	deps/zlib/trees.c	/^local const uch bl_order[BL_CODES]$/;"	v
bl_tree	deps/zlib/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
blame	include/git2/blame.h	/^GIT_EXTERN(uint32_t) git_blame_get_hunk_count(git_blame *blame);$/;"	v
blame	include/git2/blame.h	/^GIT_EXTERN(void) git_blame_free(git_blame *blame);$/;"	v
blame	src/blame_git.c	/^	git_blame *blame;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
blame_chunk	src/blame_git.c	/^static void blame_chunk($/;"	f	file:	signature:( git_blame *blame, size_t tlno, size_t plno, size_t same, git_blame__origin *target, git_blame__origin *parent)
blame_chunk_cb_data	src/blame_git.c	/^typedef struct blame_chunk_cb_data {$/;"	s	file:
blame_chunk_cb_data	src/blame_git.c	/^}blame_chunk_cb_data;$/;"	t	typeref:struct:blame_chunk_cb_data	file:
blame_chunk_cb_data::blame	src/blame_git.c	/^	git_blame *blame;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
blame_chunk_cb_data::parent	src/blame_git.c	/^	git_blame__origin *parent;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
blame_chunk_cb_data::plno	src/blame_git.c	/^	long plno;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
blame_chunk_cb_data::target	src/blame_git.c	/^	git_blame__origin *target;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
blame_chunk_cb_data::tlno	src/blame_git.c	/^	long tlno;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
blame_internal	src/blame.c	/^static int blame_internal(git_blame *blame)$/;"	f	file:	signature:(git_blame *blame)
blame_overlap	src/blame_git.c	/^static void blame_overlap($/;"	f	file:	signature:( git_blame *blame, git_blame__entry *e, size_t tlno, size_t plno, size_t same, git_blame__origin *parent)
bld	include/git2/tree.h	/^GIT_EXTERN(unsigned int) git_treebuilder_entrycount(git_treebuilder *bld);$/;"	v
bld	include/git2/tree.h	/^GIT_EXTERN(void) git_treebuilder_clear(git_treebuilder *bld);$/;"	v
bld	include/git2/tree.h	/^GIT_EXTERN(void) git_treebuilder_free(git_treebuilder *bld);$/;"	v
bld	src/tree.c	/^	git_treebuilder *bld;$/;"	m	struct:__anon159	file:	access:public
blen	tests/odb/loose_data.h	/^    size_t        blen;    \/* length of data in object store            *\/$/;"	m	struct:object_data	access:public
blob	include/git2/blob.h	/^GIT_EXTERN(const git_oid *) git_blob_id(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(const void *) git_blob_rawcontent(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(git_off_t) git_blob_rawsize(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(git_repository *) git_blob_owner(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(int) git_blob_is_binary(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(void) git_blob_free(git_blob *blob);$/;"	v
blob	src/blame.h	/^	git_blob *blob;$/;"	m	struct:git_blame__origin	access:public
blob	src/diff_file.h	/^	const git_blob *blob;$/;"	m	struct:__anon277	access:public
blob	src/diff_file.h	/^	const git_blob *blob;$/;"	m	struct:__anon278	access:public
blob	src/diff_tform.c	/^	git_blob *blob;$/;"	m	struct:__anon156	file:	access:public
blob_content_to_file	src/checkout.c	/^static int blob_content_to_file($/;"	f	file:	signature:( checkout_data *data, struct stat *st, git_blob *blob, const char *path, const char *hint_path, mode_t entry_filemode)
blob_content_to_link	src/checkout.c	/^static int blob_content_to_link($/;"	f	file:	signature:( checkout_data *data, struct stat *st, git_blob *blob, const char *path)
blob_creator_fn	tests/object/blob/write.c	/^typedef int (*blob_creator_fn)($/;"	t	file:
blob_oid	tests/object/tree/attributes.c	/^static const char *blob_oid = "3d0970ec547fc41ef8a5882dde99c6adce65b021";$/;"	v	file:
blob_oid	tests/object/tree/write.c	/^static const char *blob_oid = "fa49b077972391ad58037050f2a75f74e3671e92";$/;"	v	file:
blob_parsing	examples/general.c	/^static void blob_parsing(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
blob_writestream	src/blob.c	/^} blob_writestream;$/;"	t	typeref:struct:__anon279	file:
blob_writestream_close	src/blob.c	/^static int blob_writestream_close(git_writestream *_stream)$/;"	f	file:	signature:(git_writestream *_stream)
blob_writestream_free	src/blob.c	/^static void blob_writestream_free(git_writestream *_stream)$/;"	f	file:	signature:(git_writestream *_stream)
blob_writestream_write	src/blob.c	/^static int blob_writestream_write(git_writestream *_stream, const char *buffer, size_t len)$/;"	f	file:	signature:(git_writestream *_stream, const char *buffer, size_t len)
block_done	deps/zlib/deflate.c	/^    block_done,     \/* block flush performed *\/$/;"	e	enum:__anon27	file:
block_start	deps/zlib/deflate.h	/^    long block_start;$/;"	m	struct:internal_state	access:public
block_state	deps/zlib/deflate.c	/^} block_state;$/;"	t	typeref:enum:__anon27	file:
body	include/git2/diff.h	/^	const char *body;$/;"	m	struct:__anon100	access:public
body	src/commit.h	/^	char *body;$/;"	m	struct:git_commit	access:public
bom	src/buf_text.h	/^	git_bom_t bom; \/* BOM found at head of text *\/$/;"	m	struct:__anon342	access:public
bool	deps/regex/regex.c	72;"	d	file:
bool	src/cc-compat.h	/^	typedef unsigned char bool;$/;"	t
boundary	include/git2/blame.h	/^	char boundary;$/;"	m	struct:git_blame_hunk	access:public
br2_name	tests/refs/settargetwithlog.c	/^static const char *br2_name = "refs\/heads\/br2";$/;"	v	file:
br2_tip	tests/refs/settargetwithlog.c	/^static const char *br2_tip = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
bracket_elem_t	deps/regex/regex_internal.h	/^} bracket_elem_t;$/;"	t	typeref:struct:__anon15
bracket_elem_type	deps/regex/regex_internal.h	/^} bracket_elem_type;$/;"	t	typeref:enum:__anon14
branch	include/git2/branch.h	/^	const git_reference *branch);$/;"	v
branch	include/git2/branch.h	/^GIT_EXTERN(int) git_branch_delete(git_reference *branch);$/;"	v
branch	src/submodule.h	/^	char *branch;$/;"	m	struct:git_submodule	access:public
branch	tests/commit/write.c	/^static git_reference *head, *branch;$/;"	v	file:
branch	tests/refs/branches/create.c	/^static git_reference *branch;$/;"	v	file:
branch	tests/refs/branches/ishead.c	/^static git_reference *branch;$/;"	v	file:
branch	tests/refs/branches/lookup.c	/^static git_reference *branch;$/;"	v	file:
branch	tests/refs/branches/upstream.c	/^static git_reference *branch, *upstream;$/;"	v	file:
branch_iter	src/branch.c	/^} branch_iter;$/;"	t	typeref:struct:__anon308	file:
branch_name	tests/refs/branches/iterator.c	/^	const char *branch_name;$/;"	m	struct:expectations	file:	access:public
break_rewrite_threshold	include/git2/diff.h	/^	uint16_t break_rewrite_threshold;$/;"	m	struct:__anon96	access:public
bsize	src/xdiff/xdiff.h	/^	long bsize;$/;"	m	struct:s_bdiffparam	access:public
btowc	deps/regex/regcomp.c	/^btowc (int c)$/;"	f	signature:(int c)
buf	include/git2/buffer.h	/^GIT_EXTERN(int) git_buf_contains_nul(const git_buf *buf);$/;"	v
buf	include/git2/buffer.h	/^GIT_EXTERN(int) git_buf_is_binary(const git_buf *buf);$/;"	v
buf	src/config_file.c	/^	git_buf *buf;$/;"	m	struct:write_data	file:	access:public
buf	src/diff_file.h	/^	const void *buf;$/;"	m	struct:__anon278	access:public
buf	src/diff_print.c	/^	git_buf *buf;$/;"	m	struct:__anon236	file:	access:public
buf	src/pack-objects.c	/^	git_buf buf;$/;"	m	struct:tree_walk_context	file:	access:public
buf	src/path.h	/^	git_buf buf;$/;"	m	struct:__anon313	access:public
buf	src/sysdir.c	/^	git_buf buf;$/;"	m	struct:git_sysdir__dir	file:	access:public
buf	src/xdiff/xemit.c	/^	char buf[80];$/;"	m	struct:func_line	file:	access:public
buf	tests/config/read.c	/^static git_buf buf = GIT_BUF_INIT;$/;"	v	file:
buf	tests/config/stress.c	/^static git_buf buf = GIT_BUF_INIT;$/;"	v	file:
buf	tests/filter/file.c	/^	git_buf buf;$/;"	m	struct:buf_writestream	file:	access:public
buf_from_blob	src/filter.c	/^static int buf_from_blob(git_buf *out, git_blob *blob)$/;"	f	file:	signature:(git_buf *out, git_blob *blob)
buf_pos	src/filebuf.h	/^	size_t buf_size, buf_pos;$/;"	m	struct:git_filebuf	access:public
buf_size	src/filebuf.h	/^	size_t buf_size, buf_pos;$/;"	m	struct:git_filebuf	access:public
buf_size	src/transports/http.c	/^	size_t buf_size;$/;"	m	struct:__anon177	file:	access:public
buf_stream	src/filter.c	/^struct buf_stream {$/;"	s	file:
buf_stream::complete	src/filter.c	/^	bool complete;$/;"	m	struct:buf_stream	file:	access:public
buf_stream::parent	src/filter.c	/^	git_writestream parent;$/;"	m	struct:buf_stream	file:	access:public
buf_stream::target	src/filter.c	/^	git_buf *target;$/;"	m	struct:buf_stream	file:	access:public
buf_stream_close	src/filter.c	/^static int buf_stream_close(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
buf_stream_free	src/filter.c	/^static void buf_stream_free(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
buf_stream_init	src/filter.c	/^static void buf_stream_init(struct buf_stream *writer, git_buf *target)$/;"	f	file:	signature:(struct buf_stream *writer, git_buf *target)
buf_stream_write	src/filter.c	/^static int buf_stream_write($/;"	f	file:	signature:( git_writestream *s, const char *buffer, size_t len)
buf_writestream	tests/filter/file.c	/^struct buf_writestream {$/;"	s	file:
buf_writestream::base	tests/filter/file.c	/^	git_writestream base;$/;"	m	struct:buf_writestream	file:	access:public
buf_writestream::buf	tests/filter/file.c	/^	git_buf buf;$/;"	m	struct:buf_writestream	file:	access:public
buf_writestream_close	tests/filter/file.c	/^int buf_writestream_close(git_writestream *s)$/;"	f	signature:(git_writestream *s)
buf_writestream_free	tests/filter/file.c	/^void buf_writestream_free(git_writestream *s)$/;"	f	signature:(git_writestream *s)
buf_writestream_write	tests/filter/file.c	/^int buf_writestream_write(git_writestream *s, const char *buf, size_t len)$/;"	f	signature:(git_writestream *s, const char *buf, size_t len)
buferr_t	src/filebuf.c	/^enum buferr_t {$/;"	g	file:
buffer	include/git2/buffer.h	/^GIT_EXTERN(void) git_buf_free(git_buf *buffer);$/;"	v
buffer	src/config_file.c	/^	git_buf buffer;$/;"	m	struct:reader	file:	access:public
buffer	src/filebuf.h	/^	unsigned char *buffer;$/;"	m	struct:git_filebuf	access:public
buffer	src/odb.c	/^	char *buffer;$/;"	m	struct:__anon245	file:	access:public
buffer	src/odb.h	/^	void *buffer;$/;"	m	struct:git_odb_object	access:public
buffer	src/transports/http.c	/^	char *buffer;$/;"	m	struct:__anon177	file:	access:public
buffer	src/transports/smart.h	/^	gitno_buffer buffer;$/;"	m	struct:__anon193	access:public
buffer_data	src/transports/smart.h	/^	char buffer_data[65536];$/;"	m	struct:__anon193	access:public
buffer_hunk_cb	src/blame.c	/^static int buffer_hunk_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, void *payload)
buffer_line_cb	src/blame.c	/^static int buffer_line_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
buffer_signature	include/git2/diff.h	/^	int (*buffer_signature)($/;"	m	struct:__anon95	access:public
buffer_want_with_caps	src/transports/smart_pkt.c	/^static int buffer_want_with_caps(const git_remote_head *head, transport_smart_caps *caps, git_buf *buf)$/;"	f	file:	signature:(const git_remote_head *head, transport_smart_caps *caps, git_buf *buf)
buffered_comment	src/config_file.c	/^	git_buf buffered_comment;$/;"	m	struct:write_data	file:	access:public
buflen	src/diff_file.h	/^	size_t buflen;$/;"	m	struct:__anon278	access:public
bufs_len	deps/regex/regex_internal.h	/^  int bufs_len;$/;"	m	struct:re_string_t	access:public
build_bl_tree	deps/zlib/trees.c	/^local int build_bl_tree(s)$/;"	f
build_charclass	deps/regex/regcomp.c	/^build_charclass (RE_TRANSLATE_TYPE trans, bitset_t sbcset,$/;"	f	file:	signature:(RE_TRANSLATE_TYPE trans, bitset_t sbcset, re_charset_t *mbcset, int *char_class_alloc, const char *class_name, reg_syntax_t syntax)
build_charclass_op	deps/regex/regcomp.c	/^build_charclass_op (re_dfa_t *dfa, RE_TRANSLATE_TYPE trans,$/;"	f	file:	signature:(re_dfa_t *dfa, RE_TRANSLATE_TYPE trans, const char *class_name, const char *extra, int non_match, reg_errcode_t *err)
build_collating_symbol	deps/regex/regcomp.c	/^build_collating_symbol (bitset_t sbcset, re_charset_t *mbcset,$/;"	f	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *coll_sym_alloc, const unsigned char *name)
build_equiv_class	deps/regex/regcomp.c	/^build_equiv_class (bitset_t sbcset, re_charset_t *mbcset,$/;"	f	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *equiv_class_alloc, const unsigned char *name)
build_fake_backend	tests/odb/backend/nonrefreshing.c	/^static int build_fake_backend($/;"	f	file:	signature:( git_odb_backend **out, git_error_code error_code)
build_range_exp	deps/regex/regcomp.c	/^build_range_exp (bitset_t sbcset, re_charset_t *mbcset, int *range_alloc,$/;"	f	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *range_alloc, bracket_elem_t *start_elem, bracket_elem_t *end_elem)
build_regex	src/revparse.c	/^static int build_regex(regex_t *regex, const char *pattern)$/;"	f	file:	signature:(regex_t *regex, const char *pattern)
build_sandbox_path	tests/clar/sandbox.h	/^static int build_sandbox_path(void)$/;"	f	signature:(void)
build_sifted_states	deps/regex/regexec.c	/^build_sifted_states (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int str_idx, re_node_set *cur_dest)
build_test_tree	tests/iterator/tree.c	/^static void build_test_tree($/;"	f	file:	signature:( git_oid *out, git_repository *repo, const char *fmt, ...)
build_tree	deps/zlib/trees.c	/^local void build_tree(s, desc)$/;"	f
build_tree_from_index	src/stash.c	/^static int build_tree_from_index(git_tree **out, git_index *index)$/;"	f	file:	signature:(git_tree **out, git_index *index)
build_trtable	deps/regex/regexec.c	/^build_trtable (const re_dfa_t *dfa, re_dfastate_t *state)$/;"	f	file:	signature:(const re_dfa_t *dfa, re_dfastate_t *state)
build_untracked_tree	src/stash.c	/^static int build_untracked_tree($/;"	f	file:	signature:( git_tree **tree_out, git_index *index, git_commit *i_commit, uint32_t flags)
build_upper_buffer	deps/regex/regex_internal.c	/^build_upper_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
build_wcs_buffer	deps/regex/regex_internal.c	/^build_wcs_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
build_wcs_upper_buffer	deps/regex/regex_internal.c	/^build_wcs_upper_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
build_workdir_tree	src/stash.c	/^static int build_workdir_tree($/;"	f	file:	signature:( git_tree **tree_out, git_index *index, git_commit *b_commit)
build_workdir_tree	tests/iterator/workdir.c	/^static void build_workdir_tree(const char *root, int dirs, int subs)$/;"	f	file:	signature:(const char *root, int dirs, int subs)
builtin_defs	src/userdiff.h	/^static git_diff_driver_definition builtin_defs[] = {$/;"	v
bye_id	tests/object/raw/hash.c	/^static char *bye_id = "ce08fe4884650f067bd5703b6a59a8b3b3c99a09";$/;"	v	file:
bye_text	tests/object/raw/hash.c	/^static char *bye_text = "bye world\\n";$/;"	v	file:
bytes	tests/odb/loose_data.h	/^    unsigned char *bytes;  \/* (compressed) bytes stored in object store *\/$/;"	m	struct:object_data	access:public
bytes_read	src/transports/http.c	/^	size_t *bytes_read;$/;"	m	struct:__anon177	file:	access:public
c	deps/regex/regex_internal.h	/^    unsigned char c;		\/* for CHARACTER *\/$/;"	m	union:__anon7::__anon8	access:public
c	src/hash/hash_common_crypto.h	/^	CC_SHA1_CTX c;$/;"	m	struct:git_hash_ctx	access:public
c	src/hash/hash_openssl.h	/^	SHA_CTX c;$/;"	m	struct:git_hash_ctx	access:public
c	tests/trace/windows/stacktrace.c	/^static void c(void)$/;"	f	file:	signature:(void)
cache	examples/diff.c	/^	int cache;$/;"	m	struct:opts	file:	access:public
cache	src/refdb_fs.c	/^	git_sortedcache *cache;$/;"	m	struct:__anon204	file:	access:public
cache_add	src/pack.c	/^static int cache_add($/;"	f	file:	signature:( git_pack_cache_entry **cached_out, git_pack_cache *cache, git_rawobj *base, git_off_t offset)
cache_data	src/attr_file.h	/^	} cache_data;$/;"	m	struct:__anon170	typeref:union:__anon170::__anon171	access:public
cache_evict_entries	src/cache.c	/^static void cache_evict_entries(git_cache *cache)$/;"	f	file:	signature:(git_cache *cache)
cache_free	src/pack.c	/^static void cache_free(git_pack_cache *cache)$/;"	f	file:	signature:(git_pack_cache *cache)
cache_get	src/cache.c	/^static void *cache_get(git_cache *cache, const git_oid *oid, unsigned int flags)$/;"	f	file:	signature:(git_cache *cache, const git_oid *oid, unsigned int flags)
cache_get	src/pack.c	/^static git_pack_cache_entry *cache_get(git_pack_cache *cache, git_off_t offset)$/;"	f	file:	signature:(git_pack_cache *cache, git_off_t offset)
cache_init	src/pack.c	/^static int cache_init(git_pack_cache *cache)$/;"	f	file:	signature:(git_pack_cache *cache)
cache_max_small_delta_size	src/pack-objects.h	/^	size_t cache_max_small_delta_size;$/;"	m	struct:git_packbuilder	access:public
cache_mutex	src/pack-objects.h	/^	git_mutex cache_mutex;$/;"	m	struct:git_packbuilder	access:public
cache_parsed	tests/object/cache.c	/^static void *cache_parsed(void *arg)$/;"	f	file:	signature:(void *arg)
cache_quick	tests/object/cache.c	/^static void *cache_quick(void *arg)$/;"	f	file:	signature:(void *arg)
cache_raw	tests/object/cache.c	/^static void *cache_raw(void *arg)$/;"	f	file:	signature:(void *arg)
cache_should_store	src/cache.c	/^static bool cache_should_store(git_otype object_type, size_t object_size)$/;"	f	file:	signature:(git_otype object_type, size_t object_size)
cache_store	src/cache.c	/^static void *cache_store(git_cache *cache, git_cached_obj *entry)$/;"	f	file:	signature:(git_cache *cache, git_cached_obj *entry)
cached	src/object.h	/^	git_cached_obj cached;$/;"	m	struct:git_object	access:public
cached	src/odb.h	/^	git_cached_obj cached;$/;"	m	struct:git_odb_object	access:public
calc_eclosure	deps/regex/regcomp.c	/^calc_eclosure (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
calc_eclosure_iter	deps/regex/regcomp.c	/^calc_eclosure_iter (re_node_set *new_set, re_dfa_t *dfa, int node, int root)$/;"	f	file:	signature:(re_node_set *new_set, re_dfa_t *dfa, int node, int root)
calc_first	deps/regex/regcomp.c	/^calc_first (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
calc_inveclosure	deps/regex/regcomp.c	/^calc_inveclosure (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
calc_next	deps/regex/regcomp.c	/^calc_next (UNUSED void *extra, bin_tree_t *node)$/;"	f	file:	signature:(UNUSED void *extra, bin_tree_t *node)
calc_self_similarity	src/diff_tform.c	/^static int calc_self_similarity($/;"	f	file:	signature:( git_diff *diff, const git_diff_find_options *opts, size_t delta_idx, void **cache)
calc_state_hash	deps/regex/regex_internal.c	/^calc_state_hash (const re_node_set *nodes, unsigned int context)$/;"	f	file:	signature:(const re_node_set *nodes, unsigned int context)
calculate_work	src/push.c	/^static int calculate_work(git_push *push)$/;"	f	file:	signature:(git_push *push)
callback	include/git2/sys/transport.h	/^	git_smart_subtransport_cb callback;$/;"	m	struct:git_smart_subtransport_definition	access:public
callback	src/diff_xdiff.h	/^	xdemitcb_t   callback;$/;"	m	struct:__anon251	access:public
callback	src/trace.h	/^	git_trace_callback callback;$/;"	m	struct:git_trace_data	access:public
callback	src/transports/smart_protocol.c	/^	git_transfer_progress_cb callback;$/;"	m	struct:network_packetsize_payload	file:	access:public
callback_cb	tests/stash/foreach.c	/^static int callback_cb($/;"	f	file:	signature:( size_t index, const char* message, const git_oid *stash_oid, void *payload)
callback_count	tests/generate.py	/^    def callback_count(self):$/;"	m	class:TestSuite	access:public
callback_data	tests/stash/foreach.c	/^struct callback_data$/;"	s	file:
callback_data::invokes	tests/stash/foreach.c	/^	int invokes;$/;"	m	struct:callback_data	file:	access:public
callback_data::oids	tests/stash/foreach.c	/^	char **oids;$/;"	m	struct:callback_data	file:	access:public
callbacks	include/git2/remote.h	/^	git_remote_callbacks callbacks;$/;"	m	struct:__anon55	access:public
callbacks	include/git2/remote.h	/^	git_remote_callbacks callbacks;$/;"	m	struct:__anon56	access:public
called_proxy_creds	tests/online/clone.c	/^static int called_proxy_creds;$/;"	v	file:
can_link	src/clone.c	/^static bool can_link(const char *src, const char *dst, int link)$/;"	f	file:	signature:(const char *src, const char *dst, int link)
can_symlink	src/checkout.c	/^	int can_symlink;$/;"	m	struct:__anon215	file:	access:public
cancel	include/git2/sys/transport.h	/^	void (*cancel)(git_transport *transport);$/;"	m	struct:git_transport	access:public
cancel_after	tests/core/path.c	/^	int cancel_after;$/;"	m	struct:__anon356	file:	access:public
cancel_at_half	tests/online/clone.c	/^static int cancel_at_half(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
cancel_at_half	tests/online/fetch.c	/^static int cancel_at_half(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
cancel_iteration	tests/attr/repo.c	/^static int cancel_iteration($/;"	f	file:	signature:( const char *name, const char *value, void *payload)
cancelled	src/transports/local.c	/^	git_atomic cancelled;$/;"	m	struct:__anon178	file:	access:public
cancelled	src/transports/smart.h	/^	git_atomic cancelled;$/;"	m	struct:__anon193	access:public
canonicalize_directory_path	src/index.c	/^static int canonicalize_directory_path($/;"	f	file:	signature:( git_index *index, git_index_entry *entry, git_index_entry *existing)
canonicalize_url	src/remote.c	/^static int canonicalize_url(git_buf *out, const char *in)$/;"	f	file:	signature:(git_buf *out, const char *in)
capabilities	src/transports/smart.h	/^	char *capabilities;$/;"	m	struct:__anon185	access:public
caps	src/transports/smart.h	/^	transport_smart_caps caps;$/;"	m	struct:__anon193	access:public
case_paths	tests/status/worktree.c	/^static const char *case_paths[] = { "B", "H", "c", "g" };$/;"	v	file:
case_statuses	tests/status/worktree.c	/^static unsigned int case_statuses[] = {$/;"	v	file:
cb	src/index.c	/^	git_index_matched_path_cb cb;$/;"	m	struct:foreach_diff_data	file:	access:public
cb	src/iterator.c	/^	git_iterator_callbacks cb;$/;"	m	struct:__anon266	file:	access:public
cb	src/iterator.h	/^	git_iterator_callbacks *cb;$/;"	m	struct:git_iterator	access:public
cb	src/odb_loose.c	/^	git_odb_foreach_cb cb;$/;"	m	struct:foreach_state	file:	access:public
cb	src/tag.c	/^	git_tag_foreach_cb cb;$/;"	m	struct:__anon248	file:	access:public
cb	src/transports/smart_protocol.c	/^	git_push_transfer_progress cb;$/;"	m	struct:push_packbuilder_payload	file:	access:public
cb	tests/config/multivar.c	/^static int cb(const git_config_entry *entry, void *data)$/;"	f	file:	signature:(const git_config_entry *entry, void *data)
cbSize	deps/winhttp/winhttp.h	/^    DWORD cbSize;$/;"	m	struct:__anon26	access:public
cb__free_status	src/global.c	/^static void cb__free_status(void *st)$/;"	f	file:	signature:(void *st)
cb__reflist_add	src/refs.c	/^static int cb__reflist_add(const char *ref, void *data)$/;"	f	file:	signature:(const char *ref, void *data)
cb_data	src/netops.h	/^	void *cb_data;$/;"	m	struct:gitno_buffer	access:public
cb_data	src/tag.c	/^	void *cb_data;$/;"	m	struct:__anon248	file:	access:public
cb_payload	src/transports/smart_protocol.c	/^	void *cb_payload;$/;"	m	struct:push_packbuilder_payload	file:	access:public
cb_status__check_592	tests/status/worktree.c	/^static int cb_status__check_592(const char *p, unsigned int s, void *payload)$/;"	f	file:	signature:(const char *p, unsigned int s, void *payload)
cb_status__count	tests/status/status_helpers.c	/^int cb_status__count(const char *p, unsigned int s, void *payload)$/;"	f	signature:(const char *p, unsigned int s, void *payload)
cb_status__expected_path	tests/status/worktree_init.c	/^static int cb_status__expected_path(const char *p, unsigned int s, void *payload)$/;"	f	file:	signature:(const char *p, unsigned int s, void *payload)
cb_status__interrupt	tests/status/worktree.c	/^static int cb_status__interrupt(const char *p, unsigned int s, void *payload)$/;"	f	file:	signature:(const char *p, unsigned int s, void *payload)
cb_status__match	tests/status/submodules.c	/^static int cb_status__match(const char *p, unsigned int s, void *payload)$/;"	f	file:	signature:(const char *p, unsigned int s, void *payload)
cb_status__normal	tests/status/status_helpers.c	/^int cb_status__normal($/;"	f	signature:( const char *path, unsigned int status_flags, void *payload)
cb_status__print	tests/status/status_helpers.c	/^int cb_status__print($/;"	f	signature:( const char *path, unsigned int status_flags, void *payload)
cb_status__single	tests/status/status_helpers.c	/^int cb_status__single(const char *p, unsigned int s, void *payload)$/;"	f	signature:(const char *p, unsigned int s, void *payload)
cb_tag_foreach	src/pack-objects.c	/^static int cb_tag_foreach(const char *name, git_oid *oid, void *data)$/;"	f	file:	signature:(const char *name, git_oid *oid, void *data)
cb_tree_walk	src/pack-objects.c	/^static int cb_tree_walk($/;"	f	file:	signature:( const char *root, const git_tree_entry *entry, void *payload)
ceiling_dirs	tests/repo/discover.c	/^static git_buf ceiling_dirs;$/;"	v	file:
cert_check_assert_invalid	tests/online/badssl.c	/^static int cert_check_assert_invalid(git_cert *cert, int valid, const char* host, void *payload)$/;"	f	file:	signature:(git_cert *cert, int valid, const char* host, void *payload)
cert_info	src/curl_stream.c	/^	git_cert_x509 cert_info;$/;"	m	struct:__anon232	file:	access:public
cert_info	src/openssl_stream.c	/^	git_cert_x509 cert_info;$/;"	m	struct:__anon276	file:	access:public
cert_info	src/stransport_stream.c	/^	git_cert_x509 cert_info;$/;"	m	struct:__anon298	file:	access:public
cert_info_strings	src/curl_stream.c	/^	git_strarray cert_info_strings;$/;"	m	struct:__anon232	file:	access:public
cert_type	include/git2/types.h	/^	git_cert_t cert_type;$/;"	m	struct:__anon147	access:public
certificate	include/git2/sys/stream.h	/^	int (*certificate)(git_cert **, struct git_stream *);$/;"	m	struct:git_stream	access:public
certificate_check	include/git2/proxy.h	/^        git_transport_certificate_check_cb certificate_check;$/;"	m	struct:__anon125	access:public
certificate_check	include/git2/remote.h	/^	git_transport_certificate_check_cb certificate_check;$/;"	m	struct:git_remote_callbacks	access:public
certificate_check	src/transports/winhttp.c	/^static int certificate_check(winhttp_stream *s, int valid)$/;"	f	file:	signature:(winhttp_stream *s, int valid)
certificate_check_cb	src/transports/smart.h	/^	git_transport_certificate_check_cb certificate_check_cb;$/;"	m	struct:__anon193	access:public
cfg	include/git2/config.h	/^GIT_EXTERN(void) git_config_free(git_config *cfg);$/;"	v
cfg	include/git2/sys/config.h	/^	struct git_config *cfg;$/;"	m	struct:git_config_backend	typeref:struct:git_config_backend::git_config	access:public
cfg	src/config.c	/^	const git_config *cfg;$/;"	m	struct:__anon337	file:	access:public
cfg	src/transaction.c	/^	git_config *cfg;$/;"	m	struct:git_transaction	file:	access:public
cfg	tests/config/validkeyname.c	/^static git_config *cfg;$/;"	v	file:
cfg_attr_file	src/attrcache.h	/^	char *cfg_attr_file; \/* cached value of core.attributesfile *\/$/;"	m	struct:__anon309	access:public
cfg_callback_countdown	tests/config/read.c	/^static int cfg_callback_countdown(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
cfg_excl_file	src/attrcache.h	/^	char *cfg_excl_file; \/* cached value of core.excludesfile *\/$/;"	m	struct:__anon309	access:public
cfg_file	src/config_file.c	/^	diskfile_backend *cfg_file;$/;"	m	struct:parse_data	file:	access:public
ch	deps/regex/regex_internal.h	/^    unsigned char ch;$/;"	m	union:__anon15::__anon16	access:public
challenge	src/transports/auth_negotiate.c	/^	char *challenge;$/;"	m	struct:__anon194	file:	access:public
challenge_match	src/transports/http.c	/^static bool challenge_match(git_http_auth_scheme *scheme, void *data)$/;"	f	file:	signature:(git_http_auth_scheme *scheme, void *data)
change_type	tests/merge/merge_helpers.h	/^	git_merge_diff_type_t change_type;$/;"	m	struct:merge_index_conflict_data	access:public
channel	src/transports/ssh.c	/^	LIBSSH2_CHANNEL *channel;$/;"	m	struct:__anon182	file:	access:public
chanode_t	src/xdiff/xtypes.h	/^} chanode_t;$/;"	t	typeref:struct:s_chanode
char_classes	deps/regex/regex_internal.h	/^  wctype_t *char_classes;$/;"	m	struct:__anon6	access:public
charf	deps/zlib/zconf.h	/^typedef char  FAR charf;$/;"	t
chastore_t	src/xdiff/xtypes.h	/^} chastore_t;$/;"	t	typeref:struct:s_chastore
chdir	tests/clar.c	35;"	d	file:
check	deps/zlib/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state	access:public
check	examples/tag.c	/^static void check(int result, const char *message)$/;"	f	file:	signature:(int result, const char *message)
check	include/git2/sys/filter.h	/^	git_filter_check_fn    check;$/;"	m	struct:git_filter	access:public
check_arrival	deps/regex/regexec.c	/^check_arrival (re_match_context_t *mctx, state_array_t *path, int top_node,$/;"	f	file:	signature:(re_match_context_t *mctx, state_array_t *path, int top_node, int top_str, int last_node, int last_str, int type)
check_arrival_add_next_nodes	deps/regex/regexec.c	/^check_arrival_add_next_nodes (re_match_context_t *mctx, int str_idx,$/;"	f	file:	signature:(re_match_context_t *mctx, int str_idx, re_node_set *cur_nodes, re_node_set *next_nodes)
check_arrival_expand_ecl	deps/regex/regexec.c	/^check_arrival_expand_ecl (const re_dfa_t *dfa, re_node_set *cur_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *cur_nodes, int ex_subexp, int type)
check_arrival_expand_ecl_sub	deps/regex/regexec.c	/^check_arrival_expand_ecl_sub (const re_dfa_t *dfa, re_node_set *dst_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *dst_nodes, int target, int ex_subexp, int type)
check_backend_sorting	tests/odb/sorting.c	/^static void check_backend_sorting(git_odb *odb)$/;"	f	file:	signature:(git_odb *odb)
check_basename	tests/core/path.c	/^check_basename(const char *A, const char *B)$/;"	f	file:	signature:(const char *A, const char *B)
check_blame_hunk_index	tests/blame/blame_helpers.c	/^void check_blame_hunk_index(git_repository *repo, git_blame *blame, int idx,$/;"	f	signature:(git_repository *repo, git_blame *blame, int idx, size_t start_line, size_t len, char boundary, const char *commit_id, const char *orig_path)
check_buf	tests/core/buffer.c	1065;"	d	file:
check_buf_append	tests/core/buffer.c	/^check_buf_append($/;"	f	file:	signature:( const char* data_a, const char* data_b, const char* expected_data, size_t expected_size, size_t expected_asize)
check_buf_append_abc	tests/core/buffer.c	/^check_buf_append_abc($/;"	f	file:	signature:( const char* buf_a, const char* buf_b, const char* buf_c, const char* expected_ab, const char* expected_abc, const char* expected_abca, const char* expected_abcab, const char* expected_abcabc)
check_counts	tests/core/dirent.c	/^static void check_counts(walk_data *d)$/;"	f	file:	signature:(walk_data *d)
check_crlf	src/crlf.c	/^static int check_crlf(const char *value)$/;"	f	file:	signature:(const char *value)
check_delta_limit	src/pack-objects.c	/^static size_t check_delta_limit(git_pobject *me, size_t n)$/;"	f	file:	signature:(git_pobject *me, size_t n)
check_diff_patches	tests/diff/submodules.c	59;"	d	file:
check_diff_patches_at_line	tests/diff/submodules.c	/^static void check_diff_patches_at_line($/;"	f	file:	signature:( git_diff *diff, const char **expected, const char *file, int line)
check_dirname	tests/core/path.c	/^check_dirname(const char *A, const char *B)$/;"	f	file:	signature:(const char *A, const char *B)
check_dst_limits	deps/regex/regexec.c	/^check_dst_limits (const re_match_context_t *mctx, re_node_set *limits,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_node_set *limits, int dst_node, int dst_idx, int src_node, int src_idx)
check_dst_limits_calc_pos	deps/regex/regexec.c	/^check_dst_limits_calc_pos (const re_match_context_t *mctx, int limit,$/;"	f	file:	signature:(const re_match_context_t *mctx, int limit, int subexp_idx, int from_node, int str_idx, int bkref_idx)
check_dst_limits_calc_pos_1	deps/regex/regexec.c	/^check_dst_limits_calc_pos_1 (const re_match_context_t *mctx, int boundaries,$/;"	f	file:	signature:(const re_match_context_t *mctx, int boundaries, int subexp_idx, int from_node, int bkref_idx)
check_eol	src/crlf.c	/^static int check_eol(const char *value)$/;"	f	file:	signature:(const char *value)
check_error	examples/general.c	/^static void check_error(int error_code, const char *action)$/;"	f	file:	signature:(int error_code, const char *action)
check_file_contents	tests/checkout/checkout_helpers.h	8;"	d
check_file_contents_nocr	tests/checkout/checkout_helpers.h	11;"	d
check_file_directory_collision	src/index.c	/^static int check_file_directory_collision(git_index *index,$/;"	f	file:	signature:(git_index *index, git_index_entry *entry, size_t pos, int ok_to_replace)
check_filenames	src/patch_parse.c	/^static int check_filenames(git_patch_parsed *patch)$/;"	f	file:	signature:(git_patch_parsed *patch)
check_fromurl	tests/core/path.c	/^static void check_fromurl(const char *expected_result, const char *input, int should_fail)$/;"	f	file:	signature:(const char *expected_result, const char *input, int should_fail)
check_get_multivar	tests/config/multivar.c	/^static void check_get_multivar(git_config *cfg, int expected)$/;"	f	file:	signature:(git_config *cfg, int expected)
check_get_multivar_foreach	tests/config/multivar.c	/^static void check_get_multivar_foreach($/;"	f	file:	signature:( git_config *cfg, int expected, int expected_patterned)
check_glob_iter	tests/config/read.c	/^static void check_glob_iter(git_config *cfg, const char *regexp, int expected)$/;"	f	file:	signature:(git_config *cfg, const char *regexp, int expected)
check_global_searchpath	tests/core/env.c	/^static void check_global_searchpath($/;"	f	file:	signature:( const char *path, int position, const char *file, git_buf *temp)
check_halt_node_context	deps/regex/regexec.c	/^check_halt_node_context (const re_dfa_t *dfa, int node, unsigned int context)$/;"	f	file:	signature:(const re_dfa_t *dfa, int node, unsigned int context)
check_halt_state_context	deps/regex/regexec.c	/^check_halt_state_context (const re_match_context_t *mctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, const re_dfastate_t *state, int idx)
check_header_names	src/patch_parse.c	/^int check_header_names($/;"	f	signature:( const char *one, const char *two, const char *old_or_new, bool two_null)
check_host_name	src/openssl_stream.c	/^static int check_host_name(const char *name, const char *host)$/;"	f	file:	signature:(const char *name, const char *host)
check_index_range	tests/iterator/index.c	/^static void check_index_range($/;"	f	file:	signature:( git_repository *repo, const char *start, const char *end, bool ignore_case, int expected_count)
check_invariant	src/tsort.c	/^static int check_invariant(struct tsort_run *stack, ssize_t stack_curr)$/;"	f	file:	signature:(struct tsort_run *stack, ssize_t stack_curr)
check_joinbuf_2	tests/core/buffer.c	/^check_joinbuf_2($/;"	f	file:	signature:( const char *a, const char *b, const char *expected)
check_joinbuf_n_2	tests/core/buffer.c	/^check_joinbuf_n_2($/;"	f	file:	signature:( const char *a, const char *b, const char *expected)
check_joinbuf_n_4	tests/core/buffer.c	/^check_joinbuf_n_4($/;"	f	file:	signature:( const char *a, const char *b, const char *c, const char *d, const char *expected)
check_joinbuf_overlapped	tests/core/buffer.c	/^check_joinbuf_overlapped($/;"	f	file:	signature:( const char *oldval, int ofs_a, const char *b, const char *expected)
check_joinpath	tests/core/path.c	/^check_joinpath(const char *path_a, const char *path_b, const char *expected_path)$/;"	f	file:	signature:(const char *path_a, const char *path_b, const char *expected_path)
check_joinpath_n	tests/core/path.c	/^check_joinpath_n($/;"	f	file:	signature:( const char *path_a, const char *path_b, const char *path_c, const char *path_d, const char *expected_path)
check_last_reflog_entry	tests/repo/head.c	/^static void check_last_reflog_entry(const char *email, const char *message)$/;"	f	file:	signature:(const char *email, const char *message)
check_lg2	examples/common.c	/^void check_lg2(int error, const char *message, const char *extra)$/;"	f	signature:(int error, const char *message, const char *extra)
check_lref	src/push.c	/^static int check_lref(git_push *push, char *ref)$/;"	f	file:	signature:(git_push *push, char *ref)
check_match	deps/zlib/deflate.c	/^local void check_match(s, start, match, length)$/;"	f
check_match	deps/zlib/deflate.c	1377;"	d	file:
check_matching	deps/regex/regexec.c	/^check_matching (re_match_context_t *mctx, int fl_longest_match,$/;"	f	file:	signature:(re_match_context_t *mctx, int fl_longest_match, int *p_match_first)
check_mode	tests/core/mkdir.c	153;"	d	file:
check_mode_at_line	tests/core/mkdir.c	/^static void check_mode_at_line($/;"	f	file:	signature:( mode_t expected, mode_t actual, const char *file, int line)
check_node_accept	deps/regex/regexec.c	/^check_node_accept (const re_match_context_t *mctx, const re_token_t *node,$/;"	f	file:	signature:(const re_match_context_t *mctx, const re_token_t *node, int idx)
check_node_accept_bytes	deps/regex/regexec.c	/^check_node_accept_bytes (const re_dfa_t *dfa, int node_idx,$/;"	f	file:	signature:(const re_dfa_t *dfa, int node_idx, const re_string_t *input, int str_idx)
check_object_files	tests/object/raw/write.c	/^static void check_object_files(object_data *d)$/;"	f	file:	signature:(object_data *d)
check_one_assign	tests/attr/file.c	/^static void check_one_assign($/;"	f	file:	signature:( git_attr_file *file, int rule_idx, int assign_idx, const char *pattern, const char *name, enum attr_expect_t expected, const char *expected_str)
check_one_walkup_step	tests/core/path.c	/^static int check_one_walkup_step(void *ref, const char *path)$/;"	f	file:	signature:(void *ref, const char *path)
check_partial_oid	tests/object/raw/convert.c	/^static void check_partial_oid($/;"	f	file:	signature:( char *buffer, size_t count, const git_oid *oid, const char *expected)
check_patch	src/patch_parse.c	/^static int check_patch(git_patch_parsed *patch)$/;"	f	file:	signature:(git_patch_parsed *patch)
check_path_to_dir	tests/core/path.c	/^check_path_to_dir($/;"	f	file:	signature:( const char* path, const char* expected)
check_percent_decoding	tests/core/path.c	/^static void check_percent_decoding(const char *expected_result, const char *input)$/;"	f	file:	signature:(const char *expected_result, const char *input)
check_prefix	src/patch_parse.c	/^static int check_prefix($/;"	f	file:	signature:( char **out, size_t *out_len, git_patch_parsed *patch, const char *path_start)
check_removal_cb	tests/diff/patch.c	/^static int check_removal_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
check_repositoryformatversion	src/repository.c	/^static int check_repositoryformatversion(git_config *config)$/;"	f	file:	signature:(git_config *config)
check_rref	src/push.c	/^static int check_rref(char *ref)$/;"	f	file:	signature:(char *ref)
check_single_patch_stats	tests/diff/patch.c	/^static void check_single_patch_stats($/;"	f	file:	signature:( git_repository *repo, size_t hunks, size_t adds, size_t dels, size_t ctxt, size_t *sizes, const char *expected)
check_some_bits	tests/core/bitvec.c	/^static void check_some_bits(git_bitvec *bv, size_t length)$/;"	f	file:	signature:(git_bitvec *bv, size_t length)
check_ssh_auth_methods	tests/online/clone.c	/^static int check_ssh_auth_methods(git_cred **cred, const char *url, const char *username_from_url,$/;"	f	file:	signature:(git_cred **cred, const char *url, const char *username_from_url, unsigned int allowed_types, void *data)
check_stat_data	tests/index/addall.c	/^static void check_stat_data(git_index *index, const char *path, bool match)$/;"	f	file:	signature:(git_index *index, const char *path, bool match)
check_status	tests/index/addall.c	104;"	d	file:
check_status	tests/status/renames.c	/^static void check_status($/;"	f	file:	signature:( git_status_list *status_list, struct status_entry *expected_list, size_t expected_len)
check_status0	tests/status/worktree.c	/^static void check_status0(git_status_list *status)$/;"	f	file:	signature:(git_status_list *status)
check_status_at_line	tests/index/addall.c	/^static void check_status_at_line($/;"	f	file:	signature:( git_repository *repo, size_t index_adds, size_t index_dels, size_t index_mods, size_t wt_adds, size_t wt_dels, size_t wt_mods, size_t ignores, size_t conflicts, const char *file, int line)
check_string_to_dir	tests/core/path.c	/^check_string_to_dir($/;"	f	file:	signature:( const char* path, size_t maxlen, const char* expected)
check_subexp_limits	deps/regex/regexec.c	/^check_subexp_limits (const re_dfa_t *dfa, re_node_set *dest_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *dest_nodes, const re_node_set *candidates, re_node_set *limits, struct re_backref_cache_entry *bkref_ents, int str_idx)
check_subexp_matching_top	deps/regex/regexec.c	/^check_subexp_matching_top (re_match_context_t *mctx, re_node_set *cur_nodes,$/;"	f	file:	signature:(re_match_context_t *mctx, re_node_set *cur_nodes, int str_idx)
check_topdir	tests/core/path.c	/^check_topdir(const char *A, const char *B)$/;"	f	file:	signature:(const char *A, const char *B)
check_tree_entry	tests/iterator/tree.c	/^static void check_tree_entry($/;"	f	file:	signature:( git_iterator *i, const char *oid, const char *oid_p, const char *oid_pp, const char *oid_ppp)
check_tree_range	tests/iterator/tree.c	/^static void check_tree_range($/;"	f	file:	signature:( git_repository *repo, const char *start, const char *end, bool ignore_case, int expected_count)
check_type_combination	src/object.c	/^static int check_type_combination(git_otype type, git_otype target)$/;"	f	file:	signature:(git_otype type, git_otype target)
check_walkup_info	tests/core/path.c	/^} check_walkup_info;$/;"	t	typeref:struct:__anon356	file:
check_wd_first_through_third_range	tests/iterator/workdir.c	/^static void check_wd_first_through_third_range($/;"	f	file:	signature:( git_repository *repo, const char *start, const char *end)
checkout_action	src/checkout.c	/^static int checkout_action($/;"	f	file:	signature:( int *action, checkout_data *data, git_diff_delta *delta, git_iterator *workdir, const git_index_entry **wditem, git_vector *pathspec)
checkout_action_common	src/checkout.c	/^static int checkout_action_common($/;"	f	file:	signature:( int *action, checkout_data *data, const git_diff_delta *delta, const git_index_entry *wd)
checkout_action_no_wd	src/checkout.c	/^static int checkout_action_no_wd($/;"	f	file:	signature:( int *action, checkout_data *data, const git_diff_delta *delta)
checkout_action_wd_only	src/checkout.c	/^static int checkout_action_wd_only($/;"	f	file:	signature:( checkout_data *data, git_iterator *workdir, const git_index_entry **wditem, git_vector *pathspec)
checkout_action_with_wd	src/checkout.c	/^static int checkout_action_with_wd($/;"	f	file:	signature:( int *action, checkout_data *data, const git_diff_delta *delta, git_iterator *workdir, const git_index_entry *wd)
checkout_action_with_wd_blocker	src/checkout.c	/^static int checkout_action_with_wd_blocker($/;"	f	file:	signature:( int *action, checkout_data *data, const git_diff_delta *delta, const git_index_entry *wd)
checkout_action_with_wd_dir	src/checkout.c	/^static int checkout_action_with_wd_dir($/;"	f	file:	signature:( int *action, checkout_data *data, const git_diff_delta *delta, git_iterator *workdir, const git_index_entry *wd)
checkout_action_with_wd_dir_empty	src/checkout.c	/^static int checkout_action_with_wd_dir_empty($/;"	f	file:	signature:( int *action, checkout_data *data, const git_diff_delta *delta)
checkout_blob	src/checkout.c	/^static int checkout_blob($/;"	f	file:	signature:( checkout_data *data, const git_diff_file *file)
checkout_branch	include/git2/clone.h	/^	const char* checkout_branch;$/;"	m	struct:git_clone_options	access:public
checkout_branch	src/clone.c	/^static int checkout_branch(git_repository *repo, git_remote *remote, const git_checkout_options *co_opts, const char *branch, const char *reflog_message)$/;"	f	file:	signature:(git_repository *repo, git_remote *remote, const git_checkout_options *co_opts, const char *branch, const char *reflog_message)
checkout_cancel_at	tests/checkout/tree.c	/^struct checkout_cancel_at {$/;"	s	file:
checkout_cancel_at::count	tests/checkout/tree.c	/^	int count;$/;"	m	struct:checkout_cancel_at	file:	access:public
checkout_cancel_at::error	tests/checkout/tree.c	/^	int error;$/;"	m	struct:checkout_cancel_at	file:	access:public
checkout_cancel_at::filename	tests/checkout/tree.c	/^	const char *filename;$/;"	m	struct:checkout_cancel_at	file:	access:public
checkout_cancel_cb	tests/checkout/tree.c	/^static int checkout_cancel_cb($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *b, const git_diff_file *t, const git_diff_file *w, void *payload)
checkout_conflict_add	src/checkout.c	/^static int checkout_conflict_add($/;"	f	file:	signature:( checkout_data *data, const git_index_entry *conflict)
checkout_conflict_append_remove	src/checkout.c	/^static int checkout_conflict_append_remove($/;"	f	file:	signature:( const git_index_entry *ancestor, const git_index_entry *ours, const git_index_entry *theirs, void *payload)
checkout_conflict_append_update	src/checkout.c	/^static int checkout_conflict_append_update($/;"	f	file:	signature:( const git_index_entry *ancestor, const git_index_entry *ours, const git_index_entry *theirs, void *payload)
checkout_conflict_count_cb	tests/checkout/tree.c	/^static int checkout_conflict_count_cb($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *b, const git_diff_file *t, const git_diff_file *w, void *payload)
checkout_conflict_detect_binary	src/checkout.c	/^GIT_INLINE(int) checkout_conflict_detect_binary(git_repository *repo, checkout_conflictdata *conflict)$/;"	f	signature:(git_repository *repo, checkout_conflictdata *conflict)
checkout_conflict_detect_submodule	src/checkout.c	/^GIT_INLINE(int) checkout_conflict_detect_submodule(checkout_conflictdata *conflict)$/;"	f	signature:(checkout_conflictdata *conflict)
checkout_conflict_update_index	src/checkout.c	/^static int checkout_conflict_update_index($/;"	f	file:	signature:( checkout_data *data, checkout_conflictdata *conflict)
checkout_conflictdata	src/checkout.c	/^} checkout_conflictdata;$/;"	t	typeref:struct:__anon216	file:
checkout_conflictdata_cmp	src/checkout.c	/^static int checkout_conflictdata_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
checkout_conflictdata_empty	src/checkout.c	/^int checkout_conflictdata_empty($/;"	f	signature:( const git_vector *conflicts, size_t idx, void *payload)
checkout_conflicts_cmp_ancestor	src/checkout.c	/^static int checkout_conflicts_cmp_ancestor(const void *p, const void *c)$/;"	f	file:	signature:(const void *p, const void *c)
checkout_conflicts_cmp_entry	src/checkout.c	/^GIT_INLINE(int) checkout_conflicts_cmp_entry($/;"	f	signature:( const char *path, const git_index_entry *entry)
checkout_conflicts_coalesce_renames	src/checkout.c	/^static int checkout_conflicts_coalesce_renames($/;"	f	file:	signature:( checkout_data *data)
checkout_conflicts_foreach	src/checkout.c	/^static int checkout_conflicts_foreach($/;"	f	file:	signature:( checkout_data *data, git_index *index, git_iterator *workdir, git_vector *pathspec, int (*cb)(const git_index_entry *, const git_index_entry *, const git_index_entry *, void *), void *payload)
checkout_conflicts_load	src/checkout.c	/^static int checkout_conflicts_load(checkout_data *data, git_iterator *workdir, git_vector *pathspec)$/;"	f	file:	signature:(checkout_data *data, git_iterator *workdir, git_vector *pathspec)
checkout_conflicts_load_byname_entry	src/checkout.c	/^static int checkout_conflicts_load_byname_entry($/;"	f	file:	signature:( checkout_conflictdata **ancestor_out, checkout_conflictdata **ours_out, checkout_conflictdata **theirs_out, checkout_data *data, const git_index_name_entry *name_entry)
checkout_conflicts_mark_directoryfile	src/checkout.c	/^static int checkout_conflicts_mark_directoryfile($/;"	f	file:	signature:( checkout_data *data)
checkout_conflicts_search_ancestor	src/checkout.c	/^static checkout_conflictdata *checkout_conflicts_search_ancestor($/;"	f	file:	signature:( checkout_data *data, const char *path)
checkout_conflicts_search_branch	src/checkout.c	/^static checkout_conflictdata *checkout_conflicts_search_branch($/;"	f	file:	signature:( checkout_data *data, const char *path)
checkout_count_callback	tests/checkout/checkout_helpers.c	/^int checkout_count_callback($/;"	f	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload)
checkout_counts	tests/checkout/checkout_helpers.h	/^} checkout_counts;$/;"	t	typeref:struct:__anon351
checkout_create_conflicts	src/checkout.c	/^static int checkout_create_conflicts(checkout_data *data)$/;"	f	file:	signature:(checkout_data *data)
checkout_create_submodules	src/checkout.c	/^static int checkout_create_submodules($/;"	f	file:	signature:( unsigned int *actions, checkout_data *data)
checkout_create_the_new	src/checkout.c	/^static int checkout_create_the_new($/;"	f	file:	signature:( unsigned int *actions, checkout_data *data)
checkout_data	src/checkout.c	/^} checkout_data;$/;"	t	typeref:struct:__anon215	file:
checkout_data_clear	src/checkout.c	/^static void checkout_data_clear(checkout_data *data)$/;"	f	file:	signature:(checkout_data *data)
checkout_data_init	src/checkout.c	/^static int checkout_data_init($/;"	f	file:	signature:( checkout_data *data, git_iterator *target, const git_checkout_options *proposed)
checkout_deferred_remove	src/checkout.c	/^static int checkout_deferred_remove(git_repository *repo, const char *path)$/;"	f	file:	signature:(git_repository *repo, const char *path)
checkout_extensions_update_index	src/checkout.c	/^static int checkout_extensions_update_index(checkout_data *data)$/;"	f	file:	signature:(checkout_data *data)
checkout_get_actions	src/checkout.c	/^static int checkout_get_actions($/;"	f	file:	signature:( uint32_t **actions_ptr, size_t **counts_ptr, checkout_data *data, git_iterator *workdir)
checkout_get_remove_conflicts	src/checkout.c	/^static int checkout_get_remove_conflicts($/;"	f	file:	signature:( checkout_data *data, git_iterator *workdir, git_vector *pathspec)
checkout_get_update_conflicts	src/checkout.c	/^static int checkout_get_update_conflicts($/;"	f	file:	signature:( checkout_data *data, git_iterator *workdir, git_vector *pathspec)
checkout_idxentry_cmp	src/checkout.c	/^GIT_INLINE(int) checkout_idxentry_cmp($/;"	f	signature:( const git_index_entry *a, const git_index_entry *b)
checkout_index_entry	tests/checkout/conflict.c	/^struct checkout_index_entry {$/;"	s	file:
checkout_index_entry::mode	tests/checkout/conflict.c	/^	uint16_t mode;$/;"	m	struct:checkout_index_entry	file:	access:public
checkout_index_entry::oid_str	tests/checkout/conflict.c	/^	char oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:checkout_index_entry	file:	access:public
checkout_index_entry::path	tests/checkout/conflict.c	/^	char path[128];$/;"	m	struct:checkout_index_entry	file:	access:public
checkout_index_entry::stage	tests/checkout/conflict.c	/^	int stage;$/;"	m	struct:checkout_index_entry	file:	access:public
checkout_is_empty_dir	src/checkout.c	/^static bool checkout_is_empty_dir(checkout_data *data, const char *path)$/;"	f	file:	signature:(checkout_data *data, const char *path)
checkout_is_workdir_modified	src/checkout.c	/^static bool checkout_is_workdir_modified($/;"	f	file:	signature:( checkout_data *data, const git_diff_file *baseitem, const git_diff_file *newitem, const git_index_entry *wditem)
checkout_lookup_head_tree	src/checkout.c	/^static int checkout_lookup_head_tree(git_tree **out, git_repository *repo)$/;"	f	file:	signature:(git_tree **out, git_repository *repo)
checkout_merge_path	src/checkout.c	/^static int checkout_merge_path($/;"	f	file:	signature:( git_buf *out, checkout_data *data, checkout_conflictdata *conflict, git_merge_file_result *result)
checkout_message	src/repository.c	/^static int checkout_message(git_buf *out, git_reference *old, const char *new)$/;"	f	file:	signature:(git_buf *out, git_reference *old, const char *new)
checkout_mkdir	src/checkout.c	/^static int checkout_mkdir($/;"	f	file:	signature:( checkout_data *data, const char *path, const char *base, mode_t mode, unsigned int flags)
checkout_name_entry	tests/checkout/conflict.c	/^struct checkout_name_entry {$/;"	s	file:
checkout_name_entry::ancestor	tests/checkout/conflict.c	/^	char ancestor[64];$/;"	m	struct:checkout_name_entry	file:	access:public
checkout_name_entry::ours	tests/checkout/conflict.c	/^	char ours[64];$/;"	m	struct:checkout_name_entry	file:	access:public
checkout_name_entry::theirs	tests/checkout/conflict.c	/^	char theirs[64];$/;"	m	struct:checkout_name_entry	file:	access:public
checkout_notify	src/checkout.c	/^static int checkout_notify($/;"	f	file:	signature:( checkout_data *data, git_checkout_notify_t why, const git_diff_delta *delta, const git_index_entry *wditem)
checkout_notify	tests/stash/apply.c	/^int checkout_notify($/;"	f	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload)
checkout_notify_called	tests/submodule/update.c	/^	int checkout_notify_called;$/;"	m	struct:update_submodule_cb_payload	file:	access:public
checkout_notify_cb	tests/submodule/update.c	/^static int checkout_notify_cb($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload)
checkout_options	include/git2/rebase.h	/^	git_checkout_options checkout_options;$/;"	m	struct:__anon67	access:public
checkout_options	include/git2/stash.h	/^	git_checkout_options checkout_options;$/;"	m	struct:git_stash_apply_options	access:public
checkout_opts	include/git2/cherrypick.h	/^	git_checkout_options checkout_opts; \/**< Options for the checkout *\/$/;"	m	struct:__anon115	access:public
checkout_opts	include/git2/clone.h	/^	git_checkout_options checkout_opts;$/;"	m	struct:git_clone_options	access:public
checkout_opts	include/git2/revert.h	/^	git_checkout_options checkout_opts; \/**< Options for the checkout *\/$/;"	m	struct:__anon142	access:public
checkout_opts	include/git2/submodule.h	/^	git_checkout_options checkout_opts;$/;"	m	struct:git_submodule_update_options	access:public
checkout_opts	tests/checkout/icase.c	/^static git_checkout_options checkout_opts;$/;"	v	file:
checkout_opts	tests/checkout/nasty.c	/^static git_checkout_options checkout_opts;$/;"	v	file:
checkout_path_suffixed	src/checkout.c	/^static int checkout_path_suffixed(git_buf *path, const char *suffix)$/;"	f	file:	signature:(git_buf *path, const char *suffix)
checkout_progress	examples/network/clone.c	/^static void checkout_progress(const char *path, size_t cur, size_t tot, void *payload)$/;"	f	file:	signature:(const char *path, size_t cur, size_t tot, void *payload)
checkout_progress	tests/online/clone.c	/^static void checkout_progress(const char *path, size_t cur, size_t tot, void *payload)$/;"	f	file:	signature:(const char *path, size_t cur, size_t tot, void *payload)
checkout_progress_called	tests/submodule/update.c	/^	int checkout_progress_called;$/;"	m	struct:update_submodule_cb_payload	file:	access:public
checkout_progress_cb	tests/submodule/update.c	/^static void checkout_progress_cb($/;"	f	file:	signature:( const char *path, size_t completed_steps, size_t total_steps, void *payload)
checkout_progress_counter	tests/checkout/index.c	/^static void checkout_progress_counter($/;"	f	file:	signature:( const char *path, size_t cur, size_t tot, void *payload)
checkout_queue_remove	src/checkout.c	/^static int checkout_queue_remove(checkout_data *data, const char *path)$/;"	f	file:	signature:(checkout_data *data, const char *path)
checkout_remaining_wd_items	src/checkout.c	/^static int checkout_remaining_wd_items($/;"	f	file:	signature:( checkout_data *data, git_iterator *workdir, const git_index_entry *wd, git_vector *spec)
checkout_remove_conflicts	src/checkout.c	/^static int checkout_remove_conflicts(checkout_data *data)$/;"	f	file:	signature:(checkout_data *data)
checkout_remove_the_old	src/checkout.c	/^static int checkout_remove_the_old($/;"	f	file:	signature:( unsigned int *actions, checkout_data *data)
checkout_safe_for_update_only	src/checkout.c	/^static int checkout_safe_for_update_only($/;"	f	file:	signature:( checkout_data *data, const char *path, mode_t expected_mode)
checkout_strategy	include/git2/checkout.h	/^	unsigned int checkout_strategy; \/**< default will be a dry run *\/$/;"	m	struct:git_checkout_options	access:public
checkout_stream	src/checkout.c	/^struct checkout_stream {$/;"	s	file:
checkout_stream::base	src/checkout.c	/^	git_writestream base;$/;"	m	struct:checkout_stream	file:	access:public
checkout_stream::fd	src/checkout.c	/^	int fd;$/;"	m	struct:checkout_stream	file:	access:public
checkout_stream::open	src/checkout.c	/^	int open;$/;"	m	struct:checkout_stream	file:	access:public
checkout_stream::path	src/checkout.c	/^	const char *path;$/;"	m	struct:checkout_stream	file:	access:public
checkout_stream_close	src/checkout.c	/^static int checkout_stream_close(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
checkout_stream_free	src/checkout.c	/^static void checkout_stream_free(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
checkout_stream_write	src/checkout.c	/^static int checkout_stream_write($/;"	f	file:	signature:( git_writestream *s, const char *buffer, size_t len)
checkout_submodule	src/checkout.c	/^static int checkout_submodule($/;"	f	file:	signature:( checkout_data *data, const git_diff_file *file)
checkout_submodule_update_index	src/checkout.c	/^static int checkout_submodule_update_index($/;"	f	file:	signature:( checkout_data *data, const git_diff_file *file)
checkout_target_fullpath	src/checkout.c	/^static int checkout_target_fullpath($/;"	f	file:	signature:( git_buf **out, checkout_data *data, const char *path)
checkout_tree_with_blob_ignored_in_workdir	tests/checkout/tree.c	/^static int checkout_tree_with_blob_ignored_in_workdir(int strategy, bool isdir)$/;"	f	file:	signature:(int strategy, bool isdir)
checkout_update_index	src/checkout.c	/^static int checkout_update_index($/;"	f	file:	signature:( checkout_data *data, const git_diff_file *file, struct stat *st)
checkout_verify_paths	src/checkout.c	/^static int checkout_verify_paths($/;"	f	file:	signature:( git_repository *repo, int action, git_diff_delta *delta)
checkout_write_content	src/checkout.c	/^static int checkout_write_content($/;"	f	file:	signature:( checkout_data *data, const git_oid *oid, const char *full_path, const char *hint_path, unsigned int mode, struct stat *st)
checkout_write_entries	src/checkout.c	/^static int checkout_write_entries($/;"	f	file:	signature:( checkout_data *data, checkout_conflictdata *conflict)
checkout_write_entry	src/checkout.c	/^static int checkout_write_entry($/;"	f	file:	signature:( checkout_data *data, checkout_conflictdata *conflict, const git_index_entry *side)
checkout_write_merge	src/checkout.c	/^static int checkout_write_merge($/;"	f	file:	signature:( checkout_data *data, checkout_conflictdata *conflict)
checksum	src/config_file.c	/^	git_oid checksum;$/;"	m	struct:reader	file:	access:public
checksum	src/index.h	/^	git_oid checksum;   \/* checksum at the end of the file *\/$/;"	m	struct:git_index	access:public
cherrypick_normalize_opts	src/cherrypick.c	/^static int cherrypick_normalize_opts($/;"	f	file:	signature:( git_repository *repo, git_cherrypick_options *opts, const git_cherrypick_options *given, const char *their_label)
cherrypick_seterr	src/cherrypick.c	/^static int cherrypick_seterr(git_commit *commit, const char *fmt)$/;"	f	file:	signature:(git_commit *commit, const char *fmt)
cherrypick_state_cleanup	src/cherrypick.c	/^static int cherrypick_state_cleanup(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
chg0	src/xdiff/xmerge.c	/^	long chg0;$/;"	m	struct:s_xdmerge	file:	access:public
chg1	src/xdiff/xdiffi.h	/^	long chg1, chg2;$/;"	m	struct:s_xdchange	access:public
chg1	src/xdiff/xmerge.c	/^	long chg1, chg2;$/;"	m	struct:s_xdmerge	file:	access:public
chg2	src/xdiff/xdiffi.h	/^	long chg1, chg2;$/;"	m	struct:s_xdchange	access:public
chg2	src/xdiff/xmerge.c	/^	long chg1, chg2;$/;"	m	struct:s_xdmerge	file:	access:public
children	src/oid.c	/^	node_index children[16];$/;"	m	union:__anon301	file:	access:public
children	src/tree-cache.h	/^	struct git_tree_cache **children;$/;"	m	struct:git_tree_cache	typeref:struct:git_tree_cache::git_tree_cache	access:public
children_count	src/tree-cache.h	/^	size_t children_count;$/;"	m	struct:git_tree_cache	access:public
chmod_calls	include/git2/checkout.h	/^	size_t chmod_calls;$/;"	m	struct:__anon139	access:public
chmod_calls	src/fileops.h	/^	size_t chmod_calls;$/;"	m	struct:git_futils_mkdir_perfdata	access:public
chunk_buffer	src/transports/http.c	/^	char *chunk_buffer;$/;"	m	struct:__anon175	file:	access:public
chunk_buffer	src/transports/winhttp.c	/^	char *chunk_buffer;$/;"	m	struct:__anon180	file:	access:public
chunk_buffer_len	src/transports/http.c	/^	unsigned chunk_buffer_len;$/;"	m	struct:__anon175	file:	access:public
chunk_buffer_len	src/transports/winhttp.c	/^	unsigned chunk_buffer_len;$/;"	m	struct:__anon180	file:	access:public
chunked	src/transports/http.c	/^		chunked : 1,$/;"	m	struct:__anon175	file:	access:public
chunked	src/transports/winhttp.c	/^		chunked : 1;$/;"	m	struct:__anon180	file:	access:public
cl_assert	tests/clar.h	96;"	d
cl_assert_	tests/clar.h	82;"	d
cl_assert_at_line	tests/clar_libgit2.h	91;"	d
cl_assert_equal_b	tests/clar.h	132;"	d
cl_assert_equal_file	tests/clar_libgit2.h	113;"	d
cl_assert_equal_file_ignore_cr	tests/clar_libgit2.h	116;"	d
cl_assert_equal_i	tests/clar.h	128;"	d
cl_assert_equal_i_	tests/clar.h	129;"	d
cl_assert_equal_i_fmt	tests/clar.h	130;"	d
cl_assert_equal_oid	tests/clar_libgit2.h	141;"	d
cl_assert_equal_p	tests/clar.h	134;"	d
cl_assert_equal_s	tests/clar.h	116;"	d
cl_assert_equal_s_	tests/clar.h	117;"	d
cl_assert_equal_strn	tests/clar.h	122;"	d
cl_assert_equal_strn_	tests/clar.h	123;"	d
cl_assert_equal_sz	tests/clar_libgit2.h	105;"	d
cl_assert_equal_wcs	tests/clar.h	119;"	d
cl_assert_equal_wcs_	tests/clar.h	120;"	d
cl_assert_equal_wcsn	tests/clar.h	125;"	d
cl_assert_equal_wcsn_	tests/clar.h	126;"	d
cl_assert_error	tests/core/stat.c	18;"	d	file:
cl_assert_in_range	tests/clar_libgit2.h	110;"	d
cl_check	tests/clar.h	103;"	d
cl_check_	tests/clar.h	89;"	d
cl_check_fail	tests/clar.h	102;"	d
cl_check_fail_	tests/clar.h	88;"	d
cl_check_pass	tests/clar.h	101;"	d
cl_check_pass_	tests/clar.h	87;"	d
cl_fail	tests/clar.h	108;"	d
cl_fake_home	tests/clar_libgit2.c	/^void cl_fake_home(void)$/;"	f	signature:(void)
cl_fake_home_cleanup	tests/clar_libgit2.c	/^void cl_fake_home_cleanup(void *payload)$/;"	f	signature:(void *payload)
cl_fixture	tests/clar/fixtures.h	/^const char *cl_fixture(const char *fixture_name)$/;"	f	signature:(const char *fixture_name)
cl_fixture_cleanup	tests/clar/fixtures.h	/^void cl_fixture_cleanup(const char *fixture_name)$/;"	f	signature:(const char *fixture_name)
cl_fixture_sandbox	tests/clar/fixtures.h	/^void cl_fixture_sandbox(const char *fixture_name)$/;"	f	signature:(const char *fixture_name)
cl_fs_cleanup	tests/clar/fs.h	/^cl_fs_cleanup(void)$/;"	f	signature:(void)
cl_getenv	tests/clar_libgit2.c	/^char *cl_getenv(const char *name)$/;"	f	signature:(const char *name)
cl_git_append2file	tests/clar_libgit2.c	/^void cl_git_append2file(const char *path, const char *content)$/;"	f	signature:(const char *path, const char *content)
cl_git_fail	tests/clar_libgit2.h	29;"	d
cl_git_fail_at_line	tests/repo/env.c	68;"	d	file:
cl_git_fail_with	tests/clar_libgit2.h	31;"	d
cl_git_fixture_url	tests/clar_libgit2.c	/^const char* cl_git_fixture_url(const char *fixturename)$/;"	f	signature:(const char *fixturename)
cl_git_mkfile	tests/clar_libgit2.c	/^void cl_git_mkfile(const char *filename, const char *content)$/;"	f	signature:(const char *filename, const char *content)
cl_git_pass	tests/clar_libgit2.h	15;"	d
cl_git_pass_	tests/clar_libgit2.h	17;"	d
cl_git_path_url	tests/clar_libgit2.c	/^const char* cl_git_path_url(const char *path)$/;"	f	signature:(const char *path)
cl_git_remove_placeholders	tests/clar_libgit2.c	/^int cl_git_remove_placeholders(const char *directory_path, const char *filename)$/;"	f	signature:(const char *directory_path, const char *filename)
cl_git_report_failure	tests/clar_libgit2.c	/^void cl_git_report_failure($/;"	f	signature:( int error, const char *file, int line, const char *fncall)
cl_git_rewritefile	tests/clar_libgit2.c	/^void cl_git_rewritefile(const char *path, const char *content)$/;"	f	signature:(const char *path, const char *content)
cl_git_rmfile	tests/clar_libgit2.c	/^void cl_git_rmfile(const char *filename)$/;"	f	signature:(const char *filename)
cl_git_sandbox_cleanup	tests/clar_libgit2.c	/^void cl_git_sandbox_cleanup(void)$/;"	f	signature:(void)
cl_git_sandbox_init	tests/clar_libgit2.c	/^git_repository *cl_git_sandbox_init(const char *sandbox)$/;"	f	signature:(const char *sandbox)
cl_git_sandbox_init_new	tests/clar_libgit2.c	/^git_repository *cl_git_sandbox_init_new(const char *sandbox)$/;"	f	signature:(const char *sandbox)
cl_git_sandbox_reopen	tests/clar_libgit2.c	/^git_repository *cl_git_sandbox_reopen(void)$/;"	f	signature:(void)
cl_git_thread_check	tests/clar_libgit2.h	/^GIT_INLINE(void) cl_git_thread_check(void *data)$/;"	f	signature:(void *data)
cl_git_thread_err	tests/clar_libgit2.h	/^} cl_git_thread_err;$/;"	t	typeref:struct:__anon360
cl_git_thread_pass	tests/clar_libgit2.h	63;"	d
cl_git_thread_pass	tests/clar_libgit2.h	65;"	d
cl_git_thread_pass_	tests/clar_libgit2.h	68;"	d
cl_git_write2file	tests/clar_libgit2.c	/^void cl_git_write2file($/;"	f	signature:( const char *path, const char *content, size_t content_len, int flags, unsigned int mode)
cl_global_trace_disable	tests/clar_libgit2_trace.c	/^void cl_global_trace_disable(void)$/;"	f	signature:(void)
cl_global_trace_register	tests/clar_libgit2_trace.c	/^void cl_global_trace_register(void)$/;"	f	signature:(void)
cl_is_chmod_supported	tests/clar_libgit2.c	/^bool cl_is_chmod_supported(void)$/;"	f	signature:(void)
cl_is_env_set	tests/clar_libgit2.c	/^bool cl_is_env_set(const char *name)$/;"	f	signature:(const char *name)
cl_must_fail	tests/clar.h	95;"	d
cl_must_fail_	tests/clar.h	81;"	d
cl_must_pass	tests/clar.h	94;"	d
cl_must_pass_	tests/clar.h	80;"	d
cl_perf_timer	tests/clar_libgit2_timer.h	/^struct cl_perf_timer$/;"	s
cl_perf_timer	tests/clar_libgit2_timer.h	/^typedef struct cl_perf_timer cl_perf_timer;$/;"	t	typeref:struct:cl_perf_timer
cl_perf_timer::last	tests/clar_libgit2_timer.h	/^	double last;$/;"	m	struct:cl_perf_timer	access:public
cl_perf_timer::sum	tests/clar_libgit2_timer.h	/^	double sum;$/;"	m	struct:cl_perf_timer	access:public
cl_perf_timer::time_started	tests/clar_libgit2_timer.h	/^	double time_started;$/;"	m	struct:cl_perf_timer	access:public
cl_perf_timer__init	tests/clar_libgit2_timer.c	/^void cl_perf_timer__init(cl_perf_timer *t)$/;"	f	signature:(cl_perf_timer *t)
cl_perf_timer__last	tests/clar_libgit2_timer.c	/^double cl_perf_timer__last(const cl_perf_timer *t)$/;"	f	signature:(const cl_perf_timer *t)
cl_perf_timer__start	tests/clar_libgit2_timer.c	/^void cl_perf_timer__start(cl_perf_timer *t)$/;"	f	signature:(cl_perf_timer *t)
cl_perf_timer__stop	tests/clar_libgit2_timer.c	/^void cl_perf_timer__stop(cl_perf_timer *t)$/;"	f	signature:(cl_perf_timer *t)
cl_perf_timer__sum	tests/clar_libgit2_timer.c	/^double cl_perf_timer__sum(const cl_perf_timer *t)$/;"	f	signature:(const cl_perf_timer *t)
cl_rename	tests/clar_libgit2.c	/^int cl_rename(const char *source, const char *dest)$/;"	f	signature:(const char *source, const char *dest)
cl_repo_commit_from_index	tests/clar_libgit2.c	/^void cl_repo_commit_from_index($/;"	f	signature:( git_oid *out, git_repository *repo, git_signature *sig, git_time_t time, const char *msg)
cl_repo_get_bool	tests/clar_libgit2.c	/^int cl_repo_get_bool(git_repository *repo, const char *cfg)$/;"	f	signature:(git_repository *repo, const char *cfg)
cl_repo_set_bool	tests/clar_libgit2.c	/^void cl_repo_set_bool(git_repository *repo, const char *cfg, int value)$/;"	f	signature:(git_repository *repo, const char *cfg, int value)
cl_repo_set_string	tests/clar_libgit2.c	/^void cl_repo_set_string(git_repository *repo, const char *cfg, const char *value)$/;"	f	signature:(git_repository *repo, const char *cfg, const char *value)
cl_sandbox_set_search_path_defaults	tests/clar_libgit2.c	/^void cl_sandbox_set_search_path_defaults(void)$/;"	f	signature:(void)
cl_sandbox_supports_8dot3	tests/clar_libgit2.c	/^bool cl_sandbox_supports_8dot3(void)$/;"	f	signature:(void)
cl_set_cleanup	tests/clar.c	/^void cl_set_cleanup(void (*cleanup)(void *), void *opaque)$/;"	f	signature:(void (*cleanup)(void *), void *opaque)
cl_setenv	tests/clar_libgit2.c	/^int cl_setenv(const char *name, const char *value)$/;"	f	signature:(const char *name, const char *value)
cl_setenv_printf	tests/repo/env.c	/^static int GIT_FORMAT_PRINTF(2, 3) cl_setenv_printf(const char *name, const char *fmt, ...)$/;"	f	signature:(const char *name, const char *fmt, ...)
cl_skip	tests/clar.h	111;"	d
cl_test_status	tests/clar.h	/^enum cl_test_status {$/;"	g
cl_toggle_filemode	tests/clar_libgit2.c	/^bool cl_toggle_filemode(const char *filename)$/;"	f	signature:(const char *filename)
cl_trace_cb	tests/clar.h	/^typedef void (cl_trace_cb)($/;"	t
cl_trace_event	tests/clar.h	/^typedef enum cl_trace_event {$/;"	g
cl_trace_event	tests/clar.h	/^} cl_trace_event;$/;"	t	typeref:enum:cl_trace_event
cl_trace_register	tests/clar.c	/^void cl_trace_register(cl_trace_cb *cb, void *payload)$/;"	f	signature:(cl_trace_cb *cb, void *payload)
cl_warning	tests/clar.h	109;"	d
cl_win32_pass	tests/clar_libgit2.h	36;"	d
clar__assert	tests/clar.c	/^void clar__assert($/;"	f	signature:( int condition, const char *file, int line, const char *error_msg, const char *description, int should_abort)
clar__assert_equal	tests/clar.c	/^void clar__assert_equal($/;"	f	signature:( const char *file, int line, const char *err, int should_abort, const char *fmt, ...)
clar__assert_equal_file	tests/clar_libgit2.c	/^void clar__assert_equal_file($/;"	f	signature:( const char *expected_data, size_t expected_bytes, int ignore_cr, const char *path, const char *file, int line)
clar__assert_equal_oid	tests/clar_libgit2.h	/^GIT_INLINE(void) clar__assert_equal_oid($/;"	f	signature:( const char *file, int line, const char *desc, const git_oid *one, const git_oid *two)
clar__assert_in_range	tests/clar_libgit2.h	/^GIT_INLINE(void) clar__assert_in_range($/;"	f	signature:( int lo, int val, int hi, const char *file, int line, const char *err, int should_abort)
clar__fail	tests/clar.c	/^void clar__fail($/;"	f	signature:( const char *file, int line, const char *error_msg, const char *description, int should_abort)
clar__skip	tests/clar.c	/^void clar__skip(void)$/;"	f	signature:(void)
clar_error	tests/clar.c	/^struct clar_error {$/;"	s	file:
clar_error::description	tests/clar.c	/^	char *description;$/;"	m	struct:clar_error	file:	access:public
clar_error::error_msg	tests/clar.c	/^	const char *error_msg;$/;"	m	struct:clar_error	file:	access:public
clar_error::file	tests/clar.c	/^	const char *file;$/;"	m	struct:clar_error	file:	access:public
clar_error::line_number	tests/clar.c	/^	int line_number;$/;"	m	struct:clar_error	file:	access:public
clar_error::next	tests/clar.c	/^	struct clar_error *next;$/;"	m	struct:clar_error	typeref:struct:clar_error::clar_error	file:	access:public
clar_error::suite	tests/clar.c	/^	const char *suite;$/;"	m	struct:clar_error	file:	access:public
clar_error::test	tests/clar.c	/^	const char *test;$/;"	m	struct:clar_error	file:	access:public
clar_error::test_number	tests/clar.c	/^	int test_number;$/;"	m	struct:clar_error	file:	access:public
clar_func	tests/clar.c	/^struct clar_func {$/;"	s	file:
clar_func::name	tests/clar.c	/^	const char *name;$/;"	m	struct:clar_func	file:	access:public
clar_func::ptr	tests/clar.c	/^	void (*ptr)(void);$/;"	m	struct:clar_func	file:	access:public
clar_parse_args	tests/clar.c	/^clar_parse_args(int argc, char **argv)$/;"	f	file:	signature:(int argc, char **argv)
clar_print_error	tests/clar/print.h	/^static void clar_print_error(int num, const struct clar_error *error)$/;"	f	signature:(int num, const struct clar_error *error)
clar_print_init	tests/clar/print.h	/^static void clar_print_init(int test_count, int suite_count, const char *suite_names)$/;"	f	signature:(int test_count, int suite_count, const char *suite_names)
clar_print_onabort	tests/clar/print.h	/^static void clar_print_onabort(const char *msg, ...)$/;"	f	signature:(const char *msg, ...)
clar_print_onsuite	tests/clar/print.h	/^static void clar_print_onsuite(const char *suite_name, int suite_index)$/;"	f	signature:(const char *suite_name, int suite_index)
clar_print_ontest	tests/clar/print.h	/^static void clar_print_ontest(const char *test_name, int test_number, enum cl_test_status status)$/;"	f	signature:(const char *test_name, int test_number, enum cl_test_status status)
clar_print_shutdown	tests/clar/print.h	/^static void clar_print_shutdown(int test_count, int suite_count, int error_count)$/;"	f	signature:(int test_count, int suite_count, int error_count)
clar_report_errors	tests/clar.c	/^clar_report_errors(void)$/;"	f	file:	signature:(void)
clar_run_suite	tests/clar.c	/^clar_run_suite(const struct clar_suite *suite, const char *filter)$/;"	f	file:	signature:(const struct clar_suite *suite, const char *filter)
clar_run_test	tests/clar.c	/^clar_run_test($/;"	f	file:	signature:( const struct clar_func *test, const struct clar_func *initialize, const struct clar_func *cleanup)
clar_sandbox	tests/clar/sandbox.h	/^static int clar_sandbox(void)$/;"	f	signature:(void)
clar_sandbox_path	tests/clar/sandbox.h	/^const char *clar_sandbox_path(void)$/;"	f	signature:(void)
clar_suite	tests/clar.c	/^struct clar_suite {$/;"	s	file:
clar_suite::cleanup	tests/clar.c	/^	struct clar_func cleanup;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:	access:public
clar_suite::enabled	tests/clar.c	/^	int enabled;$/;"	m	struct:clar_suite	file:	access:public
clar_suite::initialize	tests/clar.c	/^	struct clar_func initialize;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:	access:public
clar_suite::name	tests/clar.c	/^	const char *name;$/;"	m	struct:clar_suite	file:	access:public
clar_suite::test_count	tests/clar.c	/^	size_t test_count;$/;"	m	struct:clar_suite	file:	access:public
clar_suite::tests	tests/clar.c	/^	const struct clar_func *tests;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:	access:public
clar_test	tests/clar.c	/^clar_test(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
clar_test_init	tests/clar.c	/^clar_test_init(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
clar_test_run	tests/clar.c	/^clar_test_run(void)$/;"	f	signature:(void)
clar_test_shutdown	tests/clar.c	/^clar_test_shutdown(void)$/;"	f	signature:(void)
clar_unsandbox	tests/clar/sandbox.h	/^static void clar_unsandbox(void)$/;"	f	signature:(void)
clar_usage	tests/clar.c	/^clar_usage(const char *arg)$/;"	f	file:	signature:(const char *arg)
clean_name	tests/generate.py	/^    def clean_name(self):$/;"	m	class:Module	access:public
clean_state_log_if_needed	deps/regex/regexec.c	/^clean_state_log_if_needed (re_match_context_t *mctx, int next_state_log_idx)$/;"	f	file:	signature:(re_match_context_t *mctx, int next_state_log_idx)
clean_test_config	tests/config/read.c	/^static void clean_test_config(void *unused)$/;"	f	file:	signature:(void *unused)
cleanup	include/git2/sys/filter.h	/^	git_filter_cleanup_fn  cleanup;$/;"	m	struct:git_filter	access:public
cleanup	tests/clar.c	/^	struct clar_func cleanup;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:	access:public
cleanup_1397	tests/index/tests.c	/^static void cleanup_1397(void *opaque)$/;"	f	file:	signature:(void *opaque)
cleanup__remove_file	tests/status/single.c	/^cleanup__remove_file(void *_file)$/;"	f	file:	signature:(void *_file)
cleanup_basedir	tests/core/mkdir.c	/^static void cleanup_basedir(void *ref)$/;"	f	file:	signature:(void *ref)
cleanup_basic_dirs	tests/core/mkdir.c	/^static void cleanup_basic_dirs(void *ref)$/;"	f	file:	signature:(void *ref)
cleanup_chmod_root	tests/core/mkdir.c	/^static void cleanup_chmod_root(void *ref)$/;"	f	file:	signature:(void *ref)
cleanup_fixture_submodules	tests/submodule/submodule_helpers.c	/^static void cleanup_fixture_submodules(void *payload)$/;"	f	file:	signature:(void *payload)
cleanup_local_repo	tests/network/fetchlocal.c	/^static void cleanup_local_repo(void *path)$/;"	f	file:	signature:(void *path)
cleanup_myrepo	tests/index/tests.c	/^static void cleanup_myrepo(void *opaque)$/;"	f	file:	signature:(void *opaque)
cleanup_new_repo	tests/status/worktree_init.c	/^static void cleanup_new_repo(void *path)$/;"	f	file:	signature:(void *path)
cleanup_repository	tests/clone/empty.c	/^static void cleanup_repository(void *path)$/;"	f	file:	signature:(void *path)
cleanup_repository	tests/clone/nonetwork.c	/^static void cleanup_repository(void *path)$/;"	f	file:	signature:(void *path)
cleanup_repository	tests/fetchhead/nonetwork.c	/^static void cleanup_repository(void *path)$/;"	f	file:	signature:(void *path)
cleanup_repository	tests/repo/init.c	/^static void cleanup_repository(void *path)$/;"	f	file:	signature:(void *path)
cleanup_sandbox	tests/network/fetchlocal.c	/^static void cleanup_sandbox(void *unused)$/;"	f	file:	signature:(void *unused)
clear_cache	src/cache.c	/^static void clear_cache(git_cache *cache)$/;"	f	file:	signature:(git_cache *cache)
clear_commit_marks	src/merge.c	/^static void clear_commit_marks(git_commit_list_node *commit, unsigned int mark)$/;"	f	file:	signature:(git_commit_list_node *commit, unsigned int mark)
clear_commit_marks_1	src/merge.c	/^static void clear_commit_marks_1(git_commit_list **plist,$/;"	f	file:	signature:(git_commit_list **plist, git_commit_list_node *commit, unsigned int mark)
clear_commit_marks_many	src/merge.c	/^static void clear_commit_marks_many(git_vector *commits, unsigned int mark)$/;"	f	file:	signature:(git_vector *commits, unsigned int mark)
clear_git_env	tests/repo/env.c	/^static void clear_git_env(void)$/;"	f	file:	signature:(void)
clear_parser_state	src/transports/http.c	/^static void clear_parser_state(http_subtransport *t)$/;"	f	file:	signature:(http_subtransport *t)
clear_uptodate	src/index.c	/^static void clear_uptodate(git_index *index)$/;"	f	file:	signature:(git_index *index)
clone_cancel_checkout_cb	tests/clone/nonetwork.c	/^static int clone_cancel_checkout_cb($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *b, const git_diff_file *t, const git_diff_file *w, void *payload)
clone_cancel_fetch_transfer_progress_cb	tests/clone/nonetwork.c	/^static int clone_cancel_fetch_transfer_progress_cb($/;"	f	file:	signature:( const git_transfer_progress *stats, void *data)
clone_checkout_strategy	include/git2/submodule.h	/^	unsigned int clone_checkout_strategy;$/;"	m	struct:git_submodule_update_options	access:public
clone_into	src/clone.c	/^static int clone_into(git_repository *repo, git_remote *_remote, const git_fetch_options *opts, const git_checkout_options *co_opts, const char *branch)$/;"	f	file:	signature:(git_repository *repo, git_remote *_remote, const git_fetch_options *opts, const git_checkout_options *co_opts, const char *branch)
clone_local_into	src/clone.c	/^static int clone_local_into(git_repository *repo, git_remote *remote, const git_fetch_options *fetch_opts, const git_checkout_options *co_opts, const char *branch, int link)$/;"	f	file:	signature:(git_repository *repo, git_remote *remote, const git_fetch_options *fetch_opts, const git_checkout_options *co_opts, const char *branch, int link)
close	examples/network/index-pack.c	14;"	d	file:
close	include/git2/sys/stream.h	/^	int (*close)(struct git_stream *);$/;"	m	struct:git_stream	access:public
close	include/git2/sys/transport.h	/^	int (*close)(git_smart_subtransport *transport);$/;"	m	struct:git_smart_subtransport	access:public
close	include/git2/sys/transport.h	/^	int (*close)(git_transport *transport);$/;"	m	struct:git_transport	access:public
close	include/git2/types.h	/^	int (*close)(git_writestream *stream);$/;"	m	struct:git_writestream	access:public
close	tests/clar_libgit2_trace.c	/^	void (*close)(void);$/;"	m	struct:method	file:	access:public
close_algorithm_provider	src/hash/hash_win32.h	/^	hash_win32_cng_close_algorithm_provider_fn close_algorithm_provider;$/;"	m	struct:hash_cng_prov	access:public
close_socket	src/socket_stream.c	/^static int close_socket(GIT_SOCKET s)$/;"	f	file:	signature:(GIT_SOCKET s)
closedir	src/win32/dir.h	40;"	d
cmd	examples/remote.c	/^	enum subcmd cmd;$/;"	m	struct:opts	typeref:enum:opts::subcmd	file:	access:public
cmd	src/transports/git.c	/^	const char *cmd;$/;"	m	struct:__anon197	file:	access:public
cmd	src/transports/smart.h	/^	char *cmd;$/;"	m	struct:git_pkt_cmd	access:public
cmd	src/transports/ssh.c	/^	const char *cmd;$/;"	m	struct:__anon182	file:	access:public
cmd_add	examples/remote.c	/^static int cmd_add(git_repository *repo, struct opts *o)$/;"	f	file:	signature:(git_repository *repo, struct opts *o)
cmd_receivepack	src/transports/git.c	/^static const char cmd_receivepack[] = "git-receive-pack";$/;"	v	file:
cmd_receivepack	src/transports/ssh.c	/^	char *cmd_receivepack;$/;"	m	struct:__anon183	file:	access:public
cmd_receivepack	src/transports/ssh.c	/^static const char cmd_receivepack[] = "git-receive-pack";$/;"	v	file:
cmd_remove	examples/remote.c	/^static int cmd_remove(git_repository *repo, struct opts *o)$/;"	f	file:	signature:(git_repository *repo, struct opts *o)
cmd_rename	examples/remote.c	/^static int cmd_rename(git_repository *repo, struct opts *o)$/;"	f	file:	signature:(git_repository *repo, struct opts *o)
cmd_seturl	examples/remote.c	/^static int cmd_seturl(git_repository *repo, struct opts *o)$/;"	f	file:	signature:(git_repository *repo, struct opts *o)
cmd_show	examples/remote.c	/^static int cmd_show(git_repository *repo, struct opts *o)$/;"	f	file:	signature:(git_repository *repo, struct opts *o)
cmd_uploadpack	src/transports/git.c	/^static const char cmd_uploadpack[] = "git-upload-pack";$/;"	v	file:
cmd_uploadpack	src/transports/ssh.c	/^	char *cmd_uploadpack;$/;"	m	struct:__anon183	file:	access:public
cmd_uploadpack	src/transports/ssh.c	/^static const char cmd_uploadpack[] = "git-upload-pack";$/;"	v	file:
cmp	src/hashsig.c	/^	hashsig_cmp cmp;$/;"	m	struct:__anon334	file:	access:public
cmp	src/tsort.c	/^	git__sort_r_cmp cmp;$/;"	m	struct:tsort_store	file:	access:public
cmp	src/util.c	/^	git__sort_r_cmp cmp;$/;"	m	struct:__anon261	file:	access:public
cmp_ints	tests/core/pqueue.c	/^static int cmp_ints(const void *v1, const void *v2)$/;"	f	file:	signature:(const void *v1, const void *v2)
cmp_ints_like_commit_time	tests/core/pqueue.c	/^static int cmp_ints_like_commit_time(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
cmp_objects	tests/object/raw/write.c	/^static void cmp_objects(git_rawobj *o1, git_rawobj *o2)$/;"	f	file:	signature:(git_rawobj *o1, git_rawobj *o2)
cmp_objects	tests/odb/loose.c	/^static void cmp_objects(git_rawobj *o, object_data *d)$/;"	f	file:	signature:(git_rawobj *o, object_data *d)
cmp_old_ref	src/refdb_fs.c	/^static int cmp_old_ref(int *cmp, git_refdb_backend *backend, const char *name,$/;"	f	file:	signature:(int *cmp, git_refdb_backend *backend, const char *name, const git_oid *old_id, const char *old_target)
cmp_recs	src/xdiff/xhistogram.c	/^static int cmp_recs(xpparam_t const *xpp,$/;"	f	file:	signature:(xpparam_t const *xpp, xrecord_t *r1, xrecord_t *r2)
cng	src/hash/hash_win32.h	/^		struct hash_cng_ctx cng;$/;"	m	union:git_hash_ctx::__anon223	typeref:struct:git_hash_ctx::__anon223::hash_cng_ctx	access:public
cng	src/hash/hash_win32.h	/^		struct hash_cng_prov cng;$/;"	m	union:git_hash_prov::__anon222	typeref:struct:git_hash_prov::__anon222::hash_cng_prov	access:public
cnt	src/xdiff/xhistogram.c	/^		unsigned int ptr, cnt;$/;"	m	struct:histindex::record	file:	access:public
cnt	src/xdiff/xhistogram.c	/^	unsigned int cnt,$/;"	m	struct:histindex	file:	access:public
coalesce	src/blame_git.c	/^static void coalesce(git_blame *blame)$/;"	f	file:	signature:(git_blame *blame)
code	deps/zlib/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon29	access:public
code	deps/zlib/inftrees.h	/^} code;$/;"	t	typeref:struct:__anon31
codecs	tests/generate.py	/^import re, fnmatch, os, codecs, pickle$/;"	i
codes	deps/zlib/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state	access:public
codetype	deps/zlib/inftrees.h	/^} codetype;$/;"	t	typeref:enum:__anon32
coll_syms	deps/regex/regex_internal.h	/^  int32_t *coll_syms;$/;"	m	struct:__anon6	access:public
collapse	src/tsort.c	/^static ssize_t collapse(void **dst, struct tsort_run *stack, ssize_t stack_curr, struct tsort_store *store, ssize_t size)$/;"	f	file:	signature:(void **dst, struct tsort_run *stack, ssize_t stack_curr, struct tsort_store *store, ssize_t size)
collect_attr_files	src/attr.c	/^static int collect_attr_files($/;"	f	file:	signature:( git_repository *repo, git_attr_session *attr_session, uint32_t flags, const char *path, git_vector *files)
collect_progress	tests/checkout/conflict.c	/^static void collect_progress($/;"	f	file:	signature:( const char *path, size_t completed_steps, size_t total_steps, void *payload)
color	examples/diff.c	/^	int color;$/;"	m	struct:opts	file:	access:public
color_printer	examples/diff.c	/^static int color_printer($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *data)
colors	examples/diff.c	/^static const char *colors[] = {$/;"	v	file:
comm_max	deps/zlib/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
commands	examples/network/git2.c	/^} commands[] = {$/;"	v	typeref:struct:__anon36
comment	deps/zlib/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
comment	src/transports/smart.h	/^	char comment[GIT_FLEX_ARRAY];$/;"	m	struct:__anon187	access:public
comment_pkt	src/transports/smart_pkt.c	/^static int comment_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
commit	include/git2/annotated_commit.h	/^	const git_annotated_commit *commit);$/;"	v
commit	include/git2/annotated_commit.h	/^	git_annotated_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_body(git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_message(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_message_encoding(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_message_raw(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_raw_header(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_summary(git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_oid *) git_commit_id(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_oid *) git_commit_tree_id(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_signature *) git_commit_author(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_signature *) git_commit_committer(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(git_repository *) git_commit_owner(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(git_time_t) git_commit_time(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(int) git_commit_time_offset(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(unsigned int) git_commit_parentcount(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(void) git_commit_free(git_commit *commit);$/;"	v
commit	include/git2/odb_backend.h	/^	int (*commit)(git_odb_writepack *writepack, git_transfer_progress *stats);$/;"	m	struct:git_odb_writepack	access:public
commit	src/annotated_commit.h	/^	git_commit *commit;$/;"	m	struct:git_annotated_commit	access:public
commit	src/blame.h	/^	git_commit *commit;$/;"	m	struct:git_blame__origin	access:public
commit	tests/commit/parent.c	/^static git_commit *commit;$/;"	v	file:
commit	tests/commit/write.c	/^static git_commit *commit;$/;"	v	file:
commit	tests/graph/descendant_of.c	/^static git_commit *commit;$/;"	v	file:
commit	tests/odb/loose_data.h	/^static object_data commit = {$/;"	v
commit_and_tag	tests/describe/t6120.c	/^static void commit_and_tag($/;"	f	file:	signature:( git_time_t *time, const char *commit_msg, const char *tag_name)
commit_bytes	tests/odb/loose_data.h	/^static unsigned char commit_bytes[] = {$/;"	v
commit_count	examples/describe.c	/^	size_t commit_count;$/;"	m	struct:__anon40	file:	access:public
commit_count	tests/revwalk/basic.c	46;"	d	file:
commit_count	tests/revwalk/hidecb.c	23;"	d	file:
commit_data	tests/object/raw/data.h	/^static unsigned char commit_data[] = {$/;"	v
commit_data	tests/odb/loose_data.h	/^static unsigned char commit_data[] = {$/;"	v
commit_error	src/commit_list.c	/^static int commit_error(git_commit_list_node *commit, const char *msg)$/;"	f	file:	signature:(git_commit_list_node *commit, const char *msg)
commit_head	tests/revwalk/basic.c	/^static const char *commit_head = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
commit_head	tests/revwalk/hidecb.c	/^static const char *commit_head = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
commit_head	tests/revwalk/simplify.c	/^static const char *commit_head = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
commit_id	src/describe.c	/^	git_oid commit_id;$/;"	m	struct:git_describe_result	file:	access:public
commit_id	tests/object/raw/data.h	/^static char *commit_id = "3d7f8a6af076c8c3f20071a8935cdbe8228594d1";$/;"	v
commit_id	tests/refs/races.c	/^static const char *commit_id = "099fabac3a9ea935598528c27f866e34089c2eff";$/;"	v	file:
commit_ids	tests/revwalk/basic.c	/^static const char *commit_ids[] = {$/;"	v	file:
commit_ids	tests/revwalk/hidecb.c	/^static git_oid commit_ids[commit_count];$/;"	v	file:
commit_index	src/stash.c	/^static int commit_index($/;"	f	file:	signature:( git_commit **i_commit, git_index *index, const git_signature *stasher, const char *message, const git_commit *parent)
commit_message	tests/commit/write.c	/^static const char *commit_message = "This commit has been created in memory\\n\\$/;"	v	file:
commit_msg	tests/refs/reflog/reflog.c	10;"	d	file:
commit_name	src/describe.c	/^struct commit_name {$/;"	s	file:
commit_name::name_checked	src/describe.c	/^	unsigned name_checked:1;$/;"	m	struct:commit_name	file:	access:public
commit_name::path	src/describe.c	/^	char *path;$/;"	m	struct:commit_name	file:	access:public
commit_name::peeled	src/describe.c	/^	git_oid peeled;$/;"	m	struct:commit_name	file:	access:public
commit_name::prio	src/describe.c	/^	unsigned prio:2; \/* annotated tag = 2, tag = 1, head = 0 *\/$/;"	m	struct:commit_name	file:	access:public
commit_name::sha1	src/describe.c	/^	git_oid sha1;$/;"	m	struct:commit_name	file:	access:public
commit_name::tag	src/describe.c	/^	git_tag *tag;$/;"	m	struct:commit_name	file:	access:public
commit_name_dup	src/describe.c	/^static int commit_name_dup(struct commit_name **out, struct commit_name *in)$/;"	f	file:	signature:(struct commit_name **out, struct commit_name *in)
commit_obj	tests/object/raw/data.h	/^static git_rawobj commit_obj = {$/;"	v
commit_parent_data	src/commit.c	/^} commit_parent_data;$/;"	t	typeref:struct:__anon213	file:
commit_parent_for_amend	src/commit.c	/^static const git_oid *commit_parent_for_amend(size_t curr, void *payload)$/;"	f	file:	signature:(size_t curr, void *payload)
commit_parent_from_array	src/commit.c	/^static const git_oid *commit_parent_from_array(size_t curr, void *payload)$/;"	f	file:	signature:(size_t curr, void *payload)
commit_parent_from_ids	src/commit.c	/^static const git_oid *commit_parent_from_ids(size_t curr, void *payload)$/;"	f	file:	signature:(size_t curr, void *payload)
commit_parent_from_varargs	src/commit.c	/^static const git_oid *commit_parent_from_varargs(size_t curr, void *payload)$/;"	f	file:	signature:(size_t curr, void *payload)
commit_parent_oids	src/commit.c	/^} commit_parent_oids;$/;"	t	typeref:struct:__anon212	file:
commit_parent_varargs	src/commit.c	/^} commit_parent_varargs;$/;"	t	typeref:struct:__anon211	file:
commit_parsing	examples/general.c	/^static void commit_parsing(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
commit_pool	src/revwalk.h	/^	git_pool commit_pool;$/;"	m	struct:git_revwalk	access:public
commit_quick_parse	src/commit_list.c	/^static int commit_quick_parse($/;"	f	file:	signature:( git_revwalk *walk, git_commit_list_node *commit, const uint8_t *buffer, size_t buffer_len)
commit_sorting_segment	tests/revwalk/basic.c	/^static const int commit_sorting_segment[][6] = {$/;"	v	file:
commit_sorting_time	tests/revwalk/basic.c	/^static const int commit_sorting_time[][6] = {$/;"	v	file:
commit_sorting_time_reverse	tests/revwalk/basic.c	/^static const int commit_sorting_time_reverse[][6] = {$/;"	v	file:
commit_sorting_topo	tests/revwalk/basic.c	/^static const int commit_sorting_topo[][6] = {$/;"	v	file:
commit_sorting_topo_reverse	tests/revwalk/basic.c	/^static const int commit_sorting_topo_reverse[][6] = {$/;"	v	file:
commit_strs	tests/revwalk/hidecb.c	/^static const char *commit_strs[] = {$/;"	v	file:
commit_untracked	src/stash.c	/^static int commit_untracked($/;"	f	file:	signature:( git_commit **u_commit, git_index *index, const git_signature *stasher, const char *message, git_commit *i_commit, uint32_t flags)
commit_worktree	src/stash.c	/^static int commit_worktree($/;"	f	file:	signature:( git_oid *w_commit_oid, git_index *index, const git_signature *stasher, const char *message, git_commit *i_commit, git_commit *b_commit, git_commit *u_commit)
commit_writing	examples/general.c	/^static void commit_writing(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
commits	examples/describe.c	/^	const char **commits;$/;"	m	struct:__anon40	file:	access:public
commits	src/odb_mempack.c	/^	git_array_t(struct memobject *) commits;$/;"	m	struct:memory_packer_db	file:	access:public
commits	src/revwalk.h	/^	git_oidmap *commits;$/;"	m	struct:git_revwalk	access:public
commitspec	examples/blame.c	/^	char *commitspec;$/;"	m	struct:opts	file:	access:public
committed	src/transaction.c	/^	unsigned int committed :1,$/;"	m	struct:__anon208	file:	access:public
committer	examples/log.c	/^	const char *committer;$/;"	m	struct:log_options	file:	access:public
committer	src/commit.h	/^	git_signature *committer;$/;"	m	struct:git_commit	access:public
committer	src/notes.h	/^	git_signature *committer;$/;"	m	struct:git_note	access:public
committer	src/reflog.h	/^	git_signature *committer;$/;"	m	struct:git_reflog_entry	access:public
committer_email	tests/commit/write.c	/^static const char *committer_email = "vicent@github.com";$/;"	v	file:
committer_name	tests/commit/write.c	/^static const char *committer_name = "Vicent Marti";$/;"	v	file:
common	src/transports/smart.h	/^	git_vector common;$/;"	m	struct:__anon193	access:public
common	src/transports/smart.h	/^	int common:1,$/;"	m	struct:transport_smart_caps	access:public
compare_checksum	src/index.c	/^static int compare_checksum(git_index *index)$/;"	f	file:	signature:(git_index *index)
compare_data	tests/checkout/crlf.c	/^struct compare_data$/;"	s	file:
compare_data::attrs	tests/checkout/crlf.c	/^	const char *attrs;$/;"	m	struct:compare_data	file:	access:public
compare_data::autocrlf	tests/checkout/crlf.c	/^	const char *autocrlf;$/;"	m	struct:compare_data	file:	access:public
compare_data::dirname	tests/checkout/crlf.c	/^	const char *dirname;$/;"	m	struct:compare_data	file:	access:public
compare_entries	src/tree.c	/^static int compare_entries(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
compare_file	tests/checkout/crlf.c	/^static int compare_file(void *payload, git_buf *actual_path)$/;"	f	file:	signature:(void *payload, git_buf *actual_path)
compare_pt	src/describe.c	/^static int compare_pt(const void *a_, const void *b_)$/;"	f	file:	signature:(const void *a_, const void *b_)
compare_structs	tests/core/vector.c	/^static int compare_structs(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
compare_them	tests/core/vector.c	/^static int compare_them(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
complete	src/filter.c	/^	bool complete;$/;"	m	struct:buf_stream	file:	access:public
complete	src/transports/auth_negotiate.c	/^		complete : 1;$/;"	m	struct:__anon194	file:	access:public
completed_bkref_map	deps/regex/regex_internal.h	/^  bitset_word_t completed_bkref_map;$/;"	m	struct:re_dfa_t	access:public
completed_steps	examples/network/clone.c	/^	size_t completed_steps;$/;"	m	struct:progress_data	file:	access:public
completed_steps	src/checkout.c	/^	size_t completed_steps;$/;"	m	struct:__anon215	file:	access:public
completion	include/git2/remote.h	/^	int (*completion)(git_remote_completion_type type, void *data);$/;"	m	struct:git_remote_callbacks	access:public
compress	include/git2/sys/refdb_backend.h	/^	int (*compress)(git_refdb_backend *backend);$/;"	m	struct:git_refdb_backend	access:public
compress_and_decompress_input_various_ways	tests/core/zstream.c	/^static void compress_and_decompress_input_various_ways(git_buf *input)$/;"	f	file:	signature:(git_buf *input)
compress_block	deps/zlib/trees.c	/^local void compress_block(s, ltree, dtree)$/;"	f
compress_filter	tests/filter/stream.c	/^static git_filter *compress_filter;$/;"	v	file:
compress_filter_stream_init	tests/filter/stream.c	/^static int compress_filter_stream_init($/;"	f	file:	signature:( git_writestream **out, git_filter *self, void **payload, const git_filter_source *src, git_writestream *next)
compress_func	deps/zlib/deflate.c	/^typedef block_state (*compress_func) OF((deflate_state *s, int flush));$/;"	t	file:
compress_stream	tests/filter/stream.c	/^struct compress_stream {$/;"	s	file:
compress_stream::current	tests/filter/stream.c	/^	char current;$/;"	m	struct:compress_stream	file:	access:public
compress_stream::current_chunk	tests/filter/stream.c	/^	size_t current_chunk;$/;"	m	struct:compress_stream	file:	access:public
compress_stream::mode	tests/filter/stream.c	/^	git_filter_mode_t mode;$/;"	m	struct:compress_stream	file:	access:public
compress_stream::next	tests/filter/stream.c	/^	git_writestream *next;$/;"	m	struct:compress_stream	file:	access:public
compress_stream::parent	tests/filter/stream.c	/^	git_writestream parent;$/;"	m	struct:compress_stream	file:	access:public
compress_stream_close	tests/filter/stream.c	/^static int compress_stream_close(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
compress_stream_free	tests/filter/stream.c	/^static void compress_stream_free(git_writestream *stream)$/;"	f	file:	signature:(git_writestream *stream)
compress_stream_write	tests/filter/stream.c	/^static int compress_stream_write(git_writestream *s, const char *buffer, size_t len)$/;"	f	file:	signature:(git_writestream *s, const char *buffer, size_t len)
compress_stream_write__deflated	tests/filter/stream.c	/^static int compress_stream_write__deflated(struct compress_stream *stream, const char *buffer, size_t len)$/;"	f	file:	signature:(struct compress_stream *stream, const char *buffer, size_t len)
compress_stream_write__inflated	tests/filter/stream.c	/^static int compress_stream_write__inflated(struct compress_stream *stream, const char *buffer, size_t len)$/;"	f	file:	signature:(struct compress_stream *stream, const char *buffer, size_t len)
compressed_len	deps/zlib/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state	access:public
compressing_objects_fmt	src/transports/local.c	/^static const char *compressing_objects_fmt = "Compressing objects: %.0f%% (%d\/%d)";$/;"	v	file:
compute_base	src/merge.c	/^static int compute_base($/;"	f	file:	signature:( git_annotated_commit **out, git_repository *repo, const git_annotated_commit *one, const git_annotated_commit *two, const git_merge_options *given_opts, size_t recursion_level)
compute_digest	src/filebuf.h	/^	bool compute_digest;$/;"	m	struct:git_filebuf	access:public
compute_minrun	src/tsort.c	/^static size_t compute_minrun(size_t n)$/;"	f	file:	signature:(size_t n)
compute_write_order	src/pack-objects.c	/^static git_pobject **compute_write_order(git_packbuilder *pb)$/;"	f	file:	signature:(git_packbuilder *pb)
concurrent_compress	tests/threads/refdb.c	/^static bool concurrent_compress = false;$/;"	v	file:
concurrent_compress	tests/threads/refdb.c	/^static bool concurrent_compress = true;$/;"	v	file:
cond	src/pack-objects.c	/^	git_cond cond;$/;"	m	struct:thread_params	file:	access:public
config	deps/zlib/deflate.c	/^} config;$/;"	t	typeref:struct:config_s	file:
config	src/config.c	/^	git_config *config;$/;"	m	struct:rename_data	file:	access:public
config	src/diff_xdiff.h	/^	xdemitconf_t config;$/;"	m	struct:__anon251	access:public
config	src/remote.c	/^	git_config *config;$/;"	m	struct:update_data	file:	access:public
config__refresh	src/config_file.c	/^static int config__refresh(git_config_backend *cfg)$/;"	f	file:	signature:(git_config_backend *cfg)
config_backend_cmp	src/config.c	/^static int config_backend_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
config_delete	src/config_file.c	/^static int config_delete(git_config_backend *cfg, const char *name)$/;"	f	file:	signature:(git_config_backend *cfg, const char *name)
config_delete_multivar	src/config_file.c	/^static int config_delete_multivar(git_config_backend *cfg, const char *name, const char *regexp)$/;"	f	file:	signature:(git_config_backend *cfg, const char *name, const char *regexp)
config_delete_multivar_readonly	src/config_file.c	/^static int config_delete_multivar_readonly(git_config_backend *cfg, const char *name, const char *regexp)$/;"	f	file:	signature:(git_config_backend *cfg, const char *name, const char *regexp)
config_delete_readonly	src/config_file.c	/^static int config_delete_readonly(git_config_backend *cfg, const char *name)$/;"	f	file:	signature:(git_config_backend *cfg, const char *name)
config_error_nofiles	src/config.c	/^static int config_error_nofiles(const char *name)$/;"	f	file:	signature:(const char *name)
config_error_notfound	src/config.c	/^static int config_error_notfound(const char *name)$/;"	f	file:	signature:(const char *name)
config_error_readonly	src/config_file.c	/^static int config_error_readonly(void)$/;"	f	file:	signature:(void)
config_files	examples/general.c	/^static void config_files(const char *repo_path)$/;"	f	file:	signature:(const char *repo_path)
config_free	src/config.c	/^static void config_free(git_config *cfg)$/;"	f	file:	signature:(git_config *cfg)
config_get	src/config_file.c	/^static int config_get(git_config_backend *cfg, const char *key, git_config_entry **out)$/;"	f	file:	signature:(git_config_backend *cfg, const char *key, git_config_entry **out)
config_get	src/pack-objects.c	100;"	d	file:
config_get	src/pack-objects.c	123;"	d	file:
config_iterator_free	src/config_file.c	/^static void config_iterator_free($/;"	f	file:	signature:( git_config_iterator* iter)
config_iterator_new	src/config_file.c	/^static int config_iterator_new($/;"	f	file:	signature:( git_config_iterator **iter, struct git_config_backend* backend)
config_iterator_next	src/config_file.c	/^static int config_iterator_next($/;"	f	file:	signature:( git_config_entry **entry, git_config_iterator *iter)
config_keychar	src/config_file.c	/^GIT_INLINE(int) config_keychar(int c)$/;"	f	signature:(int c)
config_level_to_sysdir	src/settings.c	/^static int config_level_to_sysdir(int config_level)$/;"	f	file:	signature:(int config_level)
config_lock	src/config_file.c	/^static int config_lock(git_config_backend *_cfg)$/;"	f	file:	signature:(git_config_backend *_cfg)
config_lock_readonly	src/config_file.c	/^static int config_lock_readonly(git_config_backend *_cfg)$/;"	f	file:	signature:(git_config_backend *_cfg)
config_open	src/config_file.c	/^static int config_open(git_config_backend *cfg, git_config_level_t level)$/;"	f	file:	signature:(git_config_backend *cfg, git_config_level_t level)
config_parse	src/config_file.c	/^static int config_parse($/;"	f	file:	signature:( struct reader *reader, int (*on_section)(struct reader **reader, const char *current_section, const char *line, size_t line_len, void *data), int (*on_variable)(struct reader **reader, const char *current_section, char *var_name, char *var_value, const char *line, size_t line_len, void *data), int (*on_comment)(struct reader **reader, const char *line, size_t line_len, void *data), int (*on_eof)(struct reader **reader, const char *current_section, void *data), void *data)
config_read	src/config_file.c	/^static int config_read(git_strmap *values, diskfile_backend *cfg_file, struct reader *reader, git_config_level_t level, int depth)$/;"	f	file:	signature:(git_strmap *values, diskfile_backend *cfg_file, struct reader *reader, git_config_level_t level, int depth)
config_readonly_open	src/config_file.c	/^static int config_readonly_open(git_config_backend *cfg, git_config_level_t level)$/;"	f	file:	signature:(git_config_backend *cfg, git_config_level_t level)
config_refresh	src/config_file.c	/^static int config_refresh(git_config_backend *cfg)$/;"	f	file:	signature:(git_config_backend *cfg)
config_s	deps/zlib/deflate.c	/^typedef struct config_s {$/;"	s	file:
config_s::func	deps/zlib/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:	access:public
config_s::good_length	deps/zlib/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
config_s::max_chain	deps/zlib/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:	access:public
config_s::max_lazy	deps/zlib/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
config_s::nice_length	deps/zlib/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:	access:public
config_set	src/config_file.c	/^static int config_set(git_config_backend *cfg, const char *name, const char *value)$/;"	f	file:	signature:(git_config_backend *cfg, const char *name, const char *value)
config_set_multivar	src/config_file.c	/^static int config_set_multivar($/;"	f	file:	signature:( git_config_backend *cfg, const char *name, const char *regexp, const char *value)
config_set_multivar_readonly	src/config_file.c	/^static int config_set_multivar_readonly($/;"	f	file:	signature:( git_config_backend *cfg, const char *name, const char *regexp, const char *value)
config_set_readonly	src/config_file.c	/^static int config_set_readonly(git_config_backend *cfg, const char *name, const char *value)$/;"	f	file:	signature:(git_config_backend *cfg, const char *name, const char *value)
config_snapshot	src/config_file.c	/^static int config_snapshot(git_config_backend **out, git_config_backend *in)$/;"	f	file:	signature:(git_config_backend **out, git_config_backend *in)
config_unlock	src/config_file.c	/^static int config_unlock(git_config_backend *_cfg, int success)$/;"	f	file:	signature:(git_config_backend *_cfg, int success)
config_unlock_readonly	src/config_file.c	/^static int config_unlock_readonly(git_config_backend *_cfg, int success)$/;"	f	file:	signature:(git_config_backend *_cfg, int success)
config_write	src/config_file.c	/^static int config_write(diskfile_backend *cfg, const char *key, const regex_t *preg, const char* value)$/;"	f	file:	signature:(diskfile_backend *cfg, const char *key, const regex_t *preg, const char* value)
configuration_table	deps/zlib/deflate.c	/^local const config configuration_table[10] = {$/;"	v
configuration_table	deps/zlib/deflate.c	/^local const config configuration_table[2] = {$/;"	v
configure_templatedir	tests/repo/init.c	/^static void configure_templatedir(const char *template_path)$/;"	f	file:	signature:(const char *template_path)
configured	src/transports/auth_negotiate.c	/^	unsigned configured : 1,$/;"	m	struct:__anon194	file:	access:public
configured_ident	src/refs.c	/^int configured_ident(git_signature **out, const git_repository *repo)$/;"	f	signature:(git_signature **out, const git_repository *repo)
confirm_submodule_status	tests/submodule/status.c	/^static int confirm_submodule_status($/;"	f	file:	signature:( const char *path, unsigned int status_flags, void *payload)
conflict_driver_apply	tests/merge/driver.c	/^static int conflict_driver_apply($/;"	f	file:	signature:( git_merge_driver *s, const char **path_out, uint32_t *mode_out, git_buf *merged_out, const char *filter_name, const git_merge_driver_source *src)
conflict_entry_name	src/checkout.c	/^static int conflict_entry_name($/;"	f	file:	signature:( git_buf *out, const char *side_name, const char *filename)
conflict_name_cmp	src/index.c	/^static int conflict_name_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
conflicts	src/merge.h	/^	git_vector conflicts;$/;"	m	struct:__anon324	access:public
conflicts	tests/checkout/typechange.c	/^	int conflicts;$/;"	m	struct:__anon350	file:	access:public
conflicts	tests/index/addall.c	/^	size_t conflicts;$/;"	m	struct:__anon371	file:	access:public
conndata	tests/network/urlparse.c	/^static gitno_connection_data conndata;$/;"	v	file:
connect	include/git2/sys/stream.h	/^	int (*connect)(struct git_stream *);$/;"	m	struct:git_stream	access:public
connect	include/git2/sys/transport.h	/^	int (*connect)($/;"	m	struct:git_transport	access:public
connect_to_local_repository	tests/network/remote/local.c	/^static void connect_to_local_repository(const char *local_repository)$/;"	f	file:	signature:(const char *local_repository)
connected	src/openssl_stream.c	/^	bool connected;$/;"	m	struct:__anon276	file:	access:public
connected	src/transports/http.c	/^	bool connected;$/;"	m	struct:__anon176	file:	access:public
connected	src/transports/local.c	/^	unsigned connected : 1,$/;"	m	struct:__anon178	file:	access:public
connected	src/transports/smart.h	/^		connected : 1;$/;"	m	struct:__anon193	access:public
connection	src/transports/winhttp.c	/^	HINTERNET connection;$/;"	m	struct:__anon181	file:	access:public
connection_data	src/transports/http.c	/^	gitno_connection_data connection_data;$/;"	m	struct:__anon176	file:	access:public
connection_data	src/transports/winhttp.c	/^	gitno_connection_data connection_data;$/;"	m	struct:__anon181	file:	access:public
constraint	deps/regex/regex_internal.h	/^  unsigned int constraint : 10;	\/* context constraint *\/$/;"	m	struct:__anon7	access:public
containing_dir	src/attr_file.h	/^	char *containing_dir;$/;"	m	struct:__anon166	access:public
containing_dir_length	src/attr_file.h	/^	size_t containing_dir_length;$/;"	m	struct:__anon166	access:public
contains_angle_brackets	src/signature.c	/^static bool contains_angle_brackets(const char *input)$/;"	f	file:	signature:(const char *input)
contains_branches	tests/refs/branches/iterator.c	/^static void contains_branches(struct expectations exp[], git_branch_iterator *iter)$/;"	f	file:	signature:(struct expectations exp[], git_branch_iterator *iter)
contains_data	include/git2/diff.h	/^	unsigned int contains_data;$/;"	m	struct:__anon90	access:public
content	include/git2/diff.h	/^	const char *content; \/**< Pointer to diff text, not NUL-byte terminated *\/$/;"	m	struct:__anon93	access:public
content	src/patch_parse.h	/^	const char *content;$/;"	m	struct:__anon327	access:public
content	src/repo_template.h	/^	const char *content;$/;"	m	struct:__anon151	access:public
content	tests/core/vector.c	/^	int content;$/;"	m	struct:__anon358	file:	access:public
content_len	include/git2/diff.h	/^	size_t content_len;  \/**< Number of bytes of data *\/$/;"	m	struct:__anon93	access:public
content_len	src/patch_parse.h	/^	size_t content_len;$/;"	m	struct:__anon327	access:public
content_length	deps/http-parser/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser	access:public
content_offset	include/git2/diff.h	/^	git_off_t content_offset; \/**< Offset in the original file to the content *\/$/;"	m	struct:__anon93	access:public
content_size	src/patch.h	/^	size_t content_size;$/;"	m	struct:git_patch	access:public
content_type	src/transports/http.c	/^	char *content_type;$/;"	m	struct:__anon176	file:	access:public
contents	script/user_model.c	/^	void **contents;$/;"	m	struct:git_vector	file:	access:public
contents	src/vector.h	/^	void **contents;$/;"	m	struct:git_vector	access:public
context	deps/regex/regex_internal.h	/^  unsigned int context : 4;$/;"	m	struct:re_dfastate_t	access:public
context_lines	include/git2/diff.h	/^	uint32_t    context_lines;    \/**< defaults to 3 *\/$/;"	m	struct:__anon87	access:public
context_size	src/patch.h	/^	size_t context_size;$/;"	m	struct:git_patch	access:public
copy_block	deps/zlib/trees.c	/^local void copy_block(s, buf, len, header)$/;"	f
copy_common	src/transaction.c	/^static int copy_common(transaction_node *node, git_transaction *tx, const git_signature *sig, const char *msg)$/;"	f	file:	signature:(transaction_node *node, git_transaction *tx, const git_signature *sig, const char *msg)
copy_file	tests/index/tests.c	/^static void copy_file(const char *src, const char *dst)$/;"	f	file:	signature:(const char *src, const char *dst)
copy_refspecs	src/remote.c	/^static int copy_refspecs(git_strarray *array, const git_remote *remote, unsigned int push)$/;"	f	file:	signature:(git_strarray *array, const git_remote *remote, unsigned int push)
copy_threshold	include/git2/diff.h	/^	uint16_t copy_threshold;$/;"	m	struct:__anon96	access:public
count	include/git2/oidarray.h	/^	size_t count;$/;"	m	struct:git_oidarray	access:public
count	include/git2/strarray.h	/^	size_t count;$/;"	m	struct:git_strarray	access:public
count	src/status.c	/^	unsigned int count;$/;"	m	struct:status_file_info	file:	access:public
count	src/xdiff/xprepare.c	/^	long count;$/;"	m	struct:s_xdlclassifier	file:	access:public
count	tests/checkout/tree.c	/^	int count;$/;"	m	struct:checkout_cancel_at	file:	access:public
count	tests/core/dirent.c	/^	int count; \/* return count *\/$/;"	m	struct:name_data	file:	access:public
count	tests/core/vector.c	/^	int count;$/;"	m	struct:__anon358	file:	access:public
count	tests/status/status_helpers.h	/^	int count;$/;"	m	struct:__anon366	access:public
count	tests/submodule/lookup.c	/^	int count;$/;"	m	struct:__anon361	file:	access:public
count_allocs	src/win32/w32_crtdbg_stacktrace.c	/^	unsigned int count_allocs; \/* times this alloc signature seen since init *\/$/;"	m	struct:__anon292	file:	access:public
count_allocs_at_last_checkpoint	src/win32/w32_crtdbg_stacktrace.c	/^	unsigned int count_allocs_at_last_checkpoint; \/* times since last mark *\/$/;"	m	struct:__anon292	file:	access:public
count_attrs	tests/attr/repo.c	/^static int count_attrs($/;"	f	file:	signature:( const char *name, const char *value, void *payload)
count_cb	tests/refs/foreachglob.c	/^static int count_cb(const char *reference_name, void *payload)$/;"	f	file:	signature:(const char *reference_name, void *payload)
count_cfg_entries	tests/config/read.c	/^static int count_cfg_entries(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
count_cfg_entries_and_compare_levels	tests/config/read.c	/^static int count_cfg_entries_and_compare_levels($/;"	f	file:	signature:( const git_config_entry *entry, void *payload)
count_config_entries_cb	tests/config/config_helpers.c	/^static int count_config_entries_cb($/;"	f	file:	signature:( const git_config_entry *entry, void *payload)
count_config_entries_match	tests/config/config_helpers.c	/^int count_config_entries_match(git_repository *repo, const char *pattern)$/;"	f	signature:(git_repository *repo, const char *pattern)
count_me	tests/config/snapshot.c	/^static int count_me(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
count_references	tests/online/fetchhead.c	/^static int count_references(void)$/;"	f	file:	signature:(void)
count_run	src/tsort.c	/^static ssize_t count_run($/;"	f	file:	signature:( void **dst, ssize_t start, ssize_t size, struct tsort_store *store)
counter	tests/online/fetch.c	/^static int counter;$/;"	v	file:
counter	tests/submodule/status.c	/^	size_t counter;$/;"	m	struct:__anon362	file:	access:public
counting_objects_fmt	src/transports/local.c	/^static const char *counting_objects_fmt = "Counting objects %d\\r";$/;"	v	file:
cp_by_fd	src/fileops.c	/^static int cp_by_fd(int ifd, int ofd, bool close_fd_when_done)$/;"	f	file:	signature:(int ifd, int ofd, bool close_fd_when_done)
cp_link	src/fileops.c	/^static int cp_link(const char *from, const char *to, size_t link_size)$/;"	f	file:	signature:(const char *from, const char *to, size_t link_size)
cp_r_info	src/fileops.c	/^} cp_r_info;$/;"	t	typeref:struct:__anon264	file:
cr	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
crc	src/indexer.c	/^	uint32_t crc;$/;"	m	struct:entry	file:	access:public
crc32	deps/zlib/crc32.c	/^unsigned long ZEXPORT crc32(crc, buf, len)$/;"	f
crc32_big	deps/zlib/crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_combine	deps/zlib/crc32.c	/^uLong ZEXPORT crc32_combine(crc1, crc2, len2)$/;"	f
crc32_combine	deps/zlib/zlib.h	1714;"	d
crc32_combine64	deps/zlib/crc32.c	/^uLong ZEXPORT crc32_combine64(crc1, crc2, len2)$/;"	f
crc32_combine_	deps/zlib/crc32.c	/^local uLong crc32_combine_(crc1, crc2, len2)$/;"	f
crc32_little	deps/zlib/crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc_object	src/indexer.c	/^static int crc_object(uint32_t *crc_out, git_mwindow_file *mwf, git_off_t start, git_off_t size)$/;"	f	file:	signature:(uint32_t *crc_out, git_mwindow_file *mwf, git_off_t start, git_off_t size)
crc_table	deps/zlib/crc32.c	/^local z_crc_t FAR crc_table[TBLS][256];$/;"	v
crc_table	deps/zlib/crc32.h	/^local const z_crc_t FAR crc_table[TBLS][256] =$/;"	v
crc_table_empty	deps/zlib/crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
create_and_configure_origin	src/clone.c	/^static int create_and_configure_origin($/;"	f	file:	signature:( git_remote **out, git_repository *repo, const char *url, const git_clone_options *options)
create_annotation	tests/object/tag/write.c	/^void create_annotation(git_oid *tag_id, const char *name)$/;"	f	signature:(git_oid *tag_id, const char *name)
create_binary	src/patch_generate.c	/^static int create_binary($/;"	f	file:	signature:( git_diff_binary_t *out_type, char **out_data, size_t *out_datalen, size_t *out_inflatedlen, const char *a_data, size_t a_datalen, const char *b_data, size_t b_datalen)
create_bitflip_filter	tests/filter/custom_helpers.c	/^git_filter *create_bitflip_filter(void)$/;"	f	signature:(void)
create_branch	src/branch.c	/^static int create_branch($/;"	f	file:	signature:( git_reference **ref_out, git_repository *repository, const char *branch_name, const git_commit *commit, const char *from, int force)
create_branch	src/clone.c	/^static int create_branch($/;"	f	file:	signature:( git_reference **branch, git_repository *repo, const git_oid *target, const char *name, const char *log_message)
create_cd_newstate	deps/regex/regex_internal.c	/^create_cd_newstate (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_node_set *nodes, unsigned int context, unsigned int hash)
create_ci_newstate	deps/regex/regex_internal.c	/^create_ci_newstate (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_node_set *nodes, unsigned int hash)
create_commit_from_ids	tests/commit/write.c	/^static int create_commit_from_ids($/;"	f	file:	signature:( git_oid *result, const git_oid *tree_id, const git_oid *parent_id)
create_compress_filter	tests/filter/stream.c	/^git_filter *create_compress_filter(void)$/;"	f	signature:(void)
create_conflict	tests/checkout/tree.c	/^static void create_conflict(const char *path)$/;"	f	file:	signature:(const char *path)
create_conflicting_index	tests/checkout/conflict.c	/^static void create_conflicting_index(void)$/;"	f	file:	signature:(void)
create_deletion_refspecs	tests/online/push_util.c	/^int create_deletion_refspecs(git_vector *out, const git_remote_head **heads, size_t heads_len)$/;"	f	signature:(git_vector *out, const git_remote_head **heads, size_t heads_len)
create_dummy_commit	tests/network/remote/push.c	/^void create_dummy_commit(git_reference **out, git_repository *repo)$/;"	f	signature:(git_reference **out, git_repository *repo)
create_empty_file	src/repository.c	/^static int create_empty_file(const char *path, mode_t mode)$/;"	f	file:	signature:(const char *path, mode_t mode)
create_error	src/stash.c	/^static int create_error(int error, const char *msg)$/;"	f	file:	signature:(int error, const char *msg)
create_fake_stash_reference_and_reflog	tests/refs/revparse.c	/^static void create_fake_stash_reference_and_reflog(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
create_hash	src/hash/hash_win32.h	/^	hash_win32_cng_create_hash_fn create_hash;$/;"	m	struct:hash_cng_prov	access:public
create_index	tests/checkout/conflict.c	/^static void create_index(struct checkout_index_entry *entries, size_t entries_len)$/;"	f	file:	signature:(struct checkout_index_entry *entries, size_t entries_len)
create_index_error	src/index.c	/^static int create_index_error(int error, const char *msg)$/;"	f	file:	signature:(int error, const char *msg)
create_index_names	tests/checkout/conflict.c	/^static void create_index_names(struct checkout_name_entry *entries, size_t entries_len)$/;"	f	file:	signature:(struct checkout_name_entry *entries, size_t entries_len)
create_initial_commit	examples/init.c	/^static void create_initial_commit(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
create_initial_state	deps/regex/regcomp.c	/^create_initial_state (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
create_internal	src/remote.c	/^static int create_internal(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)$/;"	f	file:	signature:(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)
create_name_extension_data	src/index.c	/^static int create_name_extension_data(git_buf *name_buf, git_index_name_entry *conflict_name)$/;"	f	file:	signature:(git_buf *name_buf, git_index_name_entry *conflict_name)
create_new_reflog_file	src/refdb_fs.c	/^static int create_new_reflog_file(const char *filepath)$/;"	f	file:	signature:(const char *filepath)
create_note	tests/notes/notes.c	/^static void create_note(git_oid *note_oid, const char *canonical_namespace, const char *target_sha, const char *message)$/;"	f	file:	signature:(git_oid *note_oid, const char *canonical_namespace, const char *target_sha, const char *message)
create_paths	tests/iterator/index.c	/^static void create_paths(git_index *index, const char *root, int depth)$/;"	f	file:	signature:(git_index *index, const char *root, int depth)
create_paths	tests/iterator/workdir.c	/^static void create_paths(const char *root, int depth)$/;"	f	file:	signature:(const char *root, int depth)
create_popped_tree	src/tree.c	/^static int create_popped_tree(tree_stack_entry *current, tree_stack_entry *popped, git_buf *component)$/;"	f	file:	signature:(tree_stack_entry *current, tree_stack_entry *popped, git_buf *component)
create_refs	tests/threads/refdb.c	/^static void *create_refs(void *arg)$/;"	f	file:	signature:(void *arg)
create_remote_tracking_branch	tests/merge/workdir/setup.c	/^static int create_remote_tracking_branch(const char *branch_name, const char *oid_str)$/;"	f	file:	signature:(const char *branch_name, const char *oid_str)
create_repo	tests/generate_crlf.sh	/^create_repo() {$/;"	f
create_reuc_extension_data	src/index.c	/^static int create_reuc_extension_data(git_buf *reuc_buf, git_index_reuc_entry *reuc)$/;"	f	file:	signature:(git_buf *reuc_buf, git_index_reuc_entry *reuc)
create_reverse_filter	tests/filter/custom_helpers.c	/^git_filter *create_reverse_filter(const char *attrs)$/;"	f	signature:(const char *attrs)
create_token_tree	deps/regex/regcomp.c	/^create_token_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,$/;"	f	file:	signature:(re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right, const re_token_t *token)
create_tracking_branch	src/clone.c	/^static int create_tracking_branch($/;"	f	file:	signature:( git_reference **branch, git_repository *repo, const git_oid *target, const char *branch_name, const char *log_message)
create_tree	deps/regex/regcomp.c	/^create_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,$/;"	f	file:	signature:(re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right, re_token_type_t type)
create_virtual_base	src/merge.c	/^static int create_virtual_base($/;"	f	file:	signature:( git_annotated_commit **out, git_repository *repo, git_annotated_commit *one, git_annotated_commit *two, const git_merge_options *opts, size_t recursion_level)
create_wildcard_filter	tests/filter/wildcard.c	/^static git_filter *create_wildcard_filter(void)$/;"	f	file:	signature:(void)
created_lock	src/filebuf.h	/^	bool created_lock;$/;"	m	struct:git_filebuf	access:public
cred	include/git2/transport.h	/^GIT_EXTERN(int) git_cred_has_username(git_cred *cred);$/;"	v
cred	include/git2/transport.h	/^GIT_EXTERN(void) git_cred_free(git_cred *cred);$/;"	v
cred	src/transports/http.c	/^	git_cred *cred;$/;"	m	struct:__anon176	file:	access:public
cred	src/transports/ssh.c	/^	git_cred *cred;$/;"	m	struct:__anon183	file:	access:public
cred	src/transports/winhttp.c	/^	git_cred *cred;$/;"	m	struct:__anon181	file:	access:public
cred_acquire_cb	examples/network/common.c	/^int cred_acquire_cb(git_cred **out,$/;"	f	signature:(git_cred **out, const char * UNUSED(url), const char * UNUSED(username_from_url), unsigned int UNUSED(allowed_types), void * UNUSED(payload))
cred_acquire_cb	src/transports/smart.h	/^	git_cred_acquire_cb cred_acquire_cb;$/;"	m	struct:__anon193	access:public
cred_acquire_cb	tests/online/push.c	/^static int cred_acquire_cb($/;"	f	file:	signature:( git_cred **cred, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
cred_acquire_payload	src/transports/smart.h	/^	void *cred_acquire_payload;$/;"	m	struct:__anon193	access:public
cred_cb	tests/online/clone.c	/^static int cred_cb(git_cred **cred, const char *url, const char *user_from_url,$/;"	f	file:	signature:(git_cred **cred, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
cred_count_calls_cb	tests/online/clone.c	/^static int cred_count_calls_cb(git_cred **cred, const char *url, const char *user,$/;"	f	file:	signature:(git_cred **cred, const char *url, const char *user, unsigned int allowed_types, void *data)
cred_default	tests/online/clone.c	/^int cred_default($/;"	f	signature:( git_cred **cred, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
cred_failure_cb	tests/online/clone.c	/^static int cred_failure_cb($/;"	f	file:	signature:( git_cred **cred, const char *url, const char *username_from_url, unsigned int allowed_types, void *data)
cred_foo_bar	tests/online/clone.c	/^static int cred_foo_bar(git_cred **cred, const char *url, const char *username_from_url,$/;"	f	file:	signature:(git_cred **cred, const char *url, const char *username_from_url, unsigned int allowed_types, void *data)
credentials	include/git2/proxy.h	/^	git_cred_acquire_cb credentials;$/;"	m	struct:__anon125	access:public
credentials	include/git2/remote.h	/^	git_cred_acquire_cb credentials;$/;"	m	struct:git_remote_callbacks	access:public
credtype	include/git2/transport.h	/^	git_credtype_t credtype;$/;"	m	struct:git_cred	access:public
credtype_match	src/transports/http.c	/^static bool credtype_match(git_http_auth_scheme *scheme, void *data)$/;"	f	file:	signature:(git_http_auth_scheme *scheme, void *data)
credtypes	src/transports/auth.h	/^	git_credtype_t credtypes;$/;"	m	struct:__anon196	access:public
credtypes	src/transports/auth.h	/^	git_credtype_t credtypes;$/;"	m	struct:git_http_auth_context	access:public
crlf	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
crlf_action	src/crlf.c	/^	int crlf_action;$/;"	m	struct:crlf_attrs	file:	access:public
crlf_apply	src/crlf.c	/^static int crlf_apply($/;"	f	file:	signature:( git_filter *self, void **payload, git_buf *to, const git_buf *from, const git_filter_source *src)
crlf_apply_to_odb	src/crlf.c	/^static int crlf_apply_to_odb($/;"	f	file:	signature:( struct crlf_attrs *ca, git_buf *to, const git_buf *from, const git_filter_source *src)
crlf_apply_to_workdir	src/crlf.c	/^static int crlf_apply_to_workdir($/;"	f	file:	signature:( struct crlf_attrs *ca, git_buf *to, const git_buf *from)
crlf_attrs	src/crlf.c	/^struct crlf_attrs {$/;"	s	file:
crlf_attrs::auto_crlf	src/crlf.c	/^	int auto_crlf;$/;"	m	struct:crlf_attrs	file:	access:public
crlf_attrs::crlf_action	src/crlf.c	/^	int crlf_action;$/;"	m	struct:crlf_attrs	file:	access:public
crlf_attrs::eol	src/crlf.c	/^	int eol;$/;"	m	struct:crlf_attrs	file:	access:public
crlf_attrs::safe_crlf	src/crlf.c	/^	int safe_crlf;$/;"	m	struct:crlf_attrs	file:	access:public
crlf_check	src/crlf.c	/^static int crlf_check($/;"	f	file:	signature:( git_filter *self, void **payload, const git_filter_source *src, const char **attr_values)
crlf_cleanup	src/crlf.c	/^static void crlf_cleanup($/;"	f	file:	signature:( git_filter *self, void *payload)
crlf_filter	src/crlf.c	/^struct crlf_filter {$/;"	s	file:
crlf_filter::f	src/crlf.c	/^	git_filter f;$/;"	m	struct:crlf_filter	file:	access:public
crlf_input_action	src/crlf.c	/^static int crlf_input_action(struct crlf_attrs *ca)$/;"	f	file:	signature:(struct crlf_attrs *ca)
cryptoapi	src/hash/hash_win32.h	/^		struct hash_cryptoapi_ctx cryptoapi;$/;"	m	union:git_hash_ctx::__anon223	typeref:struct:git_hash_ctx::__anon223::hash_cryptoapi_ctx	access:public
cryptoapi	src/hash/hash_win32.h	/^		struct hash_cryptoapi_prov cryptoapi;$/;"	m	union:git_hash_prov::__anon222	typeref:struct:git_hash_prov::__anon222::hash_cryptoapi_prov	access:public
csec	src/win32/thread.h	/^		CRITICAL_SECTION csec;$/;"	m	union:__anon287::__anon288	access:public
ct_data	deps/zlib/deflate.h	/^} FAR ct_data;$/;"	t	typeref:struct:ct_data_s
ct_data_s	deps/zlib/deflate.h	/^typedef struct ct_data_s {$/;"	s
ct_data_s::__anon29::code	deps/zlib/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon29	access:public
ct_data_s::__anon29::freq	deps/zlib/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon29	access:public
ct_data_s::__anon30::dad	deps/zlib/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon30	access:public
ct_data_s::__anon30::len	deps/zlib/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon30	access:public
ct_data_s::dl	deps/zlib/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon30	access:public
ct_data_s::fc	deps/zlib/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon29	access:public
ctime	include/git2/index.h	/^	git_index_time ctime;$/;"	m	struct:git_index_entry	access:public
ctime	src/index.c	/^	struct entry_time ctime;$/;"	m	struct:entry_long	typeref:struct:entry_long::entry_time	file:	access:public
ctime	src/index.c	/^	struct entry_time ctime;$/;"	m	struct:entry_short	typeref:struct:entry_short::entry_time	file:	access:public
ctor	include/git2/sys/stream.h	/^GIT_EXTERN(int) git_stream_register_tls(git_stream_cb ctor);$/;"	v
ctor_called	tests/core/stream.c	/^static int ctor_called;$/;"	v	file:
ctx	src/hash/hash_win32.h	/^	} ctx;$/;"	m	struct:git_hash_ctx	typeref:union:git_hash_ctx::__anon223	access:public
ctx	src/pack-objects.h	/^	git_hash_ctx ctx;$/;"	m	struct:git_packbuilder	access:public
ctx	src/patch_parse.c	/^	git_patch_parse_ctx *ctx;$/;"	m	struct:__anon163	file:	access:public
ctx	src/stransport_stream.c	/^	SSLContextRef ctx;$/;"	m	struct:__anon298	file:	access:public
ctx_type	deps/regex/regex_internal.h	/^    re_context_type ctx_type;	\/* for ANCHOR *\/$/;"	m	union:__anon7::__anon8	access:public
ctxlen	src/xdiff/xdiff.h	/^	long ctxlen;$/;"	m	struct:s_xdemitconf	access:public
cur	src/index.h	/^	size_t cur;$/;"	m	struct:git_index_conflict_iterator	access:public
cur_idx	deps/regex/regex_internal.h	/^  int cur_idx;$/;"	m	struct:re_string_t	access:public
cur_state	deps/regex/regex_internal.h	/^  mbstate_t cur_state;$/;"	m	struct:re_string_t	access:public
curl_error	src/curl_stream.c	/^	char curl_error[CURL_ERROR_SIZE + 1];$/;"	m	struct:__anon232	file:	access:public
curl_stream	src/curl_stream.c	/^} curl_stream;$/;"	t	typeref:struct:__anon232	file:
curls_certificate	src/curl_stream.c	/^static int curls_certificate(git_cert **out, git_stream *stream)$/;"	f	file:	signature:(git_cert **out, git_stream *stream)
curls_close	src/curl_stream.c	/^static int curls_close(git_stream *stream)$/;"	f	file:	signature:(git_stream *stream)
curls_connect	src/curl_stream.c	/^static int curls_connect(git_stream *stream)$/;"	f	file:	signature:(git_stream *stream)
curls_free	src/curl_stream.c	/^static void curls_free(git_stream *stream)$/;"	f	file:	signature:(git_stream *stream)
curls_read	src/curl_stream.c	/^static ssize_t curls_read(git_stream *stream, void *data, size_t len)$/;"	f	file:	signature:(git_stream *stream, void *data, size_t len)
curls_set_proxy	src/curl_stream.c	/^static int curls_set_proxy(git_stream *stream, const git_proxy_options *proxy_opts)$/;"	f	file:	signature:(git_stream *stream, const git_proxy_options *proxy_opts)
curls_write	src/curl_stream.c	/^static ssize_t curls_write(git_stream *stream, const char *data, size_t len, int flags)$/;"	f	file:	signature:(git_stream *stream, const char *data, size_t len, int flags)
curpos	src/pack.h	/^	git_off_t curpos;$/;"	m	struct:git_packfile_stream	access:public
current	src/config.c	/^	git_config_iterator *current;$/;"	m	struct:__anon337	file:	access:public
current	src/iterator.c	/^	tree_iterator_entry *current;$/;"	m	struct:__anon268	file:	access:public
current	src/iterator.h	/^	int (*current)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon256	access:public
current	src/path.h	/^	WIN32_FIND_DATAW current;$/;"	m	struct:git_path_diriter	access:public
current	src/rebase.c	/^	size_t current;$/;"	m	struct:git_rebase	file:	access:public
current	tests/filter/stream.c	/^	char current;$/;"	m	struct:compress_stream	file:	access:public
current_chunk	tests/filter/stream.c	/^	size_t current_chunk;$/;"	m	struct:compress_stream	file:	access:public
current_diff_line	src/blame.h	/^	size_t current_diff_line;$/;"	m	struct:git_blame	access:public
current_head_target	tests/refs/create.c	/^static const char *current_head_target = "refs\/heads\/master";$/;"	v	file:
current_head_target	tests/refs/read.c	/^static const char *current_head_target = "refs\/heads\/master";$/;"	v	file:
current_hunk	src/blame.h	/^	git_blame_hunk *current_hunk;$/;"	m	struct:git_blame	access:public
current_is_ignored	src/iterator.c	/^	int current_is_ignored;$/;"	m	struct:__anon272	file:	access:public
current_master_tip	tests/refs/create.c	/^static const char *current_master_tip = "099fabac3a9ea935598528c27f866e34089c2eff";$/;"	v	file:
current_master_tip	tests/refs/createwithlog.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_master_tip	tests/refs/delete.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_master_tip	tests/refs/read.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_master_tip	tests/refs/reflog/reflog.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_path	src/iterator.c	/^	git_buf current_path;$/;"	m	struct:__anon272	file:	access:public
current_stream	src/transports/git.c	/^	git_proto_stream *current_stream;$/;"	m	struct:__anon198	file:	access:public
current_stream	src/transports/smart.h	/^	git_smart_subtransport_stream *current_stream;$/;"	m	struct:__anon193	access:public
current_stream	src/transports/ssh.c	/^	ssh_stream *current_stream;$/;"	m	struct:__anon183	file:	access:public
current_thread	src/global.h	/^	git_thread *current_thread;$/;"	m	struct:__anon225	access:public
custom_headers	include/git2/remote.h	/^	git_strarray custom_headers;$/;"	m	struct:__anon55	access:public
custom_headers	include/git2/remote.h	/^	git_strarray custom_headers;$/;"	m	struct:__anon56	access:public
custom_headers	src/push.h	/^	const git_strarray *custom_headers;$/;"	m	struct:git_push	access:public
custom_headers	src/transports/smart.h	/^	git_strarray custom_headers;$/;"	m	struct:__anon193	access:public
custom_origin_name_remote_create	tests/clone/nonetwork.c	/^int custom_origin_name_remote_create($/;"	f	signature:( git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
custom_remote_ssh_with_paths	tests/online/clone.c	/^static int custom_remote_ssh_with_paths($/;"	f	file:	signature:( git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
custom_transport	tests/clone/transport.c	/^static int custom_transport($/;"	f	file:	signature:( git_transport **out, git_remote *owner, void *payload)
custom_transport_remote_create	tests/clone/transport.c	/^static int custom_transport_remote_create($/;"	f	file:	signature:( git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
custom_transports	src/transport.c	/^static git_vector custom_transports = GIT_VECTOR_INIT;$/;"	v	file:
cvar_cache	src/repository.h	/^	git_cvar_value cvar_cache[GIT_CVAR_CACHE_MAX];$/;"	m	struct:git_repository	access:public
cvar_free	src/config_file.c	/^static void cvar_free(cvar_t *var)$/;"	f	file:	signature:(cvar_t *var)
cvar_name	src/config_cache.c	/^	const char *cvar_name;$/;"	m	struct:map_data	file:	access:public
cvar_t	src/config_file.c	/^typedef struct cvar_t {$/;"	s	file:
cvar_t	src/config_file.c	/^} cvar_t;$/;"	t	typeref:struct:cvar_t	file:
cvar_t::entry	src/config_file.c	/^	git_config_entry *entry;$/;"	m	struct:cvar_t	file:	access:public
cvar_t::included	src/config_file.c	/^	bool included; \/* whether this is part of [include] *\/$/;"	m	struct:cvar_t	file:	access:public
cvar_t::next	src/config_file.c	/^	struct cvar_t *next;$/;"	m	struct:cvar_t	typeref:struct:cvar_t::cvar_t	file:	access:public
cvar_type	include/git2/config.h	/^	git_cvar_t cvar_type;$/;"	m	struct:__anon112	access:public
d	tests/diff/blob.c	/^static git_blob *d, *alien;$/;"	v	file:
d_buf	deps/zlib/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state	access:public
d_code	deps/zlib/deflate.h	305;"	d
d_desc	deps/zlib/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
d_ino	src/win32/dir.h	/^	int d_ino;$/;"	m	struct:git__dirent	access:public
d_name	src/win32/dir.h	/^	git_win32_utf8_path d_name;$/;"	m	struct:git__dirent	access:public
dad	deps/zlib/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon30	access:public
data	deps/http-parser/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser	access:public
data	deps/regex/regex_internal.h	/^  bin_tree_t data[BIN_TREE_STORAGE_SIZE];$/;"	m	struct:bin_tree_storage_t	access:public
data	include/git2/diff.h	/^	const char *data;$/;"	m	struct:__anon89	access:public
data	include/git2/transport.h	/^	void *data;$/;"	m	struct:__anon79	access:public
data	src/diff_tform.c	/^	git_buf data;$/;"	m	struct:__anon156	file:	access:public
data	src/hash.h	/^	void *data;$/;"	m	struct:__anon319	access:public
data	src/map.h	/^	void *data; \/* data bytes			*\/$/;"	m	struct:__anon237	access:public
data	src/netops.h	/^	char *data;$/;"	m	struct:gitno_buffer	access:public
data	src/odb.h	/^	void *data;			\/**< Raw, decompressed object data. *\/$/;"	m	struct:__anon162	access:public
data	src/odb_loose.c	/^	void *data;$/;"	m	struct:foreach_state	file:	access:public
data	src/odb_mempack.c	/^	char data[GIT_FLEX_ARRAY];$/;"	m	struct:memobject	file:	access:public
data	src/pack-objects.c	/^	void *data;$/;"	m	struct:unpacked	file:	access:public
data	src/transports/smart.h	/^	char data[GIT_FLEX_ARRAY];$/;"	m	struct:__anon188	access:public
data	tests/core/zstream.c	/^static const char *data = "This is a test test test of This is a test";$/;"	v	file:
data	tests/odb/loose_data.h	/^    unsigned char *data;   \/* (uncompressed) object data                *\/$/;"	m	struct:object_data	access:public
data	tests/stash/foreach.c	/^struct callback_data data;$/;"	v	typeref:struct:callback_data
data_cb	src/patch_generate.h	/^	git_diff_line_cb data_cb;$/;"	m	struct:git_patch_generated_output	access:public
data_pkt	src/transports/smart_pkt.c	/^static int data_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
data_ready	src/pack-objects.c	/^	size_t data_ready;$/;"	m	struct:thread_params	file:	access:public
data_type	deps/zlib/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s	access:public
datalen	include/git2/diff.h	/^	size_t datalen;$/;"	m	struct:__anon89	access:public
datatype	src/pathspec.h	/^	int datatype;$/;"	m	struct:git_pathspec_match_list	access:public
date_am	src/date.c	/^static void date_am(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_midnight	src/date.c	/^static void date_midnight(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_mode	src/date.c	/^} date_mode;$/;"	t	typeref:enum:__anon299	file:
date_never	src/date.c	/^static void date_never(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_noon	src/date.c	/^static void date_noon(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_now	src/date.c	/^static void date_now(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_pm	src/date.c	/^static void date_pm(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_tea	src/date.c	/^static void date_tea(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
date_time	src/date.c	/^static void date_time(struct tm *tm, struct tm *now, int hour)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int hour)
date_yesterday	src/date.c	/^static void date_yesterday(struct tm *tm, struct tm *now, int *num)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, int *num)
db	include/git2/odb.h	/^GIT_EXTERN(void) git_odb_free(git_odb *db);$/;"	v
db	include/git2/sys/refdb_backend.h	/^	git_refdb *db;$/;"	m	struct:git_reference_iterator	access:public
db	src/reflog.h	/^	git_refdb *db;$/;"	m	struct:git_reflog	access:public
db	src/refs.h	/^	git_refdb *db;$/;"	m	struct:git_reference	access:public
db	src/transaction.c	/^	git_refdb *db;$/;"	m	struct:git_transaction	file:	access:public
debug	tests/checkout/checkout_helpers.h	/^	int debug;$/;"	m	struct:__anon351	access:public
debug	tests/diff/diff_helpers.h	/^	int debug;$/;"	m	struct:__anon369	access:public
debug	tests/status/status_helpers.h	/^	bool debug;$/;"	m	struct:__anon365	access:public
debug	tests/status/status_helpers.h	/^	bool debug;$/;"	m	struct:__anon366	access:public
declared_size	include/git2/odb_backend.h	/^	git_off_t declared_size;$/;"	m	struct:git_odb_stream	access:public
decref_split	src/blame_git.c	/^static void decref_split(git_blame__entry *split)$/;"	f	file:	signature:(git_blame__entry *split)
def_ff	src/xdiff/xemit.c	/^static long def_ff(const char *rec, long len, char *buf, long sz, void *priv)$/;"	f	file:	signature:(const char *rec, long len, char *buf, long sz, void *priv)
default_driver	include/git2/merge.h	/^	const char *default_driver;$/;"	m	struct:__anon132	access:public
default_driver	src/merge_driver.h	/^	const char *default_driver;$/;"	m	struct:git_merge_driver_source	access:public
default_free	src/transports/cred.c	/^static void default_free(struct git_cred *cred)$/;"	f	file:	signature:(struct git_cred *cred)
default_remote_create	src/clone.c	/^static int default_remote_create($/;"	f	file:	signature:( git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
default_repository_create	src/clone.c	/^static int default_repository_create(git_repository **out, const char *path, int bare, void *payload)$/;"	f	file:	signature:(git_repository **out, const char *path, int bare, void *payload)
default_value	src/config_cache.c	/^	int default_value;$/;"	m	struct:map_data	file:	access:public
defer_driver_apply	tests/merge/driver.c	/^static int defer_driver_apply($/;"	f	file:	signature:( git_merge_driver *s, const char **path_out, uint32_t *mode_out, git_buf *merged_out, const char *filter_name, const git_merge_driver_source *src)
deflate	deps/zlib/deflate.c	/^int ZEXPORT deflate (strm, flush)$/;"	f
deflateBound	deps/zlib/deflate.c	/^uLong ZEXPORT deflateBound(strm, sourceLen)$/;"	f
deflateCopy	deps/zlib/deflate.c	/^int ZEXPORT deflateCopy (dest, source)$/;"	f
deflateEnd	deps/zlib/deflate.c	/^int ZEXPORT deflateEnd (strm)$/;"	f
deflateInit	deps/zlib/zlib.h	1647;"	d
deflateInit2	deps/zlib/zlib.h	1651;"	d
deflateInit2_	deps/zlib/deflate.c	/^int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,$/;"	f
deflateInit_	deps/zlib/deflate.c	/^int ZEXPORT deflateInit_(strm, level, version, stream_size)$/;"	f
deflateParams	deps/zlib/deflate.c	/^int ZEXPORT deflateParams(strm, level, strategy)$/;"	f
deflatePending	deps/zlib/deflate.c	/^int ZEXPORT deflatePending (strm, pending, bits)$/;"	f
deflatePrime	deps/zlib/deflate.c	/^int ZEXPORT deflatePrime (strm, bits, value)$/;"	f
deflateReset	deps/zlib/deflate.c	/^int ZEXPORT deflateReset (strm)$/;"	f
deflateResetKeep	deps/zlib/deflate.c	/^int ZEXPORT deflateResetKeep (strm)$/;"	f
deflateSetDictionary	deps/zlib/deflate.c	/^int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)$/;"	f
deflateSetHeader	deps/zlib/deflate.c	/^int ZEXPORT deflateSetHeader (strm, head)$/;"	f
deflateTune	deps/zlib/deflate.c	/^int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)$/;"	f
deflate_copyright	deps/zlib/deflate.c	/^const char deflate_copyright[] =$/;"	v
deflate_fast	deps/zlib/deflate.c	/^local block_state deflate_fast(s, flush)$/;"	f
deflate_huff	deps/zlib/deflate.c	/^local block_state deflate_huff(s, flush)$/;"	f
deflate_rle	deps/zlib/deflate.c	/^local block_state deflate_rle(s, flush)$/;"	f
deflate_slow	deps/zlib/deflate.c	/^local block_state deflate_slow(s, flush)$/;"	f
deflate_state	deps/zlib/deflate.h	/^} FAR deflate_state;$/;"	t	typeref:struct:internal_state
deflate_stored	deps/zlib/deflate.c	/^local block_state deflate_stored(s, flush)$/;"	f
del	include/git2/sys/config.h	/^	int (*del)(struct git_config_backend *, const char *key);$/;"	m	struct:git_config_backend	access:public
del	include/git2/sys/refdb_backend.h	/^	int (*del)(git_refdb_backend *backend, const char *ref_name, const git_oid *old_id, const char *old_target);$/;"	m	struct:git_refdb_backend	access:public
del_multivar	include/git2/sys/config.h	/^	int (*del_multivar)(struct git_config_backend *, const char *key, const char *regexp);$/;"	m	struct:git_config_backend	access:public
delete_cb	tests/describe/describe.c	/^static int delete_cb(git_reference *ref, void *payload)$/;"	f	file:	signature:(git_reference *ref, void *payload)
delete_head	tests/repo/repo_helpers.c	/^void delete_head(git_repository* repo)$/;"	f	signature:(git_repository* repo)
delete_one_config	tests/submodule/modify.c	/^static int delete_one_config(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
delete_refs	src/transports/smart.h	/^		delete_refs:1,$/;"	m	struct:transport_smart_caps	access:public
delete_refs	tests/threads/refdb.c	/^static void *delete_refs(void *arg)$/;"	f	file:	signature:(void *arg)
deleted	src/index.h	/^	git_vector deleted; \/* deleted entries if readers > 0 *\/$/;"	m	struct:git_index	access:public
deletions	src/diff_stats.c	/^	size_t deletions;$/;"	m	struct:__anon227	file:	access:public
deletions	src/diff_stats.c	/^	size_t deletions;$/;"	m	struct:git_diff_stats	file:	access:public
delta	src/pack-objects.h	/^	struct git_pobject *delta; \/* delta base object *\/$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject	access:public
delta	src/patch.h	/^	git_diff_delta *delta;$/;"	m	struct:git_patch	access:public
delta	src/patch_generate.c	/^	git_diff_delta delta;$/;"	m	struct:__anon160	file:	access:public
delta_cache_size	src/pack-objects.h	/^	size_t delta_cache_size;$/;"	m	struct:git_packbuilder	access:public
delta_cacheable	src/pack-objects.c	/^static int delta_cacheable($/;"	f	file:	signature:( git_packbuilder *pb, size_t src_size, size_t trg_size, size_t delta_size)
delta_child	src/pack-objects.h	/^	struct git_pobject *delta_child; \/* deltified objects who bases me *\/$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject	access:public
delta_data	src/pack-objects.h	/^	void *delta_data;$/;"	m	struct:git_pobject	access:public
delta_index	src/patch_generate.h	/^	size_t delta_index;$/;"	m	struct:git_patch_generated	access:public
delta_info	src/indexer.c	/^struct delta_info {$/;"	s	file:
delta_info::delta_off	src/indexer.c	/^	git_off_t delta_off;$/;"	m	struct:delta_info	file:	access:public
delta_is_unchanged	src/diff_print.c	/^static bool delta_is_unchanged(const git_diff_delta *delta)$/;"	f	file:	signature:(const git_diff_delta *delta)
delta_make_rename	src/diff_tform.c	/^GIT_INLINE(void) delta_make_rename($/;"	f	signature:( git_diff_delta *to, const git_diff_delta *from, uint16_t similarity)
delta_off	src/indexer.c	/^	git_off_t delta_off;$/;"	m	struct:delta_info	file:	access:public
delta_sibling	src/pack-objects.h	/^	struct git_pobject *delta_sibling; \/* other deltified objects$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject	access:public
delta_size	src/pack-objects.h	/^	size_t delta_size;$/;"	m	struct:git_pobject	access:public
deltas	src/diff.h	/^	git_vector       deltas;    \/* vector of git_diff_delta *\/$/;"	m	struct:git_diff	access:public
deltas	src/indexer.c	/^	git_vector deltas;$/;"	m	struct:git_indexer	file:	access:public
dend	src/xdiff/xtypes.h	/^	long dstart, dend;$/;"	m	struct:s_xdfile	access:public
depth	deps/zlib/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state	access:public
depth	src/config_file.c	/^	int depth;$/;"	m	struct:parse_data	file:	access:public
depth	src/describe.c	/^	int depth;$/;"	m	struct:possible_tag	file:	access:public
depth	src/fileops.c	/^	int depth;$/;"	m	struct:__anon263	file:	access:public
depth	src/ignore.h	/^	int depth;$/;"	m	struct:__anon331	access:public
depth	src/pack-objects.c	/^	size_t depth;$/;"	m	struct:thread_params	file:	access:public
depth	src/pack-objects.c	/^	size_t depth;$/;"	m	struct:unpacked	file:	access:public
der_data	src/stransport_stream.c	/^	CFDataRef der_data;$/;"	m	struct:__anon298	file:	access:public
dereference_object	src/object.c	/^static int dereference_object(git_object **dereferenced, git_object *obj)$/;"	f	file:	signature:(git_object **dereferenced, git_object *obj)
dereference_to_non_tag	src/revparse.c	/^static int dereference_to_non_tag(git_object **out, git_object *obj)$/;"	f	file:	signature:(git_object **out, git_object *obj)
describe	src/describe.c	/^static int describe($/;"	f	file:	signature:( struct get_name_data *data, git_commit *commit)
describe_not_found	src/describe.c	/^static int describe_not_found(const git_oid *oid, const char *message_format) {$/;"	f	file:	signature:(const git_oid *oid, const char *message_format)
describe_options	examples/describe.c	/^	git_describe_options describe_options;$/;"	m	struct:__anon40	file:	access:public
describe_options	examples/describe.c	/^} describe_options;$/;"	t	typeref:struct:__anon40	file:
describe_options_init	examples/describe.c	/^static void describe_options_init(describe_options *opts)$/;"	f	file:	signature:(describe_options *opts)
describe_strategy	include/git2/describe.h	/^	unsigned int describe_strategy; \/**< default: GIT_DESCRIBE_DEFAULT *\/$/;"	m	struct:git_describe_options	access:public
description	deps/http-parser/http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:	access:public
description	include/git2/repository.h	/^	const char *description;$/;"	m	struct:__anon119	access:public
description	src/annotated_commit.h	/^	const char *description;$/;"	m	struct:git_annotated_commit	access:public
description	tests/clar.c	/^	char *description;$/;"	m	struct:clar_error	file:	access:public
destpath	tests/odb/alternates.c	/^static git_buf destpath, filepath;$/;"	v	file:
destroy_hash	src/hash/hash_win32.h	/^	hash_win32_cng_destroy_hash_fn destroy_hash;$/;"	m	struct:hash_cng_prov	access:public
detach	src/repository.c	/^static int detach(git_repository *repo, const git_oid *id, const char *from)$/;"	f	file:	signature:(git_repository *repo, const git_oid *id, const char *from)
detect_data_type	deps/zlib/trees.c	/^local int detect_data_type(s)$/;"	f
dev	include/git2/index.h	/^	uint32_t dev;$/;"	m	struct:git_index_entry	access:public
dev	src/index.c	/^	uint32_t dev;$/;"	m	struct:entry_long	file:	access:public
dev	src/index.c	/^	uint32_t dev;$/;"	m	struct:entry_short	file:	access:public
df_data	src/merge.c	/^	struct merge_diff_df_data df_data;$/;"	m	struct:merge_diff_find_data	typeref:struct:merge_diff_find_data::merge_diff_df_data	file:	access:public
df_path	src/merge.c	/^	const char *df_path;$/;"	m	struct:merge_diff_df_data	file:	access:public
dfa	deps/regex/regex_internal.h	/^  const re_dfa_t *const dfa;$/;"	m	struct:__anon12	access:public
dfa	deps/regex/regex_internal.h	/^  const re_dfa_t *dfa;$/;"	m	struct:__anon12	access:public
did_hide	src/revwalk.h	/^		did_hide: 1,$/;"	m	struct:git_revwalk	access:public
did_push	src/revwalk.h	/^		did_push: 1;$/;"	m	struct:git_revwalk	access:public
did_rename	src/filebuf.h	/^	bool did_rename;$/;"	m	struct:git_filebuf	access:public
diff	include/git2/diff.h	/^GIT_EXTERN(int) git_diff_is_sorted_icase(const git_diff *diff);$/;"	v
diff	include/git2/diff.h	/^GIT_EXTERN(size_t) git_diff_num_deltas(const git_diff *diff);$/;"	v
diff	include/git2/diff.h	/^GIT_EXTERN(void) git_diff_free(git_diff *diff);$/;"	v
diff	src/checkout.c	/^	git_diff *diff;$/;"	m	struct:__anon215	file:	access:public
diff	src/diff_stats.c	/^	git_diff *diff;$/;"	m	struct:git_diff_stats	file:	access:public
diff	src/patch_generate.h	/^	git_diff *diff; \/* for refcount purposes, maybe NULL for blob diffs *\/$/;"	m	struct:git_patch_generated	access:public
diff	tests/diff/tree.c	/^static git_diff *diff;$/;"	v	file:
diff_assert_equal	tests/diff/diff_helpers.c	/^void diff_assert_equal(git_diff *a, git_diff *b)$/;"	f	signature:(git_diff *a, git_diff *b)
diff_binary	src/patch_generate.c	/^static int diff_binary(git_patch_generated_output *output, git_patch_generated *patch)$/;"	f	file:	signature:(git_patch_generated_output *output, git_patch_generated *patch)
diff_binary_cb	tests/diff/diff_helpers.c	/^int diff_binary_cb($/;"	f	signature:( const git_diff_delta *delta, const git_diff_binary *binary, void *payload)
diff_cb	src/patch_generate.h	/^	int (*diff_cb)(git_patch_generated_output *output,$/;"	m	struct:git_patch_generated_output	access:public
diff_context_find	src/diff_driver.c	/^static long diff_context_find($/;"	f	file:	signature:( const char *line, long line_len, char *out, long out_size, void *payload)
diff_context_line__pattern_match	src/diff_driver.c	/^static int diff_context_line__pattern_match($/;"	f	file:	signature:( git_diff_driver *driver, git_buf *line)
diff_context_line__simple	src/diff_driver.c	/^static int diff_context_line__simple($/;"	f	file:	signature:( git_diff_driver *driver, git_buf *line)
diff_data	tests/diff/binary.c	/^struct diff_data {$/;"	s	file:
diff_data::new_binary_base85	tests/diff/binary.c	/^	git_buf new_binary_base85;$/;"	m	struct:diff_data	file:	access:public
diff_data::new_binary_inflatedlen	tests/diff/binary.c	/^	size_t new_binary_inflatedlen;$/;"	m	struct:diff_data	file:	access:public
diff_data::new_binary_type	tests/diff/binary.c	/^	git_diff_binary_t new_binary_type;$/;"	m	struct:diff_data	file:	access:public
diff_data::new_id	tests/diff/binary.c	/^	git_oid new_id;$/;"	m	struct:diff_data	file:	access:public
diff_data::new_path	tests/diff/binary.c	/^	char *new_path;$/;"	m	struct:diff_data	file:	access:public
diff_data::old_binary_base85	tests/diff/binary.c	/^	git_buf old_binary_base85;$/;"	m	struct:diff_data	file:	access:public
diff_data::old_binary_inflatedlen	tests/diff/binary.c	/^	size_t old_binary_inflatedlen;$/;"	m	struct:diff_data	file:	access:public
diff_data::old_binary_type	tests/diff/binary.c	/^	git_diff_binary_t old_binary_type;$/;"	m	struct:diff_data	file:	access:public
diff_data::old_id	tests/diff/binary.c	/^	git_oid old_id;$/;"	m	struct:diff_data	file:	access:public
diff_data::old_path	tests/diff/binary.c	/^	char *old_path;$/;"	m	struct:diff_data	file:	access:public
diff_delta__alloc	src/diff_generate.c	/^static git_diff_delta *diff_delta__alloc($/;"	f	file:	signature:( git_diff_generated *diff, git_delta_t status, const char *path)
diff_delta__from_one	src/diff_generate.c	/^static int diff_delta__from_one($/;"	f	file:	signature:( git_diff_generated *diff, git_delta_t status, const git_index_entry *oitem, const git_index_entry *nitem)
diff_delta__from_two	src/diff_generate.c	/^static int diff_delta__from_two($/;"	f	file:	signature:( git_diff_generated *diff, git_delta_t status, const git_index_entry *old_entry, uint32_t old_mode, const git_index_entry *new_entry, uint32_t new_mode, const git_oid *new_id, const char *matched_pathspec)
diff_delta__i2w_path	src/diff_generate.c	/^GIT_INLINE(const char *) diff_delta__i2w_path(const git_diff_delta *delta)$/;"	f	signature:(const git_diff_delta *delta)
diff_delta__last_for_item	src/diff_generate.c	/^static git_diff_delta *diff_delta__last_for_item($/;"	f	file:	signature:( git_diff_generated *diff, const git_index_entry *item)
diff_delta__path	src/diff.c	/^GIT_INLINE(const char *) diff_delta__path(const git_diff_delta *delta)$/;"	f	signature:(const git_diff_delta *delta)
diff_delta_format_path	src/diff_print.c	/^static int diff_delta_format_path($/;"	f	file:	signature:( git_buf *out, const char *prefix, const char *filename)
diff_delta_format_similarity_header	src/diff_print.c	/^int diff_delta_format_similarity_header($/;"	f	signature:( git_buf *out, const git_diff_delta *delta)
diff_delta_format_with_paths	src/diff_print.c	/^static int diff_delta_format_with_paths($/;"	f	file:	signature:( git_buf *out, const git_diff_delta *delta, const char *template, const char *oldpath, const char *newpath)
diff_driver_add_patterns	src/diff_driver.c	/^static int diff_driver_add_patterns($/;"	f	file:	signature:( git_diff_driver *drv, const char *regex_str, int regex_flags)
diff_driver_alloc	src/diff_driver.c	/^static int diff_driver_alloc($/;"	f	file:	signature:( git_diff_driver **out, size_t *namelen_out, const char *name)
diff_driver_funcname	src/diff_driver.c	/^static int diff_driver_funcname(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
diff_driver_xfuncname	src/diff_driver.c	/^static int diff_driver_xfuncname(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
diff_drivers	src/repository.h	/^	git_diff_driver_registry *diff_drivers;$/;"	m	struct:git_repository	access:public
diff_expects	tests/diff/diff_helpers.h	/^} diff_expects;$/;"	t	typeref:struct:__anon369
diff_file_cb	tests/diff/diff_helpers.c	/^int diff_file_cb($/;"	f	signature:( const git_diff_delta *delta, float progress, void *payload)
diff_file_content_binary_by_content	src/diff_file.c	/^static void diff_file_content_binary_by_content(git_diff_file_content *fc)$/;"	f	file:	signature:(git_diff_file_content *fc)
diff_file_content_binary_by_size	src/diff_file.c	/^static bool diff_file_content_binary_by_size(git_diff_file_content *fc)$/;"	f	file:	signature:(git_diff_file_content *fc)
diff_file_content_commit_to_str	src/diff_file.c	/^static int diff_file_content_commit_to_str($/;"	f	file:	signature:( git_diff_file_content *fc, bool check_status)
diff_file_content_init_common	src/diff_file.c	/^static int diff_file_content_init_common($/;"	f	file:	signature:( git_diff_file_content *fc, const git_diff_options *opts)
diff_file_content_load_blob	src/diff_file.c	/^static int diff_file_content_load_blob($/;"	f	file:	signature:( git_diff_file_content *fc, git_diff_options *opts)
diff_file_content_load_workdir	src/diff_file.c	/^static int diff_file_content_load_workdir($/;"	f	file:	signature:( git_diff_file_content *fc, git_diff_options *diff_opts)
diff_file_content_load_workdir_file	src/diff_file.c	/^static int diff_file_content_load_workdir_file($/;"	f	file:	signature:( git_diff_file_content *fc, git_buf *path, git_diff_options *diff_opts)
diff_file_content_load_workdir_symlink	src/diff_file.c	/^static int diff_file_content_load_workdir_symlink($/;"	f	file:	signature:( git_diff_file_content *fc, git_buf *path)
diff_file_content_load_workdir_symlink_fake	src/diff_file.c	/^static int diff_file_content_load_workdir_symlink_fake($/;"	f	file:	signature:( git_diff_file_content *fc, git_buf *path)
diff_file_stats	src/diff_stats.c	/^} diff_file_stats;$/;"	t	typeref:struct:__anon227	file:
diff_find_match	src/diff_tform.c	/^} diff_find_match;$/;"	t	typeref:struct:__anon157	file:
diff_foreach_via_iterator	tests/diff/diff_helpers.c	/^int diff_foreach_via_iterator($/;"	f	signature:( git_diff *diff, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb line_cb, void *data)
diff_from_sources	src/patch_generate.c	/^static int diff_from_sources($/;"	f	file:	signature:( git_diff_file_content_src *oldsrc, git_diff_file_content_src *newsrc, const git_diff_options *opts, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb data_cb, void *payload)
diff_generated_alloc	src/diff_generate.c	/^static git_diff_generated *diff_generated_alloc($/;"	f	file:	signature:( git_repository *repo, git_iterator *old_iter, git_iterator *new_iter)
diff_generated_apply_options	src/diff_generate.c	/^static int diff_generated_apply_options($/;"	f	file:	signature:( git_diff_generated *diff, const git_diff_options *opts)
diff_generated_free	src/diff_generate.c	/^static void diff_generated_free(git_diff *d)$/;"	f	file:	signature:(git_diff *d)
diff_hunk_cb	tests/diff/diff_helpers.c	/^int diff_hunk_cb($/;"	f	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, void *payload)
diff_hunks	src/blame_git.c	/^static int diff_hunks(mmfile_t file_a, mmfile_t file_b, void *cb_data)$/;"	f	file:	signature:(mmfile_t file_a, mmfile_t file_b, void *cb_data)
diff_in_progress	src/diff_generate.c	/^} diff_in_progress;$/;"	t	typeref:struct:__anon297	file:
diff_insert_delta	src/diff_generate.c	/^static int diff_insert_delta($/;"	f	file:	signature:( git_diff_generated *diff, git_diff_delta *delta, const char *matched_pathspec)
diff_line_cb	tests/diff/diff_helpers.c	/^int diff_line_cb($/;"	f	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
diff_list	src/merge.c	/^	git_merge_diff_list *diff_list;$/;"	m	struct:merge_diff_find_data	file:	access:public
diff_load_index	src/diff_generate.c	/^static int diff_load_index(git_index **index, git_repository *repo)$/;"	f	file:	signature:(git_index **index, git_repository *repo)
diff_mnemonic_prefix	src/diff_generate.c	/^static const char *diff_mnemonic_prefix($/;"	f	file:	signature:( git_iterator_type_t type, bool left_side)
diff_opts	src/patch.h	/^	git_diff_options diff_opts;$/;"	m	struct:git_patch	access:public
diff_output	examples/common.c	/^int diff_output($/;"	f	signature:( const git_diff_delta *d, const git_diff_hunk *h, const git_diff_line *l, void *p)
diff_output_init	src/patch_generate.c	/^static void diff_output_init($/;"	f	file:	signature:( git_patch_generated_output *out, const git_diff_options *opts, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb data_cb, void *payload)
diff_output_to_patch	src/patch_generate.c	/^static void diff_output_to_patch($/;"	f	file:	signature:( git_patch_generated_output *out, git_patch_generated *patch)
diff_parsed_alloc	src/diff_parse.c	/^static git_diff_parsed *diff_parsed_alloc(void)$/;"	f	file:	signature:(void)
diff_parsed_free	src/diff_parse.c	/^static void diff_parsed_free(git_diff *d)$/;"	f	file:	signature:(git_diff *d)
diff_pathspec_match	src/diff_generate.c	/^static bool diff_pathspec_match($/;"	f	file:	signature:( const char **matched_pathspec, git_diff_generated *diff, const git_index_entry *entry)
diff_pick_suffix	src/diff_print.c	/^static char diff_pick_suffix(int mode)$/;"	f	file:	signature:(int mode)
diff_pick_suffix	tests/diff/diff_helpers.c	/^static char diff_pick_suffix(int mode)$/;"	f	file:	signature:(int mode)
diff_print	tests/diff/diff_helpers.c	/^void diff_print(FILE *fp, git_diff *diff)$/;"	f	signature:(FILE *fp, git_diff *diff)
diff_print_file_cb	tests/diff/diff_helpers.c	/^int diff_print_file_cb($/;"	f	signature:( const git_diff_delta *delta, float progress, void *payload)
diff_print_info	src/diff_print.c	/^} diff_print_info;$/;"	t	typeref:struct:__anon236	file:
diff_print_info_init__common	src/diff_print.c	/^static int diff_print_info_init__common($/;"	f	file:	signature:( diff_print_info *pi, git_buf *out, git_repository *repo, git_diff_format_t format, git_diff_line_cb cb, void *payload)
diff_print_info_init_fromdiff	src/diff_print.c	/^static int diff_print_info_init_fromdiff($/;"	f	file:	signature:( diff_print_info *pi, git_buf *out, git_diff *diff, git_diff_format_t format, git_diff_line_cb cb, void *payload)
diff_print_info_init_frompatch	src/diff_print.c	/^static int diff_print_info_init_frompatch($/;"	f	file:	signature:( diff_print_info *pi, git_buf *out, git_patch *patch, git_diff_format_t format, git_diff_line_cb cb, void *payload)
diff_print_modes	src/diff_print.c	/^static int diff_print_modes($/;"	f	file:	signature:( git_buf *out, const git_diff_delta *delta)
diff_print_oid_range	src/diff_print.c	/^static int diff_print_oid_range($/;"	f	file:	signature:( git_buf *out, const git_diff_delta *delta, int id_strlen)
diff_print_one_name_only	src/diff_print.c	/^static int diff_print_one_name_only($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *data)
diff_print_one_name_status	src/diff_print.c	/^static int diff_print_one_name_status($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *data)
diff_print_one_raw	src/diff_print.c	/^static int diff_print_one_raw($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *data)
diff_print_patch_binary	src/diff_print.c	/^static int diff_print_patch_binary($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_binary *binary, void *data)
diff_print_patch_file	src/diff_print.c	/^static int diff_print_patch_file($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *data)
diff_print_patch_file_binary	src/diff_print.c	/^static int diff_print_patch_file_binary($/;"	f	file:	signature:( diff_print_info *pi, git_diff_delta *delta, const char *old_pfx, const char *new_pfx, const git_diff_binary *binary)
diff_print_patch_file_binary_noshow	src/diff_print.c	/^static int diff_print_patch_file_binary_noshow($/;"	f	file:	signature:( diff_print_info *pi, git_diff_delta *delta, const char *old_pfx, const char *new_pfx)
diff_print_patch_hunk	src/diff_print.c	/^static int diff_print_patch_hunk($/;"	f	file:	signature:( const git_diff_delta *d, const git_diff_hunk *h, void *data)
diff_print_patch_line	src/diff_print.c	/^static int diff_print_patch_line($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *data)
diff_print_raw	tests/diff/diff_helpers.c	/^void diff_print_raw(FILE *fp, git_diff *diff)$/;"	f	signature:(FILE *fp, git_diff *diff)
diff_print_stats	examples/diff.c	/^static void diff_print_stats(git_diff *diff, struct opts *o)$/;"	f	file:	signature:(git_diff *diff, struct opts *o)
diff_required	src/patch_generate.c	/^static int diff_required(git_diff *diff, const char *action)$/;"	f	file:	signature:(git_diff *diff, const char *action)
diff_single_generate	src/patch_generate.c	/^static int diff_single_generate(patch_generated_with_delta *pd, git_xdiff_output *xo)$/;"	f	file:	signature:(patch_generated_with_delta *pd, git_xdiff_output *xo)
diff_stats_from_commit_oid	tests/diff/stats.c	/^static void diff_stats_from_commit_oid($/;"	f	file:	signature:( git_diff_stats **stats, const char *oidstr, bool rename)
diff_stop_after_2_files	tests/diff/index.c	/^static int diff_stop_after_2_files($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *payload)
diff_strdup_prefix	src/diff_generate.c	/^static char *diff_strdup_prefix(git_pool *pool, const char *prefix)$/;"	f	file:	signature:(git_pool *pool, const char *prefix)
diff_update_lines	src/diff_xdiff.c	/^static int diff_update_lines($/;"	f	file:	signature:( git_xdiff_info *info, git_diff_line *line, const char *content, size_t content_len)
diffcaps	src/diff_generate.c	/^	uint32_t diffcaps;$/;"	m	struct:__anon296	file:	access:public
diffdata_t	src/xdiff/xdiffi.h	/^} diffdata_t;$/;"	t	typeref:struct:s_diffdata
diffopts	examples/diff.c	/^	git_diff_options diffopts;$/;"	m	struct:opts	file:	access:public
digest	src/filebuf.h	/^	git_hash_ctx digest;$/;"	m	struct:git_filebuf	access:public
digits_for_value	src/diff_stats.c	/^static int digits_for_value(size_t val)$/;"	f	file:	signature:(size_t val)
dir	examples/cat-file.c	/^	const char *dir;$/;"	m	struct:opts	file:	access:public
dir	examples/diff.c	/^	const char *dir;$/;"	m	struct:opts	file:	access:public
dir	examples/init.c	/^	const char *dir;$/;"	m	struct:opts	file:	access:public
dir	src/ignore.h	/^	git_buf dir; \/* current directory reflected in ign_path *\/$/;"	m	struct:__anon331	access:public
dir	src/path.h	/^	DIR *dir;$/;"	m	struct:git_path_diriter	access:public
dir	src/win32/dir.h	/^	char dir[GIT_FLEX_ARRAY];$/;"	m	struct:__anon290	access:public
dir	tests/diff/racediffiter.c	/^	const char *dir;$/;"	m	struct:__anon368	file:	access:public
dir	tests/object/raw/write.c	/^    char *dir;    \/* object store (fan-out) directory name     *\/$/;"	m	struct:object_data	file:	access:public
dir	tests/odb/loose_data.h	/^    char          *dir;    \/* object store (fan-out) directory name     *\/$/;"	m	struct:object_data	access:public
dir_len	src/odb_loose.c	/^	size_t dir_len;$/;"	m	struct:__anon345	file:	access:public
dir_len	src/odb_loose.c	/^	size_t dir_len;$/;"	m	struct:foreach_state	file:	access:public
dir_map	src/fileops.h	/^	git_strmap *dir_map;$/;"	m	struct:git_futils_mkdir_options	access:public
dir_mode	include/git2/checkout.h	/^	unsigned int dir_mode;  \/**< default is 0755 *\/$/;"	m	struct:git_checkout_options	access:public
dir_root	src/ignore.h	/^	size_t dir_root; \/* offset in dir to repo root *\/$/;"	m	struct:__anon331	access:public
dircount	tests/merge/merge_helpers.c	/^int dircount(void *payload, git_buf *pathbuf)$/;"	f	signature:(void *payload, git_buf *pathbuf)
direach_flags	src/refdb_fs.c	/^	uint32_t direach_flags;$/;"	m	struct:refdb_fs_backend	file:	access:public
direction	src/transports/local.c	/^	int direction;$/;"	m	struct:__anon178	file:	access:public
direction	src/transports/smart.h	/^	int direction;$/;"	m	struct:__anon193	access:public
directoryfile	src/checkout.c	/^		directoryfile:1,$/;"	m	struct:__anon216	file:	access:public
dirent	src/win32/dir.h	34;"	d
dirent_cleanup__cb	tests/core/dirent.c	/^static void dirent_cleanup__cb(void *_d)$/;"	f	file:	signature:(void *_d)
diriter_update_paths	src/path.c	/^static int diriter_update_paths(git_path_diriter *diriter)$/;"	f	file:	signature:(git_path_diriter *diriter)
dirload_flags	src/iterator.c	/^	unsigned int dirload_flags;$/;"	m	struct:__anon272	file:	access:public
dirmode	src/fileops.c	/^	mode_t dirmode;$/;"	m	struct:__anon264	file:	access:public
dirname	tests/checkout/crlf.c	/^	const char *dirname;$/;"	m	struct:compare_data	file:	access:public
dirs	tests/object/tree/walk.c	/^	int dirs;$/;"	m	struct:treewalk_skip_data	file:	access:public
dirty	src/describe.c	/^	int dirty;$/;"	m	struct:git_describe_result	file:	access:public
dirty	tests/checkout/typechange.c	/^	int dirty;$/;"	m	struct:__anon350	file:	access:public
dirty_suffix	include/git2/describe.h	/^	const char *dirty_suffix;$/;"	m	struct:__anon108	access:public
disable	tests/generate.py	/^    def disable(self, excluded):$/;"	m	class:TestSuite	access:public
disable_filters	include/git2/checkout.h	/^	int disable_filters;    \/**< don't apply filters like CRLF conversion *\/$/;"	m	struct:git_checkout_options	access:public
discovered	tests/repo/discover.c	/^static git_buf discovered;$/;"	v	file:
disk_inode	src/odb.c	/^	ino_t disk_inode;$/;"	m	struct:__anon244	file:	access:public
diskfile_backend	src/config_file.c	/^} diskfile_backend;$/;"	t	typeref:struct:__anon154	file:
diskfile_header	src/config_file.c	/^} diskfile_header;$/;"	t	typeref:struct:__anon153	file:
diskfile_readonly_backend	src/config_file.c	/^} diskfile_readonly_backend;$/;"	t	typeref:struct:__anon155	file:
display_name	src/describe.c	/^static int display_name(git_buf *buf, git_repository *repo, struct commit_name *n)$/;"	f	file:	signature:(git_buf *buf, git_repository *repo, struct commit_name *n)
distbits	deps/zlib/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state	access:public
distcode	deps/zlib/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state	access:public
distfix	deps/zlib/inffixed.h	/^    static const code distfix[32] = {$/;"	v
distrust_filemode	src/index.h	/^	unsigned int distrust_filemode:1;$/;"	m	struct:git_index	access:public
dl	deps/zlib/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon30	access:public
dl_data	examples/network/fetch.c	/^struct dl_data {$/;"	s	file:
dl_data::fetch_opts	examples/network/fetch.c	/^	git_fetch_options *fetch_opts;$/;"	m	struct:dl_data	file:	access:public
dl_data::finished	examples/network/fetch.c	/^	int finished;$/;"	m	struct:dl_data	file:	access:public
dl_data::remote	examples/network/fetch.c	/^	git_remote *remote;$/;"	m	struct:dl_data	file:	access:public
dl_data::ret	examples/network/fetch.c	/^	int ret;$/;"	m	struct:dl_data	file:	access:public
dlen	tests/odb/loose_data.h	/^    size_t        dlen;    \/* length of (uncompressed) object data      *\/$/;"	m	struct:object_data	access:public
dll	src/hash/hash_win32.h	/^	HINSTANCE dll;$/;"	m	struct:hash_cng_prov	access:public
dmax	deps/zlib/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state	access:public
do_clone	examples/network/clone.c	/^int do_clone(git_repository *repo, int argc, char **argv)$/;"	f	signature:(git_repository *repo, int argc, char **argv)
do_conflicted_diff	tests/diff/index.c	/^static void do_conflicted_diff(diff_expects *exp, unsigned long flags)$/;"	f	file:	signature:(diff_expects *exp, unsigned long flags)
do_custom_reparse	tests/core/link.c	/^static void do_custom_reparse(const char *path)$/;"	f	file:	signature:(const char *path)
do_describe	examples/describe.c	/^static void do_describe(git_repository *repo, describe_options *opts)$/;"	f	file:	signature:(git_repository *repo, describe_options *opts)
do_describe_single	examples/describe.c	/^static void do_describe_single(git_repository *repo, describe_options *opts, const char *rev)$/;"	f	file:	signature:(git_repository *repo, describe_options *opts, const char *rev)
do_fetch	tests/online/fetch.c	/^static void do_fetch(const char *url, git_remote_autotag_option_t flag, int n)$/;"	f	file:	signature:(const char *url, git_remote_autotag_option_t flag, int n)
do_hardlink	tests/core/link.c	/^static void do_hardlink(const char *old, const char *new)$/;"	f	file:	signature:(const char *old, const char *new)
do_junction	tests/core/link.c	/^static void do_junction(const char *old, const char *new)$/;"	f	file:	signature:(const char *old, const char *new)
do_lstat	src/win32/posix_w32.c	/^static int do_lstat(const char *path, struct stat *buf, bool posixly_correct)$/;"	f	file:	signature:(const char *path, struct stat *buf, bool posixly_correct)
do_not_buffer	src/filebuf.h	/^	bool do_not_buffer;$/;"	m	struct:git_filebuf	access:public
do_progress_callback	src/indexer.c	/^static int do_progress_callback(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:	signature:(git_indexer *idx, git_transfer_progress *stats)
do_push	src/push.c	/^static int do_push(git_push *push, const git_remote_callbacks *callbacks)$/;"	f	file:	signature:(git_push *push, const git_remote_callbacks *callbacks)
do_push	tests/online/push.c	/^static void do_push($/;"	f	file:	signature:( const char *refspecs[], size_t refspecs_len, push_status expected_statuses[], size_t expected_statuses_len, expected_ref expected_refs[], size_t expected_refs_len, int expected_ret, int check_progress_cb, int check_update_tips_cb)
do_send_request	src/transports/winhttp.c	/^static int do_send_request(winhttp_stream *s, size_t len, int ignore_length)$/;"	f	file:	signature:(winhttp_stream *s, size_t len, int ignore_length)
do_symlink	tests/core/link.c	/^static void do_symlink(const char *old, const char *new, int is_dir)$/;"	f	file:	signature:(const char *old, const char *new, int is_dir)
do_verify_push_status	tests/online/push.c	/^static void do_verify_push_status(record_callbacks_data *data, const push_status expected[], const size_t expected_len)$/;"	f	file:	signature:(record_callbacks_data *data, const push_status expected[], const size_t expected_len)
does_negate_pattern	src/ignore.c	/^static int does_negate_pattern(git_attr_fnmatch *rule, git_attr_fnmatch *neg)$/;"	f	file:	signature:(git_attr_fnmatch *rule, git_attr_fnmatch *neg)
does_negate_rule	src/ignore.c	/^static int does_negate_rule(int *out, git_vector *rules, git_attr_fnmatch *match)$/;"	f	file:	signature:(int *out, git_vector *rules, git_attr_fnmatch *match)
done	deps/zlib/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s	access:public
done	src/pack-objects.h	/^	bool done;$/;"	m	struct:git_packbuilder	access:public
done	src/pack.h	/^	int done;$/;"	m	struct:git_packfile_stream	access:public
dont_notify_cb	tests/checkout/index.c	/^static int dont_notify_cb($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload)
dot	tests/core/dirent.c	/^static walk_data dot = {$/;"	v	file:
dot_names	tests/core/dirent.c	/^static name_data dot_names[] = {$/;"	v	file:
dotgit_flags	src/path.c	/^GIT_INLINE(unsigned int) dotgit_flags($/;"	f	signature:( git_repository *repo, unsigned int flags)
download_pack	include/git2/sys/transport.h	/^	int (*download_pack)($/;"	m	struct:git_transport	access:public
download_tags	include/git2/remote.h	/^	git_remote_autotag_option_t download_tags;$/;"	m	struct:__anon55	access:public
download_tags	src/remote.h	/^	git_remote_autotag_option_t download_tags;$/;"	m	struct:git_remote	access:public
download_tags_value	src/remote.c	/^static int download_tags_value(git_remote *remote, git_config *cfg)$/;"	f	file:	signature:(git_remote *remote, git_config *cfg)
driver	src/diff_driver.h	/^	git_diff_driver *driver;$/;"	m	struct:__anon201	access:public
driver	src/diff_file.h	/^	git_diff_driver *driver;$/;"	m	struct:__anon277	access:public
driver	src/merge_driver.c	/^	git_merge_driver *driver;$/;"	m	struct:__anon274	file:	access:public
drivers	src/diff_driver.c	/^	git_strmap *drivers;$/;"	m	struct:git_diff_driver_registry	file:	access:public
drivers	src/merge_driver.c	/^	git_vector drivers;$/;"	m	struct:merge_driver_registry	file:	access:public
dst	include/git2/remote.h	/^	git_oid dst;$/;"	m	struct:__anon52	access:public
dst	src/date.c	/^	int dst;$/;"	m	struct:__anon300	file:	access:public
dst	src/refspec.h	/^	char *dst;$/;"	m	struct:git_refspec	access:public
dst_refname	include/git2/remote.h	/^	char *dst_refname;$/;"	m	struct:__anon52	access:public
dstart	src/xdiff/xtypes.h	/^	long dstart, dend;$/;"	m	struct:s_xdfile	access:public
dummy	deps/zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
dummy	deps/zlib/zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state	access:public
dummy	deps/zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:	access:public
dummy_submodule_cb	tests/win32/forbidden.c	/^static int dummy_submodule_cb($/;"	f	file:	signature:( git_submodule *sm, const char *name, void *payload)
dummy_transport	tests/transport/register.c	/^static int dummy_transport(git_transport **transport, git_remote *owner, void *param)$/;"	f	file:	signature:(git_transport **transport, git_remote *owner, void *param)
dump_submodules	tests/submodule/submodule_helpers.c	/^void dump_submodules(git_repository *repo)$/;"	f	signature:(git_repository *repo)
dump_summary	src/win32/w32_crtdbg_stacktrace.c	/^static void dump_summary(const char *label)$/;"	f	file:	signature:(const char *label)
dup_entry	src/blame_git.c	/^static void dup_entry(git_blame__entry *dst, git_blame__entry *src)$/;"	f	file:	signature:(git_blame__entry *dst, git_blame__entry *src)
dup_hunk	src/blame.c	/^static git_blame_hunk* dup_hunk(git_blame_hunk *hunk)$/;"	f	file:	signature:(git_blame_hunk *hunk)
dup_reflog	src/transaction.c	/^static int dup_reflog(git_reflog **out, const git_reflog *in, git_pool *pool)$/;"	f	file:	signature:(git_reflog **out, const git_reflog *in, git_pool *pool)
duplicate_level	src/config.c	/^static int duplicate_level(void **old_raw, void *new_raw)$/;"	f	file:	signature:(void **old_raw, void *new_raw)
duplicate_node	deps/regex/regcomp.c	/^duplicate_node (re_dfa_t *dfa, int org_idx, unsigned int constraint)$/;"	f	file:	signature:(re_dfa_t *dfa, int org_idx, unsigned int constraint)
duplicate_node_closure	deps/regex/regcomp.c	/^duplicate_node_closure (re_dfa_t *dfa, int top_org_node, int top_clone_node,$/;"	f	file:	signature:(re_dfa_t *dfa, int top_org_node, int top_clone_node, int root_node, unsigned int init_constraint)
duplicate_tree	deps/regex/regcomp.c	/^duplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)$/;"	f	file:	signature:(const bin_tree_t *root, re_dfa_t *dfa)
duplicated	deps/regex/regex_internal.h	/^  unsigned int duplicated : 1;$/;"	m	struct:__anon7	access:public
dwAccessType	deps/winhttp/winhttp.h	/^    DWORD dwAccessType;$/;"	m	struct:__anon22	access:public
dwAutoDetectFlags	deps/winhttp/winhttp.h	/^    DWORD dwAutoDetectFlags;$/;"	m	struct:__anon24	access:public
dwError	deps/winhttp/winhttp.h	/^    DWORD dwError;$/;"	m	struct:__anon20	access:public
dwExtraInfoLength	deps/winhttp/winhttp.h	/^    DWORD   dwExtraInfoLength;$/;"	m	struct:__anon19	access:public
dwFlags	deps/winhttp/winhttp.h	/^    DWORD dwFlags;$/;"	m	struct:__anon24	access:public
dwHostNameLength	deps/winhttp/winhttp.h	/^    DWORD   dwHostNameLength;$/;"	m	struct:__anon19	access:public
dwKeySize	deps/winhttp/winhttp.h	/^    DWORD dwKeySize;$/;"	m	struct:__anon21	access:public
dwMajorVersion	deps/winhttp/winhttp.h	/^    DWORD dwMajorVersion;$/;"	m	struct:__anon25	access:public
dwMinorVersion	deps/winhttp/winhttp.h	/^    DWORD dwMinorVersion;$/;"	m	struct:__anon25	access:public
dwPasswordLength	deps/winhttp/winhttp.h	/^    DWORD   dwPasswordLength;$/;"	m	struct:__anon19	access:public
dwReserved	deps/winhttp/winhttp.h	/^    DWORD dwReserved;$/;"	m	struct:__anon24	access:public
dwResult	deps/winhttp/winhttp.h	/^    DWORD_PTR dwResult;$/;"	m	struct:__anon20	access:public
dwSchemeLength	deps/winhttp/winhttp.h	/^    DWORD   dwSchemeLength;$/;"	m	struct:__anon19	access:public
dwStructSize	deps/winhttp/winhttp.h	/^    DWORD   dwStructSize;$/;"	m	struct:__anon19	access:public
dwUrlPathLength	deps/winhttp/winhttp.h	/^    DWORD   dwUrlPathLength;$/;"	m	struct:__anon19	access:public
dwUserNameLength	deps/winhttp/winhttp.h	/^    DWORD   dwUserNameLength;$/;"	m	struct:__anon19	access:public
dwim_refspecs	src/remote.c	/^static int dwim_refspecs(git_vector *out, git_vector *refspecs, git_vector *refs)$/;"	f	file:	signature:(git_vector *out, git_vector *refspecs, git_vector *refs)
dyn_dtree	deps/zlib/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
dyn_ltree	deps/zlib/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
dyn_tree	deps/zlib/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s	access:public
each_tag	examples/tag.c	/^static int each_tag(const char *name, tag_state *state)$/;"	f	file:	signature:(const char *name, tag_state *state)
eclosures	deps/regex/regex_internal.h	/^  re_node_set *eclosures;$/;"	m	struct:re_dfa_t	access:public
edests	deps/regex/regex_internal.h	/^  re_node_set *edests;$/;"	m	struct:re_dfa_t	access:public
eflags	deps/regex/regex_internal.h	/^  int eflags;$/;"	m	struct:__anon12	access:public
elems	deps/regex/regex_internal.h	/^  int *elems;$/;"	m	struct:__anon4	access:public
elems	deps/zlib/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
email	include/git2/types.h	/^	char *email; \/**< email of the author *\/$/;"	m	struct:git_signature	access:public
email	tests/commit/parse.c	/^	const char *email;$/;"	m	struct:__anon378	file:	access:public
emit_func_t	src/xdiff/xemit.h	/^typedef int (*emit_func_t)(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	t
empty	tests/core/dirent.c	/^static walk_data empty = {$/;"	v	file:
empty_iterator	src/iterator.c	/^} empty_iterator;$/;"	t	typeref:struct:__anon266	file:
empty_iterator_advance_over	src/iterator.c	/^static int empty_iterator_advance_over($/;"	f	file:	signature:( const git_index_entry **e, git_iterator_status_t *s, git_iterator *i)
empty_iterator_free	src/iterator.c	/^static void empty_iterator_free(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
empty_iterator_noop	src/iterator.c	/^static int empty_iterator_noop(const git_index_entry **e, git_iterator *i)$/;"	f	file:	signature:(const git_index_entry **e, git_iterator *i)
empty_iterator_reset	src/iterator.c	/^static int empty_iterator_reset(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
empty_names	tests/core/dirent.c	/^static name_data empty_names[] = {$/;"	v	file:
empty_tmp_dir	tests/core/rmdir.c	/^static const char *empty_tmp_dir = "test_gitfo_rmdir_recurs_test";$/;"	v	file:
empty_workdir	tests/checkout/crlf.c	/^static void empty_workdir(const char *name)$/;"	f	file:	signature:(const char *name)
enabled	tests/clar.c	/^	int enabled;$/;"	m	struct:clar_suite	file:	access:public
encounters	tests/refs/branches/iterator.c	/^	int encounters;$/;"	m	struct:expectations	file:	access:public
encrypted	include/git2/sys/stream.h	/^	int encrypted;$/;"	m	struct:git_stream	access:public
end	deps/regex/regex.h	/^  regoff_t *end;$/;"	m	struct:re_registers	access:public
end	src/iterator.h	/^	char *end;$/;"	m	struct:git_iterator	access:public
end	src/iterator.h	/^	const char *end;$/;"	m	struct:__anon255	access:public
end1	src/xdiff/xhistogram.c	/^	unsigned int begin1, end1;$/;"	m	struct:region	file:	access:public
end2	src/xdiff/xhistogram.c	/^	unsigned int begin2, end2;$/;"	m	struct:region	file:	access:public
end_len	src/iterator.h	/^	size_t end_len;$/;"	m	struct:git_iterator	access:public
end_line	examples/blame.c	/^	int end_line;$/;"	m	struct:opts	file:	access:public
ended	src/iterator.h	/^	bool ended;$/;"	m	struct:git_iterator	access:public
enqueue	src/revwalk.h	/^	int (*enqueue)(git_revwalk *, git_commit_list_node *);$/;"	m	struct:git_revwalk	access:public
enqueue_object	src/push.c	/^static int enqueue_object($/;"	f	file:	signature:( const git_tree_entry *entry, git_packbuilder *pb)
enqueue_tag	src/push.c	/^static int enqueue_tag(git_object **out, git_push *push, git_oid *id)$/;"	f	file:	signature:(git_object **out, git_push *push, git_oid *id)
ensure_aborted	tests/rebase/abort.c	/^static void ensure_aborted($/;"	f	file:	signature:( git_annotated_commit *branch, git_annotated_commit *onto)
ensure_base_rev_is_not_known_yet	src/revparse.c	/^static int ensure_base_rev_is_not_known_yet(git_object *object)$/;"	f	file:	signature:(git_object *object)
ensure_base_rev_loaded	src/revparse.c	/^static int ensure_base_rev_loaded(git_object **object, git_reference **reference, const char *spec, size_t identifier_len, git_repository *repo, bool allow_empty_identifier)$/;"	f	file:	signature:(git_object **object, git_reference **reference, const char *spec, size_t identifier_len, git_repository *repo, bool allow_empty_identifier)
ensure_clean_index	src/stash.c	/^static int ensure_clean_index(git_repository *repo, git_index *index)$/;"	f	file:	signature:(git_repository *repo, git_index *index)
ensure_is_an_updatable_direct_reference	src/refs.c	/^static int ensure_is_an_updatable_direct_reference(git_reference *ref)$/;"	f	file:	signature:(git_reference *ref)
ensure_is_an_updatable_symbolic_reference	src/refs.c	/^static int ensure_is_an_updatable_symbolic_reference(git_reference *ref)$/;"	f	file:	signature:(git_reference *ref)
ensure_left_hand_identifier_is_not_known_yet	src/revparse.c	/^static int ensure_left_hand_identifier_is_not_known_yet(git_object *object, git_reference *reference)$/;"	f	file:	signature:(git_object *object, git_reference *reference)
ensure_log	include/git2/sys/refdb_backend.h	/^	int (*ensure_log)(git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend	access:public
ensure_no_refname_starts_with_a_forward_slash	tests/refs/listall.c	/^static void ensure_no_refname_starts_with_a_forward_slash(const char *path)$/;"	f	file:	signature:(const char *path)
ensure_patch_validity	tests/patch/parse.c	/^static void ensure_patch_validity(git_patch *patch)$/;"	f	file:	signature:(git_patch *patch)
ensure_refname_invalid	tests/refs/normalize.c	/^static void ensure_refname_invalid(unsigned int flags, const char *input_refname)$/;"	f	file:	signature:(unsigned int flags, const char *input_refname)
ensure_refname_normalized	tests/refs/normalize.c	/^static void ensure_refname_normalized($/;"	f	file:	signature:( unsigned int flags, const char *input_refname, const char *expected_refname)
ensure_remote_doesnot_exist	src/remote.c	/^static int ensure_remote_doesnot_exist(git_repository *repo, const char *name)$/;"	f	file:	signature:(git_repository *repo, const char *name)
ensure_remote_name_is_valid	src/remote.c	/^static int ensure_remote_name_is_valid(const char *name)$/;"	f	file:	signature:(const char *name)
ensure_repository_discover	tests/repo/discover.c	/^static void ensure_repository_discover(const char *start_path,$/;"	f	file:	signature:(const char *start_path, const char *ceiling_dirs, const char *expected_path)
ensure_repository_init	tests/repo/init.c	/^static void ensure_repository_init($/;"	f	file:	signature:( const char *working_directory, int is_bare, const char *expected_path_repository, const char *expected_working_directory)
ensure_segment_validity	src/refs.c	/^static int ensure_segment_validity(const char *name)$/;"	f	file:	signature:(const char *name)
ensure_submodules_found	tests/diff/submodules.c	/^static void ensure_submodules_found($/;"	f	file:	signature:( git_repository *repo, const char **paths, size_t cnt)
ensure_tag_pattern_match	tests/object/tag/list.c	/^static void ensure_tag_pattern_match(git_repository *repo,$/;"	f	file:	signature:(git_repository *repo, const struct pattern_match_t* data)
ensure_there_are_changes_to_stash	src/stash.c	/^static int ensure_there_are_changes_to_stash($/;"	f	file:	signature:( git_repository *repo, bool include_untracked_files, bool include_ignored_files)
ensure_workdir	tests/checkout/conflict.c	/^static void ensure_workdir(const char *path, int mode, const char *oid_str)$/;"	f	file:	signature:(const char *path, int mode, const char *oid_str)
ensure_workdir_contents	tests/checkout/conflict.c	/^static void ensure_workdir_contents(const char *path, const char *contents)$/;"	f	file:	signature:(const char *path, const char *contents)
ensure_workdir_link	tests/checkout/conflict.c	/^static void ensure_workdir_link(const char *path, const char *target)$/;"	f	file:	signature:(const char *path, const char *target)
ensure_workdir_mode	tests/checkout/conflict.c	/^static void ensure_workdir_mode(const char *path, int mode)$/;"	f	file:	signature:(const char *path, int mode)
ensure_workdir_oid	tests/checkout/conflict.c	/^static void ensure_workdir_oid(const char *path, const char *oid_str)$/;"	f	file:	signature:(const char *path, const char *oid_str)
ensure_writable	src/win32/posix_w32.c	/^static int ensure_writable(wchar_t *fpath)$/;"	f	file:	signature:(wchar_t *fpath)
ent	src/blame.h	/^	git_blame__entry *ent;$/;"	m	struct:git_blame	access:public
entrance_nodes	deps/regex/regex_internal.h	/^  re_node_set *entrance_nodes;$/;"	m	struct:re_dfastate_t	access:public
entries	src/index.h	/^	git_vector entries;$/;"	m	struct:git_index	access:public
entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:__anon268	file:	access:public
entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:__anon271	file:	access:public
entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:__anon273	file:	access:public
entries	src/pack.h	/^	git_offmap *entries;$/;"	m	struct:__anon295	access:public
entries	src/reflog.h	/^	git_vector entries;$/;"	m	struct:git_reflog	access:public
entries	src/tree.h	/^	git_array_t(git_tree_entry) entries;$/;"	m	struct:git_tree	access:public
entries	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:	access:public
entries_cmp_path	src/index.h	/^	git_vector_cmp entries_cmp_path;$/;"	m	struct:git_index	access:public
entries_map	src/index.h	/^	git_idxmap *entries_map;$/;"	m	struct:git_index	access:public
entries_search	src/index.h	/^	git_vector_cmp entries_search;$/;"	m	struct:git_index	access:public
entries_search_path	src/index.h	/^	git_vector_cmp entries_search_path;$/;"	m	struct:git_index	access:public
entry	include/git2/index.h	/^GIT_EXTERN(int) git_index_entry_is_conflict(const git_index_entry *entry);$/;"	v
entry	include/git2/index.h	/^GIT_EXTERN(int) git_index_entry_stage(const git_index_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const char *) git_reflog_entry_message(const git_reflog_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const git_oid *) git_reflog_entry_id_new(const git_reflog_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const git_oid *) git_reflog_entry_id_old(const git_reflog_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const git_signature *) git_reflog_entry_committer(const git_reflog_entry *entry);$/;"	v
entry	include/git2/sys/reflog.h	/^GIT_EXTERN(void) git_reflog_entry__free(git_reflog_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(const char *) git_tree_entry_name(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(const git_oid *) git_tree_entry_id(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(git_filemode_t) git_tree_entry_filemode(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(git_filemode_t) git_tree_entry_filemode_raw(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(git_otype) git_tree_entry_type(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(void) git_tree_entry_free(git_tree_entry *entry);$/;"	v
entry	src/attr_file.h	/^	git_attr_file_entry *entry;$/;"	m	struct:__anon170	access:public
entry	src/config_file.c	/^	git_config_entry *entry;$/;"	m	struct:cvar_t	file:	access:public
entry	src/index.c	/^	git_index_entry entry;$/;"	m	struct:entry_internal	file:	access:public
entry	src/index.c	/^	git_index_reuc_entry entry;$/;"	m	struct:reuc_entry_internal	file:	access:public
entry	src/indexer.c	/^struct entry {$/;"	s	file:
entry	src/iterator.c	/^	const git_index_entry *entry;$/;"	m	struct:__anon273	file:	access:public
entry	src/iterator.c	/^	git_index_entry entry;$/;"	m	struct:__anon269	file:	access:public
entry	src/iterator.c	/^	git_index_entry entry;$/;"	m	struct:__anon272	file:	access:public
entry	src/win32/dir.h	/^	struct git__dirent entry;$/;"	m	struct:__anon290	typeref:struct:__anon290::git__dirent	access:public
entry	src/xdiff/xpatience.c	/^	struct entry {$/;"	s	struct:hashmap	file:	access:public
entry	tests/merge/merge_helpers.h	/^	struct merge_index_entry entry;$/;"	m	struct:merge_index_with_status	typeref:struct:merge_index_with_status::merge_index_entry	access:public
entry::crc	src/indexer.c	/^	uint32_t crc;$/;"	m	struct:entry	file:	access:public
entry::offset	src/indexer.c	/^	uint32_t offset;$/;"	m	struct:entry	file:	access:public
entry::offset_long	src/indexer.c	/^	uint64_t offset_long;$/;"	m	struct:entry	file:	access:public
entry::oid	src/indexer.c	/^	git_oid oid;$/;"	m	struct:entry	file:	access:public
entry_cmp	src/index.c	/^	git_vector_cmp entry_cmp;$/;"	m	struct:read_tree_data	file:	access:public
entry_count	src/index.c	/^	uint32_t entry_count;$/;"	m	struct:index_header	file:	access:public
entry_count	src/tree-cache.h	/^	ssize_t entry_count;$/;"	m	struct:git_tree_cache	access:public
entry_count	tests/status/status_helpers.h	/^	int entry_count;$/;"	m	struct:__anon365	access:public
entry_count0	tests/status/status_data.h	/^static const int entry_count0 = 16;$/;"	v
entry_count2	tests/status/status_data.h	/^static const int entry_count2 = 15;$/;"	v
entry_count3	tests/status/status_data.h	/^static const int entry_count3 = 22;$/;"	v
entry_count4	tests/status/status_data.h	/^static const int entry_count4 = 23;$/;"	v
entry_count5	tests/status/status_data.h	/^static const int entry_count5 = 8;$/;"	v
entry_count6	tests/status/status_data.h	/^static const int entry_count6 = 13;$/;"	v
entry_fromname	src/tree.c	/^static const git_tree_entry *entry_fromname($/;"	f	file:	signature:( const git_tree *tree, const char *name, size_t name_len)
entry_internal	src/index.c	/^struct entry_internal {$/;"	s	file:
entry_internal::entry	src/index.c	/^	git_index_entry entry;$/;"	m	struct:entry_internal	file:	access:public
entry_internal::path	src/index.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:entry_internal	file:	access:public
entry_internal::pathlen	src/index.c	/^	size_t pathlen;$/;"	m	struct:entry_internal	file:	access:public
entry_is_prefixed	src/diff_generate.c	/^static bool entry_is_prefixed($/;"	f	file:	signature:( git_diff_generated *diff, const git_index_entry *item, const git_index_entry *prefix_item)
entry_long	src/index.c	/^struct entry_long {$/;"	s	file:
entry_long::ctime	src/index.c	/^	struct entry_time ctime;$/;"	m	struct:entry_long	typeref:struct:entry_long::entry_time	file:	access:public
entry_long::dev	src/index.c	/^	uint32_t dev;$/;"	m	struct:entry_long	file:	access:public
entry_long::file_size	src/index.c	/^	uint32_t file_size;$/;"	m	struct:entry_long	file:	access:public
entry_long::flags	src/index.c	/^	uint16_t flags;$/;"	m	struct:entry_long	file:	access:public
entry_long::flags_extended	src/index.c	/^	uint16_t flags_extended;$/;"	m	struct:entry_long	file:	access:public
entry_long::gid	src/index.c	/^	uint32_t gid;$/;"	m	struct:entry_long	file:	access:public
entry_long::ino	src/index.c	/^	uint32_t ino;$/;"	m	struct:entry_long	file:	access:public
entry_long::mode	src/index.c	/^	uint32_t mode;$/;"	m	struct:entry_long	file:	access:public
entry_long::mtime	src/index.c	/^	struct entry_time mtime;$/;"	m	struct:entry_long	typeref:struct:entry_long::entry_time	file:	access:public
entry_long::oid	src/index.c	/^	git_oid oid;$/;"	m	struct:entry_long	file:	access:public
entry_long::path	src/index.c	/^	char path[1]; \/* arbitrary length *\/$/;"	m	struct:entry_long	file:	access:public
entry_long::uid	src/index.c	/^	uint32_t uid;$/;"	m	struct:entry_long	file:	access:public
entry_path	src/iterator.c	/^	git_buf entry_path;$/;"	m	struct:__anon269	file:	access:public
entry_paths0	tests/status/status_data.h	/^static const char *entry_paths0[] = {$/;"	v
entry_paths2	tests/status/status_data.h	/^static const char *entry_paths2[] = {$/;"	v
entry_paths3	tests/status/status_data.h	/^static const char *entry_paths3[] = {$/;"	v
entry_paths3_icase	tests/status/status_data.h	/^static const char *entry_paths3_icase[] = {$/;"	v
entry_paths4	tests/status/status_data.h	/^static const char *entry_paths4[] = {$/;"	v
entry_paths5	tests/status/status_data.h	/^static const char *entry_paths5[] = {$/;"	v
entry_paths6	tests/status/status_data.h	/^static const char *entry_paths6[] = {$/;"	v
entry_pool	src/iterator.c	/^	git_pool entry_pool;$/;"	m	struct:__anon269	file:	access:public
entry_pool	src/iterator.c	/^	git_pool entry_pool;$/;"	m	struct:__anon271	file:	access:public
entry_short	src/index.c	/^struct entry_short {$/;"	s	file:
entry_short::ctime	src/index.c	/^	struct entry_time ctime;$/;"	m	struct:entry_short	typeref:struct:entry_short::entry_time	file:	access:public
entry_short::dev	src/index.c	/^	uint32_t dev;$/;"	m	struct:entry_short	file:	access:public
entry_short::file_size	src/index.c	/^	uint32_t file_size;$/;"	m	struct:entry_short	file:	access:public
entry_short::flags	src/index.c	/^	uint16_t flags;$/;"	m	struct:entry_short	file:	access:public
entry_short::gid	src/index.c	/^	uint32_t gid;$/;"	m	struct:entry_short	file:	access:public
entry_short::ino	src/index.c	/^	uint32_t ino;$/;"	m	struct:entry_short	file:	access:public
entry_short::mode	src/index.c	/^	uint32_t mode;$/;"	m	struct:entry_short	file:	access:public
entry_short::mtime	src/index.c	/^	struct entry_time mtime;$/;"	m	struct:entry_short	typeref:struct:entry_short::entry_time	file:	access:public
entry_short::oid	src/index.c	/^	git_oid oid;$/;"	m	struct:entry_short	file:	access:public
entry_short::path	src/index.c	/^	char path[1]; \/* arbitrary length *\/$/;"	m	struct:entry_short	file:	access:public
entry_short::uid	src/index.c	/^	uint32_t uid;$/;"	m	struct:entry_short	file:	access:public
entry_size	src/index.c	60;"	d	file:
entry_sort_cmp	src/tree.c	/^static int entry_sort_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
entry_srch	src/iterator.h	/^	int (*entry_srch)(const void *key, const void *array_member);$/;"	m	struct:git_iterator	access:public
entry_srch_key	src/index.c	/^struct entry_srch_key {$/;"	s	file:
entry_srch_key::path	src/index.c	/^	const char *path;$/;"	m	struct:entry_srch_key	file:	access:public
entry_srch_key::pathlen	src/index.c	/^	size_t pathlen;$/;"	m	struct:entry_srch_key	file:	access:public
entry_srch_key::stage	src/index.c	/^	int stage;$/;"	m	struct:entry_srch_key	file:	access:public
entry_start	src/indexer.c	/^	git_off_t entry_start;$/;"	m	struct:git_indexer	file:	access:public
entry_statuses0	tests/status/status_data.h	/^static const unsigned int entry_statuses0[] = {$/;"	v
entry_statuses2	tests/status/status_data.h	/^static const unsigned int entry_statuses2[] = {$/;"	v
entry_statuses3	tests/status/status_data.h	/^static const unsigned int entry_statuses3[] = {$/;"	v
entry_statuses3_icase	tests/status/status_data.h	/^static const unsigned int entry_statuses3_icase[] = {$/;"	v
entry_statuses4	tests/status/status_data.h	/^static const unsigned int entry_statuses4[] = {$/;"	v
entry_statuses5	tests/status/status_data.h	/^static const unsigned int entry_statuses5[] = {$/;"	v
entry_statuses6	tests/status/status_data.h	/^static const unsigned int entry_statuses6[] = {$/;"	v
entry_time	src/index.c	/^struct entry_time {$/;"	s	file:
entry_time::nanoseconds	src/index.c	/^	uint32_t nanoseconds;$/;"	m	struct:entry_time	file:	access:public
entry_time::seconds	src/index.c	/^	uint32_t seconds;$/;"	m	struct:entry_time	file:	access:public
entrycomp	src/diff.h	/^	int (*entrycomp)(const void *a, const void *b);$/;"	m	struct:git_diff	access:public
entrycount	tests/refs/reflog/drop.c	/^static size_t entrycount;$/;"	v	file:
entrycount	tests/repo/head.c	/^static size_t entrycount(git_repository *repo, const char *name)$/;"	f	file:	signature:(git_repository *repo, const char *name)
env	src/xdiff/xhistogram.c	/^	xdfenv_t *env;$/;"	m	struct:histindex	file:	access:public
env	src/xdiff/xpatience.c	/^	xdfenv_t *env;$/;"	m	struct:hashmap	file:	access:public
env_cd_	tests/repo/env.c	/^static void env_cd_($/;"	f	file:	signature:( const char *path, void (*passfail_)(const char *, const char *, int), const char *file, int line)
env_cd_fail	tests/repo/env.c	91;"	d	file:
env_cd_pass	tests/repo/env.c	90;"	d	file:
env_check_objects	tests/repo/env.c	126;"	d	file:
env_check_objects_	tests/repo/env.c	/^static void env_check_objects_(bool a, bool t, bool p, const char *file, int line)$/;"	f	file:	signature:(bool a, bool t, bool p, const char *file, int line)
env_fail	tests/repo/env.c	76;"	d	file:
env_fail_	tests/repo/env.c	/^static void env_fail_(const char *path, const char *file, int line)$/;"	f	file:	signature:(const char *path, const char *file, int line)
env_pass	tests/repo/env.c	66;"	d	file:
env_pass_	tests/repo/env.c	/^static void env_pass_(const char *path, const char *file, int line)$/;"	f	file:	signature:(const char *path, const char *file, int line)
env_save	tests/core/env.c	/^static char *env_save[NUM_VARS];$/;"	v	file:
env_vars	tests/core/env.c	/^static const char *env_vars[NUM_VARS] = { "HOME" };$/;"	v	file:
env_vars	tests/core/env.c	/^static const char *env_vars[NUM_VARS] = {$/;"	v	file:
eof	src/config_file.c	/^	int eof;$/;"	m	struct:reader	file:	access:public
eol	src/crlf.c	/^	int eol;$/;"	m	struct:crlf_attrs	file:	access:public
eps_reachable_subexps_map	deps/regex/regex_internal.h	/^  unsigned short int eps_reachable_subexps_map;$/;"	m	struct:re_backref_cache_entry	access:public
eps_via_nodes	deps/regex/regex_internal.h	/^  re_node_set eps_via_nodes;$/;"	m	struct:re_fail_stack_ent_t	access:public
equiv_classes	deps/regex/regex_internal.h	/^  int32_t *equiv_classes;$/;"	m	struct:__anon6	access:public
err_pkt	src/transports/smart_pkt.c	/^static int err_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
errno	deps/zlib/zutil.c	/^    int errno = 0;$/;"	v
error	src/patch_generate.h	/^	int error;$/;"	m	struct:git_patch_generated_output	access:public
error	src/transports/http.c	/^	int error;$/;"	m	struct:__anon176	file:	access:public
error	src/transports/smart.h	/^	char error[GIT_FLEX_ARRAY];$/;"	m	struct:__anon189	access:public
error	tests/checkout/tree.c	/^	int error;$/;"	m	struct:checkout_cancel_at	file:	access:public
error	tests/clar_libgit2.h	/^	int error;$/;"	m	struct:__anon360	access:public
error	tests/threads/refdb.c	/^	cl_git_thread_err error;$/;"	m	struct:th_data	file:	access:public
error_buf	src/global.h	/^	git_buf error_buf;$/;"	m	struct:__anon225	access:public
error_cb	src/transports/local.c	/^	git_transport_message_cb error_cb;$/;"	m	struct:__anon178	file:	access:public
error_cb	src/transports/smart.h	/^	git_transport_message_cb error_cb;$/;"	m	struct:__anon193	access:public
error_code	src/common.h	/^	int error_code;$/;"	m	struct:__anon257	access:public
error_code	tests/odb/backend/nonrefreshing.c	/^	git_error_code error_code;$/;"	m	struct:fake_backend	file:	access:public
error_invalid_local_file_uri	src/path.c	/^static int error_invalid_local_file_uri(const char *uri)$/;"	f	file:	signature:(const char *uri)
error_msg	src/common.h	/^	git_error error_msg;$/;"	m	struct:__anon257	access:public
error_msg	tests/clar.c	/^	const char *error_msg;$/;"	m	struct:clar_error	file:	access:public
error_msg	tests/clar_libgit2.h	/^	char error_msg[4096];$/;"	m	struct:__anon360	access:public
error_no_credentials	src/curl_stream.c	/^GIT_INLINE(int) error_no_credentials(void)$/;"	f	signature:(void)
error_t	src/global.h	/^	git_error error_t;$/;"	m	struct:__anon225	access:public
errors	tests/clar.c	/^	struct clar_error *errors;$/;"	m	struct:__anon364	typeref:struct:__anon364::clar_error	file:	access:public
escape_value	src/config_file.c	/^static char *escape_value(const char *ptr)$/;"	f	file:	signature:(const char *ptr)
escaped	src/config_file.c	/^static const char *escaped = "\\n\\t\\b\\"\\\\";$/;"	v	file:
escapes	src/config_file.c	/^static const char *escapes = "ntb\\"\\\\";$/;"	v	file:
everybody_uninteresting	src/revwalk.c	/^static int everybody_uninteresting(git_commit_list *orig)$/;"	f	file:	signature:(git_commit_list *orig)
exact_match	src/describe.c	/^	int exact_match;$/;"	m	struct:git_describe_result	file:	access:public
exec	include/git2/rebase.h	/^	const char *exec;$/;"	m	struct:__anon69	access:public
execute_test	tests/checkout/binaryunicode.c	/^static void execute_test(void)$/;"	f	file:	signature:(void)
exists	include/git2/sys/odb_backend.h	/^	int (* exists)($/;"	m	struct:git_odb_backend	access:public
exists	include/git2/sys/refdb_backend.h	/^	int (*exists)($/;"	m	struct:git_refdb_backend	access:public
exists_calls	tests/odb/backend/nonrefreshing.c	/^	int exists_calls;$/;"	m	struct:fake_backend	file:	access:public
exists_prefix	include/git2/sys/odb_backend.h	/^	int (* exists_prefix)($/;"	m	struct:git_odb_backend	access:public
exit_abruptly	tests/threads/basic.c	/^static void *exit_abruptly(void *param)$/;"	f	file:	signature:(void *param)
exit_on_error	tests/clar.c	/^	int exit_on_error;$/;"	m	struct:__anon364	file:	access:public
expand_bkref_cache	deps/regex/regexec.c	/^expand_bkref_cache (re_match_context_t *mctx, re_node_set *cur_nodes,$/;"	f	file:	signature:(re_match_context_t *mctx, re_node_set *cur_nodes, int cur_str, int subexp_num, int type)
expand_id_test_data	tests/odb/mixed.c	/^struct expand_id_test_data expand_id_test_data[] = {$/;"	v	typeref:struct:expand_id_test_data
expand_id_test_data	tests/odb/mixed.c	/^struct expand_id_test_data {$/;"	s	file:
expand_id_test_data::expected_id	tests/odb/mixed.c	/^	char *expected_id;$/;"	m	struct:expand_id_test_data	file:	access:public
expand_id_test_data::expected_type	tests/odb/mixed.c	/^	git_otype expected_type;$/;"	m	struct:expand_id_test_data	file:	access:public
expand_id_test_data::lookup_id	tests/odb/mixed.c	/^	char *lookup_id;$/;"	m	struct:expand_id_test_data	file:	access:public
expect	tests/core/path.c	/^	char **expect;$/;"	m	struct:__anon356	file:	access:public
expect	tests/diff/tree.c	/^static diff_expects expect;$/;"	v	file:
expect_advance_into	tests/iterator/iterator_helpers.c	/^void expect_advance_into($/;"	f	signature:( git_iterator *i, const char *expected_path)
expect_advance_over	tests/iterator/iterator_helpers.c	/^void expect_advance_over($/;"	f	signature:( git_iterator *i, const char *expected_path, git_iterator_status_t expected_status)
expect_files_not_renamed	tests/diff/rename.c	/^static void expect_files_not_renamed(const char *one, const char *two, uint32_t whitespace_flags)$/;"	f	file:	signature:(const char *one, const char *two, uint32_t whitespace_flags)
expect_files_renamed	tests/diff/rename.c	/^static void expect_files_renamed(const char *one, const char *two, uint32_t whitespace_flags)$/;"	f	file:	signature:(const char *one, const char *two, uint32_t whitespace_flags)
expect_idx	tests/core/path.c	/^	int expect_idx;$/;"	m	struct:__anon356	file:	access:public
expect_iterator_items	tests/iterator/iterator_helpers.c	/^void expect_iterator_items($/;"	f	signature:( git_iterator *i, size_t expected_flat, const char **expected_flat_paths, size_t expected_total, const char **expected_total_paths)
expect_pos	tests/core/array.c	12;"	d	file:
expect_quote_pass	tests/buf/quote.c	/^static void expect_quote_pass(const char *expected, const char *str)$/;"	f	file:	signature:(const char *expected, const char *str)
expect_unquote_fail	tests/buf/quote.c	/^static void expect_unquote_fail(const char *quoted)$/;"	f	file:	signature:(const char *quoted)
expect_unquote_pass	tests/buf/quote.c	/^static void expect_unquote_pass(const char *expected, const char *quoted)$/;"	f	file:	signature:(const char *expected, const char *quoted)
expectations	tests/refs/branches/iterator.c	/^struct expectations {$/;"	s	file:
expectations::branch_name	tests/refs/branches/iterator.c	/^	const char *branch_name;$/;"	m	struct:expectations	file:	access:public
expectations::encounters	tests/refs/branches/iterator.c	/^	int encounters;$/;"	m	struct:expectations	file:	access:public
expected	src/status.c	/^	char *expected;$/;"	m	struct:status_file_info	file:	access:public
expected	tests/attr/attr_expect.h	/^	enum attr_expect_t expected;$/;"	m	struct:attr_expected	typeref:enum:attr_expected::attr_expect_t	access:public
expected	tests/diff/blob.c	/^static diff_expects expected;$/;"	v	file:
expected_entry_count	tests/status/status_helpers.h	/^	int expected_entry_count;$/;"	m	struct:__anon365	access:public
expected_files	tests/status/submodules.c	/^static const char *expected_files[] = {$/;"	v	file:
expected_fixture	tests/checkout/crlf.c	/^static git_buf expected_fixture = GIT_BUF_INIT;$/;"	v	file:
expected_id	tests/odb/mixed.c	/^	char *expected_id;$/;"	m	struct:expand_id_test_data	file:	access:public
expected_index_0	tests/iterator/index.c	/^static const char *expected_index_0[] = {$/;"	v	file:
expected_index_1	tests/iterator/index.c	/^static const char *expected_index_1[] = {$/;"	v	file:
expected_index_ci	tests/iterator/index.c	/^static const char *expected_index_ci[] = {$/;"	v	file:
expected_index_cs	tests/iterator/index.c	/^static const char *expected_index_cs[] = {$/;"	v	file:
expected_index_oids_0	tests/iterator/index.c	/^static const char *expected_index_oids_0[] = {$/;"	v	file:
expected_index_oids_1	tests/iterator/index.c	/^static const char* expected_index_oids_1[] = {$/;"	v	file:
expected_index_oids_range	tests/iterator/index.c	/^static const char *expected_index_oids_range[] = {$/;"	v	file:
expected_index_range	tests/iterator/index.c	/^static const char *expected_index_range[] = {$/;"	v	file:
expected_matches	tests/object/tag/list.c	/^	const size_t expected_matches;$/;"	m	struct:pattern_match_t	file:	access:public
expected_patch_text	tests/diff/diffiter.c	/^static const char *expected_patch_text[8] = {$/;"	v	file:
expected_paths	tests/status/status_helpers.h	/^	const char** expected_paths;$/;"	m	struct:__anon365	access:public
expected_ref	tests/online/push_util.h	/^} expected_ref;$/;"	t	typeref:struct:__anon354
expected_remote_name	tests/refs/branches/remote.c	/^static const char *expected_remote_name = "test";$/;"	v	file:
expected_remote_name_length	tests/refs/branches/remote.c	/^static int expected_remote_name_length;$/;"	v	file:
expected_results	tests/object/tag/list.c	/^	const char* expected_results[MAX_USED_TAGS];$/;"	m	struct:pattern_match_t	file:	access:public
expected_status	tests/status/submodules.c	/^static unsigned int expected_status[] = {$/;"	v	file:
expected_statuses	tests/status/status_helpers.h	/^	const unsigned int* expected_statuses;$/;"	m	struct:__anon365	access:public
expected_str	tests/attr/attr_expect.h	/^	const char *expected_str;$/;"	m	struct:attr_expected	access:public
expected_str	tests/revwalk/simplify.c	/^static const char *expected_str[] = {$/;"	v	file:
expected_tree_0	tests/iterator/tree.c	/^const char *expected_tree_0[] = {$/;"	v
expected_tree_1	tests/iterator/tree.c	/^const char *expected_tree_1[] = {$/;"	v
expected_tree_2	tests/iterator/tree.c	/^const char *expected_tree_2[] = {$/;"	v
expected_tree_3	tests/iterator/tree.c	/^const char *expected_tree_3[] = {$/;"	v
expected_tree_4	tests/iterator/tree.c	/^const char *expected_tree_4[] = {$/;"	v
expected_tree_ranged_0	tests/iterator/tree.c	/^const char *expected_tree_ranged_0[] = {$/;"	v
expected_tree_ranged_1	tests/iterator/tree.c	/^const char *expected_tree_ranged_1[] = {$/;"	v
expected_type	tests/odb/mixed.c	/^	git_otype expected_type;$/;"	m	struct:expand_id_test_data	file:	access:public
expr	tests/clar_libgit2.h	/^	const char *expr;$/;"	m	struct:__anon360	access:public
extend_buffers	deps/regex/regexec.c	/^extend_buffers (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
extension_size	src/index.c	/^	uint32_t extension_size;$/;"	m	struct:index_extension	file:	access:public
extra	deps/zlib/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state	access:public
extra	deps/zlib/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s	access:public
extra	tests/core/oidmap.c	/^	size_t extra;$/;"	m	struct:__anon357	file:	access:public
extra_base	deps/zlib/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
extra_bits	deps/zlib/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
extra_blbits	deps/zlib/trees.c	/^local const int extra_blbits[BL_CODES]\/* extra bits for each bit length code *\/$/;"	v
extra_dbits	deps/zlib/trees.c	/^local const int extra_dbits[D_CODES] \/* extra bits for each distance code *\/$/;"	v
extra_lbits	deps/zlib/trees.c	/^local const int extra_lbits[LENGTH_CODES] \/* extra bits for each length code *\/$/;"	v
extra_len	deps/zlib/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s	access:public
extra_max	deps/zlib/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
extract_curly_braces_content	src/revparse.c	/^static int extract_curly_braces_content(git_buf *buf, const char *spec, size_t *pos)$/;"	f	file:	signature:(git_buf *buf, const char *spec, size_t *pos)
extract_how_many	src/revparse.c	/^static int extract_how_many(int *n, const char *spec, size_t *pos)$/;"	f	file:	signature:(int *n, const char *spec, size_t *pos)
extract_path	src/revparse.c	/^static int extract_path(git_buf *buf, const char *spec, size_t *pos)$/;"	f	file:	signature:(git_buf *buf, const char *spec, size_t *pos)
extract_trimmed	src/signature.c	/^static char *extract_trimmed(const char *ptr, size_t len)$/;"	f	file:	signature:(const char *ptr, size_t len)
f	src/crlf.c	/^	git_filter f;$/;"	m	struct:crlf_filter	file:	access:public
f	src/win32/dir.h	/^	WIN32_FIND_DATAW f;$/;"	m	struct:__anon290	access:public
fAutoDetect	deps/winhttp/winhttp.h	/^    BOOL   fAutoDetect;$/;"	m	struct:__anon23	access:public
fAutoLogonIfChallenged	deps/winhttp/winhttp.h	/^    BOOL fAutoLogonIfChallenged;$/;"	m	struct:__anon24	access:public
fail_certificate_check	tests/online/clone.c	/^static int fail_certificate_check(git_cert *cert, int valid, const char *host, void *payload)$/;"	f	file:	signature:(git_cert *cert, int valid, const char *host, void *payload)
failing_commit_cases	tests/commit/parse.c	/^static char *failing_commit_cases[] = {$/;"	v	file:
failing_header_cases	tests/commit/parse.c	/^static parse_test_case failing_header_cases[] = {$/;"	v	file:
failing_signature_cases	tests/commit/parse.c	/^failing_signature_test_case failing_signature_cases[] = {$/;"	v
failing_signature_test_case	tests/commit/parse.c	/^} failing_signature_test_case;$/;"	t	typeref:struct:__anon379	file:
failures	src/pathspec.h	/^	git_pathspec_string_array_t failures;$/;"	m	struct:git_pathspec_match_list	access:public
fake_backend	tests/odb/backend/nonrefreshing.c	/^typedef struct fake_backend {$/;"	s	file:
fake_backend	tests/odb/backend/nonrefreshing.c	/^} fake_backend;$/;"	t	typeref:struct:fake_backend	file:
fake_backend	tests/odb/sorting.c	/^} fake_backend;$/;"	t	typeref:struct:__anon363	file:
fake_backend::error_code	tests/odb/backend/nonrefreshing.c	/^	git_error_code error_code;$/;"	m	struct:fake_backend	file:	access:public
fake_backend::exists_calls	tests/odb/backend/nonrefreshing.c	/^	int exists_calls;$/;"	m	struct:fake_backend	file:	access:public
fake_backend::parent	tests/odb/backend/nonrefreshing.c	/^	git_odb_backend parent;$/;"	m	struct:fake_backend	file:	access:public
fake_backend::read_calls	tests/odb/backend/nonrefreshing.c	/^	int read_calls;$/;"	m	struct:fake_backend	file:	access:public
fake_backend::read_header_calls	tests/odb/backend/nonrefreshing.c	/^	int read_header_calls;$/;"	m	struct:fake_backend	file:	access:public
fake_backend::read_prefix_calls	tests/odb/backend/nonrefreshing.c	/^	int read_prefix_calls;$/;"	m	struct:fake_backend	file:	access:public
fake_backend__exists	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(git_odb_backend *backend, const git_oid *oid)
fake_backend__free	tests/odb/backend/nonrefreshing.c	/^static void fake_backend__free(git_odb_backend *_backend)$/;"	f	file:	signature:(git_odb_backend *_backend)
fake_backend__read	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__read($/;"	f	file:	signature:( void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
fake_backend__read_header	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__read_header($/;"	f	file:	signature:( size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
fake_backend__read_prefix	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__read_prefix($/;"	f	file:	signature:( git_oid *out_oid, void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *short_oid, size_t len)
fake_remote	tests/refs/branches/delete.c	/^static git_reference *fake_remote;$/;"	v	file:
fake_remote	tests/refs/branches/iterator.c	/^static git_reference *fake_remote;$/;"	v	file:
fake_remote	tests/refs/foreachglob.c	/^static git_reference *fake_remote;$/;"	v	file:
fake_submod_cb	tests/submodule/nosubs.c	/^static int fake_submod_cb(git_submodule *sm, const char *n, void *p)$/;"	f	file:	signature:(git_submodule *sm, const char *n, void *p)
fake_wstream	src/odb.c	/^} fake_wstream;$/;"	t	typeref:struct:__anon245	file:
fake_wstream__free	src/odb.c	/^static void fake_wstream__free(git_odb_stream *_stream)$/;"	f	file:	signature:(git_odb_stream *_stream)
fake_wstream__fwrite	src/odb.c	/^static int fake_wstream__fwrite(git_odb_stream *_stream, const git_oid *oid)$/;"	f	file:	signature:(git_odb_stream *_stream, const git_oid *oid)
fake_wstream__write	src/odb.c	/^static int fake_wstream__write(git_odb_stream *_stream, const char *data, size_t len)$/;"	f	file:	signature:(git_odb_stream *_stream, const char *data, size_t len)
fall_back_to_classic_diff	src/xdiff/xhistogram.c	/^static int fall_back_to_classic_diff(struct histindex *index,$/;"	f	file:	signature:(struct histindex *index, int line1, int count1, int line2, int count2)
fall_back_to_classic_diff	src/xdiff/xpatience.c	/^static int fall_back_to_classic_diff(struct hashmap *map,$/;"	f	file:	signature:(struct hashmap *map, int line1, int count1, int line2, int count2)
fallback_cred_acquire_cb	src/transports/winhttp.c	/^static int fallback_cred_acquire_cb($/;"	f	file:	signature:( git_cred **cred, const char *url, const char *username_from_url, unsigned int allowed_types, void *payload)
fallback_to_id	src/describe.c	/^	int fallback_to_id;$/;"	m	struct:git_describe_result	file:	access:public
false	deps/regex/regex.c	79;"	d	file:
false	src/cc-compat.h	73;"	d
fanout	src/indexer.c	/^	unsigned int fanout[256];$/;"	m	struct:git_indexer	file:	access:public
fatal	examples/common.c	/^void fatal(const char *message, const char *extra)$/;"	f	signature:(const char *message, const char *extra)
favor	include/git2/merge.h	/^	git_merge_file_favor_t favor;$/;"	m	struct:__anon130	access:public
favor	src/merge_driver.h	/^	git_merge_file_favor_t favor;$/;"	m	struct:git_merge_driver__builtin	access:public
favor	src/xdiff/xdiff.h	/^	int favor;$/;"	m	struct:s_xmparam	access:public
fbp_data	src/submodule.c	/^} fbp_data;$/;"	t	typeref:struct:__anon304	file:
fbuf	src/blob.c	/^	git_filebuf fbuf;$/;"	m	struct:__anon279	file:	access:public
fbuf	src/odb_loose.c	/^	git_filebuf fbuf;$/;"	m	struct:__anon344	file:	access:public
fc	deps/zlib/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon29	access:public
fd	src/checkout.c	/^	int fd;$/;"	m	struct:checkout_stream	file:	access:public
fd	src/filebuf.h	/^	git_file fd;$/;"	m	struct:git_filebuf	access:public
fd	src/mwindow.h	/^	int fd;$/;"	m	struct:git_mwindow_file	access:public
fd	tests/core/ftruncate.c	/^static int fd = -1;$/;"	v	file:
fd_is_open	src/filebuf.h	/^	bool fd_is_open;$/;"	m	struct:git_filebuf	access:public
fdopen	deps/zlib/zutil.h	128;"	d
fdopen	deps/zlib/zutil.h	149;"	d
fdopen	deps/zlib/zutil.h	154;"	d
fdopen	deps/zlib/zutil.h	160;"	d
feed_indexer	tests/pack/packbuilder.c	/^static int feed_indexer(void *ptr, size_t len, void *payload)$/;"	f	file:	signature:(void *ptr, size_t len, void *payload)
fetch	examples/network/fetch.c	/^int fetch(git_repository *repo, int argc, char **argv)$/;"	f	signature:(git_repository *repo, int argc, char **argv)
fetch	src/remote.c	/^	int fetch;$/;"	m	struct:refspec_cb_data	file:	access:public
fetch_number	deps/regex/regcomp.c	/^fetch_number (re_string_t *input, re_token_t *token, reg_syntax_t syntax)$/;"	f	file:	signature:(re_string_t *input, re_token_t *token, reg_syntax_t syntax)
fetch_opts	examples/network/fetch.c	/^	git_fetch_options *fetch_opts;$/;"	m	struct:dl_data	file:	access:public
fetch_opts	include/git2/clone.h	/^	git_fetch_options fetch_opts;$/;"	m	struct:git_clone_options	access:public
fetch_opts	include/git2/submodule.h	/^	git_fetch_options fetch_opts;$/;"	m	struct:git_submodule_update_options	access:public
fetch_progress	examples/network/clone.c	/^	git_transfer_progress fetch_progress;$/;"	m	struct:progress_data	file:	access:public
fetch_progress	examples/network/clone.c	/^static int fetch_progress(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
fetch_progress	tests/online/clone.c	/^static int fetch_progress(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
fetch_recurse	src/submodule.h	/^	git_submodule_recurse_t fetch_recurse;$/;"	m	struct:git_submodule	access:public
fetch_recurse_default	src/submodule.h	/^	git_submodule_recurse_t fetch_recurse_default;$/;"	m	struct:git_submodule	access:public
fetch_refspecs	tests/network/remote/remotes.c	/^static const char *fetch_refspecs[] = {$/;"	v	file:
fetch_setup_walk	src/transports/smart_protocol.c	/^static int fetch_setup_walk(git_revwalk **out, git_repository *repo)$/;"	f	file:	signature:(git_revwalk **out, git_repository *repo)
fetch_token	deps/regex/regcomp.c	/^fetch_token (re_token_t *result, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:	signature:(re_token_t *result, re_string_t *input, reg_syntax_t syntax)
fetchhead_ref_cb	tests/fetchhead/nonetwork.c	/^static int fetchhead_ref_cb(const char *name, const char *url,$/;"	f	file:	signature:(const char *name, const char *url, const git_oid *oid, unsigned int is_merge, void *payload)
fetchhead_ref_cb_data	tests/fetchhead/nonetwork.c	/^} fetchhead_ref_cb_data; $/;"	t	typeref:struct:__anon376	file:
fetchhead_ref_parse	src/fetchhead.c	/^static int fetchhead_ref_parse($/;"	f	file:	signature:( git_oid *oid, unsigned int *is_merge, git_buf *ref_name, const char **remote_url, char *line, size_t line_num)
fetchhead_ref_write	src/fetchhead.c	/^static int fetchhead_ref_write($/;"	f	file:	signature:( git_filebuf *file, git_fetchhead_ref *fetchhead_ref)
fetchhead_test_clone	tests/online/fetchhead.c	/^static void fetchhead_test_clone(void)$/;"	f	file:	signature:(void)
fetchhead_test_fetch	tests/online/fetchhead.c	/^static void fetchhead_test_fetch(const char *fetchspec, const char *expected_fetchhead)$/;"	f	file:	signature:(const char *fetchspec, const char *expected_fetchhead)
fetchhead_vector	tests/fetchhead/nonetwork.c	/^	git_vector *fetchhead_vector;$/;"	m	struct:__anon376	file:	access:public
field_data	deps/http-parser/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon1	access:public
field_set	deps/http-parser/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url	access:public
file	src/attr_file.h	/^	git_attr_file *file[GIT_ATTR_FILE_NUM_SOURCES];$/;"	m	struct:git_attr_file_entry	access:public
file	src/config.c	/^	git_config_backend *file;$/;"	m	struct:__anon336	file:	access:public
file	src/diff_file.h	/^	git_diff_file *file;$/;"	m	struct:__anon277	access:public
file	src/diff_tform.c	/^	git_diff_file *file;$/;"	m	struct:__anon156	file:	access:public
file	src/index.h	/^	git_filebuf file;$/;"	m	struct:__anon275	access:public
file	tests/checkout/index.c	/^	const char *file;$/;"	m	struct:notify_data	file:	access:public
file	tests/clar.c	/^	const char *file;$/;"	m	struct:clar_error	file:	access:public
file	tests/clar_libgit2.h	/^	const char *file;$/;"	m	struct:__anon360	access:public
file	tests/object/raw/write.c	/^    char *file;   \/* object store filename                     *\/$/;"	m	struct:object_data	file:	access:public
file	tests/odb/alternates.c	/^static git_filebuf file;$/;"	v	file:
file	tests/odb/loose_data.h	/^    char          *file;   \/* object store filename                     *\/$/;"	m	struct:object_data	access:public
file	tests/status/status_helpers.h	/^	const char *file;$/;"	m	struct:__anon365	access:public
file1	src/xdiff/xdiff.h	/^	const char *file1;	\/* label for mf1 *\/$/;"	m	struct:s_xmparam	access:public
file1	src/xdiff/xpatience.c	/^	mmfile_t *file1, *file2;$/;"	m	struct:hashmap	file:	access:public
file2	src/xdiff/xdiff.h	/^	const char *file2;	\/* label for mf2 *\/$/;"	m	struct:s_xmparam	access:public
file2	src/xdiff/xpatience.c	/^	mmfile_t *file1, *file2;$/;"	m	struct:hashmap	file:	access:public
file_cb	src/patch_generate.h	/^	git_diff_file_cb file_cb;$/;"	m	struct:git_patch_generated_output	access:public
file_cb	tests/diff/binary.c	/^static int file_cb($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *payload)
file_favor	include/git2/merge.h	/^	git_merge_file_favor_t file_favor;$/;"	m	struct:__anon132	access:public
file_flags	include/git2/merge.h	/^	git_merge_file_flag_t file_flags;$/;"	m	struct:__anon132	access:public
file_internal	src/config.c	/^} file_internal;$/;"	t	typeref:struct:__anon336	file:
file_internal_free	src/config.c	/^static void file_internal_free(file_internal *internal)$/;"	f	file:	signature:(file_internal *internal)
file_mode	include/git2/checkout.h	/^	unsigned int file_mode; \/**< default is 0644 or 0755 as dictated by blob *\/$/;"	m	struct:git_checkout_options	access:public
file_open_flags	include/git2/checkout.h	/^	int file_open_flags;    \/**< default is O_CREAT | O_TRUNC | O_WRONLY *\/$/;"	m	struct:git_checkout_options	access:public
file_opts	src/merge_driver.h	/^	const git_merge_file_options *file_opts;$/;"	m	struct:git_merge_driver_source	access:public
file_path	src/config_file.c	/^	char  *file_path;$/;"	m	struct:__anon154	file:	access:public
file_path	src/config_file.c	/^	char *file_path;$/;"	m	struct:reader	file:	access:public
file_path_buf	tests/network/remote/local.c	/^static git_buf file_path_buf = GIT_BUF_INIT;$/;"	v	file:
file_signature	include/git2/diff.h	/^	int (*file_signature)($/;"	m	struct:__anon95	access:public
file_size	include/git2/index.h	/^	uint32_t file_size;$/;"	m	struct:git_index_entry	access:public
file_size	src/index.c	/^	uint32_t file_size;$/;"	m	struct:entry_long	file:	access:public
file_size	src/index.c	/^	uint32_t file_size;$/;"	m	struct:entry_short	file:	access:public
file_size	tests/index/tests.c	/^   git_off_t file_size;$/;"	m	struct:test_entry	file:	access:public
file_status	tests/diff/diff_helpers.h	/^	int file_status[11]; \/* indexed by git_delta_t value *\/$/;"	m	struct:__anon369	access:public
file_url	tests/clone/local.c	/^static int file_url(git_buf *buf, const char *host, const char *path)$/;"	f	file:	signature:(git_buf *buf, const char *host, const char *path)
filemode	include/git2/tree.h	/^	git_filemode_t filemode;$/;"	m	struct:__anon123	access:public
filemode	src/filter.c	/^	uint16_t        filemode; \/* zero if unknown *\/$/;"	m	struct:git_filter_source	file:	access:public
filemode_count	tests/status/worktree.c	/^static const int filemode_count = 8;$/;"	v	file:
filemode_paths	tests/status/worktree.c	/^static const char *filemode_paths[] = {$/;"	v	file:
filemode_statuses	tests/status/worktree.c	/^static unsigned int filemode_statuses[] = {$/;"	v	file:
filename	src/tree.c	/^	const char *filename;$/;"	m	struct:tree_key_search	file:	access:public
filename	src/tree.h	/^	const char *filename;$/;"	m	struct:git_tree_entry	access:public
filename	tests/checkout/tree.c	/^	const char *filename;$/;"	m	struct:checkout_cancel_at	file:	access:public
filename	tests/clar_libgit2.c	/^	const char *filename;$/;"	m	struct:__anon375	file:	access:public
filename	tests/core/ftruncate.c	/^static const char *filename = "core_ftruncate.txt";$/;"	v	file:
filename	tests/object/tree/write.c	/^	const char *filename;$/;"	m	struct:__anon374	file:	access:public
filename_len	src/tree.c	/^	uint16_t filename_len;$/;"	m	struct:tree_key_search	file:	access:public
filename_len	src/tree.h	/^	uint16_t filename_len;$/;"	m	struct:git_tree_entry	access:public
filename_len	tests/clar_libgit2.c	/^	size_t filename_len;$/;"	m	struct:__anon375	file:	access:public
filename_to_oid	src/odb_loose.c	/^GIT_INLINE(int) filename_to_oid(git_oid *oid, const char *ptr)$/;"	f	signature:(git_oid *oid, const char *ptr)
filepath	tests/odb/alternates.c	/^static git_buf destpath, filepath;$/;"	v	file:
files	src/attr.c	/^	git_vector *files;$/;"	m	struct:__anon247	file:	access:public
files	src/attrcache.h	/^	git_strmap *files;	 \/* hash path to git_attr_cache_entry records *\/$/;"	m	struct:__anon309	access:public
files	src/config.h	/^	git_vector files;$/;"	m	struct:git_config	access:public
files	tests/diff/diff_helpers.h	/^	int files;$/;"	m	struct:__anon369	access:public
files	tests/object/tree/walk.c	/^	int files;$/;"	m	struct:treewalk_skip_data	file:	access:public
files_are_equal	tests/index/tests.c	/^static void files_are_equal(const char *a, const char *b)$/;"	f	file:	signature:(const char *a, const char *b)
files_binary	tests/diff/diff_helpers.h	/^	int files_binary;$/;"	m	struct:__anon369	access:public
files_changed	src/diff_stats.c	/^	size_t files_changed;$/;"	m	struct:git_diff_stats	file:	access:public
filestats	src/diff_stats.c	/^	diff_file_stats *filestats;$/;"	m	struct:git_diff_stats	file:	access:public
filesystem_iterator	src/iterator.c	/^} filesystem_iterator;$/;"	t	typeref:struct:__anon272	file:
filesystem_iterator_advance	src/iterator.c	/^static int filesystem_iterator_advance($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
filesystem_iterator_advance_into	src/iterator.c	/^static int filesystem_iterator_advance_into($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
filesystem_iterator_advance_over	src/iterator.c	/^static int filesystem_iterator_advance_over($/;"	f	file:	signature:( const git_index_entry **out, git_iterator_status_t *status, git_iterator *i)
filesystem_iterator_clear	src/iterator.c	/^static void filesystem_iterator_clear(filesystem_iterator *iter)$/;"	f	file:	signature:(filesystem_iterator *iter)
filesystem_iterator_current	src/iterator.c	/^static int filesystem_iterator_current($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
filesystem_iterator_current_entry	src/iterator.c	/^GIT_INLINE(filesystem_iterator_entry *) filesystem_iterator_current_entry($/;"	f	signature:( filesystem_iterator_frame *frame)
filesystem_iterator_current_frame	src/iterator.c	/^GIT_INLINE(filesystem_iterator_frame *) filesystem_iterator_current_frame($/;"	f	signature:( filesystem_iterator *iter)
filesystem_iterator_entry	src/iterator.c	/^} filesystem_iterator_entry;$/;"	t	typeref:struct:__anon270	file:
filesystem_iterator_entry_cmp	src/iterator.c	/^static int filesystem_iterator_entry_cmp(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
filesystem_iterator_entry_cmp_icase	src/iterator.c	/^static int filesystem_iterator_entry_cmp_icase(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
filesystem_iterator_entry_init	src/iterator.c	/^static filesystem_iterator_entry *filesystem_iterator_entry_init($/;"	f	file:	signature:( filesystem_iterator_frame *frame, const char *path, size_t path_len, struct stat *statbuf, iterator_pathlist_search_t pathlist_match)
filesystem_iterator_frame	src/iterator.c	/^} filesystem_iterator_frame;$/;"	t	typeref:struct:__anon271	file:
filesystem_iterator_frame_pop	src/iterator.c	/^GIT_INLINE(void) filesystem_iterator_frame_pop(filesystem_iterator *iter)$/;"	f	signature:(filesystem_iterator *iter)
filesystem_iterator_frame_pop_ignores	src/iterator.c	/^static void filesystem_iterator_frame_pop_ignores($/;"	f	file:	signature:( filesystem_iterator *iter)
filesystem_iterator_frame_push	src/iterator.c	/^static int filesystem_iterator_frame_push($/;"	f	file:	signature:( filesystem_iterator *iter, filesystem_iterator_entry *frame_entry)
filesystem_iterator_frame_push_ignores	src/iterator.c	/^static void filesystem_iterator_frame_push_ignores($/;"	f	file:	signature:( filesystem_iterator *iter, filesystem_iterator_entry *frame_entry, filesystem_iterator_frame *new_frame)
filesystem_iterator_free	src/iterator.c	/^static void filesystem_iterator_free(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
filesystem_iterator_init	src/iterator.c	/^static int filesystem_iterator_init(filesystem_iterator *iter)$/;"	f	file:	signature:(filesystem_iterator *iter)
filesystem_iterator_is_submodule	src/iterator.c	/^static int filesystem_iterator_is_submodule($/;"	f	file:	signature:( bool *out, filesystem_iterator *iter, const char *path, size_t path_len)
filesystem_iterator_parent_frame	src/iterator.c	/^GIT_INLINE(filesystem_iterator_frame *) filesystem_iterator_parent_frame($/;"	f	signature:( filesystem_iterator *iter)
filesystem_iterator_reset	src/iterator.c	/^static int filesystem_iterator_reset(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
filesystem_iterator_set_current	src/iterator.c	/^static void filesystem_iterator_set_current($/;"	f	file:	signature:( filesystem_iterator *iter, filesystem_iterator_entry *entry)
filesystem_iterator_update_ignored	src/iterator.c	/^static void filesystem_iterator_update_ignored(filesystem_iterator *iter)$/;"	f	file:	signature:(filesystem_iterator *iter)
fill_conflict_hunk	src/xdiff/xmerge.c	/^static int fill_conflict_hunk(size_t *out, xdfenv_t *xe1, const char *name1,$/;"	f	file:	signature:(size_t *out, xdfenv_t *xe1, const char *name1, xdfenv_t *xe2, const char *name2, const char *name3, size_t size, int i, int style, xdmerge_t *m, char *dest, int marker_size)
fill_hashmap	src/xdiff/xpatience.c	/^static int fill_hashmap(mmfile_t *file1, mmfile_t *file2,$/;"	f	file:	signature:(mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env, struct hashmap *result, int line1, int count1, int line2, int count2)
fill_index_wth_head_entries	tests/status/worktree_init.c	/^static void fill_index_wth_head_entries(git_repository *repo, git_index *index)$/;"	f	file:	signature:(git_repository *repo, git_index *index)
fill_origin_blob	src/blame_git.c	/^static void fill_origin_blob(git_blame__origin *o, mmfile_t *file)$/;"	f	file:	signature:(git_blame__origin *o, mmfile_t *file)
fill_window	deps/zlib/deflate.c	/^local void fill_window(s)$/;"	f
filled	src/pack-objects.h	/^	    filled:1;$/;"	m	struct:git_pobject	access:public
filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:__anon234	file:	access:public
filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:__anon235	file:	access:public
filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:proxy_stream	file:	access:public
filter_all	tests/diff/notify.c	/^static int filter_all($/;"	f	file:	signature:( const git_diff *diff_so_far, const git_diff_delta *delta_to_add, const char *matched_pathspec, void *payload)
filter_def_filter_key_check	src/filter.c	/^static int filter_def_filter_key_check(const void *key, const void *fdef)$/;"	f	file:	signature:(const void *key, const void *fdef)
filter_def_name_key_check	src/filter.c	/^static int filter_def_name_key_check(const void *key, const void *fdef)$/;"	f	file:	signature:(const void *key, const void *fdef)
filter_def_priority_cmp	src/filter.c	/^static int filter_def_priority_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
filter_def_scan_attrs	src/filter.c	/^static int filter_def_scan_attrs($/;"	f	file:	signature:( git_buf *attrs, size_t *nattr, size_t *nmatch, const char *attr_str)
filter_def_set_attrs	src/filter.c	/^static void filter_def_set_attrs(git_filter_def *fdef)$/;"	f	file:	signature:(git_filter_def *fdef)
filter_for	tests/filter/query.c	/^static int filter_for(const char *filename, const char *filter)$/;"	f	file:	signature:(const char *filename, const char *filter)
filter_initialize	src/filter.c	/^static int filter_initialize(git_filter_def *fdef)$/;"	f	file:	signature:(git_filter_def *fdef)
filter_list_check_attributes	src/filter.c	/^static int filter_list_check_attributes($/;"	f	file:	signature:( const char ***out, git_repository *repo, git_attr_session *attr_session, git_filter_def *fdef, const git_filter_source *src)
filter_list_new	src/filter.c	/^static int filter_list_new($/;"	f	file:	signature:( git_filter_list **out, const git_filter_source *src)
filter_name	src/filter.c	/^	char *filter_name;$/;"	m	struct:__anon235	file:	access:public
filter_name	src/filter.c	/^	const char *filter_name;$/;"	m	struct:__anon234	file:	access:public
filter_refs	src/push.c	/^static int filter_refs(git_remote *remote)$/;"	f	file:	signature:(git_remote *remote)
filter_registry	src/filter.c	/^static struct git_filter_registry filter_registry;$/;"	v	typeref:struct:git_filter_registry	file:
filter_registry_find	src/filter.c	/^static int filter_registry_find(size_t *pos, const char *name)$/;"	f	file:	signature:(size_t *pos, const char *name)
filter_registry_insert	src/filter.c	/^static int filter_registry_insert($/;"	f	file:	signature:( const char *name, git_filter *filter, int priority)
filter_registry_lookup	src/filter.c	/^static git_filter_def *filter_registry_lookup(size_t *pos, const char *name)$/;"	f	file:	signature:(size_t *pos, const char *name)
filter_wants	src/fetch.c	/^static int filter_wants(git_remote *remote, const git_fetch_options *opts)$/;"	f	file:	signature:(git_remote *remote, const git_fetch_options *opts)
filters	include/git2/filter.h	/^GIT_EXTERN(void) git_filter_list_free(git_filter_list *filters);$/;"	v
filters	src/filter.c	/^	git_vector filters;$/;"	m	struct:git_filter_registry	file:	access:public
final	src/blame.h	/^	git_commit *final;$/;"	m	struct:git_blame	access:public
final_blob	src/blame.h	/^	git_blob *final_blob;$/;"	m	struct:git_blame	access:public
final_buf	src/blame.h	/^	const char *final_buf;$/;"	m	struct:git_blame	access:public
final_buf_size	src/blame.h	/^	git_off_t final_buf_size;$/;"	m	struct:git_blame	access:public
final_commit_id	include/git2/blame.h	/^	git_oid final_commit_id;$/;"	m	struct:git_blame_hunk	access:public
final_signature	include/git2/blame.h	/^	git_signature *final_signature;$/;"	m	struct:git_blame_hunk	access:public
final_start_line_number	include/git2/blame.h	/^	size_t final_start_line_number;$/;"	m	struct:git_blame_hunk	access:public
finalize_write	include/git2/odb_backend.h	/^	int (*finalize_write)(git_odb_stream *stream, const git_oid *oid);$/;"	m	struct:git_odb_stream	access:public
find_blob	src/notes.c	/^static int find_blob(git_oid *blob, git_tree *tree, const char *target)$/;"	f	file:	signature:(git_oid *blob, git_tree *tree, const char *target)
find_by_path	src/submodule.c	/^static int find_by_path(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
find_ceiling_dir_offset	src/repository.c	/^static size_t find_ceiling_dir_offset($/;"	f	file:	signature:( const char *path, const char *ceiling_directories)
find_child	src/tree-cache.c	/^static git_tree_cache *find_child($/;"	f	file:	signature:( const git_tree_cache *tree, const char *path, const char *end)
find_collation_sequence_value	deps/regex/regexec.c	/^find_collation_sequence_value (const unsigned char *mbs, size_t mbs_len)$/;"	f	file:	signature:(const unsigned char *mbs, size_t mbs_len)
find_commit_name	src/describe.c	/^static struct commit_name *find_commit_name($/;"	f	file:	signature:( git_oidmap *names, const git_oid *peeled)
find_deltas	src/pack-objects.c	/^static int find_deltas(git_packbuilder *pb, git_pobject **list,$/;"	f	file:	signature:(git_packbuilder *pb, git_pobject **list, size_t *list_size, size_t window, size_t depth)
find_func	src/xdiff/xdiff.h	/^	find_func_t find_func;$/;"	m	struct:s_xdemitconf	access:public
find_func_priv	src/xdiff/xdiff.h	/^	void *find_func_priv;$/;"	m	struct:s_xdemitconf	access:public
find_func_t	src/xdiff/xdiff.h	/^typedef long (*find_func_t)(const char *line, long line_len, char *buffer, long buffer_size, void *priv);$/;"	t
find_head	src/remote.c	/^static int find_head(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
find_hunk_linenum	src/apply.c	/^static bool find_hunk_linenum($/;"	f	file:	signature:( size_t *out, patch_image *image, patch_image *preimage, size_t linenum)
find_internal_file_by_level	src/config.c	/^static int find_internal_file_by_level($/;"	f	file:	signature:( file_internal **internal_out, const git_config *cfg, git_config_level_t level)
find_last_in_target	src/blame_git.c	/^static bool find_last_in_target(size_t *out, git_blame *blame, git_blame__origin *target)$/;"	f	file:	signature:(size_t *out, git_blame *blame, git_blame__origin *target)
find_lcs	src/xdiff/xhistogram.c	/^static int find_lcs($/;"	f	file:	signature:( struct histindex *index, struct region *lcs, unsigned int line1, unsigned int count1, unsigned int line2, unsigned int count2)
find_locked	src/transaction.c	/^static int find_locked(transaction_node **out, git_transaction *tx, const char *refname)$/;"	f	file:	signature:(transaction_node **out, git_transaction *tx, const char *refname)
find_longest_common_sequence	src/xdiff/xpatience.c	/^static struct entry *find_longest_common_sequence(struct hashmap *map)$/;"	f	file:	signature:(struct hashmap *map)
find_master	tests/fetchhead/nonetwork.c	/^int find_master(const char *ref_name, const char *remote_url, const git_oid *oid, unsigned int is_merge, void *payload)$/;"	f	signature:(const char *ref_name, const char *remote_url, const git_oid *oid, unsigned int is_merge, void *payload)
find_master_called	tests/fetchhead/nonetwork.c	/^static bool find_master_called;$/;"	v	file:
find_modules	tests/generate.py	/^    def find_modules(self):$/;"	m	class:TestSuite	access:public
find_next_backend	src/config.c	/^static int find_next_backend(size_t *out, const git_config *cfg, size_t i)$/;"	f	file:	signature:(size_t *out, const git_config *cfg, size_t i)
find_next_dir	src/tree.c	/^static size_t find_next_dir(const char *dirname, git_index *index, size_t start)$/;"	f	file:	signature:(const char *dirname, git_index *index, size_t start)
find_origin	src/blame_git.c	/^static git_blame__origin* find_origin($/;"	f	file:	signature:( git_blame *blame, git_commit *parent, git_blame__origin *origin)
find_recover_state	deps/regex/regexec.c	/^find_recover_state (reg_errcode_t *err, re_match_context_t *mctx)$/;"	f	signature:(reg_errcode_t *err, re_match_context_t *mctx)
find_repo	src/repository.c	/^static int find_repo($/;"	f	file:	signature:( git_buf *repo_path, git_buf *parent_path, git_buf *link_path, const char *start_path, uint32_t flags, const char *ceiling_dirs)
find_subexp_node	deps/regex/regexec.c	/^find_subexp_node (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_node_set *nodes, int subexp_idx, int type)
find_subtree_in_current_level	src/notes.c	/^static int find_subtree_in_current_level($/;"	f	file:	signature:( git_tree **out, git_repository *repo, git_tree *parent, const char *annotated_object_sha, int fanout)
find_subtree_r	src/notes.c	/^static int find_subtree_r(git_tree **out, git_tree *root,$/;"	f	file:	signature:(git_tree **out, git_tree *root, git_repository *repo, const char *target, int *fanout)
find_tmp_path	tests/clar/sandbox.h	/^find_tmp_path(char *buffer, size_t length)$/;"	f	signature:(char *buffer, size_t length)
find_unique_abbrev_size	src/describe.c	/^static int find_unique_abbrev_size($/;"	f	file:	signature:( int *out, git_repository *repo, const git_oid *oid_in, int abbreviated_size)
findopts	examples/diff.c	/^	git_diff_find_options findopts;$/;"	m	struct:opts	file:	access:public
finish_depth_computation	src/describe.c	/^static unsigned long finish_depth_computation($/;"	f	file:	signature:( git_pqueue *list, git_revwalk *walk, struct possible_tag *best)
finish_done	deps/zlib/deflate.c	/^    finish_done     \/* finish done, accept no more input or output *\/$/;"	e	enum:__anon27	file:
finish_hash	src/hash/hash_win32.h	/^	hash_win32_cng_finish_hash_fn finish_hash;$/;"	m	struct:hash_cng_prov	access:public
finish_inflate	src/odb_loose.c	/^static int finish_inflate(z_stream *s)$/;"	f	file:	signature:(z_stream *s)
finish_started	deps/zlib/deflate.c	/^    finish_started, \/* finish started, need only more output at next deflate *\/$/;"	e	enum:__anon27	file:
finished	examples/network/fetch.c	/^	int finished;$/;"	m	struct:dl_data	file:	access:public
first	deps/regex/regex_internal.h	/^  struct bin_tree_t *first;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
first	src/win32/dir.h	/^	int first;$/;"	m	struct:__anon290	access:public
first	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:	access:public
first_parent	src/revwalk.h	/^		first_parent: 1,$/;"	m	struct:git_revwalk	access:public
first_time	tests/diff/racediffiter.c	/^	bool first_time;$/;"	m	struct:__anon368	file:	access:public
first_tree	tests/object/tree/write.c	/^static const char *first_tree  = "181037049a54a1eb5fab404658a3a250b44335d7";$/;"	v	file:
fix_thin_pack	src/indexer.c	/^static int fix_thin_pack(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:	signature:(git_indexer *idx, git_transfer_progress *stats)
fixedtables	deps/zlib/infback.c	/^local void fixedtables(state)$/;"	f
fixedtables	deps/zlib/inflate.c	/^local void fixedtables(state)$/;"	f
fixture_basename	tests/clar/fixtures.h	/^fixture_basename(const char *fixture_name)$/;"	f	signature:(const char *fixture_name)
fixture_path	tests/clar/fixtures.h	/^fixture_path(const char *base, const char *fixture_name)$/;"	f	signature:(const char *base, const char *fixture_name)
fl	include/git2/sys/filter.h	/^GIT_EXTERN(size_t) git_filter_list_length(const git_filter_list *fl);$/;"	v
flag_within	src/describe.c	/^	unsigned flag_within;$/;"	m	struct:possible_tag	file:	access:public
flags	deps/http-parser/http_parser.h	/^  unsigned char flags : 6;    \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser	access:public
flags	deps/http-parser/http_parser.h	/^enum flags$/;"	g
flags	deps/zlib/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state	access:public
flags	include/git2/blame.h	/^	uint32_t flags;$/;"	m	struct:git_blame_options	access:public
flags	include/git2/diff.h	/^	git_diff_format_email_flags_t flags;$/;"	m	struct:__anon100	access:public
flags	include/git2/diff.h	/^	uint32_t      flags;	   \/**< git_diff_flag_t values *\/$/;"	m	struct:__anon86	access:public
flags	include/git2/diff.h	/^	uint32_t    flags;$/;"	m	struct:__anon85	access:public
flags	include/git2/diff.h	/^	uint32_t flags;            \/**< defaults to GIT_DIFF_NORMAL *\/$/;"	m	struct:__anon87	access:public
flags	include/git2/diff.h	/^	uint32_t flags;$/;"	m	struct:__anon96	access:public
flags	include/git2/index.h	/^	uint16_t flags;$/;"	m	struct:git_index_entry	access:public
flags	include/git2/merge.h	/^	git_merge_file_flag_t flags;$/;"	m	struct:__anon130	access:public
flags	include/git2/merge.h	/^	git_merge_flag_t flags;$/;"	m	struct:__anon132	access:public
flags	include/git2/repository.h	/^	uint32_t    flags;$/;"	m	struct:__anon119	access:public
flags	include/git2/revparse.h	/^	unsigned int flags;$/;"	m	struct:__anon74	access:public
flags	include/git2/stash.h	/^	git_stash_apply_flags flags;$/;"	m	struct:git_stash_apply_options	access:public
flags	include/git2/status.h	/^	unsigned int      flags;$/;"	m	struct:__anon49	access:public
flags	include/git2/sys/config.h	/^	unsigned int flags;$/;"	m	struct:git_config_iterator	access:public
flags	src/attr.c	/^	uint32_t flags;$/;"	m	struct:__anon247	file:	access:public
flags	src/attr_file.h	/^	unsigned int flags;$/;"	m	struct:__anon166	access:public
flags	src/branch.c	/^	unsigned int flags;$/;"	m	struct:__anon308	file:	access:public
flags	src/cache.h	/^	uint16_t   flags; \/* GIT_CACHE_STORE value *\/$/;"	m	struct:__anon229	access:public
flags	src/commit_list.h	/^			 flags : FLAG_BITS;$/;"	m	struct:git_commit_list_node	access:public
flags	src/diff_driver.c	/^	int flags;$/;"	m	struct:__anon239	file:	access:public
flags	src/diff_file.h	/^	uint32_t flags;$/;"	m	struct:__anon277	access:public
flags	src/diff_print.c	/^	uint32_t flags;$/;"	m	struct:__anon236	file:	access:public
flags	src/fileops.c	/^	uint32_t flags;$/;"	m	struct:__anon263	file:	access:public
flags	src/fileops.c	/^	uint32_t flags;$/;"	m	struct:__anon264	file:	access:public
flags	src/filter.c	/^	uint32_t        flags;$/;"	m	struct:git_filter_source	file:	access:public
flags	src/filter.h	/^	uint32_t flags;$/;"	m	struct:__anon260	access:public
flags	src/index.c	/^	uint16_t flags;$/;"	m	struct:entry_long	file:	access:public
flags	src/index.c	/^	uint16_t flags;$/;"	m	struct:entry_short	file:	access:public
flags	src/index.c	/^	unsigned int flags;$/;"	m	struct:foreach_diff_data	file:	access:public
flags	src/iterator.h	/^	unsigned int flags;$/;"	m	struct:__anon255	access:public
flags	src/iterator.h	/^	unsigned int flags;$/;"	m	struct:git_iterator	access:public
flags	src/patch_generate.h	/^	uint32_t flags;$/;"	m	struct:git_patch_generated	access:public
flags	src/path.h	/^	unsigned int flags;$/;"	m	struct:git_path_diriter	access:public
flags	src/refdb_fs.c	/^	char flags;$/;"	m	struct:packref	file:	access:public
flags	src/submodule.h	/^	uint32_t flags;$/;"	m	struct:git_submodule	access:public
flags	src/transports/local.c	/^	int flags;$/;"	m	struct:__anon178	file:	access:public
flags	src/transports/smart.h	/^	int flags;$/;"	m	struct:__anon193	access:public
flags	src/userdiff.h	/^	int flags;$/;"	m	struct:__anon161	access:public
flags	src/vector.h	/^	uint32_t flags;$/;"	m	struct:git_vector	access:public
flags	src/xdiff/xdiff.h	/^	unsigned long flags;$/;"	m	struct:s_xdemitconf	access:public
flags	src/xdiff/xdiff.h	/^	unsigned long flags;$/;"	m	struct:s_xpparam	access:public
flags	src/xdiff/xprepare.c	/^	long flags;$/;"	m	struct:s_xdlclassifier	file:	access:public
flags_extended	include/git2/index.h	/^	uint16_t flags_extended;$/;"	m	struct:git_index_entry	access:public
flags_extended	src/index.c	/^	uint16_t flags_extended;$/;"	m	struct:entry_long	file:	access:public
flattened	src/patch_generate.h	/^	git_pool flattened;$/;"	m	struct:git_patch_generated	access:public
flipped	tests/filter/wildcard.c	/^static unsigned char flipped[] = {$/;"	v	file:
flush_buffer	src/filebuf.c	/^GIT_INLINE(int) flush_buffer(git_filebuf *file)$/;"	f	signature:(git_filebuf *file)
flush_mode	src/filebuf.h	/^	int flush_mode;$/;"	m	struct:git_filebuf	access:public
flush_pending	deps/zlib/deflate.c	/^local void flush_pending(strm)$/;"	f
flush_pkt	src/transports/smart_pkt.c	/^static int flush_pkt(git_pkt **out)$/;"	f	file:	signature:(git_pkt **out)
fmh	src/map.h	/^	HANDLE fmh; \/* file mapping handle *\/$/;"	m	struct:__anon237	access:public
fmt_one	src/oid.c	/^GIT_INLINE(char) *fmt_one(char *str, unsigned int val)$/;"	f	signature:(char *str, unsigned int val)
fn	examples/network/git2.c	/^	git_cb fn;$/;"	m	struct:__anon36	file:	access:public
fn	src/date.c	/^	void (*fn)(struct tm *, struct tm *, int *);$/;"	m	struct:special	file:	access:public
fn	src/patch_parse.c	/^	int(*fn)(git_patch_parsed *, git_patch_parse_ctx *);$/;"	m	struct:__anon164	file:	access:public
fn	src/transport.c	/^	git_transport_cb fn;$/;"	m	struct:transport_definition	file:	access:public
fn_locate_object_short_oid	src/odb_loose.c	/^static int fn_locate_object_short_oid(void *state, git_buf *pathbuf) {$/;"	f	file:	signature:(void *state, git_buf *pathbuf)
fnm_flags	src/status.c	/^	int fnm_flags;$/;"	m	struct:status_file_info	file:	access:public
fnmatch	tests/generate.py	/^import re, fnmatch, os, codecs, pickle$/;"	i
fnmatch_flags	src/pathspec.c	/^	int fnmatch_flags;$/;"	m	struct:pathspec_match_context	file:	access:public
fns	src/userdiff.h	/^	const char *fns;$/;"	m	struct:__anon161	access:public
follow_and_lstat_link	src/win32/posix_w32.c	/^static int follow_and_lstat_link(git_win32_path path, struct stat* buf)$/;"	f	file:	signature:(git_win32_path path, struct stat* buf)
forbidden_custom_headers	src/transports/smart.c	/^static char *forbidden_custom_headers[] = {$/;"	v	file:
force	examples/tag.c	/^	int force;$/;"	m	struct:__anon38	file:	access:public
force	src/refspec.h	/^	unsigned int force :1,$/;"	m	struct:git_refspec	access:public
force_create_file	tests/checkout/typechange.c	/^static void force_create_file(const char *file)$/;"	f	file:	signature:(const char *file)
foreach	include/git2/sys/odb_backend.h	/^	int (* foreach)($/;"	m	struct:git_odb_backend	access:public
foreach_cancel_cb	tests/pack/packbuilder.c	/^static int foreach_cancel_cb(void *buf, size_t len, void *payload)$/;"	f	file:	signature:(void *buf, size_t len, void *payload)
foreach_cb	src/odb_loose.c	/^static int foreach_cb(void *_state, git_buf *path)$/;"	f	file:	signature:(void *_state, git_buf *path)
foreach_cb	src/transports/local.c	/^static int foreach_cb(void *buf, size_t len, void *payload)$/;"	f	file:	signature:(void *buf, size_t len, void *payload)
foreach_cb	tests/odb/foreach.c	/^static int foreach_cb(const git_oid *oid, void *data)$/;"	f	file:	signature:(const git_oid *oid, void *data)
foreach_cb	tests/pack/packbuilder.c	/^static int foreach_cb(void *buf, size_t len, void *payload)$/;"	f	file:	signature:(void *buf, size_t len, void *payload)
foreach_data	src/transports/local.c	/^typedef struct foreach_data {$/;"	s	file:
foreach_data	src/transports/local.c	/^} foreach_data;$/;"	t	typeref:struct:foreach_data	file:
foreach_data::progress_cb	src/transports/local.c	/^	git_transfer_progress_cb progress_cb;$/;"	m	struct:foreach_data	file:	access:public
foreach_data::progress_payload	src/transports/local.c	/^	void *progress_payload;$/;"	m	struct:foreach_data	file:	access:public
foreach_data::stats	src/transports/local.c	/^	git_transfer_progress *stats;$/;"	m	struct:foreach_data	file:	access:public
foreach_data::writepack	src/transports/local.c	/^	git_odb_writepack *writepack;$/;"	m	struct:foreach_data	file:	access:public
foreach_diff_data	src/index.c	/^struct foreach_diff_data {$/;"	s	file:
foreach_diff_data::cb	src/index.c	/^	git_index_matched_path_cb cb;$/;"	m	struct:foreach_diff_data	file:	access:public
foreach_diff_data::flags	src/index.c	/^	unsigned int flags;$/;"	m	struct:foreach_diff_data	file:	access:public
foreach_diff_data::index	src/index.c	/^	git_index *index;$/;"	m	struct:foreach_diff_data	file:	access:public
foreach_diff_data::pathspec	src/index.c	/^	const git_pathspec *pathspec;$/;"	m	struct:foreach_diff_data	file:	access:public
foreach_diff_data::payload	src/index.c	/^	void *payload;$/;"	m	struct:foreach_diff_data	file:	access:public
foreach_object_dir_cb	src/odb_loose.c	/^static int foreach_object_dir_cb(void *_state, git_buf *path)$/;"	f	file:	signature:(void *_state, git_buf *path)
foreach_state	src/odb_loose.c	/^struct foreach_state {$/;"	s	file:
foreach_state::cb	src/odb_loose.c	/^	git_odb_foreach_cb cb;$/;"	m	struct:foreach_state	file:	access:public
foreach_state::data	src/odb_loose.c	/^	void *data;$/;"	m	struct:foreach_state	file:	access:public
foreach_state::dir_len	src/odb_loose.c	/^	size_t dir_len;$/;"	m	struct:foreach_state	file:	access:public
foreach_stop_cb	tests/odb/foreach.c	/^static int foreach_stop_cb(const git_oid *oid, void *data)$/;"	f	file:	signature:(const git_oid *oid, void *data)
foreach_stop_first_cb	tests/odb/foreach.c	/^static int foreach_stop_first_cb(const git_oid *oid, void *data)$/;"	f	file:	signature:(const git_oid *oid, void *data)
format	examples/diff.c	/^	git_diff_format_t format;$/;"	m	struct:opts	file:	access:public
format	examples/status.c	/^	int format;$/;"	m	struct:opts	file:	access:public
format	src/diff_print.c	/^	git_diff_format_t format;$/;"	m	struct:__anon236	file:	access:public
format_binary	src/diff_print.c	/^static int format_binary($/;"	f	file:	signature:( diff_print_info *pi, git_diff_binary_t type, const char *data, size_t datalen, size_t inflatedlen)
format_header_field	src/commit.c	/^static void format_header_field(git_buf *out, const char *field, const char *content)$/;"	f	file:	signature:(git_buf *out, const char *field, const char *content)
format_options	examples/describe.c	/^	git_describe_format_options format_options;$/;"	m	struct:__anon40	file:	access:public
found	src/attr.c	/^	git_attr_assignment *found;$/;"	m	struct:__anon246	file:	access:public
found	src/odb_loose.c	/^	int found;				\/* number of matching$/;"	m	struct:__anon345	file:	access:public
found_master	tests/fetchhead/nonetwork.c	/^static bool found_master;$/;"	v	file:
found_order	src/describe.c	/^	int found_order;$/;"	m	struct:possible_tag	file:	access:public
fprintf_delta	tests/diff/diff_helpers.c	/^static void fprintf_delta(FILE *fp, const git_diff_delta *delta, float progress)$/;"	f	file:	signature:(FILE *fp, const git_diff_delta *delta, float progress)
frames	src/win32/w32_stack.h	/^	void *frames[GIT_WIN32__STACK__MAX_FRAMES];$/;"	m	struct:__anon284	access:public
free	include/git2/config.h	/^	void (*free)(struct git_config_entry *entry); \/**< Free function for this entry *\/$/;"	m	struct:git_config_entry	access:public
free	include/git2/odb_backend.h	/^	void (*free)(git_odb_stream *stream);$/;"	m	struct:git_odb_stream	access:public
free	include/git2/odb_backend.h	/^	void (*free)(git_odb_writepack *writepack);$/;"	m	struct:git_odb_writepack	access:public
free	include/git2/sys/config.h	/^	void (*free)(git_config_iterator *iter);$/;"	m	struct:git_config_iterator	access:public
free	include/git2/sys/config.h	/^	void (*free)(struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
free	include/git2/sys/odb_backend.h	/^	void (* free)(git_odb_backend *);$/;"	m	struct:git_odb_backend	access:public
free	include/git2/sys/refdb_backend.h	/^	void (*free)($/;"	m	struct:git_reference_iterator	access:public
free	include/git2/sys/refdb_backend.h	/^	void (*free)(git_refdb_backend *backend);$/;"	m	struct:git_refdb_backend	access:public
free	include/git2/sys/stream.h	/^	void (*free)(struct git_stream *);$/;"	m	struct:git_stream	access:public
free	include/git2/sys/transport.h	/^	void (*free)($/;"	m	struct:git_smart_subtransport_stream	access:public
free	include/git2/sys/transport.h	/^	void (*free)(git_smart_subtransport *transport);$/;"	m	struct:git_smart_subtransport	access:public
free	include/git2/sys/transport.h	/^	void (*free)(git_transport *transport);$/;"	m	struct:git_transport	access:public
free	include/git2/transport.h	/^	void (*free)(git_cred *cred);$/;"	m	struct:git_cred	access:public
free	include/git2/types.h	/^	void (*free)(git_writestream *stream);$/;"	m	struct:git_writestream	access:public
free	src/iterator.h	/^	void (*free)(git_iterator *);$/;"	m	struct:__anon256	access:public
free	src/object.c	/^	void (*free)(void *self);$/;"	m	struct:__anon340	file:	access:public
free	src/transports/auth.h	/^	void (*free)(git_http_auth_context *ctx);$/;"	m	struct:git_http_auth_context	access:public
free_cache_object	src/pack.c	/^static void free_cache_object(void *o)$/;"	f	file:	signature:(void *o)
free_charset	deps/regex/regcomp.c	/^free_charset (re_charset_t *cset)$/;"	f	file:	signature:(re_charset_t *cset)
free_dfa_content	deps/regex/regcomp.c	/^free_dfa_content (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
free_fail_stack_return	deps/regex/regexec.c	/^free_fail_stack_return (struct re_fail_stack_t *fs)$/;"	f	file:	signature:(struct re_fail_stack_t *fs)
free_fn	src/diff.h	/^	void (*free_fn)(git_diff *diff);$/;"	m	struct:git_diff	access:public
free_fn	src/patch.h	/^	void (*free_fn)(git_patch *patch);$/;"	m	struct:git_patch	access:public
free_func	deps/zlib/zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
free_head	src/transports/local.c	/^static void free_head(git_remote_head *head)$/;"	f	file:	signature:(git_remote_head *head)
free_heads	src/transports/local.c	/^static void free_heads(git_vector *heads)$/;"	f	file:	signature:(git_vector *heads)
free_hunk	src/blame.c	/^static void free_hunk(git_blame_hunk *hunk)$/;"	f	file:	signature:(git_blame_hunk *hunk)
free_item	src/sortedcache.h	/^	git_sortedcache_free_item_fn free_item;$/;"	m	struct:__anon310	access:public
free_item_payload	src/sortedcache.h	/^	void         *free_item_payload;$/;"	m	struct:__anon310	access:public
free_lowest_entry	src/pack.c	/^static void free_lowest_entry(git_pack_cache *cache)$/;"	f	file:	signature:(git_pack_cache *cache)
free_oids	tests/object/raw/short.c	/^static void free_oids(int n, char **oids)$/;"	f	file:	signature:(int n, char **oids)
free_refspec	src/push.c	/^static void free_refspec(push_spec *spec)$/;"	f	file:	signature:(push_spec *spec)
free_refspecs	src/remote.c	/^static void free_refspecs(git_vector *vec)$/;"	f	file:	signature:(git_vector *vec)
free_signature	include/git2/diff.h	/^	void (*free_signature)(void *sig, void *payload);$/;"	m	struct:__anon95	access:public
free_state	deps/regex/regex_internal.c	/^free_state (re_dfastate_t *state)$/;"	f	file:	signature:(re_dfastate_t *state)
free_symrefs	src/transports/smart.c	/^static void free_symrefs(git_vector *symrefs)$/;"	f	file:	signature:(git_vector *symrefs)
free_token	deps/regex/regcomp.c	/^free_token (re_token_t *node)$/;"	f	file:	signature:(re_token_t *node)
free_tree	deps/regex/regcomp.c	/^free_tree (UNUSED void *extra, bin_tree_t *node)$/;"	f	file:	signature:(UNUSED void *extra, bin_tree_t *node)
free_trees	tests/threads/diff.c	/^static void free_trees(void)$/;"	f	file:	signature:(void)
free_unpacked	src/pack-objects.c	/^static size_t free_unpacked(struct unpacked *n)$/;"	f	file:	signature:(struct unpacked *n)
free_vars	src/config_file.c	/^static void free_vars(git_strmap *values)$/;"	f	file:	signature:(git_strmap *values)
free_workarea_compile	deps/regex/regcomp.c	/^free_workarea_compile (regex_t *preg)$/;"	f	file:	signature:(regex_t *preg)
freq	deps/zlib/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon29	access:public
freshen	include/git2/sys/odb_backend.h	/^	int (* freshen)(git_odb_backend *, const git_oid *);$/;"	m	struct:git_odb_backend	access:public
from	include/git2/revparse.h	/^	git_object *from;$/;"	m	struct:__anon74	access:public
from_hex	src/util.h	/^static signed char from_hex[] = {$/;"	v
from_prefix	src/fileops.c	/^	ssize_t from_prefix;$/;"	m	struct:__anon264	file:	access:public
fs__dotordotdot	tests/clar/fs.h	/^fs__dotordotdot(WCHAR *_tocheck)$/;"	f	signature:(WCHAR *_tocheck)
fs_copy	tests/clar/fs.h	/^fs_copy(const char *_source, const char *_dest)$/;"	f	signature:(const char *_source, const char *_dest)
fs_copy	tests/clar/fs.h	/^fs_copy(const char *_source, const char *dest)$/;"	f	signature:(const char *_source, const char *dest)
fs_copydir_helper	tests/clar/fs.h	/^fs_copydir_helper(WCHAR *_wsource, WCHAR *_wdest)$/;"	f	signature:(WCHAR *_wsource, WCHAR *_wdest)
fs_rm	tests/clar/fs.h	/^fs_rm(const char *_source)$/;"	f	signature:(const char *_source)
fs_rm	tests/clar/fs.h	/^fs_rm(const char *source)$/;"	f	signature:(const char *source)
fs_rm_wait	tests/clar/fs.h	/^fs_rm_wait(WCHAR *_wpath)$/;"	f	signature:(WCHAR *_wpath)
fs_rmdir_helper	tests/clar/fs.h	/^fs_rmdir_helper(WCHAR *_wsource)$/;"	f	signature:(WCHAR *_wsource)
fs_rmdir_rmdir	tests/clar/fs.h	/^fs_rmdir_rmdir(WCHAR *_wpath)$/;"	f	signature:(WCHAR *_wpath)
fsync_object_files	src/odb_loose.c	/^	int fsync_object_files; \/** loose object file fsync flag. *\/$/;"	m	struct:loose_backend	file:	access:public
ftExpiry	deps/winhttp/winhttp.h	/^    FILETIME ftExpiry;$/;"	m	struct:__anon21	access:public
ftStart	deps/winhttp/winhttp.h	/^    FILETIME ftStart;$/;"	m	struct:__anon21	access:public
full	src/attr_file.h	/^	git_buf  full;$/;"	m	struct:__anon172	access:public
full	src/oid.c	/^	int min_length, full;$/;"	m	struct:git_oid_shorten	file:	access:public
fullpath	src/attr_file.h	/^	char fullpath[GIT_FLEX_ARRAY];$/;"	m	struct:git_attr_file_entry	access:public
func	deps/zlib/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:	access:public
func_line	src/xdiff/xemit.c	/^struct func_line {$/;"	s	file:
func_line::buf	src/xdiff/xemit.c	/^	char buf[80];$/;"	m	struct:func_line	file:	access:public
func_line::len	src/xdiff/xemit.c	/^	long len;$/;"	m	struct:func_line	file:	access:public
futils__error_cannot_rmdir	src/fileops.c	/^static int futils__error_cannot_rmdir(const char *path, const char *filemsg)$/;"	f	file:	signature:(const char *path, const char *filemsg)
futils__rm_first_parent	src/fileops.c	/^static int futils__rm_first_parent(git_buf *path, const char *ceiling)$/;"	f	file:	signature:(git_buf *path, const char *ceiling)
futils__rmdir_data	src/fileops.c	/^} futils__rmdir_data;$/;"	t	typeref:struct:__anon263	file:
futils__rmdir_empty_parent	src/fileops.c	/^static int futils__rmdir_empty_parent(void *opaque, const char *path)$/;"	f	file:	signature:(void *opaque, const char *path)
futils__rmdir_recurs_foreach	src/fileops.c	/^static int futils__rmdir_recurs_foreach(void *opaque, git_buf *path)$/;"	f	file:	signature:(void *opaque, git_buf *path)
g_actualobject	tests/object/lookupbypath.c	/^						*g_actualobject;$/;"	v	file:
g_aux_cb_alloc	src/win32/w32_stack.c	/^static git_win32__stack__aux_cb_alloc  g_aux_cb_alloc  = NULL;$/;"	v	file:
g_aux_cb_lookup	src/win32/w32_stack.c	/^static git_win32__stack__aux_cb_lookup g_aux_cb_lookup = NULL;$/;"	v	file:
g_blame	tests/blame/getters.c	/^git_blame *g_blame;$/;"	v
g_blame	tests/blame/simple.c	/^static git_blame *g_blame;$/;"	v	file:
g_bufferblame	tests/blame/buffer.c	/^static git_blame *g_fileblame, *g_bufferblame;$/;"	v	file:
g_checkpoint_id	src/win32/w32_crtdbg_stacktrace.c	/^static unsigned int g_checkpoint_id = 0; \/* to better label leak checkpoints *\/$/;"	v	file:
g_config	tests/config/rename.c	/^static git_config *g_config = NULL;$/;"	v	file:
g_count_total_allocs	src/win32/w32_crtdbg_stacktrace.c	/^static unsigned int g_count_total_allocs = 0; \/* number of allocs seen *\/$/;"	v	file:
g_crlf_filtered	tests/object/blob/filter.c	/^static git_buf g_crlf_filtered[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crlf_filtered_stats	tests/object/blob/filter.c	/^static git_buf_text_stats g_crlf_filtered_stats[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crlf_oids	tests/object/blob/filter.c	/^static git_oid g_crlf_oids[CRLF_NUM_TEST_OBJECTS];$/;"	v	file:
g_crlf_raw	tests/object/blob/filter.c	/^static const char *g_crlf_raw[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crlf_raw_len	tests/object/blob/filter.c	/^static git_off_t g_crlf_raw_len[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crtdbg_stacktrace_cs	src/win32/w32_crtdbg_stacktrace.c	/^static CRITICAL_SECTION g_crtdbg_stacktrace_cs;$/;"	v	file:
g_cs_end	src/win32/w32_crtdbg_stacktrace.c	/^static unsigned int g_cs_end = MY_ROW_LIMIT;$/;"	v	file:
g_cs_index	src/win32/w32_crtdbg_stacktrace.c	/^static git_win32__crtdbg_stacktrace__row *g_cs_index[MY_ROW_LIMIT];$/;"	v	file:
g_cs_ins	src/win32/w32_crtdbg_stacktrace.c	/^static unsigned int g_cs_ins = 0; \/* insertion point == unique allocs seen *\/$/;"	v	file:
g_cs_rows	src/win32/w32_crtdbg_stacktrace.c	/^static git_win32__crtdbg_stacktrace__row  g_cs_rows[MY_ROW_LIMIT];$/;"	v	file:
g_data	tests/object/cache.c	/^} g_data[] = {$/;"	v	typeref:struct:__anon373	file:
g_email	tests/repo/head.c	/^static const char *g_email = "foo@example.com";$/;"	v	file:
g_empty_id	tests/index/collision.c	/^static git_oid g_empty_id;$/;"	v	file:
g_expected	tests/threads/refdb.c	/^static int g_expected = 0;$/;"	v	file:
g_expectedobject	tests/object/lookupbypath.c	/^static git_object *g_expectedobject,$/;"	v	file:
g_fileblame	tests/blame/buffer.c	/^static git_blame *g_fileblame, *g_bufferblame;$/;"	v	file:
g_git_oom_error	src/errors.c	/^static git_error g_git_oom_error = {$/;"	v	file:
g_has_ssl	tests/online/badssl.c	/^static bool g_has_ssl = false;$/;"	v	file:
g_has_ssl	tests/online/badssl.c	/^static bool g_has_ssl = true;$/;"	v	file:
g_head_commit	tests/object/lookupbypath.c	/^static git_commit *g_head_commit;$/;"	v	file:
g_idx	tests/index/bypath.c	/^static git_index *g_idx;$/;"	v	file:
g_index	tests/checkout/conflict.c	/^static git_index *g_index;$/;"	v	file:
g_index	tests/index/add.c	/^static git_index *g_index = NULL;$/;"	v	file:
g_index	tests/index/collision.c	/^static git_index *g_index;$/;"	v	file:
g_index	tests/index/crlf.c	/^static git_index *g_index;$/;"	v	file:
g_limit_reached	src/win32/w32_crtdbg_stacktrace.c	/^static bool g_limit_reached = false; \/* had allocs after we filled row table *\/$/;"	v	file:
g_obj	tests/refs/revparse.c	/^static git_object *g_obj;$/;"	v	file:
g_object	tests/checkout/tree.c	/^static git_object *g_object;$/;"	v	file:
g_odb	tests/index/collision.c	/^static git_odb *g_odb;$/;"	v	file:
g_odb	tests/odb/emptyobjects.c	/^git_odb *g_odb;$/;"	v
g_options	tests/clone/empty.c	/^static git_clone_options g_options;$/;"	v	file:
g_options	tests/clone/nonetwork.c	/^static git_clone_options g_options;$/;"	v	file:
g_options	tests/online/clone.c	/^static git_clone_options g_options;$/;"	v	file:
g_options	tests/online/fetchhead.c	/^static git_clone_options g_options;$/;"	v	file:
g_opts	tests/checkout/tree.c	/^static git_checkout_options g_opts;$/;"	v	file:
g_peel_repo	tests/refs/peel.c	/^static git_repository *g_peel_repo;$/;"	v	file:
g_ref	tests/clone/nonetwork.c	/^static git_reference* g_ref;$/;"	v	file:
g_reflog	tests/refs/reflog/drop.c	/^static git_reflog *g_reflog;$/;"	v	file:
g_remote	tests/clone/nonetwork.c	/^static git_remote* g_remote;$/;"	v	file:
g_remote	tests/network/remote/defaultbranch.c	/^static git_remote *g_remote;$/;"	v	file:
g_remote	tests/remote/insteadof.c	/^static git_remote *g_remote;$/;"	v	file:
g_repo	tests/attr/ignore.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/attr/repo.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/blame/buffer.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/blame/harder.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/blame/simple.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/binaryunicode.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/conflict.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/crlf.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/head.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/index.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/tree.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/typechange.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/clone/empty.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/clone/nonetwork.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/commit/parse.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/commit/write.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/config/rename.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/blob.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/drivers.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/index.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/notify.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/patch.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/pathspec.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/rename.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/submodules.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/tree.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/workdir.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/fetchhead/nonetwork.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/filter/blob.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/crlf.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/custom.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/file.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/ident.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/query.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/stream.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/wildcard.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/index/add.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/index/addall.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/index/bypath.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/index/cache.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/index/collision.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/index/crlf.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/index/filemodes.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/index/racy.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/index/version.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/iterator/index.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/iterator/tree.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/iterator/workdir.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/blob/filter.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/object/cache.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/lookup.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/lookupbypath.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/peel.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tag/list.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tag/read.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tag/write.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/read.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/update.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/walk.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/write.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/odb/emptyobjects.c	/^git_repository *g_repo;$/;"	v
g_repo	tests/online/badssl.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/online/clone.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/online/fetchhead.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/perf/helper__perf__do_merge.c	/^static git_repository * g_repo;$/;"	v	file:
g_repo	tests/refs/branches/remote.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/create.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/createwithlog.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/delete.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/dup.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/list.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/lookup.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/overwrite.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/pack.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/peel.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/races.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/read.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/reflog/drop.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/reflog/reflog.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/rename.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/revparse.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/settargetwithlog.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/setter.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/transactions.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/update.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/remote/insteadof.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/repo/pathspec.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/repo/shallow.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/status/ignore.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/status/renames.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/status/submodules.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/stress/diff.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/add.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/init.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/lookup.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/modify.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/repository_init.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/status.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/update.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/threads/basic.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/threads/refdb.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo_a	tests/network/remote/defaultbranch.c	/^static git_repository *g_repo_a, *g_repo_b;$/;"	v	file:
g_repo_b	tests/network/remote/defaultbranch.c	/^static git_repository *g_repo_a, *g_repo_b;$/;"	v	file:
g_repo_cloned	tests/clone/empty.c	/^static git_repository *g_repo_cloned;$/;"	v	file:
g_root_tree	tests/object/lookupbypath.c	/^static git_tree *g_root_tree;$/;"	v	file:
g_table	tests/core/strmap.c	/^git_strmap *g_table;$/;"	v
g_transient_count_dedup_leaks	src/win32/w32_crtdbg_stacktrace.c	/^static unsigned int g_transient_count_dedup_leaks = 0; \/* number of unique leaks *\/$/;"	v	file:
g_transient_count_total_leaks	src/win32/w32_crtdbg_stacktrace.c	/^static unsigned int g_transient_count_total_leaks = 0; \/* number of total leaks *\/$/;"	v	file:
g_transient_leaks_since_mark	src/win32/w32_crtdbg_stacktrace.c	/^static bool g_transient_leaks_since_mark = false; \/* payload for hook *\/$/;"	v	file:
g_tx	tests/refs/transactions.c	/^static git_transaction *g_tx;$/;"	v	file:
g_typechange_empty	tests/checkout/typechange.c	/^static bool g_typechange_empty[] = {$/;"	v	file:
g_typechange_expected_conflicts	tests/checkout/typechange.c	/^static const int g_typechange_expected_conflicts[] = {$/;"	v	file:
g_typechange_expected_untracked	tests/checkout/typechange.c	/^static const int g_typechange_expected_untracked[] = {$/;"	v	file:
g_typechange_oids	tests/checkout/typechange.c	/^static const char *g_typechange_oids[] = {$/;"	v	file:
g_umask	tests/repo/init.c	/^static mode_t g_umask = 0;$/;"	v	file:
g_win32_stack_initialized	src/win32/w32_stack.c	/^static bool   g_win32_stack_initialized = false;$/;"	v	file:
g_win32_stack_process	src/win32/w32_stack.c	/^static HANDLE g_win32_stack_process = INVALID_HANDLE_VALUE;$/;"	v	file:
gen_bitlen	deps/zlib/trees.c	/^local void gen_bitlen(s, desc)$/;"	f
gen_codes	deps/zlib/trees.c	/^local void gen_codes (tree, max_code, bl_count)$/;"	f
gen_pktline	src/transports/smart_protocol.c	/^static int gen_pktline(git_buf *buf, git_push *push)$/;"	f	file:	signature:(git_buf *buf, git_push *push)
gen_proto	src/transports/git.c	/^static int gen_proto(git_buf *request, const char *cmd, const char *url)$/;"	f	file:	signature:(git_buf *request, const char *cmd, const char *url)
gen_proto	src/transports/ssh.c	/^static int gen_proto(git_buf *request, const char *cmd, const char *url)$/;"	f	file:	signature:(git_buf *request, const char *cmd, const char *url)
gen_request	src/transports/http.c	/^static int gen_request($/;"	f	file:	signature:( git_buf *buf, http_stream *s, size_t content_length)
gen_trees_header	deps/zlib/trees.c	/^void gen_trees_header()$/;"	f
generator	tests/resources/userdiff/after/file.php	/^        $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/after/file.php	/^    protected $generator;$/;"	v
generator	tests/resources/userdiff/before/file.php	/^        $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/before/file.php	/^    protected $generator;$/;"	v
generator	tests/resources/userdiff/expected/driver/diff.php	/^         $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/expected/nodriver/diff.php	/^         $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/files/file.php	/^        $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/files/file.php	/^    protected $generator;$/;"	v
get	include/git2/sys/config.h	/^	int (*get)(struct git_config_backend *, const char *key, git_config_entry **entry);$/;"	m	struct:git_config_backend	access:public
get_allocation_granularity	src/win32/map.c	/^static DWORD get_allocation_granularity(void)$/;"	f	file:	signature:(void)
get_assign	tests/attr/file.c	6;"	d	file:
get_be32	src/hash/hash_generic.c	76;"	d	file:
get_be32	src/hash/hash_generic.c	81;"	d	file:
get_binary_object_header	src/odb_loose.c	/^static size_t get_binary_object_header(obj_hdr *hdr, git_buf *obj)$/;"	f	file:	signature:(obj_hdr *hdr, git_buf *obj)
get_buf_ptr	tests/diff/submodules.c	18;"	d	file:
get_commit_index	tests/revwalk/basic.c	/^static int get_commit_index(git_oid *raw_oid)$/;"	f	file:	signature:(git_oid *raw_oid)
get_crc_table	deps/zlib/crc32.c	/^const z_crc_t FAR * ZEXPORT get_crc_table()$/;"	f
get_delta	src/pack-objects.c	/^static int get_delta(void **out, git_odb *odb, git_pobject *po)$/;"	f	file:	signature:(void **out, git_odb *odb, git_pobject *po)
get_delta_base	src/pack.c	/^git_off_t get_delta_base($/;"	f	signature:( struct git_pack_file *p, git_mwindow **w_curs, git_off_t *curpos, git_otype type, git_off_t delta_obj_offset)
get_entry	src/config.c	/^static int get_entry($/;"	f	file:	signature:( git_config_entry **out, const git_config *cfg, const char *name, bool normalize_name, int want_errors)
get_filename	tests/checkout/icase.c	/^static char *get_filename(const char *in)$/;"	f	file:	signature:(const char *in)
get_fpnbyhandle	src/win32/posix_w32.c	/^static PFGetFinalPathNameByHandleW get_fpnbyhandle(void)$/;"	f	file:	signature:(void)
get_func_line	src/xdiff/xemit.c	/^static long get_func_line(xdfenv_t *xe, xdemitconf_t const *xecfg,$/;"	f	file:	signature:(xdfenv_t *xe, xdemitconf_t const *xecfg, struct func_line *func_line, long start, long limit)
get_internal_ignores	src/ignore.c	/^static int get_internal_ignores(git_attr_file **out, git_repository *repo)$/;"	f	file:	signature:(git_attr_file **out, git_repository *repo)
get_name	src/describe.c	/^static int get_name(const char *refname, void *payload)$/;"	f	file:	signature:(const char *refname, void *payload)
get_name_data	src/describe.c	/^struct get_name_data$/;"	s	file:
get_name_data::names	src/describe.c	/^	git_oidmap *names;$/;"	m	struct:get_name_data	file:	access:public
get_name_data::opts	src/describe.c	/^	git_describe_options *opts;$/;"	m	struct:get_name_data	file:	access:public
get_name_data::repo	src/describe.c	/^	git_repository *repo;$/;"	m	struct:get_name_data	file:	access:public
get_name_data::result	src/describe.c	/^	git_describe_result *result;$/;"	m	struct:get_name_data	file:	access:public
get_next	src/revwalk.h	/^	int (*get_next)(git_commit_list_node **, git_revwalk *);$/;"	m	struct:git_revwalk	access:public
get_object_header	src/odb_loose.c	/^static size_t get_object_header(obj_hdr *hdr, unsigned char *data)$/;"	f	file:	signature:(obj_hdr *hdr, unsigned char *data)
get_one_status	src/status.c	/^static int get_one_status(const char *path, unsigned int status, void *data)$/;"	f	file:	signature:(const char *path, unsigned int status, void *data)
get_one_test_cases	tests/attr/repo.c	/^static struct attr_expected get_one_test_cases[] = {$/;"	v	typeref:struct:attr_expected	file:
get_optional_config	src/remote.c	/^static int get_optional_config($/;"	f	file:	signature:( bool *found, git_config *config, git_buf *buf, git_config_foreach_cb cb, void *payload)
get_page_size	src/win32/map.c	/^static DWORD get_page_size(void)$/;"	f	file:	signature:(void)
get_property	src/hash/hash_win32.h	/^	hash_win32_cng_get_property_fn get_property;$/;"	m	struct:hash_cng_prov	access:public
get_rule	tests/attr/file.c	5;"	d	file:
get_subexp	deps/regex/regexec.c	/^get_subexp (re_match_context_t *mctx, int bkref_node, int bkref_str_idx)$/;"	f	file:	signature:(re_match_context_t *mctx, int bkref_node, int bkref_str_idx)
get_subexp_sub	deps/regex/regexec.c	/^get_subexp_sub (re_match_context_t *mctx, const re_sub_match_top_t *sub_top,$/;"	f	file:	signature:(re_match_context_t *mctx, const re_sub_match_top_t *sub_top, re_sub_match_last_t *sub_last, int bkref_node, int bkref_str)
get_submodule_status	tests/submodule/submodule_helpers.c	/^unsigned int get_submodule_status(git_repository *repo, const char *name)$/;"	f	signature:(git_repository *repo, const char *name)
get_temp_file	src/transports/winhttp.c	/^static int get_temp_file(LPWSTR buffer, DWORD buffer_len_cch)$/;"	f	file:	signature:(LPWSTR buffer, DWORD buffer_len_cch)
get_terminal	src/refs.c	/^static int get_terminal(git_reference **out, git_repository *repo, const char *ref_name, int nesting)$/;"	f	file:	signature:(git_reference **out, git_repository *repo, const char *ref_name, int nesting)
get_url_base	src/submodule.c	/^static int get_url_base(git_buf *url, git_repository *repo)$/;"	f	file:	signature:(git_buf *url, git_repository *repo)
get_value	src/submodule.c	/^static int get_value(const char **out, git_config *cfg, git_buf *buf, const char *name, const char *field)$/;"	f	file:	signature:(const char **out, git_config *cfg, git_buf *buf, const char *name, const char *field)
get_verb	src/transports/http.c	/^static const char *get_verb = "GET";$/;"	v	file:
get_verb	src/transports/winhttp.c	/^static const wchar_t *get_verb = L"GET";$/;"	v	file:
getfinalpath_w	src/win32/posix_w32.c	/^static int getfinalpath_w($/;"	f	file:	signature:( git_win32_path dest, const wchar_t *path)
gettext	deps/regex/regex_internal.h	100;"	d
gettext	deps/regex/regex_internal.h	101;"	d
gettext	deps/regex/regex_internal.h	105;"	d
gettext_noop	deps/regex/regex_internal.h	111;"	d
gf2_matrix_square	deps/zlib/crc32.c	/^local void gf2_matrix_square(square, mat)$/;"	f
gf2_matrix_times	deps/zlib/crc32.c	/^local unsigned long gf2_matrix_times(mat, vec)$/;"	f
gid	include/git2/index.h	/^	uint32_t gid;$/;"	m	struct:git_index_entry	access:public
gid	src/index.c	/^	uint32_t gid;$/;"	m	struct:entry_long	file:	access:public
gid	src/index.c	/^	uint32_t gid;$/;"	m	struct:entry_short	file:	access:public
git__DIR	src/win32/dir.h	/^} git__DIR;$/;"	t	typeref:struct:__anon290
git___compare_and_swap	src/thread-utils.h	/^GIT_INLINE(void *) git___compare_and_swap($/;"	f	signature:( void * volatile *ptr, void *oldval, void *newval)
git___swap	src/thread-utils.h	/^GIT_INLINE(volatile void *) git___swap($/;"	f	signature:( void * volatile *ptr, void *newval)
git__add_sizet_overflow	src/integer.h	/^GIT_INLINE(bool) git__add_sizet_overflow(size_t *out, size_t one, size_t two)$/;"	f	signature:(size_t *out, size_t one, size_t two)
git__add_sizet_overflow	src/integer.h	59;"	d
git__add_sizet_overflow	src/integer.h	64;"	d
git__add_uint64_overflow	src/integer.h	/^GIT_INLINE(bool) git__add_uint64_overflow(uint64_t *out, uint64_t one, uint64_t two)$/;"	f	signature:(uint64_t *out, uint64_t one, uint64_t two)
git__bsearch	src/util.c	/^int git__bsearch($/;"	f	signature:( void **array, size_t array_len, const void *key, int (*compare)(const void *, const void *), size_t *position)
git__bsearch_r	src/util.c	/^int git__bsearch_r($/;"	f	signature:( void **array, size_t array_len, const void *key, int (*compare_r)(const void *, const void *, void *), void *payload, size_t *position)
git__calloc	src/util.h	/^GIT_INLINE(void *) git__calloc(size_t nelem, size_t elsize)$/;"	f	signature:(size_t nelem, size_t elsize)
git__calloc	src/util.h	145;"	d
git__closedir	src/win32/dir.c	/^int git__closedir(git__DIR *d)$/;"	f	signature:(git__DIR *d)
git__compare_and_swap	src/thread-utils.h	225;"	d
git__crtdbg__calloc	src/util.h	/^GIT_INLINE(void *) git__crtdbg__calloc(size_t nelem, size_t elsize, const char *file, int line)$/;"	f	signature:(size_t nelem, size_t elsize, const char *file, int line)
git__crtdbg__malloc	src/util.h	/^GIT_INLINE(void *) git__crtdbg__malloc(size_t len, const char *file, int line)$/;"	f	signature:(size_t len, const char *file, int line)
git__crtdbg__mallocarray	src/util.h	/^GIT_INLINE(void *) git__crtdbg__mallocarray(size_t nelem, size_t elsize, const char *file, int line)$/;"	f	signature:(size_t nelem, size_t elsize, const char *file, int line)
git__crtdbg__realloc	src/util.h	/^GIT_INLINE(void *) git__crtdbg__realloc(void *ptr, size_t size, const char *file, int line)$/;"	f	signature:(void *ptr, size_t size, const char *file, int line)
git__crtdbg__reallocarray	src/util.h	/^GIT_INLINE(void *) git__crtdbg__reallocarray(void *ptr, size_t nelem, size_t elsize, const char *file, int line)$/;"	f	signature:(void *ptr, size_t nelem, size_t elsize, const char *file, int line)
git__crtdbg__strdup	src/util.h	/^GIT_INLINE(char *) git__crtdbg__strdup(const char *str, const char *file, int line)$/;"	f	signature:(const char *str, const char *file, int line)
git__crtdbg__strndup	src/util.h	/^GIT_INLINE(char *) git__crtdbg__strndup(const char *str, size_t n, const char *file, int line)$/;"	f	signature:(const char *str, size_t n, const char *file, int line)
git__crtdbg__substrdup	src/util.h	/^GIT_INLINE(char *) git__crtdbg__substrdup(const char *start, size_t n, const char *file, int line)$/;"	f	signature:(const char *start, size_t n, const char *file, int line)
git__date_parse	src/date.c	/^int git__date_parse(git_time_t *out, const char *date)$/;"	f	signature:(git_time_t *out, const char *date)
git__date_rfc2822_fmt	src/date.c	/^int git__date_rfc2822_fmt(char *out, size_t len, const git_time *date)$/;"	f	signature:(char *out, size_t len, const git_time *date)
git__dirent	src/win32/dir.h	/^struct git__dirent {$/;"	s
git__dirent::d_ino	src/win32/dir.h	/^	int d_ino;$/;"	m	struct:git__dirent	access:public
git__dirent::d_name	src/win32/dir.h	/^	git_win32_utf8_path d_name;$/;"	m	struct:git__dirent	access:public
git__free	src/util.h	/^GIT_INLINE(void) git__free(void *ptr)$/;"	f	signature:(void *ptr)
git__free_tls_data	src/global.c	/^void git__free_tls_data(void)$/;"	f	signature:(void)
git__fromhex	src/util.h	/^GIT_INLINE(int) git__fromhex(char h)$/;"	f	signature:(char h)
git__getenv	src/util.c	/^int git__getenv(git_buf *out, const char *name)$/;"	f	signature:(git_buf *out, const char *name)
git__global_state	src/global.c	/^git_global_st *git__global_state(void)$/;"	f	signature:(void)
git__global_state_cleanup	src/global.c	/^static void git__global_state_cleanup(git_global_st *st)$/;"	f	file:	signature:(git_global_st *st)
git__hash	src/util.c	/^uint32_t git__hash(const void *key, int len, uint32_t seed)$/;"	f	signature:(const void *key, int len, uint32_t seed)
git__hash	src/util.c	/^uint32_t git__hash(const void *key, int len, unsigned int seed)$/;"	f	signature:(const void *key, int len, unsigned int seed)
git__hexdump	src/util.c	/^void git__hexdump(const char *buffer, size_t len)$/;"	f	signature:(const char *buffer, size_t len)
git__init_structure	src/common.h	/^GIT_INLINE(void) git__init_structure(void *structure, size_t len, unsigned int version)$/;"	f	signature:(void *structure, size_t len, unsigned int version)
git__insertsort_r	src/util.c	/^void git__insertsort_r($/;"	f	signature:( void *els, size_t nel, size_t elsize, void *swapel, git__sort_r_cmp cmp, void *payload)
git__is_int	src/integer.h	/^GIT_INLINE(int) git__is_int(long long p)$/;"	f	signature:(long long p)
git__is_sizet	src/integer.h	/^GIT_INLINE(int) git__is_sizet(git_off_t p)$/;"	f	signature:(git_off_t p)
git__is_ssizet	src/integer.h	/^GIT_INLINE(int) git__is_ssizet(size_t p)$/;"	f	signature:(size_t p)
git__is_uint32	src/integer.h	/^GIT_INLINE(int) git__is_uint32(size_t p)$/;"	f	signature:(size_t p)
git__is_ulong	src/integer.h	/^GIT_INLINE(int) git__is_ulong(git_off_t p)$/;"	f	signature:(git_off_t p)
git__isalpha	src/util.h	/^GIT_INLINE(bool) git__isalpha(int c)$/;"	f	signature:(int c)
git__isdigit	src/util.h	/^GIT_INLINE(bool) git__isdigit(int c)$/;"	f	signature:(int c)
git__ishex	src/util.h	/^GIT_INLINE(int) git__ishex(const char *str)$/;"	f	signature:(const char *str)
git__isspace	src/util.h	/^GIT_INLINE(bool) git__isspace(int c)$/;"	f	signature:(int c)
git__isspace_nonlf	src/util.h	/^GIT_INLINE(bool) git__isspace_nonlf(int c)$/;"	f	signature:(int c)
git__isupper	src/util.h	/^GIT_INLINE(bool) git__isupper(int c)$/;"	f	signature:(int c)
git__iswildcard	src/util.h	/^GIT_INLINE(bool) git__iswildcard(int c)$/;"	f	signature:(int c)
git__isxdigit	src/util.h	/^GIT_INLINE(bool) git__isxdigit(int c)$/;"	f	signature:(int c)
git__linenlen	src/util.c	/^size_t git__linenlen(const char *buffer, size_t buffer_len)$/;"	f	signature:(const char *buffer, size_t buffer_len)
git__malloc	src/util.h	/^GIT_INLINE(void *) git__malloc(size_t len)$/;"	f	signature:(size_t len)
git__malloc	src/util.h	144;"	d
git__mallocarray	src/util.h	/^GIT_INLINE(void *) git__mallocarray(size_t nelem, size_t elsize)$/;"	f	signature:(size_t nelem, size_t elsize)
git__mallocarray	src/util.h	151;"	d
git__memcmp4	src/pack.c	/^static int git__memcmp4(const void *a, const void *b) {$/;"	f	file:	signature:(const void *a, const void *b)
git__memrchr	src/util.h	/^GIT_INLINE(const void *) git__memrchr(const void *s, int c, size_t n)$/;"	f	signature:(const void *s, int c, size_t n)
git__memzero	src/util.h	/^GIT_INLINE(void) git__memzero(void *data, size_t size)$/;"	f	signature:(void *data, size_t size)
git__mmap_alignment	src/posix.c	/^int git__mmap_alignment(size_t *alignment)$/;"	f	signature:(size_t *alignment)
git__mmap_alignment	src/unix/map.c	/^int git__mmap_alignment(size_t *alignment)$/;"	f	signature:(size_t *alignment)
git__mmap_alignment	src/win32/map.c	/^int git__mmap_alignment(size_t *page_size)$/;"	f	signature:(size_t *page_size)
git__multiply_sizet_overflow	src/integer.h	/^GIT_INLINE(bool) git__multiply_sizet_overflow(size_t *out, size_t one, size_t two)$/;"	f	signature:(size_t *out, size_t one, size_t two)
git__multiply_sizet_overflow	src/integer.h	61;"	d
git__multiply_sizet_overflow	src/integer.h	66;"	d
git__mwindow_mutex	src/global.c	/^git_mutex git__mwindow_mutex;$/;"	v
git__mwindow_mutex	src/global.h	/^extern git_mutex git__mwindow_mutex;$/;"	x
git__mwindow_mutex	src/indexer.c	/^extern git_mutex git__mwindow_mutex;$/;"	x
git__n_inits	src/global.c	/^static git_atomic git__n_inits;$/;"	v	file:
git__n_shutdown_callbacks	src/global.c	/^static git_atomic git__n_shutdown_callbacks;$/;"	v	file:
git__next_line	src/util.h	/^GIT_INLINE(const char *) git__next_line(const char *s)$/;"	f	signature:(const char *s)
git__on_shutdown	src/global.c	/^void git__on_shutdown(git_global_shutdown_fn callback)$/;"	f	signature:(git_global_shutdown_fn callback)
git__opendir	src/win32/dir.c	/^git__DIR *git__opendir(const char *dir)$/;"	f	signature:(const char *dir)
git__pack_cache	src/mwindow.c	/^git_strmap *git__pack_cache = NULL;$/;"	v
git__pack_cache	tests/pack/sharing.c	/^extern git_strmap *git__pack_cache;$/;"	x
git__page_size	src/posix.c	/^int git__page_size(size_t *page_size)$/;"	f	signature:(size_t *page_size)
git__page_size	src/unix/map.c	/^int git__page_size(size_t *page_size)$/;"	f	signature:(size_t *page_size)
git__page_size	src/win32/map.c	/^int git__page_size(size_t *page_size)$/;"	f	signature:(size_t *page_size)
git__parse_bool	src/util.c	/^int git__parse_bool(int *out, const char *value)$/;"	f	signature:(int *out, const char *value)
git__percent_decode	src/path.c	/^int git__percent_decode(git_buf *decoded_out, const char *input)$/;"	f	signature:(git_buf *decoded_out, const char *input)
git__prefixcmp	src/util.c	/^int git__prefixcmp(const char *str, const char *prefix)$/;"	f	signature:(const char *str, const char *prefix)
git__prefixcmp_icase	src/util.c	/^int git__prefixcmp_icase(const char *str, const char *prefix)$/;"	f	signature:(const char *str, const char *prefix)
git__prefixncmp_icase	src/util.c	/^int git__prefixncmp_icase(const char *str, size_t str_n, const char *prefix)$/;"	f	signature:(const char *str, size_t str_n, const char *prefix)
git__qsort_r	src/util.c	/^void git__qsort_r($/;"	f	signature:( void *els, size_t nel, size_t elsize, git__sort_r_cmp cmp, void *payload)
git__qsort_r_glue	src/util.c	/^} git__qsort_r_glue;$/;"	t	typeref:struct:__anon261	file:
git__qsort_r_glue_cmp	src/util.c	/^static int GIT_STDLIB_CALL git__qsort_r_glue_cmp($/;"	f	file:	signature:( void *payload, const void *a, const void *b)
git__readdir	src/win32/dir.c	/^struct git__dirent *git__readdir(git__DIR *d)$/;"	f	signature:(git__DIR *d)
git__readdir_ext	src/win32/dir.c	/^int git__readdir_ext($/;"	f	signature:( git__DIR *d, struct git__dirent *entry, struct git__dirent **result, int *is_dir)
git__realloc	src/util.h	/^GIT_INLINE(void *) git__realloc(void *ptr, size_t size)$/;"	f	signature:(void *ptr, size_t size)
git__realloc	src/util.h	149;"	d
git__reallocarray	src/util.h	/^GIT_INLINE(void *) git__reallocarray(void *ptr, size_t nelem, size_t elsize)$/;"	f	signature:(void *ptr, size_t nelem, size_t elsize)
git__reallocarray	src/util.h	150;"	d
git__rewinddir	src/win32/dir.c	/^void git__rewinddir(git__DIR *d)$/;"	f	signature:(git__DIR *d)
git__rotl	src/util.h	276;"	d
git__rotl	src/util.h	278;"	d
git__set_errno	src/win32/utf-conv.c	/^GIT_INLINE(void) git__set_errno(void)$/;"	f	signature:(void)
git__shutdown_callbacks	src/global.c	/^static git_global_shutdown_fn git__shutdown_callbacks[MAX_SHUTDOWN_CB];$/;"	v	file:
git__signum	src/util.h	/^GIT_INLINE(int) git__signum(int val)$/;"	f	signature:(int val)
git__size_t_bitmask	src/util.h	/^GIT_INLINE(size_t) git__size_t_bitmask(size_t v)$/;"	f	signature:(size_t v)
git__size_t_powerof2	src/util.h	/^GIT_INLINE(size_t) git__size_t_powerof2(size_t v)$/;"	f	signature:(size_t v)
git__sort_r_cmp	src/util.h	/^typedef int (*git__sort_r_cmp)(const void *a, const void *b, void *payload);$/;"	t
git__ssl_ciphers	src/global.c	/^char *git__ssl_ciphers;$/;"	v
git__ssl_ciphers	src/settings.c	/^extern char *git__ssl_ciphers;$/;"	x
git__ssl_ctx	src/global.h	/^extern SSL_CTX *git__ssl_ctx;$/;"	x
git__ssl_ctx	src/openssl_stream.c	/^SSL_CTX *git__ssl_ctx;$/;"	v
git__strcasecmp	src/util.c	/^int git__strcasecmp(const char *a, const char *b)$/;"	f	signature:(const char *a, const char *b)
git__strcasecmp_cb	src/util.c	/^int git__strcasecmp_cb(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git__strcasesort_cmp	src/util.c	/^int git__strcasesort_cmp(const char *a, const char *b)$/;"	f	signature:(const char *a, const char *b)
git__strcmp	src/util.c	/^int git__strcmp(const char *a, const char *b)$/;"	f	signature:(const char *a, const char *b)
git__strcmp_cb	src/util.c	/^int git__strcmp_cb(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git__strdup	src/util.h	/^GIT_INLINE(char *) git__strdup(const char *str)$/;"	f	signature:(const char *str)
git__strdup	src/util.h	146;"	d
git__strncasecmp	src/util.c	/^int git__strncasecmp(const char *a, const char *b, size_t sz)$/;"	f	signature:(const char *a, const char *b, size_t sz)
git__strncmp	src/util.c	/^int git__strncmp(const char *a, const char *b, size_t sz)$/;"	f	signature:(const char *a, const char *b, size_t sz)
git__strndup	src/util.h	/^GIT_INLINE(char *) git__strndup(const char *str, size_t n)$/;"	f	signature:(const char *str, size_t n)
git__strndup	src/util.h	147;"	d
git__strntol32	src/util.c	/^int git__strntol32(int32_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)$/;"	f	signature:(int32_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)
git__strntol64	src/util.c	/^int git__strntol64(int64_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)$/;"	f	signature:(int64_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)
git__strntolower	src/util.c	/^void git__strntolower(char *str, size_t len)$/;"	f	signature:(char *str, size_t len)
git__strsep	src/util.c	/^char *git__strsep(char **end, const char *sep)$/;"	f	signature:(char **end, const char *sep)
git__strtok	src/util.c	/^char *git__strtok(char **end, const char *sep)$/;"	f	signature:(char **end, const char *sep)
git__strtol32	src/util.c	/^int git__strtol32(int32_t *result, const char *nptr, const char **endptr, int base)$/;"	f	signature:(int32_t *result, const char *nptr, const char **endptr, int base)
git__strtol64	src/util.c	/^int git__strtol64(int64_t *result, const char *nptr, const char **endptr, int base)$/;"	f	signature:(int64_t *result, const char *nptr, const char **endptr, int base)
git__strtolower	src/util.c	/^void git__strtolower(char *str)$/;"	f	signature:(char *str)
git__substrdup	src/util.h	/^GIT_INLINE(char *) git__substrdup(const char *start, size_t n)$/;"	f	signature:(const char *start, size_t n)
git__substrdup	src/util.h	148;"	d
git__suffixcmp	src/util.c	/^int git__suffixcmp(const char *str, const char *suffix)$/;"	f	signature:(const char *str, const char *suffix)
git__swap	src/thread-utils.h	228;"	d
git__timer	src/util.h	/^GIT_INLINE(double) git__timer(void)$/;"	f	signature:(void)
git__tolower	src/util.h	/^GIT_INLINE(int) git__tolower(int c)$/;"	f	signature:(int c)
git__tolower	src/util.h	293;"	d
git__tsort	src/tsort.c	/^void git__tsort(void **dst, size_t size, git__tsort_cmp cmp)$/;"	f	signature:(void **dst, size_t size, git__tsort_cmp cmp)
git__tsort_cmp	src/util.h	/^typedef int (*git__tsort_cmp)(const void *a, const void *b);$/;"	t
git__tsort_r	src/tsort.c	/^void git__tsort_r($/;"	f	signature:( void **dst, size_t size, git__sort_r_cmp cmp, void *payload)
git__unescape	src/util.c	/^size_t git__unescape(char *str)$/;"	f	signature:(char *str)
git__user_agent	src/global.c	/^char *git__user_agent;$/;"	v
git__user_agent	src/settings.c	/^extern char *git__user_agent;$/;"	x
git__utf16_to_8	src/win32/utf-conv.c	/^int git__utf16_to_8(char *dest, size_t dest_size, const wchar_t *src)$/;"	f	signature:(char *dest, size_t dest_size, const wchar_t *src)
git__utf16_to_8_alloc	src/win32/utf-conv.c	/^int git__utf16_to_8_alloc(char **dest, const wchar_t *src)$/;"	f	signature:(char **dest, const wchar_t *src)
git__utf8_charlen	src/util.c	/^int git__utf8_charlen(const uint8_t *str, int str_len)$/;"	f	signature:(const uint8_t *str, int str_len)
git__utf8_iterate	src/util.c	/^int git__utf8_iterate(const uint8_t *str, int str_len, int32_t *dst)$/;"	f	signature:(const uint8_t *str, int str_len, int32_t *dst)
git__utf8_to_16	src/win32/utf-conv.c	/^int git__utf8_to_16(wchar_t *dest, size_t dest_size, const char *src)$/;"	f	signature:(wchar_t *dest, size_t dest_size, const char *src)
git__utf8_to_16_alloc	src/win32/utf-conv.c	/^int git__utf8_to_16_alloc(wchar_t **dest, const char *src)$/;"	f	signature:(wchar_t **dest, const char *src)
git_ack_status	src/transports/smart.h	/^enum git_ack_status {$/;"	g
git_activesocket_t	src/curl_stream.c	22;"	d	file:
git_activesocket_t	src/curl_stream.c	25;"	d	file:
git_annotated_commit	include/git2/types.h	/^typedef struct git_annotated_commit git_annotated_commit;$/;"	t	typeref:struct:git_annotated_commit
git_annotated_commit	src/annotated_commit.h	/^struct git_annotated_commit {$/;"	s
git_annotated_commit::commit	src/annotated_commit.h	/^	git_commit *commit;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::description	src/annotated_commit.h	/^	const char *description;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::id_str	src/annotated_commit.h	/^	char id_str[GIT_OID_HEXSZ+1];$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::index	src/annotated_commit.h	/^	git_index *index;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::parents	src/annotated_commit.h	/^	git_array_oid_t parents;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::ref_name	src/annotated_commit.h	/^	const char *ref_name;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::remote_url	src/annotated_commit.h	/^	const char *remote_url;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::tree	src/annotated_commit.h	/^	git_tree *tree;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit::type	src/annotated_commit.h	/^	git_annotated_commit_t type;$/;"	m	struct:git_annotated_commit	access:public
git_annotated_commit_free	src/annotated_commit.c	/^void git_annotated_commit_free(git_annotated_commit *annotated_commit)$/;"	f	signature:(git_annotated_commit *annotated_commit)
git_annotated_commit_from_commit	src/annotated_commit.c	/^int git_annotated_commit_from_commit($/;"	f	signature:( git_annotated_commit **out, git_commit *commit)
git_annotated_commit_from_fetchhead	src/annotated_commit.c	/^int git_annotated_commit_from_fetchhead($/;"	f	signature:( git_annotated_commit **out, git_repository *repo, const char *branch_name, const char *remote_url, const git_oid *id)
git_annotated_commit_from_head	src/annotated_commit.c	/^int git_annotated_commit_from_head($/;"	f	signature:( git_annotated_commit **out, git_repository *repo)
git_annotated_commit_from_ref	src/annotated_commit.c	/^int git_annotated_commit_from_ref($/;"	f	signature:( git_annotated_commit **out, git_repository *repo, const git_reference *ref)
git_annotated_commit_from_revspec	src/annotated_commit.c	/^int git_annotated_commit_from_revspec($/;"	f	signature:( git_annotated_commit **out, git_repository *repo, const char *revspec)
git_annotated_commit_id	src/annotated_commit.c	/^const git_oid *git_annotated_commit_id($/;"	f	signature:( const git_annotated_commit *annotated_commit)
git_annotated_commit_lookup	src/annotated_commit.c	/^int git_annotated_commit_lookup($/;"	f	signature:( git_annotated_commit **out, git_repository *repo, const git_oid *id)
git_annotated_commit_t	src/annotated_commit.h	/^} git_annotated_commit_t;$/;"	t	typeref:enum:__anon217
git_apply__patch	src/apply.c	/^int git_apply__patch($/;"	f	signature:( git_buf *contents_out, char **filename_out, unsigned int *mode_out, const char *source, size_t source_len, git_patch *patch)
git_array__search	src/array.h	/^GIT_INLINE(int) git_array__search($/;"	f	signature:( size_t *out, void *array_ptr, size_t item_size, size_t array_len, int (*compare)(const void *, const void *), const void *key)
git_array_alloc	src/array.h	70;"	d
git_array_clear	src/array.h	36;"	d
git_array_foreach	src/array.h	85;"	d
git_array_generic_t	src/array.h	/^typedef git_array_t(char) git_array_generic_t;$/;"	t
git_array_get	src/array.h	79;"	d
git_array_grow	src/array.h	/^GIT_INLINE(void *) git_array_grow(void *_a, size_t item_size)$/;"	f	signature:(void *_a, size_t item_size)
git_array_init	src/array.h	30;"	d
git_array_init_to_size	src/array.h	33;"	d
git_array_last	src/array.h	75;"	d
git_array_oid_t	src/oidarray.h	/^typedef git_array_t(git_oid) git_array_oid_t;$/;"	t
git_array_pop	src/array.h	77;"	d
git_array_search	src/array.h	120;"	d
git_array_size	src/array.h	81;"	d
git_array_t	src/array.h	26;"	d
git_array_valid_index	src/array.h	83;"	d
git_atomic	src/thread-utils.h	/^} git_atomic;$/;"	t	typeref:struct:__anon314
git_atomic64	src/thread-utils.h	/^} git_atomic64;$/;"	t	typeref:struct:__anon315
git_atomic64_add	src/thread-utils.h	/^GIT_INLINE(int64_t) git_atomic64_add(git_atomic64 *a, int64_t addend)$/;"	f	signature:(git_atomic64 *a, int64_t addend)
git_atomic_add	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_add(git_atomic *a, int32_t addend)$/;"	f	signature:(git_atomic *a, int32_t addend)
git_atomic_dec	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_dec(git_atomic *a)$/;"	f	signature:(git_atomic *a)
git_atomic_get	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_get(git_atomic *a)$/;"	f	signature:(git_atomic *a)
git_atomic_inc	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_inc(git_atomic *a)$/;"	f	signature:(git_atomic *a)
git_atomic_set	src/thread-utils.h	/^GIT_INLINE(void) git_atomic_set(git_atomic *a, int val)$/;"	f	signature:(git_atomic *a, int val)
git_atomic_ssize	src/thread-utils.h	/^typedef git_atomic git_atomic_ssize;$/;"	t
git_atomic_ssize	src/thread-utils.h	/^typedef git_atomic64 git_atomic_ssize;$/;"	t
git_atomic_ssize_add	src/thread-utils.h	31;"	d
git_atomic_ssize_add	src/thread-utils.h	37;"	d
git_attr__false	src/attr.c	/^const char *git_attr__false = "[internal]__FALSE__";$/;"	v
git_attr__false	src/attr_file.h	/^extern const char *git_attr__false;$/;"	x
git_attr__true	src/attr.c	/^const char *git_attr__true  = "[internal]__TRUE__";$/;"	v
git_attr__true	src/attr_file.h	/^extern const char *git_attr__true;$/;"	x
git_attr__unset	src/attr.c	/^const char *git_attr__unset = "[internal]__UNSET__";$/;"	v
git_attr__unset	src/attr_file.h	/^extern const char *git_attr__unset;$/;"	x
git_attr_add_macro	src/attr.c	/^int git_attr_add_macro($/;"	f	signature:( git_repository *repo, const char *name, const char *values)
git_attr_assignment	src/attr_file.h	/^} git_attr_assignment;$/;"	t	typeref:struct:__anon169
git_attr_assignment__free	src/attr_file.c	/^static void git_attr_assignment__free(git_attr_assignment *assign)$/;"	f	file:	signature:(git_attr_assignment *assign)
git_attr_assignment__parse	src/attr_file.c	/^int git_attr_assignment__parse($/;"	f	signature:( git_repository *repo, git_pool *pool, git_vector *assigns, const char **base)
git_attr_cache	src/attrcache.h	/^} git_attr_cache;$/;"	t	typeref:struct:__anon309
git_attr_cache__alloc_file_entry	src/attrcache.c	/^int git_attr_cache__alloc_file_entry($/;"	f	signature:( git_attr_file_entry **out, const char *base, const char *path, git_pool *pool)
git_attr_cache__do_init	src/attrcache.c	/^int git_attr_cache__do_init(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_attr_cache__get	src/attrcache.c	/^int git_attr_cache__get($/;"	f	signature:( git_attr_file **out, git_repository *repo, git_attr_session *attr_session, git_attr_file_source source, const char *base, const char *filename, git_attr_file_parser parser)
git_attr_cache__init	src/attrcache.h	27;"	d
git_attr_cache__insert_macro	src/attrcache.c	/^int git_attr_cache__insert_macro(git_repository *repo, git_attr_rule *macro)$/;"	f	signature:(git_repository *repo, git_attr_rule *macro)
git_attr_cache__is_cached	src/attrcache.c	/^bool git_attr_cache__is_cached($/;"	f	signature:( git_repository *repo, git_attr_file_source source, const char *filename)
git_attr_cache__lookup_macro	src/attrcache.c	/^git_attr_rule *git_attr_cache__lookup_macro($/;"	f	signature:( git_repository *repo, const char *name)
git_attr_cache_flush	src/attrcache.c	/^void git_attr_cache_flush(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_attr_file	src/attr_file.h	/^} git_attr_file;$/;"	t	typeref:struct:__anon170
git_attr_file__clear_rules	src/attr_file.c	/^int git_attr_file__clear_rules(git_attr_file *file, bool need_lock)$/;"	f	signature:(git_attr_file *file, bool need_lock)
git_attr_file__foreach_matching_rule	src/attr_file.h	175;"	d
git_attr_file__free	src/attr_file.c	/^void git_attr_file__free(git_attr_file *file)$/;"	f	signature:(git_attr_file *file)
git_attr_file__load	src/attr_file.c	/^int git_attr_file__load($/;"	f	signature:( git_attr_file **out, git_repository *repo, git_attr_session *attr_session, git_attr_file_entry *entry, git_attr_file_source source, git_attr_file_parser parser)
git_attr_file__load_standalone	src/attr_file.c	/^int git_attr_file__load_standalone(git_attr_file **out, const char *path)$/;"	f	signature:(git_attr_file **out, const char *path)
git_attr_file__lookup_one	src/attr_file.c	/^int git_attr_file__lookup_one($/;"	f	signature:( git_attr_file *file, git_attr_path *path, const char *attr, const char **value)
git_attr_file__name_hash	src/attr_file.c	/^uint32_t git_attr_file__name_hash(const char *name)$/;"	f	signature:(const char *name)
git_attr_file__new	src/attr_file.c	/^int git_attr_file__new($/;"	f	signature:( git_attr_file **out, git_attr_file_entry *entry, git_attr_file_source source)
git_attr_file__out_of_date	src/attr_file.c	/^int git_attr_file__out_of_date($/;"	f	signature:( git_repository *repo, git_attr_session *attr_session, git_attr_file *file)
git_attr_file__parse_buffer	src/attr_file.c	/^int git_attr_file__parse_buffer($/;"	f	signature:( git_repository *repo, git_attr_file *attrs, const char *data)
git_attr_file_entry	src/attr_file.h	/^struct git_attr_file_entry {$/;"	s
git_attr_file_entry	src/attr_file.h	/^typedef struct git_attr_file_entry git_attr_file_entry;$/;"	t	typeref:struct:git_attr_file_entry
git_attr_file_entry::file	src/attr_file.h	/^	git_attr_file *file[GIT_ATTR_FILE_NUM_SOURCES];$/;"	m	struct:git_attr_file_entry	access:public
git_attr_file_entry::fullpath	src/attr_file.h	/^	char fullpath[GIT_FLEX_ARRAY];$/;"	m	struct:git_attr_file_entry	access:public
git_attr_file_entry::path	src/attr_file.h	/^	const char *path; \/* points into fullpath *\/$/;"	m	struct:git_attr_file_entry	access:public
git_attr_file_parser	src/attr_file.h	/^typedef int (*git_attr_file_parser)($/;"	t
git_attr_file_source	src/attr_file.h	/^} git_attr_file_source;$/;"	t	typeref:enum:__anon165
git_attr_fnmatch	src/attr_file.h	/^} git_attr_fnmatch;$/;"	t	typeref:struct:__anon166
git_attr_fnmatch__match	src/attr_file.c	/^bool git_attr_fnmatch__match($/;"	f	signature:( git_attr_fnmatch *match, git_attr_path *path)
git_attr_fnmatch__parse	src/attr_file.c	/^int git_attr_fnmatch__parse($/;"	f	signature:( git_attr_fnmatch *spec, git_pool *pool, const char *context, const char **base)
git_attr_foreach	src/attr.c	/^int git_attr_foreach($/;"	f	signature:( git_repository *repo, uint32_t flags, const char *pathname, int (*callback)(const char *name, const char *value, void *payload), void *payload)
git_attr_foreach_cb	include/git2/attr.h	/^typedef int (*git_attr_foreach_cb)(const char *name, const char *value, void *payload);$/;"	t
git_attr_get	src/attr.c	/^int git_attr_get($/;"	f	signature:( const char **value, git_repository *repo, uint32_t flags, const char *pathname, const char *name)
git_attr_get_many	src/attr.c	/^int git_attr_get_many($/;"	f	signature:( const char **values, git_repository *repo, uint32_t flags, const char *pathname, size_t num_attr, const char **names)
git_attr_get_many_with_session	src/attr.c	/^int git_attr_get_many_with_session($/;"	f	signature:( const char **values, git_repository *repo, git_attr_session *attr_session, uint32_t flags, const char *pathname, size_t num_attr, const char **names)
git_attr_name	src/attr_file.h	/^} git_attr_name;$/;"	t	typeref:struct:__anon168
git_attr_path	src/attr_file.h	/^} git_attr_path;$/;"	t	typeref:struct:__anon172
git_attr_path__free	src/attr_file.c	/^void git_attr_path__free(git_attr_path *info)$/;"	f	signature:(git_attr_path *info)
git_attr_path__init	src/attr_file.c	/^int git_attr_path__init($/;"	f	signature:( git_attr_path *info, const char *path, const char *base, git_dir_flag dir_flag)
git_attr_rule	src/attr_file.h	/^} git_attr_rule;$/;"	t	typeref:struct:__anon167
git_attr_rule__clear	src/attr_file.c	/^static void git_attr_rule__clear(git_attr_rule *rule)$/;"	f	file:	signature:(git_attr_rule *rule)
git_attr_rule__free	src/attr_file.c	/^void git_attr_rule__free(git_attr_rule *rule)$/;"	f	signature:(git_attr_rule *rule)
git_attr_rule__lookup_assignment	src/attr_file.c	/^git_attr_assignment *git_attr_rule__lookup_assignment($/;"	f	signature:( git_attr_rule *rule, const char *name)
git_attr_rule__match	src/attr_file.c	/^bool git_attr_rule__match($/;"	f	signature:( git_attr_rule *rule, git_attr_path *path)
git_attr_session	src/attr_file.h	/^} git_attr_session;$/;"	t	typeref:struct:__anon173
git_attr_session__free	src/attr_file.c	/^void git_attr_session__free(git_attr_session *session)$/;"	f	signature:(git_attr_session *session)
git_attr_session__init	src/attr_file.c	/^int git_attr_session__init(git_attr_session *session, git_repository *repo)$/;"	f	signature:(git_attr_session *session, git_repository *repo)
git_attr_t	include/git2/attr.h	/^} git_attr_t;$/;"	t	typeref:enum:__anon61
git_attr_value	src/attr.c	/^git_attr_t git_attr_value(const char *attr)$/;"	f	signature:(const char *attr)
git_bitvec	src/bitvec.h	/^} git_bitvec;$/;"	t	typeref:struct:__anon205
git_bitvec_clear	src/bitvec.h	/^GIT_INLINE(void) git_bitvec_clear(git_bitvec *bv)$/;"	f	signature:(git_bitvec *bv)
git_bitvec_free	src/bitvec.h	/^GIT_INLINE(void) git_bitvec_free(git_bitvec *bv)$/;"	f	signature:(git_bitvec *bv)
git_bitvec_get	src/bitvec.h	/^GIT_INLINE(bool) git_bitvec_get(git_bitvec *bv, size_t bit)$/;"	f	signature:(git_bitvec *bv, size_t bit)
git_bitvec_init	src/bitvec.h	/^GIT_INLINE(int) git_bitvec_init(git_bitvec *bv, size_t capacity)$/;"	f	signature:(git_bitvec *bv, size_t capacity)
git_bitvec_set	src/bitvec.h	/^GIT_INLINE(void) git_bitvec_set(git_bitvec *bv, size_t bit, bool on)$/;"	f	signature:(git_bitvec *bv, size_t bit, bool on)
git_blame	include/git2/blame.h	/^typedef struct git_blame git_blame;$/;"	t	typeref:struct:git_blame
git_blame	src/blame.h	/^struct git_blame {$/;"	s
git_blame::current_diff_line	src/blame.h	/^	size_t current_diff_line;$/;"	m	struct:git_blame	access:public
git_blame::current_hunk	src/blame.h	/^	git_blame_hunk *current_hunk;$/;"	m	struct:git_blame	access:public
git_blame::ent	src/blame.h	/^	git_blame__entry *ent;$/;"	m	struct:git_blame	access:public
git_blame::final	src/blame.h	/^	git_commit *final;$/;"	m	struct:git_blame	access:public
git_blame::final_blob	src/blame.h	/^	git_blob *final_blob;$/;"	m	struct:git_blame	access:public
git_blame::final_buf	src/blame.h	/^	const char *final_buf;$/;"	m	struct:git_blame	access:public
git_blame::final_buf_size	src/blame.h	/^	git_off_t final_buf_size;$/;"	m	struct:git_blame	access:public
git_blame::hunks	src/blame.h	/^	git_vector hunks;$/;"	m	struct:git_blame	access:public
git_blame::line_index	src/blame.h	/^	git_array_t(size_t) line_index;$/;"	m	struct:git_blame	access:public
git_blame::num_lines	src/blame.h	/^	int num_lines;$/;"	m	struct:git_blame	access:public
git_blame::options	src/blame.h	/^	git_blame_options options;$/;"	m	struct:git_blame	access:public
git_blame::path	src/blame.h	/^	char *path;$/;"	m	struct:git_blame	access:public
git_blame::paths	src/blame.h	/^	git_vector paths;$/;"	m	struct:git_blame	access:public
git_blame::repository	src/blame.h	/^	git_repository *repository;$/;"	m	struct:git_blame	access:public
git_blame__alloc	src/blame.c	/^git_blame* git_blame__alloc($/;"	f	signature:( git_repository *repo, git_blame_options opts, const char *path)
git_blame__entry	src/blame.h	/^typedef struct git_blame__entry {$/;"	s
git_blame__entry	src/blame.h	/^} git_blame__entry;$/;"	t	typeref:struct:git_blame__entry
git_blame__entry::guilty	src/blame.h	/^	bool guilty;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::is_boundary	src/blame.h	/^	bool is_boundary;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::lno	src/blame.h	/^	size_t lno;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::next	src/blame.h	/^	struct git_blame__entry *next;$/;"	m	struct:git_blame__entry	typeref:struct:git_blame__entry::git_blame__entry	access:public
git_blame__entry::num_lines	src/blame.h	/^	size_t num_lines;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::prev	src/blame.h	/^	struct git_blame__entry *prev;$/;"	m	struct:git_blame__entry	typeref:struct:git_blame__entry::git_blame__entry	access:public
git_blame__entry::s_lno	src/blame.h	/^	size_t s_lno;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::scanned	src/blame.h	/^	bool scanned;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::score	src/blame.h	/^	unsigned score;$/;"	m	struct:git_blame__entry	access:public
git_blame__entry::suspect	src/blame.h	/^	git_blame__origin *suspect;$/;"	m	struct:git_blame__entry	access:public
git_blame__free_entry	src/blame_git.c	/^void git_blame__free_entry(git_blame__entry *ent)$/;"	f	signature:(git_blame__entry *ent)
git_blame__get_origin	src/blame_git.c	/^int git_blame__get_origin($/;"	f	signature:( git_blame__origin **out, git_blame *blame, git_commit *commit, const char *path)
git_blame__like_git	src/blame_git.c	/^int git_blame__like_git(git_blame *blame, uint32_t opt)$/;"	f	signature:(git_blame *blame, uint32_t opt)
git_blame__origin	src/blame.h	/^typedef struct git_blame__origin {$/;"	s
git_blame__origin	src/blame.h	/^} git_blame__origin;$/;"	t	typeref:struct:git_blame__origin
git_blame__origin::blob	src/blame.h	/^	git_blob *blob;$/;"	m	struct:git_blame__origin	access:public
git_blame__origin::commit	src/blame.h	/^	git_commit *commit;$/;"	m	struct:git_blame__origin	access:public
git_blame__origin::path	src/blame.h	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:git_blame__origin	access:public
git_blame__origin::previous	src/blame.h	/^	struct git_blame__origin *previous;$/;"	m	struct:git_blame__origin	typeref:struct:git_blame__origin::git_blame__origin	access:public
git_blame__origin::refcnt	src/blame.h	/^	int refcnt;$/;"	m	struct:git_blame__origin	access:public
git_blame_buffer	src/blame.c	/^int git_blame_buffer($/;"	f	signature:( git_blame **out, git_blame *reference, const char *buffer, size_t buffer_len)
git_blame_file	src/blame.c	/^int git_blame_file($/;"	f	signature:( git_blame **out, git_repository *repo, const char *path, git_blame_options *options)
git_blame_flag_t	include/git2/blame.h	/^} git_blame_flag_t;$/;"	t	typeref:enum:__anon41
git_blame_free	src/blame.c	/^void git_blame_free(git_blame *blame)$/;"	f	signature:(git_blame *blame)
git_blame_get_hunk_byindex	src/blame.c	/^const git_blame_hunk *git_blame_get_hunk_byindex(git_blame *blame, uint32_t index)$/;"	f	signature:(git_blame *blame, uint32_t index)
git_blame_get_hunk_byline	src/blame.c	/^const git_blame_hunk *git_blame_get_hunk_byline(git_blame *blame, size_t lineno)$/;"	f	signature:(git_blame *blame, size_t lineno)
git_blame_get_hunk_count	src/blame.c	/^uint32_t git_blame_get_hunk_count(git_blame *blame)$/;"	f	signature:(git_blame *blame)
git_blame_hunk	include/git2/blame.h	/^typedef struct git_blame_hunk {$/;"	s
git_blame_hunk	include/git2/blame.h	/^} git_blame_hunk;$/;"	t	typeref:struct:git_blame_hunk
git_blame_hunk::boundary	include/git2/blame.h	/^	char boundary;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::final_commit_id	include/git2/blame.h	/^	git_oid final_commit_id;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::final_signature	include/git2/blame.h	/^	git_signature *final_signature;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::final_start_line_number	include/git2/blame.h	/^	size_t final_start_line_number;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::lines_in_hunk	include/git2/blame.h	/^	size_t lines_in_hunk;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::orig_commit_id	include/git2/blame.h	/^	git_oid orig_commit_id;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::orig_path	include/git2/blame.h	/^	const char *orig_path;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::orig_signature	include/git2/blame.h	/^	git_signature *orig_signature;$/;"	m	struct:git_blame_hunk	access:public
git_blame_hunk::orig_start_line_number	include/git2/blame.h	/^	size_t orig_start_line_number;$/;"	m	struct:git_blame_hunk	access:public
git_blame_init_options	src/blame.c	/^int git_blame_init_options(git_blame_options *opts, unsigned int version)$/;"	f	signature:(git_blame_options *opts, unsigned int version)
git_blame_options	include/git2/blame.h	/^typedef struct git_blame_options {$/;"	s
git_blame_options	include/git2/blame.h	/^} git_blame_options;$/;"	t	typeref:struct:git_blame_options
git_blame_options::flags	include/git2/blame.h	/^	uint32_t flags;$/;"	m	struct:git_blame_options	access:public
git_blame_options::max_line	include/git2/blame.h	/^	size_t max_line;$/;"	m	struct:git_blame_options	access:public
git_blame_options::min_line	include/git2/blame.h	/^	size_t min_line;$/;"	m	struct:git_blame_options	access:public
git_blame_options::min_match_characters	include/git2/blame.h	/^	uint16_t min_match_characters;$/;"	m	struct:git_blame_options	access:public
git_blame_options::newest_commit	include/git2/blame.h	/^	git_oid newest_commit;$/;"	m	struct:git_blame_options	access:public
git_blame_options::oldest_commit	include/git2/blame.h	/^	git_oid oldest_commit;$/;"	m	struct:git_blame_options	access:public
git_blame_options::version	include/git2/blame.h	/^	unsigned int version;$/;"	m	struct:git_blame_options	access:public
git_blob	include/git2/types.h	/^typedef struct git_blob git_blob;$/;"	t	typeref:struct:git_blob
git_blob	src/blob.h	/^struct git_blob {$/;"	s
git_blob::object	src/blob.h	/^	git_object object;$/;"	m	struct:git_blob	access:public
git_blob::odb_object	src/blob.h	/^	git_odb_object *odb_object;$/;"	m	struct:git_blob	access:public
git_blob__create_from_paths	src/blob.c	/^int git_blob__create_from_paths($/;"	f	signature:( git_oid *id, struct stat *out_st, git_repository *repo, const char *content_path, const char *hint_path, mode_t hint_mode, bool try_load_filters)
git_blob__free	src/blob.c	/^void git_blob__free(void *blob)$/;"	f	signature:(void *blob)
git_blob__getbuf	src/blob.c	/^int git_blob__getbuf(git_buf *buffer, git_blob *blob)$/;"	f	signature:(git_buf *buffer, git_blob *blob)
git_blob__parse	src/blob.c	/^int git_blob__parse(void *blob, git_odb_object *odb_obj)$/;"	f	signature:(void *blob, git_odb_object *odb_obj)
git_blob_create_frombuffer	src/blob.c	/^int git_blob_create_frombuffer($/;"	f	signature:( git_oid *id, git_repository *repo, const void *buffer, size_t len)
git_blob_create_fromdisk	src/blob.c	/^int git_blob_create_fromdisk($/;"	f	signature:( git_oid *id, git_repository *repo, const char *path)
git_blob_create_fromstream	src/blob.c	/^int git_blob_create_fromstream(git_writestream **out, git_repository *repo, const char *hintpath)$/;"	f	signature:(git_writestream **out, git_repository *repo, const char *hintpath)
git_blob_create_fromstream_commit	src/blob.c	/^int git_blob_create_fromstream_commit(git_oid *out, git_writestream *_stream)$/;"	f	signature:(git_oid *out, git_writestream *_stream)
git_blob_create_fromworkdir	src/blob.c	/^int git_blob_create_fromworkdir($/;"	f	signature:( git_oid *id, git_repository *repo, const char *path)
git_blob_dup	src/object_api.c	/^int git_blob_dup(git_blob **out, git_blob *obj)$/;"	f	signature:(git_blob **out, git_blob *obj)
git_blob_filtered_content	src/blob.c	/^int git_blob_filtered_content($/;"	f	signature:( git_buf *out, git_blob *blob, const char *path, int check_for_binary_data)
git_blob_free	src/object_api.c	/^void git_blob_free(git_blob *obj)$/;"	f	signature:(git_blob *obj)
git_blob_id	src/object_api.c	/^const git_oid *git_blob_id(const git_blob *obj)$/;"	f	signature:(const git_blob *obj)
git_blob_is_binary	src/blob.c	/^int git_blob_is_binary(const git_blob *blob)$/;"	f	signature:(const git_blob *blob)
git_blob_lookup	src/object_api.c	/^int git_blob_lookup(git_blob **out, git_repository *repo, const git_oid *id)$/;"	f	signature:(git_blob **out, git_repository *repo, const git_oid *id)
git_blob_lookup_prefix	src/object_api.c	/^int git_blob_lookup_prefix(git_blob **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f	signature:(git_blob **out, git_repository *repo, const git_oid *id, size_t len)
git_blob_owner	src/object_api.c	/^git_repository *git_blob_owner(const git_blob *obj)$/;"	f	signature:(const git_blob *obj)
git_blob_rawcontent	src/blob.c	/^const void *git_blob_rawcontent(const git_blob *blob)$/;"	f	signature:(const git_blob *blob)
git_blob_rawsize	src/blob.c	/^git_off_t git_blob_rawsize(const git_blob *blob)$/;"	f	signature:(const git_blob *blob)
git_bom_t	src/buf_text.h	/^} git_bom_t;$/;"	t	typeref:enum:__anon341
git_branch_create	src/branch.c	/^int git_branch_create($/;"	f	signature:( git_reference **ref_out, git_repository *repository, const char *branch_name, const git_commit *commit, int force)
git_branch_create_from_annotated	src/branch.c	/^int git_branch_create_from_annotated($/;"	f	signature:( git_reference **ref_out, git_repository *repository, const char *branch_name, const git_annotated_commit *commit, int force)
git_branch_delete	src/branch.c	/^int git_branch_delete(git_reference *branch)$/;"	f	signature:(git_reference *branch)
git_branch_is_head	src/branch.c	/^int git_branch_is_head($/;"	f	signature:( const git_reference *branch)
git_branch_iterator	include/git2/branch.h	/^typedef struct git_branch_iterator git_branch_iterator;$/;"	t	typeref:struct:git_branch_iterator
git_branch_iterator_free	src/branch.c	/^void git_branch_iterator_free(git_branch_iterator *_iter)$/;"	f	signature:(git_branch_iterator *_iter)
git_branch_iterator_new	src/branch.c	/^int git_branch_iterator_new($/;"	f	signature:( git_branch_iterator **out, git_repository *repo, git_branch_t list_flags)
git_branch_lookup	src/branch.c	/^int git_branch_lookup($/;"	f	signature:( git_reference **ref_out, git_repository *repo, const char *branch_name, git_branch_t branch_type)
git_branch_move	src/branch.c	/^int git_branch_move($/;"	f	signature:( git_reference **out, git_reference *branch, const char *new_branch_name, int force)
git_branch_name	src/branch.c	/^int git_branch_name($/;"	f	signature:( const char **out, const git_reference *ref)
git_branch_next	src/branch.c	/^int git_branch_next(git_reference **out, git_branch_t *out_type, git_branch_iterator *_iter)$/;"	f	signature:(git_reference **out, git_branch_t *out_type, git_branch_iterator *_iter)
git_branch_remote_name	src/branch.c	/^int git_branch_remote_name(git_buf *buf, git_repository *repo, const char *refname)$/;"	f	signature:(git_buf *buf, git_repository *repo, const char *refname)
git_branch_set_upstream	src/branch.c	/^int git_branch_set_upstream(git_reference *branch, const char *upstream_name)$/;"	f	signature:(git_reference *branch, const char *upstream_name)
git_branch_t	include/git2/types.h	/^} git_branch_t;$/;"	t	typeref:enum:__anon145
git_branch_upstream	src/branch.c	/^int git_branch_upstream($/;"	f	signature:( git_reference **tracking_out, const git_reference *branch)
git_branch_upstream_name	src/branch.c	/^int git_branch_upstream_name($/;"	f	signature:( git_buf *out, git_repository *repo, const char *refname)
git_branch_upstream_remote	src/branch.c	/^int git_branch_upstream_remote(git_buf *buf, git_repository *repo, const char *refname)$/;"	f	signature:(git_buf *buf, git_repository *repo, const char *refname)
git_buf	include/git2/buffer.h	/^} git_buf;$/;"	t	typeref:struct:__anon114
git_buf	script/user_model.c	/^typedef struct git_buf {$/;"	s	file:
git_buf	script/user_model.c	/^} git_buf;$/;"	t	typeref:struct:git_buf	file:
git_buf::asize	script/user_model.c	/^	size_t asize, size;$/;"	m	struct:git_buf	file:	access:public
git_buf::ptr	script/user_model.c	/^	char *ptr;$/;"	m	struct:git_buf	file:	access:public
git_buf::size	script/user_model.c	/^	size_t asize, size;$/;"	m	struct:git_buf	file:	access:public
git_buf_PUTS	src/buffer.h	148;"	d
git_buf__initbuf	src/buffer.c	/^char git_buf__initbuf[1];$/;"	v
git_buf__initbuf	src/buffer.h	/^extern char git_buf__initbuf[];$/;"	x
git_buf__oom	src/buffer.c	/^char git_buf__oom[1];$/;"	v
git_buf__oom	src/buffer.h	/^extern char git_buf__oom[];$/;"	x
git_buf_attach	src/buffer.c	/^void git_buf_attach(git_buf *buf, char *ptr, size_t asize)$/;"	f	signature:(git_buf *buf, char *ptr, size_t asize)
git_buf_attach_notowned	src/buffer.c	/^void git_buf_attach_notowned(git_buf *buf, const char *ptr, size_t size)$/;"	f	signature:(git_buf *buf, const char *ptr, size_t size)
git_buf_clear	src/buffer.c	/^void git_buf_clear(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_cmp	src/buffer.c	/^int git_buf_cmp(const git_buf *a, const git_buf *b)$/;"	f	signature:(const git_buf *a, const git_buf *b)
git_buf_consume	src/buffer.c	/^void git_buf_consume(git_buf *buf, const char *end)$/;"	f	signature:(git_buf *buf, const char *end)
git_buf_contains_nul	src/buffer.c	/^int git_buf_contains_nul(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_copy_cstr	src/buffer.c	/^void git_buf_copy_cstr(char *data, size_t datasize, const git_buf *buf)$/;"	f	signature:(char *data, size_t datasize, const git_buf *buf)
git_buf_cstr	src/buffer.h	/^GIT_INLINE(const char *) git_buf_cstr(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_decode_base64	src/buffer.c	/^int git_buf_decode_base64(git_buf *buf, const char *base64, size_t len)$/;"	f	signature:(git_buf *buf, const char *base64, size_t len)
git_buf_decode_base85	src/buffer.c	/^int git_buf_decode_base85($/;"	f	signature:( git_buf *buf, const char *base85, size_t base85_len, size_t output_len)
git_buf_detach	src/buffer.c	/^char *git_buf_detach(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_encode_base64	src/buffer.c	/^int git_buf_encode_base64(git_buf *buf, const char *data, size_t len)$/;"	f	signature:(git_buf *buf, const char *data, size_t len)
git_buf_encode_base85	src/buffer.c	/^int git_buf_encode_base85(git_buf *buf, const char *data, size_t len)$/;"	f	signature:(git_buf *buf, const char *data, size_t len)
git_buf_find	src/buffer.h	/^GIT_INLINE(ssize_t) git_buf_find(const git_buf *buf, char ch)$/;"	f	signature:(const git_buf *buf, char ch)
git_buf_free	src/buffer.c	/^void git_buf_free(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_grow	src/buffer.c	/^int git_buf_grow(git_buf *buffer, size_t target_size)$/;"	f	signature:(git_buf *buffer, size_t target_size)
git_buf_grow_by	src/buffer.c	/^int git_buf_grow_by(git_buf *buffer, size_t additional_size)$/;"	f	signature:(git_buf *buffer, size_t additional_size)
git_buf_init	src/buffer.c	/^void git_buf_init(git_buf *buf, size_t initial_size)$/;"	f	signature:(git_buf *buf, size_t initial_size)
git_buf_is_allocated	src/buffer.h	/^GIT_INLINE(bool) git_buf_is_allocated(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_is_binary	src/buffer.c	/^int git_buf_is_binary(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_join	src/buffer.c	/^int git_buf_join($/;"	f	signature:( git_buf *buf, char separator, const char *str_a, const char *str_b)
git_buf_join3	src/buffer.c	/^int git_buf_join3($/;"	f	signature:( git_buf *buf, char separator, const char *str_a, const char *str_b, const char *str_c)
git_buf_join_n	src/buffer.c	/^int git_buf_join_n(git_buf *buf, char separator, int nbuf, ...)$/;"	f	signature:(git_buf *buf, char separator, int nbuf, ...)
git_buf_joinpath	src/buffer.h	/^GIT_INLINE(int) git_buf_joinpath(git_buf *buf, const char *a, const char *b)$/;"	f	signature:(git_buf *buf, const char *a, const char *b)
git_buf_len	script/user_model.c	/^int git_buf_len(const struct git_buf *buf)$/;"	f	signature:(const struct git_buf *buf)
git_buf_len	src/buffer.h	/^GIT_INLINE(size_t) git_buf_len(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_oom	src/buffer.h	/^GIT_INLINE(bool) git_buf_oom(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_printf	src/buffer.c	/^int git_buf_printf(git_buf *buf, const char *format, ...)$/;"	f	signature:(git_buf *buf, const char *format, ...)
git_buf_put	script/user_model.c	/^int git_buf_put(git_buf *buf, const char *data, size_t len)$/;"	f	signature:(git_buf *buf, const char *data, size_t len)
git_buf_put	src/buffer.c	/^int git_buf_put(git_buf *buf, const char *data, size_t len)$/;"	f	signature:(git_buf *buf, const char *data, size_t len)
git_buf_put_w	src/win32/w32_buffer.c	/^int git_buf_put_w(git_buf *buf, const wchar_t *string_w, size_t len_w)$/;"	f	signature:(git_buf *buf, const wchar_t *string_w, size_t len_w)
git_buf_putc	src/buffer.c	/^int git_buf_putc(git_buf *buf, char c)$/;"	f	signature:(git_buf *buf, char c)
git_buf_putcn	src/buffer.c	/^int git_buf_putcn(git_buf *buf, char c, size_t len)$/;"	f	signature:(git_buf *buf, char c, size_t len)
git_buf_puts	src/buffer.c	/^int git_buf_puts(git_buf *buf, const char *string)$/;"	f	signature:(git_buf *buf, const char *string)
git_buf_quote	src/buffer.c	/^int git_buf_quote(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_rfind	src/buffer.h	/^GIT_INLINE(ssize_t) git_buf_rfind(const git_buf *buf, char ch)$/;"	f	signature:(const git_buf *buf, char ch)
git_buf_rfind_next	src/buffer.h	/^GIT_INLINE(ssize_t) git_buf_rfind_next(const git_buf *buf, char ch)$/;"	f	signature:(const git_buf *buf, char ch)
git_buf_rtrim	src/buffer.c	/^void git_buf_rtrim(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_rtruncate_at_char	src/buffer.c	/^void git_buf_rtruncate_at_char(git_buf *buf, char separator)$/;"	f	signature:(git_buf *buf, char separator)
git_buf_sanitize	src/buffer.c	/^void git_buf_sanitize(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_set	script/user_model.c	/^int git_buf_set(git_buf *buf, const void *data, size_t len)$/;"	f	signature:(git_buf *buf, const void *data, size_t len)
git_buf_set	src/buffer.c	/^int git_buf_set(git_buf *buf, const void *data, size_t len)$/;"	f	signature:(git_buf *buf, const void *data, size_t len)
git_buf_sets	src/buffer.c	/^int git_buf_sets(git_buf *buf, const char *string)$/;"	f	signature:(git_buf *buf, const char *string)
git_buf_shorten	src/buffer.c	/^void git_buf_shorten(git_buf *buf, size_t amount)$/;"	f	signature:(git_buf *buf, size_t amount)
git_buf_splice	src/buffer.c	/^int git_buf_splice($/;"	f	signature:( git_buf *buf, size_t where, size_t nb_to_remove, const char *data, size_t nb_to_insert)
git_buf_swap	src/buffer.c	/^void git_buf_swap(git_buf *buf_a, git_buf *buf_b)$/;"	f	signature:(git_buf *buf_a, git_buf *buf_b)
git_buf_text_common_prefix	src/buf_text.c	/^int git_buf_text_common_prefix(git_buf *buf, const git_strarray *strings)$/;"	f	signature:(git_buf *buf, const git_strarray *strings)
git_buf_text_contains_nul	src/buf_text.c	/^bool git_buf_text_contains_nul(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_text_crlf_to_lf	src/buf_text.c	/^int git_buf_text_crlf_to_lf(git_buf *tgt, const git_buf *src)$/;"	f	signature:(git_buf *tgt, const git_buf *src)
git_buf_text_detect_bom	src/buf_text.c	/^int git_buf_text_detect_bom(git_bom_t *bom, const git_buf *buf, size_t offset)$/;"	f	signature:(git_bom_t *bom, const git_buf *buf, size_t offset)
git_buf_text_gather_stats	src/buf_text.c	/^bool git_buf_text_gather_stats($/;"	f	signature:( git_buf_text_stats *stats, const git_buf *buf, bool skip_bom)
git_buf_text_is_binary	src/buf_text.c	/^bool git_buf_text_is_binary(const git_buf *buf)$/;"	f	signature:(const git_buf *buf)
git_buf_text_lf_to_crlf	src/buf_text.c	/^int git_buf_text_lf_to_crlf(git_buf *tgt, const git_buf *src)$/;"	f	signature:(git_buf *tgt, const git_buf *src)
git_buf_text_puts_escape_regex	src/buf_text.h	/^GIT_INLINE(int) git_buf_text_puts_escape_regex(git_buf *buf, const char *string)$/;"	f	signature:(git_buf *buf, const char *string)
git_buf_text_puts_escaped	src/buf_text.c	/^int git_buf_text_puts_escaped($/;"	f	signature:( git_buf *buf, const char *string, const char *esc_chars, const char *esc_with)
git_buf_text_stats	src/buf_text.h	/^} git_buf_text_stats;$/;"	t	typeref:struct:__anon342
git_buf_text_unescape	src/buf_text.c	/^void git_buf_text_unescape(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_truncate	src/buffer.c	/^void git_buf_truncate(git_buf *buf, size_t len)$/;"	f	signature:(git_buf *buf, size_t len)
git_buf_try_grow	src/buffer.c	/^int git_buf_try_grow($/;"	f	signature:( git_buf *buf, size_t target_size, bool mark_oom)
git_buf_unquote	src/buffer.c	/^int git_buf_unquote(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_buf_vec	src/hash.h	/^} git_buf_vec;$/;"	t	typeref:struct:__anon319
git_buf_vprintf	script/user_model.c	/^int git_buf_vprintf(git_buf *buf, const char *format, va_list ap)$/;"	f	signature:(git_buf *buf, const char *format, va_list ap)
git_buf_vprintf	src/buffer.c	/^int git_buf_vprintf(git_buf *buf, const char *format, va_list ap)$/;"	f	signature:(git_buf *buf, const char *format, va_list ap)
git_cache	src/cache.h	/^} git_cache;$/;"	t	typeref:struct:__anon230
git_cache__current_storage	src/cache.c	/^git_atomic_ssize git_cache__current_storage = {0};$/;"	v
git_cache__current_storage	src/cache.h	/^extern git_atomic_ssize git_cache__current_storage;$/;"	x
git_cache__enabled	src/cache.c	/^bool git_cache__enabled = true;$/;"	v
git_cache__enabled	src/cache.h	/^extern bool git_cache__enabled;$/;"	x
git_cache__max_object_size	src/cache.c	/^static size_t git_cache__max_object_size[8] = {$/;"	v	file:
git_cache__max_storage	src/cache.c	/^ssize_t git_cache__max_storage = (256 * 1024 * 1024);$/;"	v
git_cache__max_storage	src/cache.h	/^extern ssize_t git_cache__max_storage;$/;"	x
git_cache_clear	src/cache.c	/^void git_cache_clear(git_cache *cache)$/;"	f	signature:(git_cache *cache)
git_cache_dump_stats	src/cache.c	/^void git_cache_dump_stats(git_cache *cache)$/;"	f	signature:(git_cache *cache)
git_cache_free	src/cache.c	/^void git_cache_free(git_cache *cache)$/;"	f	signature:(git_cache *cache)
git_cache_get_any	src/cache.c	/^void *git_cache_get_any(git_cache *cache, const git_oid *oid)$/;"	f	signature:(git_cache *cache, const git_oid *oid)
git_cache_get_parsed	src/cache.c	/^git_object *git_cache_get_parsed(git_cache *cache, const git_oid *oid)$/;"	f	signature:(git_cache *cache, const git_oid *oid)
git_cache_get_raw	src/cache.c	/^git_odb_object *git_cache_get_raw(git_cache *cache, const git_oid *oid)$/;"	f	signature:(git_cache *cache, const git_oid *oid)
git_cache_init	src/cache.c	/^int git_cache_init(git_cache *cache)$/;"	f	signature:(git_cache *cache)
git_cache_set_max_object_size	src/cache.c	/^int git_cache_set_max_object_size(git_otype type, size_t size)$/;"	f	signature:(git_otype type, size_t size)
git_cache_size	src/cache.h	/^GIT_INLINE(size_t) git_cache_size(git_cache *cache)$/;"	f	signature:(git_cache *cache)
git_cache_store_parsed	src/cache.c	/^void *git_cache_store_parsed(git_cache *cache, git_object *entry)$/;"	f	signature:(git_cache *cache, git_object *entry)
git_cache_store_raw	src/cache.c	/^void *git_cache_store_raw(git_cache *cache, git_odb_object *entry)$/;"	f	signature:(git_cache *cache, git_odb_object *entry)
git_cached_obj	src/cache.h	/^} git_cached_obj;$/;"	t	typeref:struct:__anon229
git_cached_obj_decref	src/cache.c	/^void git_cached_obj_decref(void *_obj)$/;"	f	signature:(void *_obj)
git_cached_obj_incref	src/cache.h	/^GIT_INLINE(void) git_cached_obj_incref(void *_obj)$/;"	f	signature:(void *_obj)
git_cb	examples/network/common.h	/^typedef int (*git_cb)(git_repository *, int , char **);$/;"	t
git_cert	include/git2/types.h	/^} git_cert;$/;"	t	typeref:struct:__anon147
git_cert_hostkey	include/git2/transport.h	/^} git_cert_hostkey;$/;"	t	typeref:struct:__anon78
git_cert_ssh_t	include/git2/transport.h	/^} git_cert_ssh_t;$/;"	t	typeref:enum:__anon77
git_cert_t	include/git2/types.h	/^typedef enum git_cert_t {$/;"	g
git_cert_t	include/git2/types.h	/^} git_cert_t;$/;"	t	typeref:enum:git_cert_t
git_cert_x509	include/git2/transport.h	/^} git_cert_x509;$/;"	t	typeref:struct:__anon79
git_checkout_head	src/checkout.c	/^int git_checkout_head($/;"	f	signature:( git_repository *repo, const git_checkout_options *opts)
git_checkout_index	src/checkout.c	/^int git_checkout_index($/;"	f	signature:( git_repository *repo, git_index *index, const git_checkout_options *opts)
git_checkout_init_options	src/checkout.c	/^int git_checkout_init_options(git_checkout_options *opts, unsigned int version)$/;"	f	signature:(git_checkout_options *opts, unsigned int version)
git_checkout_iterator	src/checkout.c	/^int git_checkout_iterator($/;"	f	signature:( git_iterator *target, git_index *index, const git_checkout_options *opts)
git_checkout_notify_cb	include/git2/checkout.h	/^typedef int (*git_checkout_notify_cb)($/;"	t
git_checkout_notify_t	include/git2/checkout.h	/^} git_checkout_notify_t;$/;"	t	typeref:enum:__anon138
git_checkout_options	include/git2/checkout.h	/^typedef struct git_checkout_options {$/;"	s
git_checkout_options	include/git2/checkout.h	/^} git_checkout_options;$/;"	t	typeref:struct:git_checkout_options
git_checkout_options::ancestor_label	include/git2/checkout.h	/^	const char *ancestor_label; \/**< the name of the common ancestor side of conflicts *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::baseline	include/git2/checkout.h	/^	git_tree *baseline;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::baseline_index	include/git2/checkout.h	/^	git_index *baseline_index; \/**< expected content of workdir, expressed as an index. *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::checkout_strategy	include/git2/checkout.h	/^	unsigned int checkout_strategy; \/**< default will be a dry run *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::dir_mode	include/git2/checkout.h	/^	unsigned int dir_mode;  \/**< default is 0755 *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::disable_filters	include/git2/checkout.h	/^	int disable_filters;    \/**< don't apply filters like CRLF conversion *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::file_mode	include/git2/checkout.h	/^	unsigned int file_mode; \/**< default is 0644 or 0755 as dictated by blob *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::file_open_flags	include/git2/checkout.h	/^	int file_open_flags;    \/**< default is O_CREAT | O_TRUNC | O_WRONLY *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::notify_cb	include/git2/checkout.h	/^	git_checkout_notify_cb notify_cb;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::notify_flags	include/git2/checkout.h	/^	unsigned int notify_flags; \/**< see `git_checkout_notify_t` above *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::notify_payload	include/git2/checkout.h	/^	void *notify_payload;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::our_label	include/git2/checkout.h	/^	const char *our_label; \/**< the name of the "our" side of conflicts *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::paths	include/git2/checkout.h	/^	git_strarray paths;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::perfdata_cb	include/git2/checkout.h	/^	git_checkout_perfdata_cb perfdata_cb;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::perfdata_payload	include/git2/checkout.h	/^	void *perfdata_payload;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::progress_cb	include/git2/checkout.h	/^	git_checkout_progress_cb progress_cb;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::progress_payload	include/git2/checkout.h	/^	void *progress_payload;$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::target_directory	include/git2/checkout.h	/^	const char *target_directory; \/**< alternative checkout path to workdir *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::their_label	include/git2/checkout.h	/^	const char *their_label; \/**< the name of the "their" side of conflicts *\/$/;"	m	struct:git_checkout_options	access:public
git_checkout_options::version	include/git2/checkout.h	/^	unsigned int version;$/;"	m	struct:git_checkout_options	access:public
git_checkout_perfdata	include/git2/checkout.h	/^} git_checkout_perfdata;$/;"	t	typeref:struct:__anon139
git_checkout_perfdata_cb	include/git2/checkout.h	/^typedef void (*git_checkout_perfdata_cb)($/;"	t
git_checkout_progress_cb	include/git2/checkout.h	/^typedef void (*git_checkout_progress_cb)($/;"	t
git_checkout_strategy_t	include/git2/checkout.h	/^} git_checkout_strategy_t;$/;"	t	typeref:enum:__anon137
git_checkout_tree	src/checkout.c	/^int git_checkout_tree($/;"	f	signature:( git_repository *repo, const git_object *treeish, const git_checkout_options *opts)
git_cherrypick	src/cherrypick.c	/^int git_cherrypick($/;"	f	signature:( git_repository *repo, git_commit *commit, const git_cherrypick_options *given_opts)
git_cherrypick_commit	src/cherrypick.c	/^int git_cherrypick_commit($/;"	f	signature:( git_index **out, git_repository *repo, git_commit *cherrypick_commit, git_commit *our_commit, unsigned int mainline, const git_merge_options *merge_opts)
git_cherrypick_init_options	src/cherrypick.c	/^int git_cherrypick_init_options($/;"	f	signature:( git_cherrypick_options *opts, unsigned int version)
git_cherrypick_options	include/git2/cherrypick.h	/^} git_cherrypick_options;$/;"	t	typeref:struct:__anon115
git_clone	src/clone.c	/^int git_clone($/;"	f	signature:( git_repository **out, const char *url, const char *local_path, const git_clone_options *_options)
git_clone__should_clone_local	src/clone.c	/^int git_clone__should_clone_local(const char *url_or_path, git_clone_local_t local)$/;"	f	signature:(const char *url_or_path, git_clone_local_t local)
git_clone_init_options	src/clone.c	/^int git_clone_init_options(git_clone_options *opts, unsigned int version)$/;"	f	signature:(git_clone_options *opts, unsigned int version)
git_clone_local_t	include/git2/clone.h	/^} git_clone_local_t;$/;"	t	typeref:enum:__anon135
git_clone_options	include/git2/clone.h	/^typedef struct git_clone_options {$/;"	s
git_clone_options	include/git2/clone.h	/^} git_clone_options;$/;"	t	typeref:struct:git_clone_options
git_clone_options::bare	include/git2/clone.h	/^	int bare;$/;"	m	struct:git_clone_options	access:public
git_clone_options::checkout_branch	include/git2/clone.h	/^	const char* checkout_branch;$/;"	m	struct:git_clone_options	access:public
git_clone_options::checkout_opts	include/git2/clone.h	/^	git_checkout_options checkout_opts;$/;"	m	struct:git_clone_options	access:public
git_clone_options::fetch_opts	include/git2/clone.h	/^	git_fetch_options fetch_opts;$/;"	m	struct:git_clone_options	access:public
git_clone_options::local	include/git2/clone.h	/^	git_clone_local_t local;$/;"	m	struct:git_clone_options	access:public
git_clone_options::remote_cb	include/git2/clone.h	/^	git_remote_create_cb remote_cb;$/;"	m	struct:git_clone_options	access:public
git_clone_options::remote_cb_payload	include/git2/clone.h	/^	void *remote_cb_payload;$/;"	m	struct:git_clone_options	access:public
git_clone_options::repository_cb	include/git2/clone.h	/^	git_repository_create_cb repository_cb;$/;"	m	struct:git_clone_options	access:public
git_clone_options::repository_cb_payload	include/git2/clone.h	/^	void *repository_cb_payload;$/;"	m	struct:git_clone_options	access:public
git_clone_options::version	include/git2/clone.h	/^	unsigned int version;$/;"	m	struct:git_clone_options	access:public
git_commit	include/git2/types.h	/^typedef struct git_commit git_commit;$/;"	t	typeref:struct:git_commit
git_commit	src/commit.h	/^struct git_commit {$/;"	s
git_commit::author	src/commit.h	/^	git_signature *author;$/;"	m	struct:git_commit	access:public
git_commit::body	src/commit.h	/^	char *body;$/;"	m	struct:git_commit	access:public
git_commit::committer	src/commit.h	/^	git_signature *committer;$/;"	m	struct:git_commit	access:public
git_commit::message_encoding	src/commit.h	/^	char *message_encoding;$/;"	m	struct:git_commit	access:public
git_commit::object	src/commit.h	/^	git_object object;$/;"	m	struct:git_commit	access:public
git_commit::parent_ids	src/commit.h	/^	git_array_t(git_oid) parent_ids;$/;"	m	struct:git_commit	access:public
git_commit::raw_header	src/commit.h	/^	char *raw_header;$/;"	m	struct:git_commit	access:public
git_commit::raw_message	src/commit.h	/^	char *raw_message;$/;"	m	struct:git_commit	access:public
git_commit::summary	src/commit.h	/^	char *summary;$/;"	m	struct:git_commit	access:public
git_commit::tree_id	src/commit.h	/^	git_oid tree_id;$/;"	m	struct:git_commit	access:public
git_commit__create_buffer_internal	src/commit.c	/^static int git_commit__create_buffer_internal($/;"	f	file:	signature:( git_buf *out, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_oid *tree, git_array_oid_t *parents)
git_commit__create_internal	src/commit.c	/^static int git_commit__create_internal($/;"	f	file:	signature:( git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_oid *tree, git_commit_parent_callback parent_cb, void *parent_payload, bool validate)
git_commit__free	src/commit.c	/^void git_commit__free(void *_commit)$/;"	f	signature:(void *_commit)
git_commit__parse	src/commit.c	/^int git_commit__parse(void *_commit, git_odb_object *odb_obj)$/;"	f	signature:(void *_commit, git_odb_object *odb_obj)
git_commit_amend	src/commit.c	/^int git_commit_amend($/;"	f	signature:( git_oid *id, const git_commit *commit_to_amend, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree)
git_commit_body	src/commit.c	/^const char *git_commit_body(git_commit *commit)$/;"	f	signature:(git_commit *commit)
git_commit_create	src/commit.c	/^int git_commit_create($/;"	f	signature:( git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, size_t parent_count, const git_commit *parents[])
git_commit_create_buffer	src/commit.c	/^int git_commit_create_buffer(git_buf *out,$/;"	f	signature:(git_buf *out, git_repository *repo, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, size_t parent_count, const git_commit *parents[])
git_commit_create_from_callback	src/commit.c	/^int git_commit_create_from_callback($/;"	f	signature:( git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_oid *tree, git_commit_parent_callback parent_cb, void *parent_payload)
git_commit_create_from_ids	src/commit.c	/^int git_commit_create_from_ids($/;"	f	signature:( git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_oid *tree, size_t parent_count, const git_oid *parents[])
git_commit_create_v	src/commit.c	/^int git_commit_create_v($/;"	f	signature:( git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, size_t parent_count, ...)
git_commit_create_with_signature	src/commit.c	/^int git_commit_create_with_signature($/;"	f	signature:( git_oid *out, git_repository *repo, const char *commit_content, const char *signature, const char *signature_field)
git_commit_dup	src/object_api.c	/^int git_commit_dup(git_commit **out, git_commit *obj)$/;"	f	signature:(git_commit **out, git_commit *obj)
git_commit_extract_signature	src/commit.c	/^int git_commit_extract_signature(git_buf *signature, git_buf *signed_data, git_repository *repo, git_oid *commit_id, const char *field)$/;"	f	signature:(git_buf *signature, git_buf *signed_data, git_repository *repo, git_oid *commit_id, const char *field)
git_commit_free	src/object_api.c	/^void git_commit_free(git_commit *obj)$/;"	f	signature:(git_commit *obj)
git_commit_header_field	src/commit.c	/^int git_commit_header_field(git_buf *out, const git_commit *commit, const char *field)$/;"	f	signature:(git_buf *out, const git_commit *commit, const char *field)
git_commit_id	src/object_api.c	/^const git_oid *git_commit_id(const git_commit *obj)$/;"	f	signature:(const git_commit *obj)
git_commit_list	src/commit_list.h	/^typedef struct git_commit_list {$/;"	s
git_commit_list	src/commit_list.h	/^} git_commit_list;$/;"	t	typeref:struct:git_commit_list
git_commit_list::item	src/commit_list.h	/^	git_commit_list_node *item;$/;"	m	struct:git_commit_list	access:public
git_commit_list::next	src/commit_list.h	/^	struct git_commit_list *next;$/;"	m	struct:git_commit_list	typeref:struct:git_commit_list::git_commit_list	access:public
git_commit_list_alloc_node	src/commit_list.c	/^git_commit_list_node *git_commit_list_alloc_node(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_commit_list_free	src/commit_list.c	/^void git_commit_list_free(git_commit_list **list_p)$/;"	f	signature:(git_commit_list **list_p)
git_commit_list_insert	src/commit_list.c	/^git_commit_list *git_commit_list_insert(git_commit_list_node *item, git_commit_list **list_p)$/;"	f	signature:(git_commit_list_node *item, git_commit_list **list_p)
git_commit_list_insert_by_date	src/commit_list.c	/^git_commit_list *git_commit_list_insert_by_date(git_commit_list_node *item, git_commit_list **list_p)$/;"	f	signature:(git_commit_list_node *item, git_commit_list **list_p)
git_commit_list_node	src/commit_list.h	/^typedef struct git_commit_list_node {$/;"	s
git_commit_list_node	src/commit_list.h	/^} git_commit_list_node;$/;"	t	typeref:struct:git_commit_list_node
git_commit_list_node::added	src/commit_list.h	/^			 added:1,$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::flags	src/commit_list.h	/^			 flags : FLAG_BITS;$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::in_degree	src/commit_list.h	/^	unsigned short in_degree;$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::oid	src/commit_list.h	/^	git_oid oid;$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::out_degree	src/commit_list.h	/^	unsigned short out_degree;$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::parents	src/commit_list.h	/^	struct git_commit_list_node **parents;$/;"	m	struct:git_commit_list_node	typeref:struct:git_commit_list_node::git_commit_list_node	access:public
git_commit_list_node::parsed	src/commit_list.h	/^			 parsed:1,$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::seen	src/commit_list.h	/^	unsigned int seen:1,$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::time	src/commit_list.h	/^	int64_t time;$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::topo_delay	src/commit_list.h	/^			 topo_delay:1,$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_node::uninteresting	src/commit_list.h	/^			 uninteresting:1,$/;"	m	struct:git_commit_list_node	access:public
git_commit_list_parse	src/commit_list.c	/^int git_commit_list_parse(git_revwalk *walk, git_commit_list_node *commit)$/;"	f	signature:(git_revwalk *walk, git_commit_list_node *commit)
git_commit_list_pop	src/commit_list.c	/^git_commit_list_node *git_commit_list_pop(git_commit_list **stack)$/;"	f	signature:(git_commit_list **stack)
git_commit_list_time_cmp	src/commit_list.c	/^int git_commit_list_time_cmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_commit_lookup	src/object_api.c	/^int git_commit_lookup(git_commit **out, git_repository *repo, const git_oid *id)$/;"	f	signature:(git_commit **out, git_repository *repo, const git_oid *id)
git_commit_lookup_prefix	src/object_api.c	/^int git_commit_lookup_prefix(git_commit **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f	signature:(git_commit **out, git_repository *repo, const git_oid *id, size_t len)
git_commit_message	src/commit.c	/^const char *git_commit_message(const git_commit *commit)$/;"	f	signature:(const git_commit *commit)
git_commit_nth_gen_ancestor	src/commit.c	/^int git_commit_nth_gen_ancestor($/;"	f	signature:( git_commit **ancestor, const git_commit *commit, unsigned int n)
git_commit_owner	src/object_api.c	/^git_repository *git_commit_owner(const git_commit *obj)$/;"	f	signature:(const git_commit *obj)
git_commit_parent	src/commit.c	/^int git_commit_parent($/;"	f	signature:( git_commit **parent, const git_commit *commit, unsigned int n)
git_commit_parent_callback	include/git2/sys/commit.h	/^typedef const git_oid *(*git_commit_parent_callback)(size_t idx, void *payload);$/;"	t
git_commit_parent_id	src/commit.c	/^const git_oid *git_commit_parent_id($/;"	f	signature:( const git_commit *commit, unsigned int n)
git_commit_summary	src/commit.c	/^const char *git_commit_summary(git_commit *commit)$/;"	f	signature:(git_commit *commit)
git_commit_tree	src/commit.c	/^int git_commit_tree(git_tree **tree_out, const git_commit *commit)$/;"	f	signature:(git_tree **tree_out, const git_commit *commit)
git_cond	src/thread-utils.h	148;"	d
git_cond	src/unix/pthread.h	31;"	d
git_cond	src/win32/thread.h	/^typedef HANDLE git_cond;$/;"	t
git_cond_broadcast	src/thread-utils.h	153;"	d
git_cond_broadcast	src/unix/pthread.h	36;"	d
git_cond_free	src/thread-utils.h	150;"	d
git_cond_free	src/unix/pthread.h	33;"	d
git_cond_free	src/win32/thread.c	/^int git_cond_free(git_cond *cond)$/;"	f	signature:(git_cond *cond)
git_cond_init	src/thread-utils.h	149;"	d
git_cond_init	src/unix/pthread.h	32;"	d
git_cond_init	src/win32/thread.c	/^int git_cond_init(git_cond *cond)$/;"	f	signature:(git_cond *cond)
git_cond_signal	src/thread-utils.h	152;"	d
git_cond_signal	src/unix/pthread.h	35;"	d
git_cond_signal	src/win32/thread.c	/^int git_cond_signal(git_cond *cond)$/;"	f	signature:(git_cond *cond)
git_cond_wait	src/thread-utils.h	151;"	d
git_cond_wait	src/unix/pthread.h	34;"	d
git_cond_wait	src/win32/thread.c	/^int git_cond_wait(git_cond *cond, git_mutex *mutex)$/;"	f	signature:(git_cond *cond, git_mutex *mutex)
git_config	include/git2/types.h	/^typedef struct git_config git_config;$/;"	t	typeref:struct:git_config
git_config	src/config.h	/^struct git_config {$/;"	s
git_config::files	src/config.h	/^	git_vector files;$/;"	m	struct:git_config	access:public
git_config::rc	src/config.h	/^	git_refcount rc;$/;"	m	struct:git_config	access:public
git_config__add_internal	src/config.c	/^static int git_config__add_internal($/;"	f	file:	signature:( git_config *cfg, file_internal *internal, git_config_level_t level, int force)
git_config__cvar	src/config_cache.c	/^int git_config__cvar(int *out, git_config *config, git_cvar_cached cvar)$/;"	f	signature:(int *out, git_config *config, git_cvar_cached cvar)
git_config__get_bool_force	src/config.c	/^int git_config__get_bool_force($/;"	f	signature:( const git_config *cfg, const char *key, int fallback_value)
git_config__get_int_force	src/config.c	/^int git_config__get_int_force($/;"	f	signature:( const git_config *cfg, const char *key, int fallback_value)
git_config__get_string_force	src/config.c	/^char *git_config__get_string_force($/;"	f	signature:( const git_config *cfg, const char *key, const char *fallback_value)
git_config__global_location	src/config.c	/^int git_config__global_location(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_config__lookup_entry	src/config.c	/^int git_config__lookup_entry($/;"	f	signature:( git_config_entry **out, const git_config *cfg, const char *key, bool no_errors)
git_config__normalize_name	src/config.c	/^int git_config__normalize_name(const char *in, char **out)$/;"	f	signature:(const char *in, char **out)
git_config__update_entry	src/config.c	/^int git_config__update_entry($/;"	f	signature:( git_config *config, const char *key, const char *value, bool overwrite_existing, bool only_if_existing)
git_config_add_backend	src/config.c	/^int git_config_add_backend($/;"	f	signature:( git_config *cfg, git_config_backend *file, git_config_level_t level, int force)
git_config_add_file_ondisk	src/config.c	/^int git_config_add_file_ondisk($/;"	f	signature:( git_config *cfg, const char *path, git_config_level_t level, int force)
git_config_backend	include/git2/sys/config.h	/^struct git_config_backend {$/;"	s
git_config_backend	include/git2/types.h	/^typedef struct git_config_backend git_config_backend;$/;"	t	typeref:struct:git_config_backend
git_config_backend::cfg	include/git2/sys/config.h	/^	struct git_config *cfg;$/;"	m	struct:git_config_backend	typeref:struct:git_config_backend::git_config	access:public
git_config_backend::del	include/git2/sys/config.h	/^	int (*del)(struct git_config_backend *, const char *key);$/;"	m	struct:git_config_backend	access:public
git_config_backend::del_multivar	include/git2/sys/config.h	/^	int (*del_multivar)(struct git_config_backend *, const char *key, const char *regexp);$/;"	m	struct:git_config_backend	access:public
git_config_backend::free	include/git2/sys/config.h	/^	void (*free)(struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
git_config_backend::get	include/git2/sys/config.h	/^	int (*get)(struct git_config_backend *, const char *key, git_config_entry **entry);$/;"	m	struct:git_config_backend	access:public
git_config_backend::iterator	include/git2/sys/config.h	/^	int (*iterator)(git_config_iterator **, struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
git_config_backend::lock	include/git2/sys/config.h	/^	int (*lock)(struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
git_config_backend::open	include/git2/sys/config.h	/^	int (*open)(struct git_config_backend *, git_config_level_t level);$/;"	m	struct:git_config_backend	access:public
git_config_backend::readonly	include/git2/sys/config.h	/^	int readonly;$/;"	m	struct:git_config_backend	access:public
git_config_backend::set	include/git2/sys/config.h	/^	int (*set)(struct git_config_backend *, const char *key, const char *value);$/;"	m	struct:git_config_backend	access:public
git_config_backend::set_multivar	include/git2/sys/config.h	/^	int (*set_multivar)(git_config_backend *cfg, const char *name, const char *regexp, const char *value);$/;"	m	struct:git_config_backend	access:public
git_config_backend::snapshot	include/git2/sys/config.h	/^	int (*snapshot)(struct git_config_backend **, struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
git_config_backend::unlock	include/git2/sys/config.h	/^	int (*unlock)(struct git_config_backend *, int success);$/;"	m	struct:git_config_backend	access:public
git_config_backend::version	include/git2/sys/config.h	/^	unsigned int version;$/;"	m	struct:git_config_backend	access:public
git_config_backend_foreach_match	src/config.c	/^int git_config_backend_foreach_match($/;"	f	signature:( git_config_backend *backend, const char *regexp, git_config_foreach_cb cb, void *payload)
git_config_delete_entry	src/config.c	/^int git_config_delete_entry(git_config *cfg, const char *name)$/;"	f	signature:(git_config *cfg, const char *name)
git_config_delete_multivar	src/config.c	/^int git_config_delete_multivar(git_config *cfg, const char *name, const char *regexp)$/;"	f	signature:(git_config *cfg, const char *name, const char *regexp)
git_config_entry	include/git2/config.h	/^typedef struct git_config_entry {$/;"	s
git_config_entry	include/git2/config.h	/^} git_config_entry;$/;"	t	typeref:struct:git_config_entry
git_config_entry::free	include/git2/config.h	/^	void (*free)(struct git_config_entry *entry); \/**< Free function for this entry *\/$/;"	m	struct:git_config_entry	access:public
git_config_entry::level	include/git2/config.h	/^	git_config_level_t level; \/**< Which config file this was found in *\/$/;"	m	struct:git_config_entry	access:public
git_config_entry::name	include/git2/config.h	/^	const char *name; \/**< Name of the entry (normalised) *\/$/;"	m	struct:git_config_entry	access:public
git_config_entry::payload	include/git2/config.h	/^	void *payload; \/**< Opaque value for the free function. Do not read or write *\/$/;"	m	struct:git_config_entry	access:public
git_config_entry::value	include/git2/config.h	/^	const char *value; \/**< String value of the entry *\/$/;"	m	struct:git_config_entry	access:public
git_config_entry_free	src/config.c	/^void git_config_entry_free(git_config_entry *entry)$/;"	f	signature:(git_config_entry *entry)
git_config_file__ondisk	src/config_file.c	/^int git_config_file__ondisk(git_config_backend **out, const char *path)$/;"	f	signature:(git_config_backend **out, const char *path)
git_config_file__snapshot	src/config_file.c	/^int git_config_file__snapshot(git_config_backend **out, diskfile_backend *in)$/;"	f	signature:(git_config_backend **out, diskfile_backend *in)
git_config_file_delete	src/config_file.h	/^GIT_INLINE(int) git_config_file_delete($/;"	f	signature:( git_config_backend *cfg, const char *name)
git_config_file_foreach	src/config_file.h	/^GIT_INLINE(int) git_config_file_foreach($/;"	f	signature:( git_config_backend *cfg, int (*fn)(const git_config_entry *entry, void *data), void *data)
git_config_file_foreach_match	src/config_file.h	/^GIT_INLINE(int) git_config_file_foreach_match($/;"	f	signature:( git_config_backend *cfg, const char *regexp, int (*fn)(const git_config_entry *entry, void *data), void *data)
git_config_file_free	src/config_file.h	/^GIT_INLINE(void) git_config_file_free(git_config_backend *cfg)$/;"	f	signature:(git_config_backend *cfg)
git_config_file_get_string	src/config_file.h	/^GIT_INLINE(int) git_config_file_get_string($/;"	f	signature:( git_config_entry **out, git_config_backend *cfg, const char *name)
git_config_file_iter	src/config_file.c	/^typedef struct git_config_file_iter {$/;"	s	file:
git_config_file_iter	src/config_file.c	/^} git_config_file_iter;$/;"	t	typeref:struct:git_config_file_iter	file:
git_config_file_iter::iter	src/config_file.c	/^	git_strmap_iter iter;$/;"	m	struct:git_config_file_iter	file:	access:public
git_config_file_iter::next_var	src/config_file.c	/^	cvar_t* next_var;$/;"	m	struct:git_config_file_iter	file:	access:public
git_config_file_iter::parent	src/config_file.c	/^	git_config_iterator parent;$/;"	m	struct:git_config_file_iter	file:	access:public
git_config_file_lock	src/config_file.h	/^GIT_INLINE(int) git_config_file_lock(git_config_backend *cfg)$/;"	f	signature:(git_config_backend *cfg)
git_config_file_normalize_section	src/config_file.c	/^int git_config_file_normalize_section(char *start, char *end)$/;"	f	signature:(char *start, char *end)
git_config_file_open	src/config_file.h	/^GIT_INLINE(int) git_config_file_open(git_config_backend *cfg, unsigned int level)$/;"	f	signature:(git_config_backend *cfg, unsigned int level)
git_config_file_set_string	src/config_file.h	/^GIT_INLINE(int) git_config_file_set_string($/;"	f	signature:( git_config_backend *cfg, const char *name, const char *value)
git_config_file_unlock	src/config_file.h	/^GIT_INLINE(int) git_config_file_unlock(git_config_backend *cfg, int success)$/;"	f	signature:(git_config_backend *cfg, int success)
git_config_find_global	src/config.c	/^int git_config_find_global(git_buf *path)$/;"	f	signature:(git_buf *path)
git_config_find_programdata	src/config.c	/^int git_config_find_programdata(git_buf *path)$/;"	f	signature:(git_buf *path)
git_config_find_system	src/config.c	/^int git_config_find_system(git_buf *path)$/;"	f	signature:(git_buf *path)
git_config_find_xdg	src/config.c	/^int git_config_find_xdg(git_buf *path)$/;"	f	signature:(git_buf *path)
git_config_foreach	src/config.c	/^int git_config_foreach($/;"	f	signature:( const git_config *cfg, git_config_foreach_cb cb, void *payload)
git_config_foreach_cb	include/git2/config.h	/^typedef int  (*git_config_foreach_cb)(const git_config_entry *, void *);$/;"	t
git_config_foreach_match	src/config.c	/^int git_config_foreach_match($/;"	f	signature:( const git_config *cfg, const char *regexp, git_config_foreach_cb cb, void *payload)
git_config_free	src/config.c	/^void git_config_free(git_config *cfg)$/;"	f	signature:(git_config *cfg)
git_config_get_bool	src/config.c	/^int git_config_get_bool(int *out, const git_config *cfg, const char *name)$/;"	f	signature:(int *out, const git_config *cfg, const char *name)
git_config_get_entry	src/config.c	/^int git_config_get_entry($/;"	f	signature:( git_config_entry **out, const git_config *cfg, const char *name)
git_config_get_int32	src/config.c	/^int git_config_get_int32(int32_t *out, const git_config *cfg, const char *name)$/;"	f	signature:(int32_t *out, const git_config *cfg, const char *name)
git_config_get_int64	src/config.c	/^int git_config_get_int64(int64_t *out, const git_config *cfg, const char *name)$/;"	f	signature:(int64_t *out, const git_config *cfg, const char *name)
git_config_get_mapped	src/config.c	/^int git_config_get_mapped($/;"	f	signature:( int *out, const git_config *cfg, const char *name, const git_cvar_map *maps, size_t map_n)
git_config_get_multivar_foreach	src/config.c	/^int git_config_get_multivar_foreach($/;"	f	signature:( const git_config *cfg, const char *name, const char *regexp, git_config_foreach_cb cb, void *payload)
git_config_get_path	src/config.c	/^int git_config_get_path(git_buf *out, const git_config *cfg, const char *name)$/;"	f	signature:(git_buf *out, const git_config *cfg, const char *name)
git_config_get_string	src/config.c	/^int git_config_get_string($/;"	f	signature:( const char **out, const git_config *cfg, const char *name)
git_config_get_string_buf	src/config.c	/^int git_config_get_string_buf($/;"	f	signature:( git_buf *out, const git_config *cfg, const char *name)
git_config_init_backend	src/config.c	/^int git_config_init_backend(git_config_backend *backend, unsigned int version)$/;"	f	signature:(git_config_backend *backend, unsigned int version)
git_config_iterator	include/git2/config.h	/^typedef struct git_config_iterator git_config_iterator;$/;"	t	typeref:struct:git_config_iterator
git_config_iterator	include/git2/sys/config.h	/^struct git_config_iterator {$/;"	s
git_config_iterator::backend	include/git2/sys/config.h	/^	git_config_backend *backend;$/;"	m	struct:git_config_iterator	access:public
git_config_iterator::flags	include/git2/sys/config.h	/^	unsigned int flags;$/;"	m	struct:git_config_iterator	access:public
git_config_iterator::free	include/git2/sys/config.h	/^	void (*free)(git_config_iterator *iter);$/;"	m	struct:git_config_iterator	access:public
git_config_iterator::next	include/git2/sys/config.h	/^	int (*next)(git_config_entry **entry, git_config_iterator *iter);$/;"	m	struct:git_config_iterator	access:public
git_config_iterator_free	src/config.c	/^void git_config_iterator_free(git_config_iterator *iter)$/;"	f	signature:(git_config_iterator *iter)
git_config_iterator_glob_new	src/config.c	/^int git_config_iterator_glob_new(git_config_iterator **out, const git_config *cfg, const char *regexp)$/;"	f	signature:(git_config_iterator **out, const git_config *cfg, const char *regexp)
git_config_iterator_new	src/config.c	/^int git_config_iterator_new(git_config_iterator **out, const git_config *cfg)$/;"	f	signature:(git_config_iterator **out, const git_config *cfg)
git_config_level_t	include/git2/config.h	/^} git_config_level_t;$/;"	t	typeref:enum:__anon110
git_config_lock	src/config.c	/^int git_config_lock(git_transaction **out, git_config *cfg)$/;"	f	signature:(git_transaction **out, git_config *cfg)
git_config_lookup_map_enum	src/config.c	/^int git_config_lookup_map_enum(git_cvar_t *type_out, const char **str_out,$/;"	f	signature:(git_cvar_t *type_out, const char **str_out, const git_cvar_map *maps, size_t map_n, int enum_val)
git_config_lookup_map_value	src/config.c	/^int git_config_lookup_map_value($/;"	f	signature:( int *out, const git_cvar_map *maps, size_t map_n, const char *value)
git_config_multivar_iterator_new	src/config.c	/^int git_config_multivar_iterator_new(git_config_iterator **out, const git_config *cfg, const char *name, const char *regexp)$/;"	f	signature:(git_config_iterator **out, const git_config *cfg, const char *name, const char *regexp)
git_config_new	src/config.c	/^int git_config_new(git_config **out)$/;"	f	signature:(git_config **out)
git_config_next	src/config.c	/^int git_config_next(git_config_entry **entry, git_config_iterator *iter)$/;"	f	signature:(git_config_entry **entry, git_config_iterator *iter)
git_config_open_default	src/config.c	/^int git_config_open_default(git_config **out)$/;"	f	signature:(git_config **out)
git_config_open_global	src/config.c	/^int git_config_open_global(git_config **cfg_out, git_config *cfg)$/;"	f	signature:(git_config **cfg_out, git_config *cfg)
git_config_open_level	src/config.c	/^int git_config_open_level($/;"	f	signature:( git_config **cfg_out, const git_config *cfg_parent, git_config_level_t level)
git_config_open_ondisk	src/config.c	/^int git_config_open_ondisk(git_config **out, const char *path)$/;"	f	signature:(git_config **out, const char *path)
git_config_parse_bool	src/config.c	/^int git_config_parse_bool(int *out, const char *value)$/;"	f	signature:(int *out, const char *value)
git_config_parse_int32	src/config.c	/^int git_config_parse_int32(int32_t *out, const char *value)$/;"	f	signature:(int32_t *out, const char *value)
git_config_parse_int64	src/config.c	/^int git_config_parse_int64(int64_t *out, const char *value)$/;"	f	signature:(int64_t *out, const char *value)
git_config_parse_path	src/config.c	/^int git_config_parse_path(git_buf *out, const char *value)$/;"	f	signature:(git_buf *out, const char *value)
git_config_rename_section	src/config.c	/^int git_config_rename_section($/;"	f	signature:( git_repository *repo, const char *old_section_name, const char *new_section_name)
git_config_set_bool	src/config.c	/^int git_config_set_bool(git_config *cfg, const char *name, int value)$/;"	f	signature:(git_config *cfg, const char *name, int value)
git_config_set_int32	src/config.c	/^int git_config_set_int32(git_config *cfg, const char *name, int32_t value)$/;"	f	signature:(git_config *cfg, const char *name, int32_t value)
git_config_set_int64	src/config.c	/^int git_config_set_int64(git_config *cfg, const char *name, int64_t value)$/;"	f	signature:(git_config *cfg, const char *name, int64_t value)
git_config_set_multivar	src/config.c	/^int git_config_set_multivar(git_config *cfg, const char *name, const char *regexp, const char *value)$/;"	f	signature:(git_config *cfg, const char *name, const char *regexp, const char *value)
git_config_set_string	src/config.c	/^int git_config_set_string(git_config *cfg, const char *name, const char *value)$/;"	f	signature:(git_config *cfg, const char *name, const char *value)
git_config_snapshot	src/config.c	/^int git_config_snapshot(git_config **out, git_config *in)$/;"	f	signature:(git_config **out, git_config *in)
git_config_unlock	src/config.c	/^int git_config_unlock(git_config *cfg, int commit)$/;"	f	signature:(git_config *cfg, int commit)
git_cred	include/git2/transport.h	/^struct git_cred {$/;"	s
git_cred	include/git2/transport.h	/^typedef struct git_cred git_cred;$/;"	t	typeref:struct:git_cred
git_cred::credtype	include/git2/transport.h	/^	git_credtype_t credtype;$/;"	m	struct:git_cred	access:public
git_cred::free	include/git2/transport.h	/^	void (*free)(git_cred *cred);$/;"	m	struct:git_cred	access:public
git_cred__username	src/transports/cred.c	/^const char *git_cred__username(git_cred *cred)$/;"	f	signature:(git_cred *cred)
git_cred_acquire_cb	include/git2/transport.h	/^typedef int (*git_cred_acquire_cb)($/;"	t
git_cred_default	include/git2/transport.h	/^typedef struct git_cred git_cred_default;$/;"	t	typeref:struct:git_cred
git_cred_default_new	src/transports/cred.c	/^int git_cred_default_new(git_cred **cred)$/;"	f	signature:(git_cred **cred)
git_cred_free	src/transports/cred.c	/^void git_cred_free(git_cred *cred)$/;"	f	signature:(git_cred *cred)
git_cred_has_username	src/transports/cred.c	/^int git_cred_has_username(git_cred *cred)$/;"	f	signature:(git_cred *cred)
git_cred_sign_callback	include/git2/transport.h	/^typedef int (*git_cred_sign_callback)(LIBSSH2_SESSION *session, unsigned char **sig, size_t *sig_len, const unsigned char *data, size_t data_len, void **abstract);$/;"	t
git_cred_ssh_custom	include/git2/transport.h	/^typedef struct git_cred_ssh_custom {$/;"	s
git_cred_ssh_custom	include/git2/transport.h	/^} git_cred_ssh_custom;$/;"	t	typeref:struct:git_cred_ssh_custom
git_cred_ssh_custom::parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_custom	access:public
git_cred_ssh_custom::payload	include/git2/transport.h	/^	void *payload;$/;"	m	struct:git_cred_ssh_custom	access:public
git_cred_ssh_custom::publickey	include/git2/transport.h	/^	char *publickey;$/;"	m	struct:git_cred_ssh_custom	access:public
git_cred_ssh_custom::publickey_len	include/git2/transport.h	/^	size_t publickey_len;$/;"	m	struct:git_cred_ssh_custom	access:public
git_cred_ssh_custom::sign_callback	include/git2/transport.h	/^	git_cred_sign_callback sign_callback;$/;"	m	struct:git_cred_ssh_custom	access:public
git_cred_ssh_custom::username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_custom	access:public
git_cred_ssh_custom_new	src/transports/cred.c	/^int git_cred_ssh_custom_new($/;"	f	signature:( git_cred **cred, const char *username, const char *publickey, size_t publickey_len, git_cred_sign_callback sign_callback, void *payload)
git_cred_ssh_interactive	include/git2/transport.h	/^typedef struct git_cred_ssh_interactive {$/;"	s
git_cred_ssh_interactive	include/git2/transport.h	/^} git_cred_ssh_interactive;$/;"	t	typeref:struct:git_cred_ssh_interactive
git_cred_ssh_interactive::parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_interactive	access:public
git_cred_ssh_interactive::payload	include/git2/transport.h	/^	void *payload;$/;"	m	struct:git_cred_ssh_interactive	access:public
git_cred_ssh_interactive::prompt_callback	include/git2/transport.h	/^	git_cred_ssh_interactive_callback prompt_callback;$/;"	m	struct:git_cred_ssh_interactive	access:public
git_cred_ssh_interactive::username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_interactive	access:public
git_cred_ssh_interactive_callback	include/git2/transport.h	/^typedef void (*git_cred_ssh_interactive_callback)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void **abstract);$/;"	t
git_cred_ssh_interactive_new	src/transports/cred.c	/^int git_cred_ssh_interactive_new($/;"	f	signature:( git_cred **out, const char *username, git_cred_ssh_interactive_callback prompt_callback, void *payload)
git_cred_ssh_key	include/git2/transport.h	/^typedef struct git_cred_ssh_key {$/;"	s
git_cred_ssh_key	include/git2/transport.h	/^} git_cred_ssh_key;$/;"	t	typeref:struct:git_cred_ssh_key
git_cred_ssh_key::parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_key	access:public
git_cred_ssh_key::passphrase	include/git2/transport.h	/^	char *passphrase;$/;"	m	struct:git_cred_ssh_key	access:public
git_cred_ssh_key::privatekey	include/git2/transport.h	/^	char *privatekey;$/;"	m	struct:git_cred_ssh_key	access:public
git_cred_ssh_key::publickey	include/git2/transport.h	/^	char *publickey;$/;"	m	struct:git_cred_ssh_key	access:public
git_cred_ssh_key::username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_key	access:public
git_cred_ssh_key_from_agent	src/transports/cred.c	/^int git_cred_ssh_key_from_agent(git_cred **cred, const char *username) {$/;"	f	signature:(git_cred **cred, const char *username)
git_cred_ssh_key_memory_new	src/transports/cred.c	/^int git_cred_ssh_key_memory_new($/;"	f	signature:( git_cred **cred, const char *username, const char *publickey, const char *privatekey, const char *passphrase)
git_cred_ssh_key_new	src/transports/cred.c	/^int git_cred_ssh_key_new($/;"	f	signature:( git_cred **cred, const char *username, const char *publickey, const char *privatekey, const char *passphrase)
git_cred_ssh_key_type_new	src/transports/cred.c	/^static int git_cred_ssh_key_type_new($/;"	f	file:	signature:( git_cred **cred, const char *username, const char *publickey, const char *privatekey, const char *passphrase, git_credtype_t credtype)
git_cred_username	include/git2/transport.h	/^typedef struct git_cred_username {$/;"	s
git_cred_username	include/git2/transport.h	/^} git_cred_username;$/;"	t	typeref:struct:git_cred_username
git_cred_username::parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_username	access:public
git_cred_username::username	include/git2/transport.h	/^	char username[1];$/;"	m	struct:git_cred_username	access:public
git_cred_username_new	src/transports/cred.c	/^int git_cred_username_new(git_cred **cred, const char *username)$/;"	f	signature:(git_cred **cred, const char *username)
git_cred_userpass	src/transports/cred_helpers.c	/^int git_cred_userpass($/;"	f	signature:( git_cred **cred, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
git_cred_userpass_payload	include/git2/cred_helpers.h	/^typedef struct git_cred_userpass_payload {$/;"	s
git_cred_userpass_payload	include/git2/cred_helpers.h	/^} git_cred_userpass_payload;$/;"	t	typeref:struct:git_cred_userpass_payload
git_cred_userpass_payload::password	include/git2/cred_helpers.h	/^	const char *password;$/;"	m	struct:git_cred_userpass_payload	access:public
git_cred_userpass_payload::username	include/git2/cred_helpers.h	/^	const char *username;$/;"	m	struct:git_cred_userpass_payload	access:public
git_cred_userpass_plaintext	include/git2/transport.h	/^} git_cred_userpass_plaintext;$/;"	t	typeref:struct:__anon81
git_cred_userpass_plaintext_new	src/transports/cred.c	/^int git_cred_userpass_plaintext_new($/;"	f	signature:( git_cred **cred, const char *username, const char *password)
git_credtype_t	include/git2/transport.h	/^} git_credtype_t;$/;"	t	typeref:enum:__anon80
git_crlf_filter_new	src/crlf.c	/^git_filter *git_crlf_filter_new(void)$/;"	f	signature:(void)
git_crlf_t	src/filter.h	/^} git_crlf_t;$/;"	t	typeref:enum:__anon259
git_curl_stream_new	src/curl_stream.c	/^int git_curl_stream_new(git_stream **out, const char *host, const char *port)$/;"	f	signature:(git_stream **out, const char *host, const char *port)
git_cvar_cached	src/repository.h	/^} git_cvar_cached;$/;"	t	typeref:enum:__anon316
git_cvar_map	include/git2/config.h	/^} git_cvar_map;$/;"	t	typeref:struct:__anon112
git_cvar_t	include/git2/config.h	/^} git_cvar_t;$/;"	t	typeref:enum:__anon111
git_cvar_value	src/repository.h	/^} git_cvar_value;$/;"	t	typeref:enum:__anon317
git_decode_varint	src/varint.c	/^uintmax_t git_decode_varint(const unsigned char *bufp, size_t *varint_len)$/;"	f	signature:(const unsigned char *bufp, size_t *varint_len)
git_delta	src/delta.h	/^GIT_INLINE(int) git_delta($/;"	f	signature:( void **out, size_t *out_len, const void *src_buf, size_t src_bufsize, const void *trg_buf, size_t trg_bufsize, size_t max_delta_size)
git_delta_apply	src/delta.c	/^int git_delta_apply($/;"	f	signature:( void **out, size_t *out_len, const unsigned char *base, size_t base_len, const unsigned char *delta, size_t delta_len)
git_delta_create_from_index	src/delta.c	/^int git_delta_create_from_index($/;"	f	signature:( void **out, size_t *out_len, const struct git_delta_index *index, const void *trg_buf, size_t trg_size, size_t max_size)
git_delta_index	src/delta.c	/^struct git_delta_index {$/;"	s	file:
git_delta_index	src/delta.h	/^typedef struct git_delta_index git_delta_index;$/;"	t	typeref:struct:git_delta_index
git_delta_index::hash	src/delta.c	/^	struct index_entry *hash[GIT_FLEX_ARRAY];$/;"	m	struct:git_delta_index	typeref:struct:git_delta_index::index_entry	file:	access:public
git_delta_index::hash_mask	src/delta.c	/^	unsigned int hash_mask;$/;"	m	struct:git_delta_index	file:	access:public
git_delta_index::memsize	src/delta.c	/^	unsigned long memsize;$/;"	m	struct:git_delta_index	file:	access:public
git_delta_index::src_buf	src/delta.c	/^	const void *src_buf;$/;"	m	struct:git_delta_index	file:	access:public
git_delta_index::src_size	src/delta.c	/^	size_t src_size;$/;"	m	struct:git_delta_index	file:	access:public
git_delta_index_free	src/delta.c	/^void git_delta_index_free(git_delta_index *index)$/;"	f	signature:(git_delta_index *index)
git_delta_index_init	src/delta.c	/^int git_delta_index_init($/;"	f	signature:( git_delta_index **out, const void *buf, size_t bufsize)
git_delta_index_size	src/delta.c	/^size_t git_delta_index_size(git_delta_index *index)$/;"	f	signature:(git_delta_index *index)
git_delta_read_header	src/delta.c	/^int git_delta_read_header($/;"	f	signature:( size_t *base_out, size_t *result_out, const unsigned char *delta, size_t delta_len)
git_delta_read_header_fromstream	src/delta.c	/^int git_delta_read_header_fromstream($/;"	f	signature:( size_t *base_sz, size_t *res_sz, git_packfile_stream *stream)
git_delta_t	include/git2/diff.h	/^} git_delta_t;$/;"	t	typeref:enum:__anon84
git_dependency_chain	src/pack.h	/^typedef git_array_t(struct pack_chain_elem) git_dependency_chain;$/;"	t
git_describe_commit	src/describe.c	/^int git_describe_commit($/;"	f	signature:( git_describe_result **result, git_object *committish, git_describe_options *opts)
git_describe_format	src/describe.c	/^int git_describe_format(git_buf *out, const git_describe_result *result, const git_describe_format_options *given)$/;"	f	signature:(git_buf *out, const git_describe_result *result, const git_describe_format_options *given)
git_describe_format_options	include/git2/describe.h	/^} git_describe_format_options;$/;"	t	typeref:struct:__anon108
git_describe_init_format_options	src/describe.c	/^int git_describe_init_format_options(git_describe_format_options *opts, unsigned int version)$/;"	f	signature:(git_describe_format_options *opts, unsigned int version)
git_describe_init_options	src/describe.c	/^int git_describe_init_options(git_describe_options *opts, unsigned int version)$/;"	f	signature:(git_describe_options *opts, unsigned int version)
git_describe_options	include/git2/describe.h	/^typedef struct git_describe_options {$/;"	s
git_describe_options	include/git2/describe.h	/^} git_describe_options;$/;"	t	typeref:struct:git_describe_options
git_describe_options::describe_strategy	include/git2/describe.h	/^	unsigned int describe_strategy; \/**< default: GIT_DESCRIBE_DEFAULT *\/$/;"	m	struct:git_describe_options	access:public
git_describe_options::max_candidates_tags	include/git2/describe.h	/^	unsigned int max_candidates_tags; \/**< default: 10 *\/$/;"	m	struct:git_describe_options	access:public
git_describe_options::only_follow_first_parent	include/git2/describe.h	/^	int only_follow_first_parent;$/;"	m	struct:git_describe_options	access:public
git_describe_options::pattern	include/git2/describe.h	/^	const char *pattern;$/;"	m	struct:git_describe_options	access:public
git_describe_options::show_commit_oid_as_fallback	include/git2/describe.h	/^	int show_commit_oid_as_fallback;$/;"	m	struct:git_describe_options	access:public
git_describe_options::version	include/git2/describe.h	/^	unsigned int version;$/;"	m	struct:git_describe_options	access:public
git_describe_result	include/git2/describe.h	/^typedef struct git_describe_result git_describe_result;$/;"	t	typeref:struct:git_describe_result
git_describe_result	src/describe.c	/^struct git_describe_result {$/;"	s	file:
git_describe_result::commit_id	src/describe.c	/^	git_oid commit_id;$/;"	m	struct:git_describe_result	file:	access:public
git_describe_result::dirty	src/describe.c	/^	int dirty;$/;"	m	struct:git_describe_result	file:	access:public
git_describe_result::exact_match	src/describe.c	/^	int exact_match;$/;"	m	struct:git_describe_result	file:	access:public
git_describe_result::fallback_to_id	src/describe.c	/^	int fallback_to_id;$/;"	m	struct:git_describe_result	file:	access:public
git_describe_result::name	src/describe.c	/^	struct commit_name *name;$/;"	m	struct:git_describe_result	typeref:struct:git_describe_result::commit_name	file:	access:public
git_describe_result::repo	src/describe.c	/^	git_repository *repo;$/;"	m	struct:git_describe_result	file:	access:public
git_describe_result::tag	src/describe.c	/^	struct possible_tag *tag;$/;"	m	struct:git_describe_result	typeref:struct:git_describe_result::possible_tag	file:	access:public
git_describe_result_free	src/describe.c	/^void git_describe_result_free(git_describe_result *result)$/;"	f	signature:(git_describe_result *result)
git_describe_strategy_t	include/git2/describe.h	/^} git_describe_strategy_t;$/;"	t	typeref:enum:__anon107
git_describe_workdir	src/describe.c	/^int git_describe_workdir($/;"	f	signature:( git_describe_result **out, git_repository *repo, git_describe_options *opts)
git_diff	include/git2/diff.h	/^typedef struct git_diff git_diff;$/;"	t	typeref:struct:git_diff
git_diff	src/diff.h	/^struct git_diff {$/;"	s
git_diff::deltas	src/diff.h	/^	git_vector       deltas;    \/* vector of git_diff_delta *\/$/;"	m	struct:git_diff	access:public
git_diff::entrycomp	src/diff.h	/^	int (*entrycomp)(const void *a, const void *b);$/;"	m	struct:git_diff	access:public
git_diff::free_fn	src/diff.h	/^	void (*free_fn)(git_diff *diff);$/;"	m	struct:git_diff	access:public
git_diff::new_src	src/diff.h	/^	git_iterator_type_t new_src;$/;"	m	struct:git_diff	access:public
git_diff::old_src	src/diff.h	/^	git_iterator_type_t old_src;$/;"	m	struct:git_diff	access:public
git_diff::opts	src/diff.h	/^	git_diff_options opts;$/;"	m	struct:git_diff	access:public
git_diff::patch_fn	src/diff.h	/^	int (*patch_fn)(git_patch **out, git_diff *diff, size_t idx);$/;"	m	struct:git_diff	access:public
git_diff::perf	src/diff.h	/^	git_diff_perfdata perf;$/;"	m	struct:git_diff	access:public
git_diff::pfxcomp	src/diff.h	/^	int (*pfxcomp)(const char *str, const char *pfx);$/;"	m	struct:git_diff	access:public
git_diff::pool	src/diff.h	/^	git_pool pool;$/;"	m	struct:git_diff	access:public
git_diff::rc	src/diff.h	/^	git_refcount     rc;$/;"	m	struct:git_diff	access:public
git_diff::repo	src/diff.h	/^	git_repository   *repo;$/;"	m	struct:git_diff	access:public
git_diff::strcomp	src/diff.h	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:git_diff	access:public
git_diff::strncomp	src/diff.h	/^	int (*strncomp)(const char *, const char *, size_t);$/;"	m	struct:git_diff	access:public
git_diff::type	src/diff.h	/^	git_diff_origin_t type;$/;"	m	struct:git_diff	access:public
git_diff__commit	src/diff_generate.c	/^int git_diff__commit($/;"	f	signature:( git_diff **out, git_repository *repo, const git_commit *commit, const git_diff_options *opts)
git_diff__delta_dup	src/diff_tform.c	/^git_diff_delta *git_diff__delta_dup($/;"	f	signature:( const git_diff_delta *d, git_pool *pool)
git_diff__entry_cmp	src/diff.c	/^int git_diff__entry_cmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_diff__entry_icmp	src/diff.c	/^int git_diff__entry_icmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_diff__from_iterators	src/diff_generate.c	/^int git_diff__from_iterators($/;"	f	signature:( git_diff **out, git_repository *repo, git_iterator *old_iter, git_iterator *new_iter, const git_diff_options *opts)
git_diff__merge	src/diff_tform.c	/^int git_diff__merge($/;"	f	signature:( git_diff *onto, const git_diff *from, git_diff__merge_cb cb)
git_diff__merge_cb	src/diff_generate.h	/^typedef git_diff_delta *(*git_diff__merge_cb)($/;"	t
git_diff__merge_like_cgit	src/diff_tform.c	/^git_diff_delta *git_diff__merge_like_cgit($/;"	f	signature:( const git_diff_delta *a, const git_diff_delta *b, git_pool *pool)
git_diff__oid_for_entry	src/diff_generate.c	/^int git_diff__oid_for_entry($/;"	f	signature:( git_oid *out, git_diff *d, const git_index_entry *src, uint16_t mode, const git_oid *update_match)
git_diff__oid_for_file	src/diff_generate.c	/^int git_diff__oid_for_file($/;"	f	signature:( git_oid *out, git_diff *diff, const char *path, uint16_t mode, git_off_t size)
git_diff__paired_foreach	src/diff_generate.c	/^int git_diff__paired_foreach($/;"	f	signature:( git_diff *head2idx, git_diff *idx2wd, int (*cb)(git_diff_delta *h2i, git_diff_delta *i2w, void *payload), void *payload)
git_diff__set_ignore_case	src/diff_generate.c	/^void git_diff__set_ignore_case(git_diff *diff, bool ignore_case)$/;"	f	signature:(git_diff *diff, bool ignore_case)
git_diff_addref	src/diff.c	/^void git_diff_addref(git_diff *diff)$/;"	f	signature:(git_diff *diff)
git_diff_binary	include/git2/diff.h	/^} git_diff_binary;$/;"	t	typeref:struct:__anon90
git_diff_binary_cb	include/git2/diff.h	/^typedef int(*git_diff_binary_cb)($/;"	t
git_diff_binary_file	include/git2/diff.h	/^} git_diff_binary_file;$/;"	t	typeref:struct:__anon89
git_diff_binary_t	include/git2/diff.h	/^} git_diff_binary_t;$/;"	t	typeref:enum:__anon88
git_diff_blob_to_buffer	src/patch_generate.c	/^int git_diff_blob_to_buffer($/;"	f	signature:( const git_blob *old_blob, const char *old_path, const char *buf, size_t buflen, const char *buf_path, const git_diff_options *opts, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb data_cb, void *payload)
git_diff_blobs	src/patch_generate.c	/^int git_diff_blobs($/;"	f	signature:( const git_blob *old_blob, const char *old_path, const git_blob *new_blob, const char *new_path, const git_diff_options *opts, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb data_cb, void *payload)
git_diff_buffers	src/patch_generate.c	/^int git_diff_buffers($/;"	f	signature:( const void *old_buf, size_t old_len, const char *old_path, const void *new_buf, size_t new_len, const char *new_path, const git_diff_options *opts, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb data_cb, void *payload)
git_diff_commit_as_email	src/diff.c	/^int git_diff_commit_as_email($/;"	f	signature:( git_buf *out, git_repository *repo, git_commit *commit, size_t patch_no, size_t total_patches, git_diff_format_email_flags_t flags, const git_diff_options *diff_opts)
git_diff_delta	include/git2/diff.h	/^} git_diff_delta;$/;"	t	typeref:struct:__anon86
git_diff_delta__casecmp	src/diff.c	/^int git_diff_delta__casecmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_diff_delta__cmp	src/diff.c	/^int git_diff_delta__cmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_diff_delta__format_file_header	src/diff_print.c	/^int git_diff_delta__format_file_header($/;"	f	signature:( git_buf *out, const git_diff_delta *delta, const char *oldpfx, const char *newpfx, int id_strlen)
git_diff_delta__i2w_casecmp	src/diff_generate.c	/^int git_diff_delta__i2w_casecmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_diff_delta__i2w_cmp	src/diff_generate.c	/^int git_diff_delta__i2w_cmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_diff_delta__path	src/diff.c	/^const char *git_diff_delta__path(const git_diff_delta *delta)$/;"	f	signature:(const git_diff_delta *delta)
git_diff_delta__should_skip	src/diff_generate.c	/^bool git_diff_delta__should_skip($/;"	f	signature:( const git_diff_options *opts, const git_diff_delta *delta)
git_diff_driver	src/diff_driver.c	/^struct git_diff_driver {$/;"	s	file:
git_diff_driver	src/diff_driver.h	/^typedef struct git_diff_driver git_diff_driver;$/;"	t	typeref:struct:git_diff_driver
git_diff_driver::binary_flags	src/diff_driver.c	/^	uint32_t binary_flags;$/;"	m	struct:git_diff_driver	file:	access:public
git_diff_driver::name	src/diff_driver.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_diff_driver	file:	access:public
git_diff_driver::other_flags	src/diff_driver.c	/^	uint32_t other_flags;$/;"	m	struct:git_diff_driver	file:	access:public
git_diff_driver::type	src/diff_driver.c	/^	git_diff_driver_t type;$/;"	m	struct:git_diff_driver	file:	access:public
git_diff_driver::word_pattern	src/diff_driver.c	/^	regex_t  word_pattern;$/;"	m	struct:git_diff_driver	file:	access:public
git_diff_driver_builtin	src/diff_driver.c	/^static int git_diff_driver_builtin($/;"	f	file:	signature:( git_diff_driver **out, git_diff_driver_registry *reg, const char *driver_name)
git_diff_driver_content_is_binary	src/diff_driver.c	/^int git_diff_driver_content_is_binary($/;"	f	signature:( git_diff_driver *driver, const char *content, size_t content_len)
git_diff_driver_definition	src/userdiff.h	/^} git_diff_driver_definition;$/;"	t	typeref:struct:__anon161
git_diff_driver_free	src/diff_driver.c	/^void git_diff_driver_free(git_diff_driver *driver)$/;"	f	signature:(git_diff_driver *driver)
git_diff_driver_load	src/diff_driver.c	/^static int git_diff_driver_load($/;"	f	file:	signature:( git_diff_driver **out, git_repository *repo, const char *driver_name)
git_diff_driver_lookup	src/diff_driver.c	/^int git_diff_driver_lookup($/;"	f	signature:( git_diff_driver **out, git_repository *repo, const char *path)
git_diff_driver_pattern	src/diff_driver.c	/^} git_diff_driver_pattern;$/;"	t	typeref:struct:__anon239	file:
git_diff_driver_registry	src/diff_driver.c	/^struct git_diff_driver_registry {$/;"	s	file:
git_diff_driver_registry	src/diff_driver.h	/^typedef struct git_diff_driver_registry git_diff_driver_registry;$/;"	t	typeref:struct:git_diff_driver_registry
git_diff_driver_registry::drivers	src/diff_driver.c	/^	git_strmap *drivers;$/;"	m	struct:git_diff_driver_registry	file:	access:public
git_diff_driver_registry_free	src/diff_driver.c	/^void git_diff_driver_registry_free(git_diff_driver_registry *reg)$/;"	f	signature:(git_diff_driver_registry *reg)
git_diff_driver_registry_new	src/diff_driver.c	/^git_diff_driver_registry *git_diff_driver_registry_new(void)$/;"	f	signature:(void)
git_diff_driver_t	src/diff_driver.c	/^} git_diff_driver_t;$/;"	t	typeref:enum:__anon238	file:
git_diff_driver_update_options	src/diff_driver.c	/^void git_diff_driver_update_options($/;"	f	signature:( uint32_t *option_flags, git_diff_driver *driver)
git_diff_file	include/git2/diff.h	/^} git_diff_file;$/;"	t	typeref:struct:__anon85
git_diff_file__resolve_zero_size	src/diff_generate.h	/^GIT_INLINE(int) git_diff_file__resolve_zero_size($/;"	f	signature:( git_diff_file *file, git_odb_object **odb_obj, git_repository *repo)
git_diff_file_cb	include/git2/diff.h	/^typedef int (*git_diff_file_cb)($/;"	t
git_diff_file_content	src/diff_file.h	/^} git_diff_file_content;$/;"	t	typeref:struct:__anon277
git_diff_file_content__clear	src/diff_file.c	/^void git_diff_file_content__clear(git_diff_file_content *fc)$/;"	f	signature:(git_diff_file_content *fc)
git_diff_file_content__init_from_diff	src/diff_file.c	/^int git_diff_file_content__init_from_diff($/;"	f	signature:( git_diff_file_content *fc, git_diff *diff, git_diff_delta *delta, bool use_old)
git_diff_file_content__init_from_src	src/diff_file.c	/^int git_diff_file_content__init_from_src($/;"	f	signature:( git_diff_file_content *fc, git_repository *repo, const git_diff_options *opts, const git_diff_file_content_src *src, git_diff_file *as_file)
git_diff_file_content__load	src/diff_file.c	/^int git_diff_file_content__load($/;"	f	signature:( git_diff_file_content *fc, git_diff_options *diff_opts)
git_diff_file_content__unload	src/diff_file.c	/^void git_diff_file_content__unload(git_diff_file_content *fc)$/;"	f	signature:(git_diff_file_content *fc)
git_diff_file_content_src	src/diff_file.h	/^} git_diff_file_content_src;$/;"	t	typeref:struct:__anon278
git_diff_file_stats__full_to_buf	src/diff_stats.c	/^int git_diff_file_stats__full_to_buf($/;"	f	signature:( git_buf *out, const git_diff_delta *delta, const diff_file_stats *filestat, const git_diff_stats *stats, size_t width)
git_diff_file_stats__number_to_buf	src/diff_stats.c	/^int git_diff_file_stats__number_to_buf($/;"	f	signature:( git_buf *out, const git_diff_delta *delta, const diff_file_stats *filestats)
git_diff_file_stats__summary_to_buf	src/diff_stats.c	/^int git_diff_file_stats__summary_to_buf($/;"	f	signature:( git_buf *out, const git_diff_delta *delta)
git_diff_find_context_clear	src/diff_driver.c	/^void git_diff_find_context_clear(git_diff_find_context_payload *payload)$/;"	f	signature:(git_diff_find_context_payload *payload)
git_diff_find_context_fn	src/diff_driver.h	/^typedef long (*git_diff_find_context_fn)($/;"	t
git_diff_find_context_init	src/diff_driver.c	/^void git_diff_find_context_init($/;"	f	signature:( git_diff_find_context_fn *findfn_out, git_diff_find_context_payload *payload_out, git_diff_driver *driver)
git_diff_find_context_line	src/diff_driver.h	/^typedef int (*git_diff_find_context_line)($/;"	t
git_diff_find_context_payload	src/diff_driver.h	/^} git_diff_find_context_payload;$/;"	t	typeref:struct:__anon201
git_diff_find_init_options	src/diff.c	/^int git_diff_find_init_options($/;"	f	signature:( git_diff_find_options *opts, unsigned int version)
git_diff_find_options	include/git2/diff.h	/^} git_diff_find_options;$/;"	t	typeref:struct:__anon96
git_diff_find_similar	src/diff_tform.c	/^int git_diff_find_similar($/;"	f	signature:( git_diff *diff, const git_diff_find_options *given_opts)
git_diff_find_similar__calc_similarity	src/diff_tform.c	/^int git_diff_find_similar__calc_similarity($/;"	f	signature:( int *score, void *siga, void *sigb, void *payload)
git_diff_find_similar__hashsig_for_buf	src/diff_tform.c	/^int git_diff_find_similar__hashsig_for_buf($/;"	f	signature:( void **out, const git_diff_file *f, const char *buf, size_t len, void *p)
git_diff_find_similar__hashsig_for_file	src/diff_tform.c	/^int git_diff_find_similar__hashsig_for_file($/;"	f	signature:( void **out, const git_diff_file *f, const char *path, void *p)
git_diff_find_similar__hashsig_free	src/diff_tform.c	/^void git_diff_find_similar__hashsig_free(void *sig, void *payload)$/;"	f	signature:(void *sig, void *payload)
git_diff_find_t	include/git2/diff.h	/^} git_diff_find_t;$/;"	t	typeref:enum:__anon94
git_diff_flag_t	include/git2/diff.h	/^} git_diff_flag_t;$/;"	t	typeref:enum:__anon83
git_diff_foreach	src/patch_generate.c	/^int git_diff_foreach($/;"	f	signature:( git_diff *diff, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb data_cb, void *payload)
git_diff_format_email	src/diff.c	/^int git_diff_format_email($/;"	f	signature:( git_buf *out, git_diff *diff, const git_diff_format_email_options *opts)
git_diff_format_email__append_header_tobuf	src/diff.c	/^int git_diff_format_email__append_header_tobuf($/;"	f	signature:( git_buf *out, const git_oid *id, const git_signature *author, const char *summary, const char *body, size_t patch_no, size_t total_patches, bool exclude_patchno_marker)
git_diff_format_email__append_patches_tobuf	src/diff.c	/^int git_diff_format_email__append_patches_tobuf($/;"	f	signature:( git_buf *out, git_diff *diff)
git_diff_format_email_flags_t	include/git2/diff.h	/^} git_diff_format_email_flags_t;$/;"	t	typeref:enum:__anon99
git_diff_format_email_init_options	src/diff.c	/^int git_diff_format_email_init_options($/;"	f	signature:( git_diff_format_email_options *opts, unsigned int version)
git_diff_format_email_options	include/git2/diff.h	/^} git_diff_format_email_options;$/;"	t	typeref:struct:__anon100
git_diff_format_t	include/git2/diff.h	/^} git_diff_format_t;$/;"	t	typeref:enum:__anon97
git_diff_free	src/diff.c	/^void git_diff_free(git_diff *diff)$/;"	f	signature:(git_diff *diff)
git_diff_from_buffer	src/diff_parse.c	/^int git_diff_from_buffer($/;"	f	signature:( git_diff **out, const char *content, size_t content_len)
git_diff_generated	src/diff_generate.c	/^} git_diff_generated;$/;"	t	typeref:struct:__anon296	file:
git_diff_get_delta	src/diff.c	/^const git_diff_delta *git_diff_get_delta(const git_diff *diff, size_t idx)$/;"	f	signature:(const git_diff *diff, size_t idx)
git_diff_get_perfdata	src/diff.c	/^int git_diff_get_perfdata(git_diff_perfdata *out, const git_diff *diff)$/;"	f	signature:(git_diff_perfdata *out, const git_diff *diff)
git_diff_get_stats	src/diff_stats.c	/^int git_diff_get_stats($/;"	f	signature:( git_diff_stats **out, git_diff *diff)
git_diff_hunk	include/git2/diff.h	/^} git_diff_hunk;$/;"	t	typeref:struct:__anon91
git_diff_hunk_cb	include/git2/diff.h	/^typedef int (*git_diff_hunk_cb)($/;"	t
git_diff_index_to_index	src/diff_generate.c	/^int git_diff_index_to_index($/;"	f	signature:( git_diff **out, git_repository *repo, git_index *old_index, git_index *new_index, const git_diff_options *opts)
git_diff_index_to_workdir	src/diff_generate.c	/^int git_diff_index_to_workdir($/;"	f	signature:( git_diff **out, git_repository *repo, git_index *index, const git_diff_options *opts)
git_diff_init_options	src/diff.c	/^int git_diff_init_options(git_diff_options *opts, unsigned int version)$/;"	f	signature:(git_diff_options *opts, unsigned int version)
git_diff_is_sorted_icase	src/diff.c	/^int git_diff_is_sorted_icase(const git_diff *diff)$/;"	f	signature:(const git_diff *diff)
git_diff_line	include/git2/diff.h	/^} git_diff_line;$/;"	t	typeref:struct:__anon93
git_diff_line_cb	include/git2/diff.h	/^typedef int (*git_diff_line_cb)($/;"	t
git_diff_line_t	include/git2/diff.h	/^} git_diff_line_t;$/;"	t	typeref:enum:__anon92
git_diff_merge	src/diff_tform.c	/^int git_diff_merge(git_diff *onto, const git_diff *from)$/;"	f	signature:(git_diff *onto, const git_diff *from)
git_diff_notify_cb	include/git2/diff.h	/^typedef int (*git_diff_notify_cb)($/;"	t
git_diff_num_deltas	src/diff.c	/^size_t git_diff_num_deltas(const git_diff *diff)$/;"	f	signature:(const git_diff *diff)
git_diff_num_deltas_of_type	src/diff.c	/^size_t git_diff_num_deltas_of_type(const git_diff *diff, git_delta_t type)$/;"	f	signature:(const git_diff *diff, git_delta_t type)
git_diff_option_t	include/git2/diff.h	/^} git_diff_option_t;$/;"	t	typeref:enum:__anon82
git_diff_options	include/git2/diff.h	/^} git_diff_options;$/;"	t	typeref:struct:__anon87
git_diff_origin_t	src/diff.h	/^} git_diff_origin_t;$/;"	t	typeref:enum:__anon262
git_diff_parsed	src/diff_parse.h	/^} git_diff_parsed;$/;"	t	typeref:struct:__anon233
git_diff_perfdata	include/git2/sys/diff.h	/^} git_diff_perfdata;$/;"	t	typeref:struct:__anon60
git_diff_print	src/diff_print.c	/^int git_diff_print($/;"	f	signature:( git_diff *diff, git_diff_format_t format, git_diff_line_cb print_cb, void *payload)
git_diff_print_callback__to_buf	src/diff_print.c	/^int git_diff_print_callback__to_buf($/;"	f	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
git_diff_print_callback__to_file_handle	src/diff_print.c	/^int git_diff_print_callback__to_file_handle($/;"	f	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
git_diff_progress_cb	include/git2/diff.h	/^typedef int (*git_diff_progress_cb)($/;"	t
git_diff_similarity_metric	include/git2/diff.h	/^} git_diff_similarity_metric;$/;"	t	typeref:struct:__anon95
git_diff_stats	include/git2/diff.h	/^typedef struct git_diff_stats git_diff_stats;$/;"	t	typeref:struct:git_diff_stats
git_diff_stats	src/diff_stats.c	/^struct git_diff_stats {$/;"	s	file:
git_diff_stats::deletions	src/diff_stats.c	/^	size_t deletions;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::diff	src/diff_stats.c	/^	git_diff *diff;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::files_changed	src/diff_stats.c	/^	size_t files_changed;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::filestats	src/diff_stats.c	/^	diff_file_stats *filestats;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::insertions	src/diff_stats.c	/^	size_t insertions;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::max_digits	src/diff_stats.c	/^	int max_digits;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::max_filestat	src/diff_stats.c	/^	size_t max_filestat;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::max_name	src/diff_stats.c	/^	size_t max_name;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats::renames	src/diff_stats.c	/^	size_t renames;$/;"	m	struct:git_diff_stats	file:	access:public
git_diff_stats_deletions	src/diff_stats.c	/^size_t git_diff_stats_deletions($/;"	f	signature:( const git_diff_stats *stats)
git_diff_stats_files_changed	src/diff_stats.c	/^size_t git_diff_stats_files_changed($/;"	f	signature:( const git_diff_stats *stats)
git_diff_stats_format_t	include/git2/diff.h	/^} git_diff_stats_format_t;$/;"	t	typeref:enum:__anon98
git_diff_stats_free	src/diff_stats.c	/^void git_diff_stats_free(git_diff_stats *stats)$/;"	f	signature:(git_diff_stats *stats)
git_diff_stats_insertions	src/diff_stats.c	/^size_t git_diff_stats_insertions($/;"	f	signature:( const git_diff_stats *stats)
git_diff_stats_to_buf	src/diff_stats.c	/^int git_diff_stats_to_buf($/;"	f	signature:( git_buf *out, const git_diff_stats *stats, git_diff_stats_format_t format, size_t width)
git_diff_status_char	src/diff_print.c	/^char git_diff_status_char(git_delta_t status)$/;"	f	signature:(git_delta_t status)
git_diff_to_buf	src/diff_print.c	/^int git_diff_to_buf(git_buf *out, git_diff *diff, git_diff_format_t format)$/;"	f	signature:(git_buf *out, git_diff *diff, git_diff_format_t format)
git_diff_tree_to_index	src/diff_generate.c	/^int git_diff_tree_to_index($/;"	f	signature:( git_diff **out, git_repository *repo, git_tree *old_tree, git_index *index, const git_diff_options *opts)
git_diff_tree_to_tree	src/diff_generate.c	/^int git_diff_tree_to_tree($/;"	f	signature:( git_diff **out, git_repository *repo, git_tree *old_tree, git_tree *new_tree, const git_diff_options *opts)
git_diff_tree_to_workdir	src/diff_generate.c	/^int git_diff_tree_to_workdir($/;"	f	signature:( git_diff **out, git_repository *repo, git_tree *old_tree, const git_diff_options *opts)
git_diff_tree_to_workdir_with_index	src/diff_generate.c	/^int git_diff_tree_to_workdir_with_index($/;"	f	signature:( git_diff **out, git_repository *repo, git_tree *tree, const git_diff_options *opts)
git_dir_flag	src/attr_file.h	/^typedef enum { GIT_DIR_FLAG_TRUE = 1, GIT_DIR_FLAG_FALSE = 0, GIT_DIR_FLAG_UNKNOWN = -1 } git_dir_flag;$/;"	t	typeref:enum:__anon174
git_direction	include/git2/net.h	/^} git_direction;$/;"	t	typeref:enum:__anon51
git_encode_varint	src/varint.c	/^int git_encode_varint(unsigned char *buf, size_t bufsize, uintmax_t value)$/;"	f	signature:(unsigned char *buf, size_t bufsize, uintmax_t value)
git_error	include/git2/errors.h	/^} git_error;$/;"	t	typeref:struct:__anon43
git_error_code	include/git2/errors.h	/^} git_error_code;$/;"	t	typeref:enum:__anon42
git_error_state	src/common.h	/^} git_error_state;$/;"	t	typeref:struct:__anon257
git_error_t	include/git2/errors.h	/^} git_error_t;$/;"	t	typeref:enum:__anon44
git_feature_t	include/git2/common.h	/^} git_feature_t;$/;"	t	typeref:enum:__anon70
git_fetch_download_pack	src/fetch.c	/^int git_fetch_download_pack(git_remote *remote, const git_remote_callbacks *callbacks)$/;"	f	signature:(git_remote *remote, const git_remote_callbacks *callbacks)
git_fetch_init_options	src/fetch.c	/^int git_fetch_init_options(git_fetch_options *opts, unsigned int version)$/;"	f	signature:(git_fetch_options *opts, unsigned int version)
git_fetch_negotiate	src/fetch.c	/^int git_fetch_negotiate(git_remote *remote, const git_fetch_options *opts)$/;"	f	signature:(git_remote *remote, const git_fetch_options *opts)
git_fetch_options	include/git2/remote.h	/^} git_fetch_options;$/;"	t	typeref:struct:__anon55
git_fetch_prune_t	include/git2/remote.h	/^} git_fetch_prune_t;$/;"	t	typeref:enum:__anon53
git_fetchhead_ref	src/fetchhead.h	/^typedef struct git_fetchhead_ref {$/;"	s
git_fetchhead_ref	src/fetchhead.h	/^} git_fetchhead_ref;$/;"	t	typeref:struct:git_fetchhead_ref
git_fetchhead_ref::is_merge	src/fetchhead.h	/^	unsigned int is_merge;$/;"	m	struct:git_fetchhead_ref	access:public
git_fetchhead_ref::oid	src/fetchhead.h	/^	git_oid oid;$/;"	m	struct:git_fetchhead_ref	access:public
git_fetchhead_ref::ref_name	src/fetchhead.h	/^	char *ref_name;$/;"	m	struct:git_fetchhead_ref	access:public
git_fetchhead_ref::remote_url	src/fetchhead.h	/^	char *remote_url;$/;"	m	struct:git_fetchhead_ref	access:public
git_fetchhead_ref_cmp	src/fetchhead.c	/^int git_fetchhead_ref_cmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_fetchhead_ref_create	src/fetchhead.c	/^int git_fetchhead_ref_create($/;"	f	signature:( git_fetchhead_ref **out, git_oid *oid, unsigned int is_merge, const char *ref_name, const char *remote_url)
git_fetchhead_ref_free	src/fetchhead.c	/^void git_fetchhead_ref_free(git_fetchhead_ref *fetchhead_ref)$/;"	f	signature:(git_fetchhead_ref *fetchhead_ref)
git_fetchhead_write	src/fetchhead.c	/^int git_fetchhead_write(git_repository *repo, git_vector *fetchhead_refs)$/;"	f	signature:(git_repository *repo, git_vector *fetchhead_refs)
git_file	src/posix.h	/^typedef int git_file;$/;"	t
git_filebuf	src/filebuf.h	/^struct git_filebuf {$/;"	s
git_filebuf	src/filebuf.h	/^typedef struct git_filebuf git_filebuf;$/;"	t	typeref:struct:git_filebuf
git_filebuf::buf_pos	src/filebuf.h	/^	size_t buf_size, buf_pos;$/;"	m	struct:git_filebuf	access:public
git_filebuf::buf_size	src/filebuf.h	/^	size_t buf_size, buf_pos;$/;"	m	struct:git_filebuf	access:public
git_filebuf::buffer	src/filebuf.h	/^	unsigned char *buffer;$/;"	m	struct:git_filebuf	access:public
git_filebuf::compute_digest	src/filebuf.h	/^	bool compute_digest;$/;"	m	struct:git_filebuf	access:public
git_filebuf::created_lock	src/filebuf.h	/^	bool created_lock;$/;"	m	struct:git_filebuf	access:public
git_filebuf::did_rename	src/filebuf.h	/^	bool did_rename;$/;"	m	struct:git_filebuf	access:public
git_filebuf::digest	src/filebuf.h	/^	git_hash_ctx digest;$/;"	m	struct:git_filebuf	access:public
git_filebuf::do_not_buffer	src/filebuf.h	/^	bool do_not_buffer;$/;"	m	struct:git_filebuf	access:public
git_filebuf::fd	src/filebuf.h	/^	git_file fd;$/;"	m	struct:git_filebuf	access:public
git_filebuf::fd_is_open	src/filebuf.h	/^	bool fd_is_open;$/;"	m	struct:git_filebuf	access:public
git_filebuf::flush_mode	src/filebuf.h	/^	int flush_mode;$/;"	m	struct:git_filebuf	access:public
git_filebuf::last_error	src/filebuf.h	/^	int last_error;$/;"	m	struct:git_filebuf	access:public
git_filebuf::path_lock	src/filebuf.h	/^	char *path_lock;$/;"	m	struct:git_filebuf	access:public
git_filebuf::path_original	src/filebuf.h	/^	char *path_original;$/;"	m	struct:git_filebuf	access:public
git_filebuf::write	src/filebuf.h	/^	int (*write)(git_filebuf *file, void *source, size_t len);$/;"	m	struct:git_filebuf	access:public
git_filebuf::z_buf	src/filebuf.h	/^	unsigned char *z_buf;$/;"	m	struct:git_filebuf	access:public
git_filebuf::zs	src/filebuf.h	/^	z_stream zs;$/;"	m	struct:git_filebuf	access:public
git_filebuf_cleanup	src/filebuf.c	/^void git_filebuf_cleanup(git_filebuf *file)$/;"	f	signature:(git_filebuf *file)
git_filebuf_commit	src/filebuf.c	/^int git_filebuf_commit(git_filebuf *file)$/;"	f	signature:(git_filebuf *file)
git_filebuf_commit_at	src/filebuf.c	/^int git_filebuf_commit_at(git_filebuf *file, const char *path)$/;"	f	signature:(git_filebuf *file, const char *path)
git_filebuf_flush	src/filebuf.c	/^int git_filebuf_flush(git_filebuf *file)$/;"	f	signature:(git_filebuf *file)
git_filebuf_hash	src/filebuf.c	/^int git_filebuf_hash(git_oid *oid, git_filebuf *file)$/;"	f	signature:(git_oid *oid, git_filebuf *file)
git_filebuf_open	src/filebuf.c	/^int git_filebuf_open(git_filebuf *file, const char *path, int flags, mode_t mode)$/;"	f	signature:(git_filebuf *file, const char *path, int flags, mode_t mode)
git_filebuf_open_withsize	src/filebuf.c	/^int git_filebuf_open_withsize(git_filebuf *file, const char *path, int flags, mode_t mode, size_t size)$/;"	f	signature:(git_filebuf *file, const char *path, int flags, mode_t mode, size_t size)
git_filebuf_printf	src/filebuf.c	/^int git_filebuf_printf(git_filebuf *file, const char *format, ...)$/;"	f	signature:(git_filebuf *file, const char *format, ...)
git_filebuf_reserve	src/filebuf.c	/^int git_filebuf_reserve(git_filebuf *file, void **buffer, size_t len)$/;"	f	signature:(git_filebuf *file, void **buffer, size_t len)
git_filebuf_stats	src/filebuf.c	/^int git_filebuf_stats(time_t *mtime, size_t *size, git_filebuf *file)$/;"	f	signature:(time_t *mtime, size_t *size, git_filebuf *file)
git_filebuf_write	src/filebuf.c	/^int git_filebuf_write(git_filebuf *file, const void *buff, size_t len)$/;"	f	signature:(git_filebuf *file, const void *buff, size_t len)
git_filemode_t	include/git2/types.h	/^} git_filemode_t;$/;"	t	typeref:enum:__anon146
git_filter	include/git2/filter.h	/^typedef struct git_filter git_filter;$/;"	t	typeref:struct:git_filter
git_filter	include/git2/sys/filter.h	/^struct git_filter {$/;"	s
git_filter::apply	include/git2/sys/filter.h	/^	git_filter_apply_fn    apply;$/;"	m	struct:git_filter	access:public
git_filter::attributes	include/git2/sys/filter.h	/^	const char            *attributes;$/;"	m	struct:git_filter	access:public
git_filter::check	include/git2/sys/filter.h	/^	git_filter_check_fn    check;$/;"	m	struct:git_filter	access:public
git_filter::cleanup	include/git2/sys/filter.h	/^	git_filter_cleanup_fn  cleanup;$/;"	m	struct:git_filter	access:public
git_filter::initialize	include/git2/sys/filter.h	/^	git_filter_init_fn     initialize;$/;"	m	struct:git_filter	access:public
git_filter::shutdown	include/git2/sys/filter.h	/^	git_filter_shutdown_fn shutdown;$/;"	m	struct:git_filter	access:public
git_filter::stream	include/git2/sys/filter.h	/^	git_filter_stream_fn   stream;$/;"	m	struct:git_filter	access:public
git_filter::version	include/git2/sys/filter.h	/^	unsigned int           version;$/;"	m	struct:git_filter	access:public
git_filter_apply_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_apply_fn)($/;"	t
git_filter_check_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_check_fn)($/;"	t
git_filter_cleanup_fn	include/git2/sys/filter.h	/^typedef void (*git_filter_cleanup_fn)($/;"	t
git_filter_def	src/filter.c	/^} git_filter_def;$/;"	t	typeref:struct:__anon235	file:
git_filter_entry	src/filter.c	/^} git_filter_entry;$/;"	t	typeref:struct:__anon234	file:
git_filter_flag_t	include/git2/filter.h	/^} git_filter_flag_t;$/;"	t	typeref:enum:__anon76
git_filter_free	src/filter.c	/^void git_filter_free(git_filter *filter)$/;"	f	signature:(git_filter *filter)
git_filter_global_init	src/filter.c	/^int git_filter_global_init(void)$/;"	f	signature:(void)
git_filter_global_shutdown	src/filter.c	/^static void git_filter_global_shutdown(void)$/;"	f	file:	signature:(void)
git_filter_init_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_init_fn)(git_filter *self);$/;"	t
git_filter_list	include/git2/filter.h	/^typedef struct git_filter_list git_filter_list;$/;"	t	typeref:struct:git_filter_list
git_filter_list	src/filter.c	/^struct git_filter_list {$/;"	s	file:
git_filter_list::path	src/filter.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:git_filter_list	file:	access:public
git_filter_list::source	src/filter.c	/^	git_filter_source source;$/;"	m	struct:git_filter_list	file:	access:public
git_filter_list::temp_buf	src/filter.c	/^	git_buf *temp_buf;$/;"	m	struct:git_filter_list	file:	access:public
git_filter_list__load_ext	src/filter.c	/^int git_filter_list__load_ext($/;"	f	signature:( git_filter_list **filters, git_repository *repo, git_blob *blob, const char *path, git_filter_mode_t mode, git_filter_options *filter_opts)
git_filter_list_apply_to_blob	src/filter.c	/^int git_filter_list_apply_to_blob($/;"	f	signature:( git_buf *out, git_filter_list *filters, git_blob *blob)
git_filter_list_apply_to_data	src/filter.c	/^int git_filter_list_apply_to_data($/;"	f	signature:( git_buf *tgt, git_filter_list *filters, git_buf *src)
git_filter_list_apply_to_file	src/filter.c	/^int git_filter_list_apply_to_file($/;"	f	signature:( git_buf *out, git_filter_list *filters, git_repository *repo, const char *path)
git_filter_list_contains	src/filter.c	/^int git_filter_list_contains($/;"	f	signature:( git_filter_list *fl, const char *name)
git_filter_list_free	src/filter.c	/^void git_filter_list_free(git_filter_list *fl)$/;"	f	signature:(git_filter_list *fl)
git_filter_list_length	src/filter.c	/^size_t git_filter_list_length(const git_filter_list *fl)$/;"	f	signature:(const git_filter_list *fl)
git_filter_list_load	src/filter.c	/^int git_filter_list_load($/;"	f	signature:( git_filter_list **filters, git_repository *repo, git_blob *blob, const char *path, git_filter_mode_t mode, uint32_t flags)
git_filter_list_new	src/filter.c	/^int git_filter_list_new($/;"	f	signature:( git_filter_list **out, git_repository *repo, git_filter_mode_t mode, uint32_t flags)
git_filter_list_push	src/filter.c	/^int git_filter_list_push($/;"	f	signature:( git_filter_list *fl, git_filter *filter, void *payload)
git_filter_list_stream_blob	src/filter.c	/^int git_filter_list_stream_blob($/;"	f	signature:( git_filter_list *filters, git_blob *blob, git_writestream *target)
git_filter_list_stream_data	src/filter.c	/^int git_filter_list_stream_data($/;"	f	signature:( git_filter_list *filters, git_buf *data, git_writestream *target)
git_filter_list_stream_file	src/filter.c	/^int git_filter_list_stream_file($/;"	f	signature:( git_filter_list *filters, git_repository *repo, const char *path, git_writestream *target)
git_filter_lookup	src/filter.c	/^git_filter *git_filter_lookup(const char *name)$/;"	f	signature:(const char *name)
git_filter_mode_t	include/git2/filter.h	/^} git_filter_mode_t;$/;"	t	typeref:enum:__anon75
git_filter_options	src/filter.h	/^} git_filter_options;$/;"	t	typeref:struct:__anon260
git_filter_register	src/filter.c	/^int git_filter_register($/;"	f	signature:( const char *name, git_filter *filter, int priority)
git_filter_registry	src/filter.c	/^struct git_filter_registry {$/;"	s	file:
git_filter_registry::filters	src/filter.c	/^	git_vector filters;$/;"	m	struct:git_filter_registry	file:	access:public
git_filter_registry::lock	src/filter.c	/^	git_rwlock lock;$/;"	m	struct:git_filter_registry	file:	access:public
git_filter_shutdown_fn	include/git2/sys/filter.h	/^typedef void (*git_filter_shutdown_fn)(git_filter *self);$/;"	t
git_filter_source	include/git2/sys/filter.h	/^typedef struct git_filter_source git_filter_source;$/;"	t	typeref:struct:git_filter_source
git_filter_source	src/filter.c	/^struct git_filter_source {$/;"	s	file:
git_filter_source::filemode	src/filter.c	/^	uint16_t        filemode; \/* zero if unknown *\/$/;"	m	struct:git_filter_source	file:	access:public
git_filter_source::flags	src/filter.c	/^	uint32_t        flags;$/;"	m	struct:git_filter_source	file:	access:public
git_filter_source::mode	src/filter.c	/^	git_filter_mode_t mode;$/;"	m	struct:git_filter_source	file:	access:public
git_filter_source::oid	src/filter.c	/^	git_oid         oid;  \/* zero if unknown (which is likely) *\/$/;"	m	struct:git_filter_source	file:	access:public
git_filter_source::path	src/filter.c	/^	const char     *path;$/;"	m	struct:git_filter_source	file:	access:public
git_filter_source::repo	src/filter.c	/^	git_repository *repo;$/;"	m	struct:git_filter_source	file:	access:public
git_filter_source_filemode	src/filter.c	/^uint16_t git_filter_source_filemode(const git_filter_source *src)$/;"	f	signature:(const git_filter_source *src)
git_filter_source_flags	src/filter.c	/^uint32_t git_filter_source_flags(const git_filter_source *src)$/;"	f	signature:(const git_filter_source *src)
git_filter_source_id	src/filter.c	/^const git_oid *git_filter_source_id(const git_filter_source *src)$/;"	f	signature:(const git_filter_source *src)
git_filter_source_mode	src/filter.c	/^git_filter_mode_t git_filter_source_mode(const git_filter_source *src)$/;"	f	signature:(const git_filter_source *src)
git_filter_source_path	src/filter.c	/^const char *git_filter_source_path(const git_filter_source *src)$/;"	f	signature:(const git_filter_source *src)
git_filter_source_repo	src/filter.c	/^git_repository *git_filter_source_repo(const git_filter_source *src)$/;"	f	signature:(const git_filter_source *src)
git_filter_stream_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_stream_fn)($/;"	t
git_filter_unregister	src/filter.c	/^int git_filter_unregister(const char *name)$/;"	f	signature:(const char *name)
git_futils_canonical_mode	src/fileops.c	/^mode_t git_futils_canonical_mode(mode_t raw_mode)$/;"	f	signature:(mode_t raw_mode)
git_futils_cp	src/fileops.c	/^int git_futils_cp(const char *from, const char *to, mode_t filemode)$/;"	f	signature:(const char *from, const char *to, mode_t filemode)
git_futils_cp_r	src/fileops.c	/^int git_futils_cp_r($/;"	f	signature:( const char *from, const char *to, uint32_t flags, mode_t dirmode)
git_futils_cpdir_flags	src/fileops.h	/^} git_futils_cpdir_flags;$/;"	t	typeref:enum:__anon348
git_futils_creat_locked	src/fileops.c	/^int git_futils_creat_locked(const char *path, const mode_t mode)$/;"	f	signature:(const char *path, const mode_t mode)
git_futils_creat_locked_withpath	src/fileops.c	/^int git_futils_creat_locked_withpath(const char *path, const mode_t dirmode, const mode_t mode)$/;"	f	signature:(const char *path, const mode_t dirmode, const mode_t mode)
git_futils_creat_withpath	src/fileops.c	/^int git_futils_creat_withpath(const char *path, const mode_t dirmode, const mode_t mode)$/;"	f	signature:(const char *path, const mode_t dirmode, const mode_t mode)
git_futils_fake_symlink	src/fileops.c	/^int git_futils_fake_symlink(const char *old, const char *new)$/;"	f	signature:(const char *old, const char *new)
git_futils_filesize	src/fileops.c	/^git_off_t git_futils_filesize(git_file fd)$/;"	f	signature:(git_file fd)
git_futils_filestamp	src/fileops.h	/^} git_futils_filestamp;$/;"	t	typeref:struct:__anon349
git_futils_filestamp_check	src/fileops.c	/^int git_futils_filestamp_check($/;"	f	signature:( git_futils_filestamp *stamp, const char *path)
git_futils_filestamp_set	src/fileops.c	/^void git_futils_filestamp_set($/;"	f	signature:( git_futils_filestamp *target, const git_futils_filestamp *source)
git_futils_filestamp_set_from_stat	src/fileops.c	/^void git_futils_filestamp_set_from_stat($/;"	f	signature:( git_futils_filestamp *stamp, struct stat *st)
git_futils_mkdir	src/fileops.c	/^int git_futils_mkdir($/;"	f	signature:( const char *path, mode_t mode, uint32_t flags)
git_futils_mkdir_flags	src/fileops.h	/^} git_futils_mkdir_flags;$/;"	t	typeref:enum:__anon346
git_futils_mkdir_options	src/fileops.h	/^struct git_futils_mkdir_options$/;"	s
git_futils_mkdir_options::dir_map	src/fileops.h	/^	git_strmap *dir_map;$/;"	m	struct:git_futils_mkdir_options	access:public
git_futils_mkdir_options::perfdata	src/fileops.h	/^	struct git_futils_mkdir_perfdata perfdata;$/;"	m	struct:git_futils_mkdir_options	typeref:struct:git_futils_mkdir_options::git_futils_mkdir_perfdata	access:public
git_futils_mkdir_options::pool	src/fileops.h	/^	git_pool *pool;$/;"	m	struct:git_futils_mkdir_options	access:public
git_futils_mkdir_perfdata	src/fileops.h	/^struct git_futils_mkdir_perfdata$/;"	s
git_futils_mkdir_perfdata::chmod_calls	src/fileops.h	/^	size_t chmod_calls;$/;"	m	struct:git_futils_mkdir_perfdata	access:public
git_futils_mkdir_perfdata::mkdir_calls	src/fileops.h	/^	size_t mkdir_calls;$/;"	m	struct:git_futils_mkdir_perfdata	access:public
git_futils_mkdir_perfdata::stat_calls	src/fileops.h	/^	size_t stat_calls;$/;"	m	struct:git_futils_mkdir_perfdata	access:public
git_futils_mkdir_r	src/fileops.c	/^int git_futils_mkdir_r(const char *path, const mode_t mode)$/;"	f	signature:(const char *path, const mode_t mode)
git_futils_mkdir_relative	src/fileops.c	/^int git_futils_mkdir_relative($/;"	f	signature:( const char *relative_path, const char *base, mode_t mode, uint32_t flags, struct git_futils_mkdir_options *opts)
git_futils_mkpath2file	src/fileops.c	/^int git_futils_mkpath2file(const char *file_path, const mode_t mode)$/;"	f	signature:(const char *file_path, const mode_t mode)
git_futils_mktmp	src/fileops.c	/^int git_futils_mktmp(git_buf *path_out, const char *filename, mode_t mode)$/;"	f	signature:(git_buf *path_out, const char *filename, mode_t mode)
git_futils_mmap_free	src/fileops.c	/^void git_futils_mmap_free(git_map *out)$/;"	f	signature:(git_map *out)
git_futils_mmap_ro	src/fileops.c	/^int git_futils_mmap_ro(git_map *out, git_file fd, git_off_t begin, size_t len)$/;"	f	signature:(git_map *out, git_file fd, git_off_t begin, size_t len)
git_futils_mmap_ro_file	src/fileops.c	/^int git_futils_mmap_ro_file(git_map *out, const char *path)$/;"	f	signature:(git_map *out, const char *path)
git_futils_mv_withpath	src/fileops.c	/^int git_futils_mv_withpath(const char *from, const char *to, const mode_t dirmode)$/;"	f	signature:(const char *from, const char *to, const mode_t dirmode)
git_futils_open_ro	src/fileops.c	/^int git_futils_open_ro(const char *path)$/;"	f	signature:(const char *path)
git_futils_readbuffer	src/fileops.c	/^int git_futils_readbuffer(git_buf *buf, const char *path)$/;"	f	signature:(git_buf *buf, const char *path)
git_futils_readbuffer_fd	src/fileops.c	/^int git_futils_readbuffer_fd(git_buf *buf, git_file fd, size_t len)$/;"	f	signature:(git_buf *buf, git_file fd, size_t len)
git_futils_readbuffer_updated	src/fileops.c	/^int git_futils_readbuffer_updated($/;"	f	signature:( git_buf *out, const char *path, git_oid *checksum, int *updated)
git_futils_rmdir_flags	src/fileops.h	/^} git_futils_rmdir_flags;$/;"	t	typeref:enum:__anon347
git_futils_rmdir_r	src/fileops.c	/^int git_futils_rmdir_r($/;"	f	signature:( const char *path, const char *base, uint32_t flags)
git_futils_touch	src/fileops.c	/^int git_futils_touch(const char *path, time_t *when)$/;"	f	signature:(const char *path, time_t *when)
git_futils_writebuffer	src/fileops.c	/^int git_futils_writebuffer($/;"	f	signature:( const git_buf *buf, const char *path, int flags, mode_t mode)
git_global_shutdown_fn	src/global.h	/^typedef void (*git_global_shutdown_fn)(void);$/;"	t
git_global_st	src/global.h	/^} git_global_st;$/;"	t	typeref:struct:__anon225
git_graph_ahead_behind	src/graph.c	/^int git_graph_ahead_behind(size_t *ahead, size_t *behind, git_repository *repo,$/;"	f	signature:(size_t *ahead, size_t *behind, git_repository *repo, const git_oid *local, const git_oid *upstream)
git_graph_descendant_of	src/graph.c	/^int git_graph_descendant_of(git_repository *repo, const git_oid *commit, const git_oid *ancestor)$/;"	f	signature:(git_repository *repo, const git_oid *commit, const git_oid *ancestor)
git_has_win32_version	src/win32/version.h	/^GIT_INLINE(int) git_has_win32_version(int major, int minor, int service_pack)$/;"	f	signature:(int major, int minor, int service_pack)
git_hash_buf	src/hash.c	/^int git_hash_buf(git_oid *out, const void *data, size_t len)$/;"	f	signature:(git_oid *out, const void *data, size_t len)
git_hash_ctx	src/hash.h	/^typedef struct git_hash_ctx git_hash_ctx;$/;"	t	typeref:struct:git_hash_ctx
git_hash_ctx	src/hash/hash_common_crypto.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx	src/hash/hash_generic.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx	src/hash/hash_openssl.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx	src/hash/hash_win32.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx::H	src/hash/hash_generic.h	/^	unsigned int H[5];$/;"	m	struct:git_hash_ctx	access:public
git_hash_ctx::W	src/hash/hash_generic.h	/^	unsigned int W[16];$/;"	m	struct:git_hash_ctx	access:public
git_hash_ctx::__anon223::cng	src/hash/hash_win32.h	/^		struct hash_cng_ctx cng;$/;"	m	union:git_hash_ctx::__anon223	typeref:struct:git_hash_ctx::__anon223::hash_cng_ctx	access:public
git_hash_ctx::__anon223::cryptoapi	src/hash/hash_win32.h	/^		struct hash_cryptoapi_ctx cryptoapi;$/;"	m	union:git_hash_ctx::__anon223	typeref:struct:git_hash_ctx::__anon223::hash_cryptoapi_ctx	access:public
git_hash_ctx::c	src/hash/hash_common_crypto.h	/^	CC_SHA1_CTX c;$/;"	m	struct:git_hash_ctx	access:public
git_hash_ctx::c	src/hash/hash_openssl.h	/^	SHA_CTX c;$/;"	m	struct:git_hash_ctx	access:public
git_hash_ctx::ctx	src/hash/hash_win32.h	/^	} ctx;$/;"	m	struct:git_hash_ctx	typeref:union:git_hash_ctx::__anon223	access:public
git_hash_ctx::prov	src/hash/hash_win32.h	/^	git_hash_prov *prov;$/;"	m	struct:git_hash_ctx	access:public
git_hash_ctx::size	src/hash/hash_generic.h	/^	unsigned long long size;$/;"	m	struct:git_hash_ctx	access:public
git_hash_ctx::type	src/hash/hash_win32.h	/^	enum hash_win32_prov_type type;$/;"	m	struct:git_hash_ctx	typeref:enum:git_hash_ctx::hash_win32_prov_type	access:public
git_hash_ctx_cleanup	src/hash/hash_common_crypto.h	21;"	d
git_hash_ctx_cleanup	src/hash/hash_generic.h	21;"	d
git_hash_ctx_cleanup	src/hash/hash_openssl.h	21;"	d
git_hash_ctx_cleanup	src/hash/hash_win32.c	/^void git_hash_ctx_cleanup(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
git_hash_ctx_init	src/hash/hash_common_crypto.h	20;"	d
git_hash_ctx_init	src/hash/hash_generic.h	20;"	d
git_hash_ctx_init	src/hash/hash_openssl.h	20;"	d
git_hash_ctx_init	src/hash/hash_win32.c	/^int git_hash_ctx_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
git_hash_final	src/hash/hash_common_crypto.h	/^GIT_INLINE(int) git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f	signature:(git_oid *out, git_hash_ctx *ctx)
git_hash_final	src/hash/hash_generic.c	/^int git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f	signature:(git_oid *out, git_hash_ctx *ctx)
git_hash_final	src/hash/hash_openssl.h	/^GIT_INLINE(int) git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f	signature:(git_oid *out, git_hash_ctx *ctx)
git_hash_final	src/hash/hash_win32.c	/^int git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f	signature:(git_oid *out, git_hash_ctx *ctx)
git_hash_global_init	src/hash/hash_common_crypto.h	19;"	d
git_hash_global_init	src/hash/hash_generic.h	19;"	d
git_hash_global_init	src/hash/hash_openssl.h	19;"	d
git_hash_global_init	src/hash/hash_win32.c	/^int git_hash_global_init(void)$/;"	f	signature:(void)
git_hash_global_shutdown	src/hash/hash_win32.c	/^static void git_hash_global_shutdown(void)$/;"	f	file:	signature:(void)
git_hash_init	src/hash/hash_common_crypto.h	/^GIT_INLINE(int) git_hash_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
git_hash_init	src/hash/hash_generic.c	/^int git_hash_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
git_hash_init	src/hash/hash_openssl.h	/^GIT_INLINE(int) git_hash_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
git_hash_init	src/hash/hash_win32.c	/^int git_hash_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
git_hash_prov	src/hash.h	/^typedef struct git_hash_prov git_hash_prov;$/;"	t	typeref:struct:git_hash_prov
git_hash_prov	src/hash/hash_win32.h	/^struct git_hash_prov {$/;"	s
git_hash_prov::__anon222::cng	src/hash/hash_win32.h	/^		struct hash_cng_prov cng;$/;"	m	union:git_hash_prov::__anon222	typeref:struct:git_hash_prov::__anon222::hash_cng_prov	access:public
git_hash_prov::__anon222::cryptoapi	src/hash/hash_win32.h	/^		struct hash_cryptoapi_prov cryptoapi;$/;"	m	union:git_hash_prov::__anon222	typeref:struct:git_hash_prov::__anon222::hash_cryptoapi_prov	access:public
git_hash_prov::prov	src/hash/hash_win32.h	/^	} prov;$/;"	m	struct:git_hash_prov	typeref:union:git_hash_prov::__anon222	access:public
git_hash_prov::type	src/hash/hash_win32.h	/^	enum hash_win32_prov_type type;$/;"	m	struct:git_hash_prov	typeref:enum:git_hash_prov::hash_win32_prov_type	access:public
git_hash_update	src/hash/hash_common_crypto.h	/^GIT_INLINE(int) git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f	signature:(git_hash_ctx *ctx, const void *data, size_t len)
git_hash_update	src/hash/hash_generic.c	/^int git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f	signature:(git_hash_ctx *ctx, const void *data, size_t len)
git_hash_update	src/hash/hash_openssl.h	/^GIT_INLINE(int) git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f	signature:(git_hash_ctx *ctx, const void *data, size_t len)
git_hash_update	src/hash/hash_win32.c	/^int git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f	signature:(git_hash_ctx *ctx, const void *data, size_t len)
git_hash_vec	src/hash.c	/^int git_hash_vec(git_oid *out, git_buf_vec *vec, size_t n)$/;"	f	signature:(git_oid *out, git_buf_vec *vec, size_t n)
git_hashsig	include/git2/sys/hashsig.h	/^typedef struct git_hashsig git_hashsig;$/;"	t	typeref:struct:git_hashsig
git_hashsig	src/hashsig.c	/^struct git_hashsig {$/;"	s	file:
git_hashsig::lines	src/hashsig.c	/^	size_t lines;$/;"	m	struct:git_hashsig	file:	access:public
git_hashsig::maxs	src/hashsig.c	/^	hashsig_heap maxs;$/;"	m	struct:git_hashsig	file:	access:public
git_hashsig::mins	src/hashsig.c	/^	hashsig_heap mins;$/;"	m	struct:git_hashsig	file:	access:public
git_hashsig::opt	src/hashsig.c	/^	git_hashsig_option_t opt;$/;"	m	struct:git_hashsig	file:	access:public
git_hashsig_compare	src/hashsig.c	/^int git_hashsig_compare(const git_hashsig *a, const git_hashsig *b)$/;"	f	signature:(const git_hashsig *a, const git_hashsig *b)
git_hashsig_create	src/hashsig.c	/^int git_hashsig_create($/;"	f	signature:( git_hashsig **out, const char *buf, size_t buflen, git_hashsig_option_t opts)
git_hashsig_create_fromfile	src/hashsig.c	/^int git_hashsig_create_fromfile($/;"	f	signature:( git_hashsig **out, const char *path, git_hashsig_option_t opts)
git_hashsig_free	src/hashsig.c	/^void git_hashsig_free(git_hashsig *sig)$/;"	f	signature:(git_hashsig *sig)
git_hashsig_option_t	include/git2/sys/hashsig.h	/^} git_hashsig_option_t;$/;"	t	typeref:enum:__anon57
git_headlist_cb	include/git2/net.h	/^typedef int (*git_headlist_cb)(git_remote_head *rhead, void *payload);$/;"	t
git_http_auth_basic	src/transports/auth.c	/^int git_http_auth_basic($/;"	f	signature:( git_http_auth_context **out, const gitno_connection_data *connection_data)
git_http_auth_context	src/transports/auth.h	/^struct git_http_auth_context {$/;"	s
git_http_auth_context	src/transports/auth.h	/^typedef struct git_http_auth_context git_http_auth_context;$/;"	t	typeref:struct:git_http_auth_context
git_http_auth_context::credtypes	src/transports/auth.h	/^	git_credtype_t credtypes;$/;"	m	struct:git_http_auth_context	access:public
git_http_auth_context::free	src/transports/auth.h	/^	void (*free)(git_http_auth_context *ctx);$/;"	m	struct:git_http_auth_context	access:public
git_http_auth_context::next_token	src/transports/auth.h	/^	int (*next_token)(git_buf *out, git_http_auth_context *ctx, git_cred *cred);$/;"	m	struct:git_http_auth_context	access:public
git_http_auth_context::set_challenge	src/transports/auth.h	/^	int (*set_challenge)(git_http_auth_context *ctx, const char *challenge);$/;"	m	struct:git_http_auth_context	access:public
git_http_auth_context::type	src/transports/auth.h	/^	git_http_authtype_t type;$/;"	m	struct:git_http_auth_context	access:public
git_http_auth_dummy	src/transports/auth.c	/^int git_http_auth_dummy($/;"	f	signature:( git_http_auth_context **out, const gitno_connection_data *connection_data)
git_http_auth_negotiate	src/transports/auth_negotiate.c	/^int git_http_auth_negotiate($/;"	f	signature:( git_http_auth_context **out, const gitno_connection_data *connection_data)
git_http_auth_negotiate	src/transports/auth_negotiate.h	22;"	d
git_http_auth_scheme	src/transports/auth.h	/^} git_http_auth_scheme;$/;"	t	typeref:struct:__anon196
git_http_authtype_t	src/transports/auth.h	/^} git_http_authtype_t;$/;"	t	typeref:enum:__anon195
git_ident_filter_new	src/ident.c	/^git_filter *git_ident_filter_new(void)$/;"	f	signature:(void)
git_idxentry_extended_flag_t	include/git2/index.h	/^} git_idxentry_extended_flag_t;$/;"	t	typeref:enum:__anon103
git_idxmap	src/idxmap.h	/^typedef khash_t(idx) git_idxmap;$/;"	t
git_idxmap_alloc	src/idxmap.h	47;"	d
git_idxmap_begin	src/idxmap.h	90;"	d
git_idxmap_clear	src/idxmap.h	75;"	d
git_idxmap_delete	src/idxmap.h	80;"	d
git_idxmap_delete_at	src/idxmap.h	77;"	d
git_idxmap_end	src/idxmap.h	91;"	d
git_idxmap_free	src/idxmap.h	74;"	d
git_idxmap_has_data	src/idxmap.h	71;"	d
git_idxmap_icase	src/idxmap.h	/^typedef khash_t(idxicase) git_idxmap_icase;$/;"	t
git_idxmap_icase_alloc	src/idxmap.h	50;"	d
git_idxmap_icase_delete	src/idxmap.h	85;"	d
git_idxmap_icase_delete_at	src/idxmap.h	78;"	d
git_idxmap_icase_insert	src/idxmap.h	60;"	d
git_idxmap_icase_lookup_index	src/idxmap.h	68;"	d
git_idxmap_insert	src/idxmap.h	53;"	d
git_idxmap_iter	src/idxmap.h	/^typedef khiter_t git_idxmap_iter;$/;"	t
git_idxmap_lookup_index	src/idxmap.h	67;"	d
git_idxmap_resize	src/idxmap.h	73;"	d
git_idxmap_valid_index	src/idxmap.h	70;"	d
git_idxmap_value_at	src/idxmap.h	69;"	d
git_ignore__check_pathspec_for_exact_ignores	src/ignore.c	/^int git_ignore__check_pathspec_for_exact_ignores($/;"	f	signature:( git_repository *repo, git_vector *vspec, bool no_fnmatch)
git_ignore__for_path	src/ignore.c	/^int git_ignore__for_path($/;"	f	signature:( git_repository *repo, const char *path, git_ignores *ignores)
git_ignore__free	src/ignore.c	/^void git_ignore__free(git_ignores *ignores)$/;"	f	signature:(git_ignores *ignores)
git_ignore__lookup	src/ignore.c	/^int git_ignore__lookup($/;"	f	signature:( int *out, git_ignores *ignores, const char *pathname, git_dir_flag dir_flag)
git_ignore__pop_dir	src/ignore.c	/^int git_ignore__pop_dir(git_ignores *ign)$/;"	f	signature:(git_ignores *ign)
git_ignore__push_dir	src/ignore.c	/^int git_ignore__push_dir(git_ignores *ign, const char *dir)$/;"	f	signature:(git_ignores *ign, const char *dir)
git_ignore_add_rule	src/ignore.c	/^int git_ignore_add_rule(git_repository *repo, const char *rules)$/;"	f	signature:(git_repository *repo, const char *rules)
git_ignore_clear_internal_rules	src/ignore.c	/^int git_ignore_clear_internal_rules(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_ignore_path_is_ignored	src/ignore.c	/^int git_ignore_path_is_ignored($/;"	f	signature:( int *ignored, git_repository *repo, const char *pathname)
git_ignores	src/ignore.h	/^} git_ignores;$/;"	t	typeref:struct:__anon331
git_index	include/git2/types.h	/^typedef struct git_index git_index;$/;"	t	typeref:struct:git_index
git_index	src/index.h	/^struct git_index {$/;"	s
git_index::checksum	src/index.h	/^	git_oid checksum;   \/* checksum at the end of the file *\/$/;"	m	struct:git_index	access:public
git_index::deleted	src/index.h	/^	git_vector deleted; \/* deleted entries if readers > 0 *\/$/;"	m	struct:git_index	access:public
git_index::distrust_filemode	src/index.h	/^	unsigned int distrust_filemode:1;$/;"	m	struct:git_index	access:public
git_index::entries	src/index.h	/^	git_vector entries;$/;"	m	struct:git_index	access:public
git_index::entries_cmp_path	src/index.h	/^	git_vector_cmp entries_cmp_path;$/;"	m	struct:git_index	access:public
git_index::entries_map	src/index.h	/^	git_idxmap *entries_map;$/;"	m	struct:git_index	access:public
git_index::entries_search	src/index.h	/^	git_vector_cmp entries_search;$/;"	m	struct:git_index	access:public
git_index::entries_search_path	src/index.h	/^	git_vector_cmp entries_search_path;$/;"	m	struct:git_index	access:public
git_index::ignore_case	src/index.h	/^	unsigned int ignore_case:1;$/;"	m	struct:git_index	access:public
git_index::index_file_path	src/index.h	/^	char *index_file_path;$/;"	m	struct:git_index	access:public
git_index::names	src/index.h	/^	git_vector names;$/;"	m	struct:git_index	access:public
git_index::no_symlinks	src/index.h	/^	unsigned int no_symlinks:1;$/;"	m	struct:git_index	access:public
git_index::on_disk	src/index.h	/^	unsigned int on_disk:1;$/;"	m	struct:git_index	access:public
git_index::rc	src/index.h	/^	git_refcount rc;$/;"	m	struct:git_index	access:public
git_index::readers	src/index.h	/^	git_atomic readers; \/* number of active iterators *\/$/;"	m	struct:git_index	access:public
git_index::reuc	src/index.h	/^	git_vector reuc;$/;"	m	struct:git_index	access:public
git_index::reuc_search	src/index.h	/^	git_vector_cmp reuc_search;$/;"	m	struct:git_index	access:public
git_index::stamp	src/index.h	/^	git_futils_filestamp stamp;$/;"	m	struct:git_index	access:public
git_index::tree	src/index.h	/^	git_tree_cache *tree;$/;"	m	struct:git_index	access:public
git_index::tree_pool	src/index.h	/^	git_pool tree_pool;$/;"	m	struct:git_index	access:public
git_index::version	src/index.h	/^	unsigned int version;$/;"	m	struct:git_index	access:public
git_index__changed_relative_to	src/index.c	/^int git_index__changed_relative_to($/;"	f	signature:( git_index *index, const git_oid *checksum)
git_index__create_mode	src/index.c	/^unsigned int git_index__create_mode(unsigned int mode)$/;"	f	signature:(unsigned int mode)
git_index__filestamp	src/index.h	/^GIT_INLINE(const git_futils_filestamp *) git_index__filestamp(git_index *index)$/;"	f	signature:(git_index *index)
git_index__fill	src/index.c	/^int git_index__fill(git_index *index, const git_vector *source_entries)$/;"	f	signature:(git_index *index, const git_vector *source_entries)
git_index__find_pos	src/index.c	/^int git_index__find_pos($/;"	f	signature:( size_t *out, git_index *index, const char *path, size_t path_len, int stage)
git_index__set_ignore_case	src/index.c	/^void git_index__set_ignore_case(git_index *index, bool ignore_case)$/;"	f	signature:(git_index *index, bool ignore_case)
git_index_add	src/index.c	/^int git_index_add(git_index *index, const git_index_entry *source_entry)$/;"	f	signature:(git_index *index, const git_index_entry *source_entry)
git_index_add_all	src/index.c	/^int git_index_add_all($/;"	f	signature:( git_index *index, const git_strarray *paths, unsigned int flags, git_index_matched_path_cb cb, void *payload)
git_index_add_bypath	src/index.c	/^int git_index_add_bypath(git_index *index, const char *path)$/;"	f	signature:(git_index *index, const char *path)
git_index_add_frombuffer	src/index.c	/^int git_index_add_frombuffer($/;"	f	signature:( git_index *index, const git_index_entry *source_entry, const void *buffer, size_t len)
git_index_add_option_t	include/git2/index.h	/^} git_index_add_option_t;$/;"	t	typeref:enum:__anon105
git_index_caps	src/index.c	/^int git_index_caps(const git_index *index)$/;"	f	signature:(const git_index *index)
git_index_checksum	src/index.c	/^const git_oid *git_index_checksum(git_index *index)$/;"	f	signature:(git_index *index)
git_index_clear	src/index.c	/^int git_index_clear(git_index *index)$/;"	f	signature:(git_index *index)
git_index_conflict_add	src/index.c	/^int git_index_conflict_add(git_index *index,$/;"	f	signature:(git_index *index, const git_index_entry *ancestor_entry, const git_index_entry *our_entry, const git_index_entry *their_entry)
git_index_conflict_cleanup	src/index.c	/^int git_index_conflict_cleanup(git_index *index)$/;"	f	signature:(git_index *index)
git_index_conflict_get	src/index.c	/^int git_index_conflict_get($/;"	f	signature:( const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index *index, const char *path)
git_index_conflict_iterator	include/git2/types.h	/^typedef struct git_index_conflict_iterator git_index_conflict_iterator;$/;"	t	typeref:struct:git_index_conflict_iterator
git_index_conflict_iterator	src/index.h	/^struct git_index_conflict_iterator {$/;"	s
git_index_conflict_iterator::cur	src/index.h	/^	size_t cur;$/;"	m	struct:git_index_conflict_iterator	access:public
git_index_conflict_iterator::index	src/index.h	/^	git_index *index;$/;"	m	struct:git_index_conflict_iterator	access:public
git_index_conflict_iterator_free	src/index.c	/^void git_index_conflict_iterator_free(git_index_conflict_iterator *iterator)$/;"	f	signature:(git_index_conflict_iterator *iterator)
git_index_conflict_iterator_new	src/index.c	/^int git_index_conflict_iterator_new($/;"	f	signature:( git_index_conflict_iterator **iterator_out, git_index *index)
git_index_conflict_next	src/index.c	/^int git_index_conflict_next($/;"	f	signature:( const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index_conflict_iterator *iterator)
git_index_conflict_remove	src/index.c	/^int git_index_conflict_remove(git_index *index, const char *path)$/;"	f	signature:(git_index *index, const char *path)
git_index_entry	include/git2/index.h	/^typedef struct git_index_entry {$/;"	s
git_index_entry	include/git2/index.h	/^} git_index_entry;$/;"	t	typeref:struct:git_index_entry
git_index_entry::ctime	include/git2/index.h	/^	git_index_time ctime;$/;"	m	struct:git_index_entry	access:public
git_index_entry::dev	include/git2/index.h	/^	uint32_t dev;$/;"	m	struct:git_index_entry	access:public
git_index_entry::file_size	include/git2/index.h	/^	uint32_t file_size;$/;"	m	struct:git_index_entry	access:public
git_index_entry::flags	include/git2/index.h	/^	uint16_t flags;$/;"	m	struct:git_index_entry	access:public
git_index_entry::flags_extended	include/git2/index.h	/^	uint16_t flags_extended;$/;"	m	struct:git_index_entry	access:public
git_index_entry::gid	include/git2/index.h	/^	uint32_t gid;$/;"	m	struct:git_index_entry	access:public
git_index_entry::id	include/git2/index.h	/^	git_oid id;$/;"	m	struct:git_index_entry	access:public
git_index_entry::ino	include/git2/index.h	/^	uint32_t ino;$/;"	m	struct:git_index_entry	access:public
git_index_entry::mode	include/git2/index.h	/^	uint32_t mode;$/;"	m	struct:git_index_entry	access:public
git_index_entry::mtime	include/git2/index.h	/^	git_index_time mtime;$/;"	m	struct:git_index_entry	access:public
git_index_entry::path	include/git2/index.h	/^	const char *path;$/;"	m	struct:git_index_entry	access:public
git_index_entry::uid	include/git2/index.h	/^	uint32_t uid;$/;"	m	struct:git_index_entry	access:public
git_index_entry__init_from_stat	src/index.c	/^void git_index_entry__init_from_stat($/;"	f	signature:( git_index_entry *entry, struct stat *st, bool trust_mode)
git_index_entry_cmp	src/index.c	/^int git_index_entry_cmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_index_entry_icmp	src/index.c	/^int git_index_entry_icmp(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
git_index_entry_is_conflict	src/index.c	/^int git_index_entry_is_conflict(const git_index_entry *entry)$/;"	f	signature:(const git_index_entry *entry)
git_index_entry_isrch	src/index.c	/^int git_index_entry_isrch(const void *key, const void *array_member)$/;"	f	signature:(const void *key, const void *array_member)
git_index_entry_newer_than_index	src/index.h	/^GIT_INLINE(bool) git_index_entry_newer_than_index($/;"	f	signature:( const git_index_entry *entry, git_index *index)
git_index_entry_srch	src/index.c	/^int git_index_entry_srch(const void *key, const void *array_member)$/;"	f	signature:(const void *key, const void *array_member)
git_index_entry_stage	src/index.c	/^int git_index_entry_stage(const git_index_entry *entry)$/;"	f	signature:(const git_index_entry *entry)
git_index_entrycount	src/index.c	/^size_t git_index_entrycount(const git_index *index)$/;"	f	signature:(const git_index *index)
git_index_find	src/index.c	/^int git_index_find(size_t *at_pos, git_index *index, const char *path)$/;"	f	signature:(size_t *at_pos, git_index *index, const char *path)
git_index_find_prefix	src/index.c	/^int git_index_find_prefix(size_t *at_pos, git_index *index, const char *prefix)$/;"	f	signature:(size_t *at_pos, git_index *index, const char *prefix)
git_index_free	src/index.c	/^void git_index_free(git_index *index)$/;"	f	signature:(git_index *index)
git_index_get_byindex	src/index.c	/^const git_index_entry *git_index_get_byindex($/;"	f	signature:( git_index *index, size_t n)
git_index_get_bypath	src/index.c	/^const git_index_entry *git_index_get_bypath($/;"	f	signature:( git_index *index, const char *path, int stage)
git_index_has_conflicts	src/index.c	/^int git_index_has_conflicts(const git_index *index)$/;"	f	signature:(const git_index *index)
git_index_matched_path_cb	include/git2/index.h	/^typedef int (*git_index_matched_path_cb)($/;"	t
git_index_name_add	src/index.c	/^int git_index_name_add(git_index *index,$/;"	f	signature:(git_index *index, const char *ancestor, const char *ours, const char *theirs)
git_index_name_clear	src/index.c	/^void git_index_name_clear(git_index *index)$/;"	f	signature:(git_index *index)
git_index_name_entry	include/git2/sys/index.h	/^typedef struct git_index_name_entry {$/;"	s
git_index_name_entry	include/git2/sys/index.h	/^} git_index_name_entry;$/;"	t	typeref:struct:git_index_name_entry
git_index_name_entry::ancestor	include/git2/sys/index.h	/^	char *ancestor;$/;"	m	struct:git_index_name_entry	access:public
git_index_name_entry::ours	include/git2/sys/index.h	/^	char *ours;$/;"	m	struct:git_index_name_entry	access:public
git_index_name_entry::theirs	include/git2/sys/index.h	/^	char *theirs;$/;"	m	struct:git_index_name_entry	access:public
git_index_name_entrycount	src/index.c	/^size_t git_index_name_entrycount(git_index *index)$/;"	f	signature:(git_index *index)
git_index_name_get_byindex	src/index.c	/^const git_index_name_entry *git_index_name_get_byindex($/;"	f	signature:( git_index *index, size_t n)
git_index_new	src/index.c	/^int git_index_new(git_index **out)$/;"	f	signature:(git_index **out)
git_index_open	src/index.c	/^int git_index_open(git_index **index_out, const char *index_path)$/;"	f	signature:(git_index **index_out, const char *index_path)
git_index_owner	src/index.c	/^git_repository *git_index_owner(const git_index *index)$/;"	f	signature:(const git_index *index)
git_index_path	src/index.c	/^const char * git_index_path(const git_index *index)$/;"	f	signature:(const git_index *index)
git_index_read	src/index.c	/^int git_index_read(git_index *index, int force)$/;"	f	signature:(git_index *index, int force)
git_index_read_index	src/index.c	/^int git_index_read_index($/;"	f	signature:( git_index *index, const git_index *new_index)
git_index_read_iterator	src/index.c	/^static int git_index_read_iterator($/;"	f	file:	signature:( git_index *index, git_iterator *new_iterator, size_t new_length_hint)
git_index_read_tree	src/index.c	/^int git_index_read_tree(git_index *index, const git_tree *tree)$/;"	f	signature:(git_index *index, const git_tree *tree)
git_index_remove	src/index.c	/^int git_index_remove(git_index *index, const char *path, int stage)$/;"	f	signature:(git_index *index, const char *path, int stage)
git_index_remove_all	src/index.c	/^int git_index_remove_all($/;"	f	signature:( git_index *index, const git_strarray *pathspec, git_index_matched_path_cb cb, void *payload)
git_index_remove_bypath	src/index.c	/^int git_index_remove_bypath(git_index *index, const char *path)$/;"	f	signature:(git_index *index, const char *path)
git_index_remove_directory	src/index.c	/^int git_index_remove_directory(git_index *index, const char *dir, int stage)$/;"	f	signature:(git_index *index, const char *dir, int stage)
git_index_reuc_add	src/index.c	/^int git_index_reuc_add(git_index *index, const char *path,$/;"	f	signature:(git_index *index, const char *path, int ancestor_mode, const git_oid *ancestor_oid, int our_mode, const git_oid *our_oid, int their_mode, const git_oid *their_oid)
git_index_reuc_clear	src/index.c	/^void git_index_reuc_clear(git_index *index)$/;"	f	signature:(git_index *index)
git_index_reuc_entry	include/git2/sys/index.h	/^typedef struct git_index_reuc_entry {$/;"	s
git_index_reuc_entry	include/git2/sys/index.h	/^} git_index_reuc_entry;$/;"	t	typeref:struct:git_index_reuc_entry
git_index_reuc_entry::mode	include/git2/sys/index.h	/^	uint32_t mode[3];$/;"	m	struct:git_index_reuc_entry	access:public
git_index_reuc_entry::oid	include/git2/sys/index.h	/^	git_oid oid[3];$/;"	m	struct:git_index_reuc_entry	access:public
git_index_reuc_entry::path	include/git2/sys/index.h	/^	char *path;$/;"	m	struct:git_index_reuc_entry	access:public
git_index_reuc_entrycount	src/index.c	/^size_t git_index_reuc_entrycount(git_index *index)$/;"	f	signature:(git_index *index)
git_index_reuc_find	src/index.c	/^int git_index_reuc_find(size_t *at_pos, git_index *index, const char *path)$/;"	f	signature:(size_t *at_pos, git_index *index, const char *path)
git_index_reuc_get_byindex	src/index.c	/^const git_index_reuc_entry *git_index_reuc_get_byindex($/;"	f	signature:( git_index *index, size_t n)
git_index_reuc_get_bypath	src/index.c	/^const git_index_reuc_entry *git_index_reuc_get_bypath($/;"	f	signature:( git_index *index, const char *path)
git_index_reuc_remove	src/index.c	/^int git_index_reuc_remove(git_index *index, size_t position)$/;"	f	signature:(git_index *index, size_t position)
git_index_set_caps	src/index.c	/^int git_index_set_caps(git_index *index, int caps)$/;"	f	signature:(git_index *index, int caps)
git_index_set_version	src/index.c	/^int git_index_set_version(git_index *index, unsigned int version)$/;"	f	signature:(git_index *index, unsigned int version)
git_index_snapshot_find	src/index.c	/^int git_index_snapshot_find($/;"	f	signature:( size_t *out, git_vector *entries, git_vector_cmp entry_srch, const char *path, size_t path_len, int stage)
git_index_snapshot_new	src/index.c	/^int git_index_snapshot_new(git_vector *snap, git_index *index)$/;"	f	signature:(git_vector *snap, git_index *index)
git_index_snapshot_release	src/index.c	/^void git_index_snapshot_release(git_vector *snap, git_index *index)$/;"	f	signature:(git_vector *snap, git_index *index)
git_index_stage_t	include/git2/index.h	/^} git_index_stage_t;$/;"	t	typeref:enum:__anon106
git_index_time	include/git2/index.h	/^} git_index_time;$/;"	t	typeref:struct:__anon101
git_index_time_eq	src/index.h	/^GIT_INLINE(bool) git_index_time_eq(const git_index_time *one, const git_index_time *two)$/;"	f	signature:(const git_index_time *one, const git_index_time *two)
git_index_update_all	src/index.c	/^int git_index_update_all($/;"	f	signature:( git_index *index, const git_strarray *pathspec, git_index_matched_path_cb cb, void *payload)
git_index_version	src/index.c	/^unsigned git_index_version(git_index *index)$/;"	f	signature:(git_index *index)
git_index_write	src/index.c	/^int git_index_write(git_index *index)$/;"	f	signature:(git_index *index)
git_index_write_tree	src/index.c	/^int git_index_write_tree(git_oid *oid, git_index *index)$/;"	f	signature:(git_oid *oid, git_index *index)
git_index_write_tree_to	src/index.c	/^int git_index_write_tree_to($/;"	f	signature:( git_oid *oid, git_index *index, git_repository *repo)
git_indexcap_t	include/git2/index.h	/^} git_indexcap_t;$/;"	t	typeref:enum:__anon104
git_indexer	include/git2/indexer.h	/^typedef struct git_indexer git_indexer;$/;"	t	typeref:struct:git_indexer
git_indexer	src/indexer.c	/^struct git_indexer {$/;"	s	file:
git_indexer::deltas	src/indexer.c	/^	git_vector deltas;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::entry_start	src/indexer.c	/^	git_off_t entry_start;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::fanout	src/indexer.c	/^	unsigned int fanout[256];$/;"	m	struct:git_indexer	file:	access:public
git_indexer::hash	src/indexer.c	/^	git_oid hash;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::hash_ctx	src/indexer.c	/^	git_hash_ctx hash_ctx;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::have_delta	src/indexer.c	/^		have_delta :1;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::have_stream	src/indexer.c	/^		have_stream :1,$/;"	m	struct:git_indexer	file:	access:public
git_indexer::hdr	src/indexer.c	/^	struct git_pack_header hdr;$/;"	m	struct:git_indexer	typeref:struct:git_indexer::git_pack_header	file:	access:public
git_indexer::inbuf	src/indexer.c	/^	char inbuf[GIT_OID_RAWSZ];$/;"	m	struct:git_indexer	file:	access:public
git_indexer::inbuf_len	src/indexer.c	/^	size_t inbuf_len;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::mode	src/indexer.c	/^	unsigned int mode;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::nr_objects	src/indexer.c	/^	size_t nr_objects;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::objbuf	src/indexer.c	/^	char objbuf[8*1024];$/;"	m	struct:git_indexer	file:	access:public
git_indexer::objects	src/indexer.c	/^	git_vector objects;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::odb	src/indexer.c	/^	git_odb *odb;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::off	src/indexer.c	/^	git_off_t off;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::opened_pack	src/indexer.c	/^		opened_pack :1,$/;"	m	struct:git_indexer	file:	access:public
git_indexer::pack	src/indexer.c	/^	struct git_pack_file *pack;$/;"	m	struct:git_indexer	typeref:struct:git_indexer::git_pack_file	file:	access:public
git_indexer::parsed_header	src/indexer.c	/^	unsigned int parsed_header :1,$/;"	m	struct:git_indexer	file:	access:public
git_indexer::progress_cb	src/indexer.c	/^	git_transfer_progress_cb progress_cb;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::progress_payload	src/indexer.c	/^	void *progress_payload;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::stream	src/indexer.c	/^	git_packfile_stream stream;$/;"	m	struct:git_indexer	file:	access:public
git_indexer::trailer	src/indexer.c	/^	git_hash_ctx trailer;$/;"	m	struct:git_indexer	file:	access:public
git_indexer_append	src/indexer.c	/^int git_indexer_append(git_indexer *idx, const void *data, size_t size, git_transfer_progress *stats)$/;"	f	signature:(git_indexer *idx, const void *data, size_t size, git_transfer_progress *stats)
git_indexer_commit	src/indexer.c	/^int git_indexer_commit(git_indexer *idx, git_transfer_progress *stats)$/;"	f	signature:(git_indexer *idx, git_transfer_progress *stats)
git_indexer_free	src/indexer.c	/^void git_indexer_free(git_indexer *idx)$/;"	f	signature:(git_indexer *idx)
git_indexer_hash	src/indexer.c	/^const git_oid *git_indexer_hash(const git_indexer *idx)$/;"	f	signature:(const git_indexer *idx)
git_indexer_new	src/indexer.c	/^int git_indexer_new($/;"	f	signature:( git_indexer **out, const char *prefix, unsigned int mode, git_odb *odb, git_transfer_progress_cb progress_cb, void *progress_payload)
git_indexwriter	src/index.h	/^} git_indexwriter;$/;"	t	typeref:struct:__anon275
git_indexwriter_cleanup	src/index.c	/^void git_indexwriter_cleanup(git_indexwriter *writer)$/;"	f	signature:(git_indexwriter *writer)
git_indexwriter_commit	src/index.c	/^int git_indexwriter_commit(git_indexwriter *writer)$/;"	f	signature:(git_indexwriter *writer)
git_indexwriter_init	src/index.c	/^int git_indexwriter_init($/;"	f	signature:( git_indexwriter *writer, git_index *index)
git_indexwriter_init_for_operation	src/index.c	/^int git_indexwriter_init_for_operation($/;"	f	signature:( git_indexwriter *writer, git_repository *repo, unsigned int *checkout_strategy)
git_indxentry_flag_t	include/git2/index.h	/^} git_indxentry_flag_t;$/;"	t	typeref:enum:__anon102
git_iterator	src/iterator.h	/^struct git_iterator {$/;"	s
git_iterator	src/iterator.h	/^typedef struct git_iterator git_iterator;$/;"	t	typeref:struct:git_iterator
git_iterator::cb	src/iterator.h	/^	git_iterator_callbacks *cb;$/;"	m	struct:git_iterator	access:public
git_iterator::end	src/iterator.h	/^	char *end;$/;"	m	struct:git_iterator	access:public
git_iterator::end_len	src/iterator.h	/^	size_t end_len;$/;"	m	struct:git_iterator	access:public
git_iterator::ended	src/iterator.h	/^	bool ended;$/;"	m	struct:git_iterator	access:public
git_iterator::entry_srch	src/iterator.h	/^	int (*entry_srch)(const void *key, const void *array_member);$/;"	m	struct:git_iterator	access:public
git_iterator::flags	src/iterator.h	/^	unsigned int flags;$/;"	m	struct:git_iterator	access:public
git_iterator::index	src/iterator.h	/^	git_index *index;$/;"	m	struct:git_iterator	access:public
git_iterator::pathlist	src/iterator.h	/^	git_vector pathlist;$/;"	m	struct:git_iterator	access:public
git_iterator::pathlist_walk_idx	src/iterator.h	/^	size_t pathlist_walk_idx;$/;"	m	struct:git_iterator	access:public
git_iterator::prefixcomp	src/iterator.h	/^	int (*prefixcomp)(const char *str, const char *prefix);$/;"	m	struct:git_iterator	access:public
git_iterator::repo	src/iterator.h	/^	git_repository *repo;$/;"	m	struct:git_iterator	access:public
git_iterator::start	src/iterator.h	/^	char *start;$/;"	m	struct:git_iterator	access:public
git_iterator::start_len	src/iterator.h	/^	size_t start_len;$/;"	m	struct:git_iterator	access:public
git_iterator::started	src/iterator.h	/^	bool started;$/;"	m	struct:git_iterator	access:public
git_iterator::stat_calls	src/iterator.h	/^	size_t stat_calls;$/;"	m	struct:git_iterator	access:public
git_iterator::strcomp	src/iterator.h	/^	int (*strcomp)(const char *a, const char *b);$/;"	m	struct:git_iterator	access:public
git_iterator::strncomp	src/iterator.h	/^	int (*strncomp)(const char *a, const char *b, size_t n);$/;"	m	struct:git_iterator	access:public
git_iterator::type	src/iterator.h	/^	git_iterator_type_t type;$/;"	m	struct:git_iterator	access:public
git_iterator_advance	src/iterator.h	/^GIT_INLINE(int) git_iterator_advance($/;"	f	signature:( const git_index_entry **entry, git_iterator *iter)
git_iterator_advance_into	src/iterator.h	/^GIT_INLINE(int) git_iterator_advance_into($/;"	f	signature:( const git_index_entry **entry, git_iterator *iter)
git_iterator_advance_over	src/iterator.h	/^GIT_INLINE(int) git_iterator_advance_over($/;"	f	signature:( const git_index_entry **entry, git_iterator_status_t *status, git_iterator *iter)
git_iterator_callbacks	src/iterator.h	/^} git_iterator_callbacks;$/;"	t	typeref:struct:__anon256
git_iterator_current	src/iterator.h	/^GIT_INLINE(int) git_iterator_current($/;"	f	signature:( const git_index_entry **entry, git_iterator *iter)
git_iterator_current_is_ignored	src/iterator.c	/^bool git_iterator_current_is_ignored(git_iterator *i)$/;"	f	signature:(git_iterator *i)
git_iterator_current_parent_tree	src/iterator.c	/^int git_iterator_current_parent_tree($/;"	f	signature:( const git_tree **parent_tree, git_iterator *i, size_t depth)
git_iterator_current_tree_entry	src/iterator.c	/^int git_iterator_current_tree_entry($/;"	f	signature:( const git_tree_entry **tree_entry, git_iterator *i)
git_iterator_current_tree_is_ignored	src/iterator.c	/^bool git_iterator_current_tree_is_ignored(git_iterator *i)$/;"	f	signature:(git_iterator *i)
git_iterator_current_workdir_path	src/iterator.c	/^int git_iterator_current_workdir_path(git_buf **out, git_iterator *i)$/;"	f	signature:(git_buf **out, git_iterator *i)
git_iterator_flag_t	src/iterator.h	/^} git_iterator_flag_t;$/;"	t	typeref:enum:__anon253
git_iterator_flags	src/iterator.h	/^GIT_INLINE(git_iterator_flag_t) git_iterator_flags(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_for_filesystem	src/iterator.c	/^int git_iterator_for_filesystem($/;"	f	signature:( git_iterator **out, const char *root, git_iterator_options *options)
git_iterator_for_index	src/iterator.c	/^int git_iterator_for_index($/;"	f	signature:( git_iterator **out, git_repository *repo, git_index *index, git_iterator_options *options)
git_iterator_for_nothing	src/iterator.c	/^int git_iterator_for_nothing($/;"	f	signature:( git_iterator **out, git_iterator_options *options)
git_iterator_for_tree	src/iterator.c	/^int git_iterator_for_tree($/;"	f	signature:( git_iterator **out, git_tree *tree, git_iterator_options *options)
git_iterator_for_workdir	src/iterator.h	/^GIT_INLINE(int) git_iterator_for_workdir($/;"	f	signature:( git_iterator **out, git_repository *repo, git_index *index, git_tree *tree, git_iterator_options *options)
git_iterator_for_workdir_ext	src/iterator.c	/^int git_iterator_for_workdir_ext($/;"	f	signature:( git_iterator **out, git_repository *repo, const char *repo_workdir, git_index *index, git_tree *tree, git_iterator_options *given_opts)
git_iterator_free	src/iterator.c	/^void git_iterator_free(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_ignore_case	src/iterator.h	/^GIT_INLINE(bool) git_iterator_ignore_case(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_index	src/iterator.h	/^GIT_INLINE(git_index *) git_iterator_index(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_options	src/iterator.h	/^} git_iterator_options;$/;"	t	typeref:struct:__anon255
git_iterator_owner	src/iterator.h	/^GIT_INLINE(git_repository *) git_iterator_owner(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_reset	src/iterator.h	/^GIT_INLINE(int) git_iterator_reset(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_reset_range	src/iterator.c	/^int git_iterator_reset_range($/;"	f	signature:( git_iterator *i, const char *start, const char *end)
git_iterator_set_ignore_case	src/iterator.c	/^void git_iterator_set_ignore_case(git_iterator *i, bool ignore_case)$/;"	f	signature:(git_iterator *i, bool ignore_case)
git_iterator_status_t	src/iterator.h	/^} git_iterator_status_t;$/;"	t	typeref:enum:__anon254
git_iterator_type	src/iterator.h	/^GIT_INLINE(git_iterator_type_t) git_iterator_type(git_iterator *iter)$/;"	f	signature:(git_iterator *iter)
git_iterator_type_t	src/iterator.h	/^} git_iterator_type_t;$/;"	t	typeref:enum:__anon252
git_iterator_walk	src/iterator.c	/^int git_iterator_walk($/;"	f	signature:( git_iterator **iterators, size_t cnt, git_iterator_walk_cb cb, void *data)
git_iterator_walk_cb	src/iterator.h	/^typedef int (*git_iterator_walk_cb)($/;"	t
git_libgit2__ssl_ciphers	src/settings.c	/^const char *git_libgit2__ssl_ciphers(void)$/;"	f	signature:(void)
git_libgit2__user_agent	src/settings.c	/^const char *git_libgit2__user_agent(void)$/;"	f	signature:(void)
git_libgit2_features	src/settings.c	/^int git_libgit2_features(void)$/;"	f	signature:(void)
git_libgit2_init	src/global.c	/^int git_libgit2_init(void)$/;"	f	signature:(void)
git_libgit2_opt_t	include/git2/common.h	/^} git_libgit2_opt_t;$/;"	t	typeref:enum:__anon71
git_libgit2_opts	src/settings.c	/^int git_libgit2_opts(int key, ...)$/;"	f	signature:(int key, ...)
git_libgit2_shutdown	src/global.c	/^int git_libgit2_shutdown(void)$/;"	f	signature:(void)
git_libgit2_version	src/settings.c	/^void git_libgit2_version(int *major, int *minor, int *rev)$/;"	f	signature:(int *major, int *minor, int *rev)
git_map	src/map.h	/^} git_map;$/;"	t	typeref:struct:__anon237
git_mempack_dump	src/odb_mempack.c	/^int git_mempack_dump(git_buf *pack, git_repository *repo, git_odb_backend *_backend)$/;"	f	signature:(git_buf *pack, git_repository *repo, git_odb_backend *_backend)
git_mempack_new	src/odb_mempack.c	/^int git_mempack_new(git_odb_backend **out)$/;"	f	signature:(git_odb_backend **out)
git_mempack_reset	src/odb_mempack.c	/^void git_mempack_reset(git_odb_backend *_backend)$/;"	f	signature:(git_odb_backend *_backend)
git_merge	src/merge.c	/^int git_merge($/;"	f	signature:( git_repository *repo, const git_annotated_commit **their_heads, size_t their_heads_len, const git_merge_options *merge_opts, const git_checkout_options *given_checkout_opts)
git_merge__append_conflicts_to_merge_msg	src/merge.c	/^int git_merge__append_conflicts_to_merge_msg($/;"	f	signature:( git_repository *repo, git_index *index)
git_merge__bases_many	src/merge.c	/^int git_merge__bases_many(git_commit_list **out, git_revwalk *walk, git_commit_list_node *one, git_vector *twos)$/;"	f	signature:(git_commit_list **out, git_revwalk *walk, git_commit_list_node *one, git_vector *twos)
git_merge__check_result	src/merge.c	/^int git_merge__check_result(git_repository *repo, git_index *index_new)$/;"	f	signature:(git_repository *repo, git_index *index_new)
git_merge__iterators	src/merge.c	/^int git_merge__iterators($/;"	f	signature:( git_index **out, git_repository *repo, git_iterator *ancestor_iter, git_iterator *our_iter, git_iterator *theirs_iter, const git_merge_options *given_opts)
git_merge__setup	src/merge.c	/^int git_merge__setup($/;"	f	signature:( git_repository *repo, const git_annotated_commit *our_head, const git_annotated_commit *heads[], size_t heads_len)
git_merge_analysis	src/merge.c	/^int git_merge_analysis($/;"	f	signature:( git_merge_analysis_t *analysis_out, git_merge_preference_t *preference_out, git_repository *repo, const git_annotated_commit **their_heads, size_t their_heads_len)
git_merge_analysis_t	include/git2/merge.h	/^} git_merge_analysis_t;$/;"	t	typeref:enum:__anon133
git_merge_base	src/merge.c	/^int git_merge_base(git_oid *out, git_repository *repo, const git_oid *one, const git_oid *two)$/;"	f	signature:(git_oid *out, git_repository *repo, const git_oid *one, const git_oid *two)
git_merge_base_many	src/merge.c	/^int git_merge_base_many(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])$/;"	f	signature:(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])
git_merge_base_octopus	src/merge.c	/^int git_merge_base_octopus(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])$/;"	f	signature:(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])
git_merge_bases	src/merge.c	/^int git_merge_bases(git_oidarray *out, git_repository *repo, const git_oid *one, const git_oid *two)$/;"	f	signature:(git_oidarray *out, git_repository *repo, const git_oid *one, const git_oid *two)
git_merge_bases_many	src/merge.c	/^int git_merge_bases_many(git_oidarray *out, git_repository *repo, size_t length, const git_oid input_array[])$/;"	f	signature:(git_oidarray *out, git_repository *repo, size_t length, const git_oid input_array[])
git_merge_commits	src/merge.c	/^int git_merge_commits($/;"	f	signature:( git_index **out, git_repository *repo, const git_commit *our_commit, const git_commit *their_commit, const git_merge_options *opts)
git_merge_diff	src/merge.h	/^} git_merge_diff;$/;"	t	typeref:struct:__anon325
git_merge_diff_list	src/merge.h	/^} git_merge_diff_list;$/;"	t	typeref:struct:__anon324
git_merge_diff_list__alloc	src/merge.c	/^git_merge_diff_list *git_merge_diff_list__alloc(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_merge_diff_list__find_differences	src/merge.c	/^int git_merge_diff_list__find_differences($/;"	f	signature:( git_merge_diff_list *diff_list, git_iterator *ancestor_iter, git_iterator *our_iter, git_iterator *their_iter)
git_merge_diff_list__find_renames	src/merge.c	/^int git_merge_diff_list__find_renames($/;"	f	signature:( git_repository *repo, git_merge_diff_list *diff_list, const git_merge_options *opts)
git_merge_diff_list__free	src/merge.c	/^void git_merge_diff_list__free(git_merge_diff_list *diff_list)$/;"	f	signature:(git_merge_diff_list *diff_list)
git_merge_diff_type_t	src/merge.h	/^} git_merge_diff_type_t;$/;"	t	typeref:enum:__anon323
git_merge_driver	include/git2/sys/merge.h	/^struct git_merge_driver {$/;"	s
git_merge_driver	include/git2/sys/merge.h	/^typedef struct git_merge_driver git_merge_driver;$/;"	t	typeref:struct:git_merge_driver
git_merge_driver::apply	include/git2/sys/merge.h	/^	git_merge_driver_apply_fn    apply;$/;"	m	struct:git_merge_driver	access:public
git_merge_driver::initialize	include/git2/sys/merge.h	/^	git_merge_driver_init_fn     initialize;$/;"	m	struct:git_merge_driver	access:public
git_merge_driver::shutdown	include/git2/sys/merge.h	/^	git_merge_driver_shutdown_fn shutdown;$/;"	m	struct:git_merge_driver	access:public
git_merge_driver::version	include/git2/sys/merge.h	/^	unsigned int                 version;$/;"	m	struct:git_merge_driver	access:public
git_merge_driver__binary	src/merge_driver.c	/^git_merge_driver git_merge_driver__binary = {$/;"	v
git_merge_driver__binary	src/merge_driver.h	/^extern git_merge_driver git_merge_driver__binary;$/;"	x
git_merge_driver__builtin	src/merge_driver.h	/^typedef struct git_merge_driver__builtin {$/;"	s
git_merge_driver__builtin	src/merge_driver.h	/^} git_merge_driver__builtin;$/;"	t	typeref:struct:git_merge_driver__builtin
git_merge_driver__builtin::base	src/merge_driver.h	/^	git_merge_driver base;$/;"	m	struct:git_merge_driver__builtin	access:public
git_merge_driver__builtin::favor	src/merge_driver.h	/^	git_merge_file_favor_t favor;$/;"	m	struct:git_merge_driver__builtin	access:public
git_merge_driver__builtin_apply	src/merge_driver.c	/^int git_merge_driver__builtin_apply($/;"	f	signature:( git_merge_driver *self, const char **path_out, uint32_t *mode_out, git_buf *merged_out, const char *filter_name, const git_merge_driver_source *src)
git_merge_driver__text	src/merge_driver.c	/^git_merge_driver__builtin git_merge_driver__text = {$/;"	v
git_merge_driver__text	src/merge_driver.h	/^extern git_merge_driver__builtin git_merge_driver__text;$/;"	x
git_merge_driver__union	src/merge_driver.c	/^git_merge_driver__builtin git_merge_driver__union = {$/;"	v
git_merge_driver__union	src/merge_driver.h	/^extern git_merge_driver__builtin git_merge_driver__union;$/;"	x
git_merge_driver_apply_fn	include/git2/sys/merge.h	/^typedef int (*git_merge_driver_apply_fn)($/;"	t
git_merge_driver_entry	src/merge_driver.c	/^} git_merge_driver_entry;$/;"	t	typeref:struct:__anon274	file:
git_merge_driver_for_source	src/merge_driver.c	/^int git_merge_driver_for_source($/;"	f	signature:( const char **name_out, git_merge_driver **driver_out, const git_merge_driver_source *src)
git_merge_driver_global_init	src/merge_driver.c	/^int git_merge_driver_global_init(void)$/;"	f	signature:(void)
git_merge_driver_global_shutdown	src/merge_driver.c	/^static void git_merge_driver_global_shutdown(void)$/;"	f	file:	signature:(void)
git_merge_driver_init_fn	include/git2/sys/merge.h	/^typedef int (*git_merge_driver_init_fn)(git_merge_driver *self);$/;"	t
git_merge_driver_lookup	src/merge_driver.c	/^git_merge_driver *git_merge_driver_lookup(const char *name)$/;"	f	signature:(const char *name)
git_merge_driver_register	src/merge_driver.c	/^int git_merge_driver_register(const char *name, git_merge_driver *driver)$/;"	f	signature:(const char *name, git_merge_driver *driver)
git_merge_driver_shutdown_fn	include/git2/sys/merge.h	/^typedef void (*git_merge_driver_shutdown_fn)(git_merge_driver *self);$/;"	t
git_merge_driver_source	include/git2/sys/merge.h	/^typedef struct git_merge_driver_source git_merge_driver_source;$/;"	t	typeref:struct:git_merge_driver_source
git_merge_driver_source	src/merge_driver.h	/^struct git_merge_driver_source {$/;"	s
git_merge_driver_source::ancestor	src/merge_driver.h	/^	const git_index_entry *ancestor;$/;"	m	struct:git_merge_driver_source	access:public
git_merge_driver_source::default_driver	src/merge_driver.h	/^	const char *default_driver;$/;"	m	struct:git_merge_driver_source	access:public
git_merge_driver_source::file_opts	src/merge_driver.h	/^	const git_merge_file_options *file_opts;$/;"	m	struct:git_merge_driver_source	access:public
git_merge_driver_source::ours	src/merge_driver.h	/^	const git_index_entry *ours;$/;"	m	struct:git_merge_driver_source	access:public
git_merge_driver_source::repo	src/merge_driver.h	/^	git_repository *repo;$/;"	m	struct:git_merge_driver_source	access:public
git_merge_driver_source::theirs	src/merge_driver.h	/^	const git_index_entry *theirs;$/;"	m	struct:git_merge_driver_source	access:public
git_merge_driver_unregister	src/merge_driver.c	/^int git_merge_driver_unregister(const char *name)$/;"	f	signature:(const char *name)
git_merge_file	src/merge_file.c	/^int git_merge_file($/;"	f	signature:( git_merge_file_result *out, const git_merge_file_input *ancestor, const git_merge_file_input *ours, const git_merge_file_input *theirs, const git_merge_file_options *options)
git_merge_file__best_mode	src/merge.h	/^GIT_INLINE(uint32_t) git_merge_file__best_mode($/;"	f	signature:( uint32_t ancestor, uint32_t ours, uint32_t theirs)
git_merge_file__best_path	src/merge.h	/^GIT_INLINE(const char *) git_merge_file__best_path($/;"	f	signature:( const char *ancestor, const char *ours, const char *theirs)
git_merge_file__input_from_index	src/merge_file.c	/^int git_merge_file__input_from_index($/;"	f	signature:( git_merge_file_input *input_out, git_odb_object **odb_object_out, git_odb *odb, const git_index_entry *entry)
git_merge_file__normalize_inputs	src/merge_file.c	/^static git_merge_file_input *git_merge_file__normalize_inputs($/;"	f	file:	signature:( git_merge_file_input *out, const git_merge_file_input *given)
git_merge_file_favor_t	include/git2/merge.h	/^} git_merge_file_favor_t;$/;"	t	typeref:enum:__anon128
git_merge_file_flag_t	include/git2/merge.h	/^} git_merge_file_flag_t;$/;"	t	typeref:enum:__anon129
git_merge_file_from_index	src/merge_file.c	/^int git_merge_file_from_index($/;"	f	signature:( git_merge_file_result *out, git_repository *repo, const git_index_entry *ancestor, const git_index_entry *ours, const git_index_entry *theirs, const git_merge_file_options *options)
git_merge_file_init_input	src/merge.c	/^int git_merge_file_init_input(git_merge_file_input *input, unsigned int version)$/;"	f	signature:(git_merge_file_input *input, unsigned int version)
git_merge_file_init_options	src/merge.c	/^int git_merge_file_init_options($/;"	f	signature:( git_merge_file_options *opts, unsigned int version)
git_merge_file_input	include/git2/merge.h	/^} git_merge_file_input;$/;"	t	typeref:struct:__anon126
git_merge_file_options	include/git2/merge.h	/^} git_merge_file_options;$/;"	t	typeref:struct:__anon130
git_merge_file_result	include/git2/merge.h	/^} git_merge_file_result;$/;"	t	typeref:struct:__anon131
git_merge_file_result_free	src/merge_file.c	/^void git_merge_file_result_free(git_merge_file_result *result)$/;"	f	signature:(git_merge_file_result *result)
git_merge_flag_t	include/git2/merge.h	/^} git_merge_flag_t;$/;"	t	typeref:enum:__anon127
git_merge_init_options	src/merge.c	/^int git_merge_init_options(git_merge_options *opts, unsigned int version)$/;"	f	signature:(git_merge_options *opts, unsigned int version)
git_merge_options	include/git2/merge.h	/^} git_merge_options;$/;"	t	typeref:struct:__anon132
git_merge_preference_t	include/git2/merge.h	/^} git_merge_preference_t;$/;"	t	typeref:enum:__anon134
git_merge_result	include/git2/types.h	/^typedef struct git_merge_result git_merge_result;$/;"	t	typeref:struct:git_merge_result
git_merge_trees	src/merge.c	/^int git_merge_trees($/;"	f	signature:( git_index **out, git_repository *repo, const git_tree *ancestor_tree, const git_tree *our_tree, const git_tree *their_tree, const git_merge_options *merge_opts)
git_message_prettify	src/message.c	/^int git_message_prettify(git_buf *message_out, const char *message, int strip_comments, char comment_char)$/;"	f	signature:(git_buf *message_out, const char *message, int strip_comments, char comment_char)
git_mutex	src/thread-utils.h	139;"	d
git_mutex	src/unix/pthread.h	24;"	d
git_mutex	src/win32/thread.h	/^typedef CRITICAL_SECTION git_mutex;$/;"	t
git_mutex_free	src/thread-utils.h	145;"	d
git_mutex_free	src/unix/pthread.h	28;"	d
git_mutex_free	src/win32/thread.c	/^int git_mutex_free(git_mutex *mutex)$/;"	f	signature:(git_mutex *mutex)
git_mutex_init	src/thread-utils.h	/^GIT_INLINE(int) git_mutex_init(git_mutex *mutex) \\$/;"	f	signature:(git_mutex *mutex)
git_mutex_init	src/unix/pthread.h	25;"	d
git_mutex_init	src/win32/thread.c	/^int git_mutex_init(git_mutex *GIT_RESTRICT mutex)$/;"	f	signature:(git_mutex *GIT_RESTRICT mutex)
git_mutex_lock	src/thread-utils.h	/^GIT_INLINE(int) git_mutex_lock(git_mutex *mutex) \\$/;"	f	signature:(git_mutex *mutex)
git_mutex_lock	src/unix/pthread.h	26;"	d
git_mutex_lock	src/win32/thread.c	/^int git_mutex_lock(git_mutex *mutex)$/;"	f	signature:(git_mutex *mutex)
git_mutex_unlock	src/thread-utils.h	144;"	d
git_mutex_unlock	src/unix/pthread.h	27;"	d
git_mutex_unlock	src/win32/thread.c	/^int git_mutex_unlock(git_mutex *mutex)$/;"	f	signature:(git_mutex *mutex)
git_mwindow	src/mwindow.h	/^typedef struct git_mwindow {$/;"	s
git_mwindow	src/mwindow.h	/^} git_mwindow;$/;"	t	typeref:struct:git_mwindow
git_mwindow::inuse_cnt	src/mwindow.h	/^	size_t inuse_cnt;$/;"	m	struct:git_mwindow	access:public
git_mwindow::last_used	src/mwindow.h	/^	size_t last_used;$/;"	m	struct:git_mwindow	access:public
git_mwindow::next	src/mwindow.h	/^	struct git_mwindow *next;$/;"	m	struct:git_mwindow	typeref:struct:git_mwindow::git_mwindow	access:public
git_mwindow::offset	src/mwindow.h	/^	git_off_t offset;$/;"	m	struct:git_mwindow	access:public
git_mwindow::window_map	src/mwindow.h	/^	git_map window_map;$/;"	m	struct:git_mwindow	access:public
git_mwindow__mapped_limit	src/mwindow.c	/^size_t git_mwindow__mapped_limit = DEFAULT_MAPPED_LIMIT;$/;"	v
git_mwindow__mapped_limit	src/settings.c	/^extern size_t git_mwindow__mapped_limit;$/;"	x
git_mwindow__window_size	src/mwindow.c	/^size_t git_mwindow__window_size = DEFAULT_WINDOW_SIZE;$/;"	v
git_mwindow__window_size	src/settings.c	/^extern size_t git_mwindow__window_size;$/;"	x
git_mwindow_close	src/mwindow.c	/^void git_mwindow_close(git_mwindow **window)$/;"	f	signature:(git_mwindow **window)
git_mwindow_close_lru	src/mwindow.c	/^static int git_mwindow_close_lru(git_mwindow_file *mwf)$/;"	f	file:	signature:(git_mwindow_file *mwf)
git_mwindow_contains	src/mwindow.c	/^int git_mwindow_contains(git_mwindow *win, git_off_t offset)$/;"	f	signature:(git_mwindow *win, git_off_t offset)
git_mwindow_ctl	src/mwindow.h	/^typedef struct git_mwindow_ctl {$/;"	s
git_mwindow_ctl	src/mwindow.h	/^} git_mwindow_ctl;$/;"	t	typeref:struct:git_mwindow_ctl
git_mwindow_ctl::mapped	src/mwindow.h	/^	size_t mapped;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_ctl::mmap_calls	src/mwindow.h	/^	unsigned int mmap_calls;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_ctl::open_windows	src/mwindow.h	/^	unsigned int open_windows;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_ctl::peak_mapped	src/mwindow.h	/^	size_t peak_mapped;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_ctl::peak_open_windows	src/mwindow.h	/^	unsigned int peak_open_windows;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_ctl::used_ctr	src/mwindow.h	/^	size_t used_ctr;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_ctl::windowfiles	src/mwindow.h	/^	git_vector windowfiles;$/;"	m	struct:git_mwindow_ctl	access:public
git_mwindow_file	src/mwindow.h	/^typedef struct git_mwindow_file {$/;"	s
git_mwindow_file	src/mwindow.h	/^} git_mwindow_file;$/;"	t	typeref:struct:git_mwindow_file
git_mwindow_file::fd	src/mwindow.h	/^	int fd;$/;"	m	struct:git_mwindow_file	access:public
git_mwindow_file::size	src/mwindow.h	/^	git_off_t size;$/;"	m	struct:git_mwindow_file	access:public
git_mwindow_file::windows	src/mwindow.h	/^	git_mwindow *windows;$/;"	m	struct:git_mwindow_file	access:public
git_mwindow_file_deregister	src/mwindow.c	/^void git_mwindow_file_deregister(git_mwindow_file *mwf)$/;"	f	signature:(git_mwindow_file *mwf)
git_mwindow_file_register	src/mwindow.c	/^int git_mwindow_file_register(git_mwindow_file *mwf)$/;"	f	signature:(git_mwindow_file *mwf)
git_mwindow_files_free	src/mwindow.c	/^static void git_mwindow_files_free(void)$/;"	f	file:	signature:(void)
git_mwindow_free_all	src/mwindow.c	/^void git_mwindow_free_all(git_mwindow_file *mwf)$/;"	f	signature:(git_mwindow_file *mwf)
git_mwindow_free_all_locked	src/mwindow.c	/^void git_mwindow_free_all_locked(git_mwindow_file *mwf)$/;"	f	signature:(git_mwindow_file *mwf)
git_mwindow_get_pack	src/mwindow.c	/^int git_mwindow_get_pack(struct git_pack_file **out, const char *path)$/;"	f	signature:(struct git_pack_file **out, const char *path)
git_mwindow_global_init	src/mwindow.c	/^int git_mwindow_global_init(void)$/;"	f	signature:(void)
git_mwindow_open	src/mwindow.c	/^unsigned char *git_mwindow_open($/;"	f	signature:( git_mwindow_file *mwf, git_mwindow **cursor, git_off_t offset, size_t extra, unsigned int *left)
git_mwindow_put_pack	src/mwindow.c	/^void git_mwindow_put_pack(struct git_pack_file *pack)$/;"	f	signature:(struct git_pack_file *pack)
git_mwindow_scan_lru	src/mwindow.c	/^static void git_mwindow_scan_lru($/;"	f	file:	signature:( git_mwindow_file *mwf, git_mwindow **lru_w, git_mwindow **lru_l)
git_note	include/git2/types.h	/^typedef struct git_note git_note;$/;"	t	typeref:struct:git_note
git_note	src/notes.h	/^struct git_note {$/;"	s
git_note::author	src/notes.h	/^	git_signature *author;$/;"	m	struct:git_note	access:public
git_note::committer	src/notes.h	/^	git_signature *committer;$/;"	m	struct:git_note	access:public
git_note::id	src/notes.h	/^	git_oid id;$/;"	m	struct:git_note	access:public
git_note::message	src/notes.h	/^	char *message;$/;"	m	struct:git_note	access:public
git_note_author	src/notes.c	/^const git_signature *git_note_author(const git_note *note)$/;"	f	signature:(const git_note *note)
git_note_committer	src/notes.c	/^const git_signature *git_note_committer(const git_note *note)$/;"	f	signature:(const git_note *note)
git_note_create	src/notes.c	/^int git_note_create($/;"	f	signature:( git_oid *out, git_repository *repo, const char *notes_ref_in, const git_signature *author, const git_signature *committer, const git_oid *oid, const char *note, int allow_note_overwrite)
git_note_default_ref	src/notes.c	/^int git_note_default_ref(git_buf *out, git_repository *repo)$/;"	f	signature:(git_buf *out, git_repository *repo)
git_note_foreach	src/notes.c	/^int git_note_foreach($/;"	f	signature:( git_repository *repo, const char *notes_ref, git_note_foreach_cb note_cb, void *payload)
git_note_foreach_cb	include/git2/notes.h	/^typedef int (*git_note_foreach_cb)($/;"	t
git_note_free	src/notes.c	/^void git_note_free(git_note *note)$/;"	f	signature:(git_note *note)
git_note_id	src/notes.c	/^const git_oid * git_note_id(const git_note *note)$/;"	f	signature:(const git_note *note)
git_note_iterator	include/git2/notes.h	/^typedef struct git_iterator git_note_iterator;$/;"	t	typeref:struct:git_iterator
git_note_iterator_free	src/notes.c	/^void git_note_iterator_free(git_note_iterator *it)$/;"	f	signature:(git_note_iterator *it)
git_note_iterator_new	src/notes.c	/^int git_note_iterator_new($/;"	f	signature:( git_note_iterator **it, git_repository *repo, const char *notes_ref_in)
git_note_message	src/notes.c	/^const char * git_note_message(const git_note *note)$/;"	f	signature:(const git_note *note)
git_note_next	src/notes.c	/^int git_note_next($/;"	f	signature:( git_oid* note_id, git_oid* annotated_id, git_note_iterator *it)
git_note_read	src/notes.c	/^int git_note_read(git_note **out, git_repository *repo,$/;"	f	signature:(git_note **out, git_repository *repo, const char *notes_ref_in, const git_oid *oid)
git_note_remove	src/notes.c	/^int git_note_remove(git_repository *repo, const char *notes_ref_in,$/;"	f	signature:(git_repository *repo, const char *notes_ref_in, const git_signature *author, const git_signature *committer, const git_oid *oid)
git_object	include/git2/types.h	/^typedef struct git_object git_object;$/;"	t	typeref:struct:git_object
git_object	src/object.h	/^struct git_object {$/;"	s
git_object::cached	src/object.h	/^	git_cached_obj cached;$/;"	m	struct:git_object	access:public
git_object::repo	src/object.h	/^	git_repository *repo;$/;"	m	struct:git_object	access:public
git_object__free	src/object.c	/^void git_object__free(void *obj)$/;"	f	signature:(void *obj)
git_object__from_odb_object	src/object.c	/^int git_object__from_odb_object($/;"	f	signature:( git_object **object_out, git_repository *repo, git_odb_object *odb_obj, git_otype type)
git_object__is_valid	src/object.c	/^bool git_object__is_valid($/;"	f	signature:( git_repository *repo, const git_oid *id, git_otype expected_type)
git_object__size	src/object.c	/^size_t git_object__size(git_otype type)$/;"	f	signature:(git_otype type)
git_object__strict_input_validation	src/object.c	/^bool git_object__strict_input_validation = true;$/;"	v
git_object__strict_input_validation	src/object.h	/^extern bool git_object__strict_input_validation;$/;"	x
git_object__type_from_filemode	src/object.h	/^GIT_INLINE(git_otype) git_object__type_from_filemode(git_filemode_t mode)$/;"	f	signature:(git_filemode_t mode)
git_object_def	src/object.c	/^} git_object_def;$/;"	t	typeref:struct:__anon340	file:
git_object_dup	src/object.c	/^int git_object_dup(git_object **dest, git_object *source)$/;"	f	signature:(git_object **dest, git_object *source)
git_object_free	src/object.c	/^void git_object_free(git_object *object)$/;"	f	signature:(git_object *object)
git_object_id	src/object.c	/^const git_oid *git_object_id(const git_object *obj)$/;"	f	signature:(const git_object *obj)
git_object_lookup	src/object.c	/^int git_object_lookup(git_object **object_out, git_repository *repo, const git_oid *id, git_otype type) {$/;"	f	signature:(git_object **object_out, git_repository *repo, const git_oid *id, git_otype type)
git_object_lookup_bypath	src/object.c	/^int git_object_lookup_bypath($/;"	f	signature:( git_object **out, const git_object *treeish, const char *path, git_otype type)
git_object_lookup_prefix	src/object.c	/^int git_object_lookup_prefix($/;"	f	signature:( git_object **object_out, git_repository *repo, const git_oid *id, size_t len, git_otype type)
git_object_owner	src/object.c	/^git_repository *git_object_owner(const git_object *obj)$/;"	f	signature:(const git_object *obj)
git_object_peel	src/object.c	/^int git_object_peel($/;"	f	signature:( git_object **peeled, const git_object *object, git_otype target_type)
git_object_short_id	src/object.c	/^int git_object_short_id(git_buf *out, const git_object *obj)$/;"	f	signature:(git_buf *out, const git_object *obj)
git_object_string2type	src/object.c	/^git_otype git_object_string2type(const char *str)$/;"	f	signature:(const char *str)
git_object_type	src/object.c	/^git_otype git_object_type(const git_object *obj)$/;"	f	signature:(const git_object *obj)
git_object_type2string	src/object.c	/^const char *git_object_type2string(git_otype type)$/;"	f	signature:(git_otype type)
git_object_typeisloose	src/object.c	/^int git_object_typeisloose(git_otype type)$/;"	f	signature:(git_otype type)
git_objects_table	src/object.c	/^static git_object_def git_objects_table[] = {$/;"	v	file:
git_odb	include/git2/types.h	/^typedef struct git_odb git_odb;$/;"	t	typeref:struct:git_odb
git_odb	src/odb.h	/^struct git_odb {$/;"	s
git_odb::backends	src/odb.h	/^	git_vector backends;$/;"	m	struct:git_odb	access:public
git_odb::own_cache	src/odb.h	/^	git_cache own_cache;$/;"	m	struct:git_odb	access:public
git_odb::rc	src/odb.h	/^	git_refcount rc;$/;"	m	struct:git_odb	access:public
git_odb__error_ambiguous	src/odb.c	/^int git_odb__error_ambiguous(const char *message)$/;"	f	signature:(const char *message)
git_odb__error_notfound	src/odb.c	/^int git_odb__error_notfound($/;"	f	signature:( const char *message, const git_oid *oid, size_t oid_len)
git_odb__error_unsupported_in_backend	src/odb.c	/^static int git_odb__error_unsupported_in_backend(const char *action)$/;"	f	file:	signature:(const char *action)
git_odb__format_object_header	src/odb.c	/^int git_odb__format_object_header(char *hdr, size_t n, git_off_t obj_len, git_otype obj_type)$/;"	f	signature:(char *hdr, size_t n, git_off_t obj_len, git_otype obj_type)
git_odb__hashfd	src/odb.c	/^int git_odb__hashfd(git_oid *out, git_file fd, size_t size, git_otype type)$/;"	f	signature:(git_oid *out, git_file fd, size_t size, git_otype type)
git_odb__hashfd_filtered	src/odb.c	/^int git_odb__hashfd_filtered($/;"	f	signature:( git_oid *out, git_file fd, size_t size, git_otype type, git_filter_list *fl)
git_odb__hashlink	src/odb.c	/^int git_odb__hashlink(git_oid *out, const char *path)$/;"	f	signature:(git_oid *out, const char *path)
git_odb__hashobj	src/odb.c	/^int git_odb__hashobj(git_oid *id, git_rawobj *obj)$/;"	f	signature:(git_oid *id, git_rawobj *obj)
git_odb__read_header_or_object	src/odb.c	/^int git_odb__read_header_or_object($/;"	f	signature:( git_odb_object **out, size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id)
git_odb_add_alternate	src/odb.c	/^int git_odb_add_alternate(git_odb *odb, git_odb_backend *backend, int priority)$/;"	f	signature:(git_odb *odb, git_odb_backend *backend, int priority)
git_odb_add_backend	src/odb.c	/^int git_odb_add_backend(git_odb *odb, git_odb_backend *backend, int priority)$/;"	f	signature:(git_odb *odb, git_odb_backend *backend, int priority)
git_odb_add_disk_alternate	src/odb.c	/^int git_odb_add_disk_alternate(git_odb *odb, const char *path)$/;"	f	signature:(git_odb *odb, const char *path)
git_odb_backend	include/git2/sys/odb_backend.h	/^struct git_odb_backend {$/;"	s
git_odb_backend	include/git2/types.h	/^typedef struct git_odb_backend git_odb_backend;$/;"	t	typeref:struct:git_odb_backend
git_odb_backend::exists	include/git2/sys/odb_backend.h	/^	int (* exists)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::exists_prefix	include/git2/sys/odb_backend.h	/^	int (* exists_prefix)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::foreach	include/git2/sys/odb_backend.h	/^	int (* foreach)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::free	include/git2/sys/odb_backend.h	/^	void (* free)(git_odb_backend *);$/;"	m	struct:git_odb_backend	access:public
git_odb_backend::freshen	include/git2/sys/odb_backend.h	/^	int (* freshen)(git_odb_backend *, const git_oid *);$/;"	m	struct:git_odb_backend	access:public
git_odb_backend::odb	include/git2/sys/odb_backend.h	/^	git_odb *odb;$/;"	m	struct:git_odb_backend	access:public
git_odb_backend::read	include/git2/sys/odb_backend.h	/^	int (* read)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::read_header	include/git2/sys/odb_backend.h	/^	int (* read_header)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::read_prefix	include/git2/sys/odb_backend.h	/^	int (* read_prefix)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::readstream	include/git2/sys/odb_backend.h	/^	int (* readstream)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::refresh	include/git2/sys/odb_backend.h	/^	int (* refresh)(git_odb_backend *);$/;"	m	struct:git_odb_backend	access:public
git_odb_backend::version	include/git2/sys/odb_backend.h	/^	unsigned int version;$/;"	m	struct:git_odb_backend	access:public
git_odb_backend::write	include/git2/sys/odb_backend.h	/^	int (* write)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::writepack	include/git2/sys/odb_backend.h	/^	int (* writepack)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend::writestream	include/git2/sys/odb_backend.h	/^	int (* writestream)($/;"	m	struct:git_odb_backend	access:public
git_odb_backend_loose	src/odb_loose.c	/^int git_odb_backend_loose($/;"	f	signature:( git_odb_backend **backend_out, const char *objects_dir, int compression_level, int do_fsync, unsigned int dir_mode, unsigned int file_mode)
git_odb_backend_malloc	src/odb.c	/^void *git_odb_backend_malloc(git_odb_backend *backend, size_t len)$/;"	f	signature:(git_odb_backend *backend, size_t len)
git_odb_backend_one_pack	src/odb_pack.c	/^int git_odb_backend_one_pack(git_odb_backend **backend_out, const char *idx)$/;"	f	signature:(git_odb_backend **backend_out, const char *idx)
git_odb_backend_pack	src/odb_pack.c	/^int git_odb_backend_pack(git_odb_backend **backend_out, const char *objects_dir)$/;"	f	signature:(git_odb_backend **backend_out, const char *objects_dir)
git_odb_exists	src/odb.c	/^int git_odb_exists(git_odb *db, const git_oid *id)$/;"	f	signature:(git_odb *db, const git_oid *id)
git_odb_exists_prefix	src/odb.c	/^int git_odb_exists_prefix($/;"	f	signature:( git_oid *out, git_odb *db, const git_oid *short_id, size_t len)
git_odb_expand_id	include/git2/odb.h	/^typedef struct git_odb_expand_id {$/;"	s
git_odb_expand_id	include/git2/odb.h	/^} git_odb_expand_id;$/;"	t	typeref:struct:git_odb_expand_id
git_odb_expand_id::id	include/git2/odb.h	/^	git_oid id;$/;"	m	struct:git_odb_expand_id	access:public
git_odb_expand_id::length	include/git2/odb.h	/^	unsigned short length;$/;"	m	struct:git_odb_expand_id	access:public
git_odb_expand_id::type	include/git2/odb.h	/^	git_otype type;$/;"	m	struct:git_odb_expand_id	access:public
git_odb_expand_ids	src/odb.c	/^int git_odb_expand_ids($/;"	f	signature:( git_odb *db, git_odb_expand_id *ids, size_t count)
git_odb_foreach	src/odb.c	/^int git_odb_foreach(git_odb *db, git_odb_foreach_cb cb, void *payload)$/;"	f	signature:(git_odb *db, git_odb_foreach_cb cb, void *payload)
git_odb_foreach_cb	include/git2/odb.h	/^typedef int (*git_odb_foreach_cb)(const git_oid *id, void *payload);$/;"	t
git_odb_free	src/odb.c	/^void git_odb_free(git_odb *db)$/;"	f	signature:(git_odb *db)
git_odb_get_backend	src/odb.c	/^int git_odb_get_backend(git_odb_backend **out, git_odb *odb, size_t pos)$/;"	f	signature:(git_odb_backend **out, git_odb *odb, size_t pos)
git_odb_hash	src/odb.c	/^int git_odb_hash(git_oid *id, const void *data, size_t len, git_otype type)$/;"	f	signature:(git_oid *id, const void *data, size_t len, git_otype type)
git_odb_hashfile	src/odb.c	/^int git_odb_hashfile(git_oid *out, const char *path, git_otype type)$/;"	f	signature:(git_oid *out, const char *path, git_otype type)
git_odb_init_backend	src/odb.c	/^int git_odb_init_backend(git_odb_backend *backend, unsigned int version)$/;"	f	signature:(git_odb_backend *backend, unsigned int version)
git_odb_new	src/odb.c	/^int git_odb_new(git_odb **out)$/;"	f	signature:(git_odb **out)
git_odb_num_backends	src/odb.c	/^size_t git_odb_num_backends(git_odb *odb)$/;"	f	signature:(git_odb *odb)
git_odb_object	include/git2/types.h	/^typedef struct git_odb_object git_odb_object;$/;"	t	typeref:struct:git_odb_object
git_odb_object	src/odb.h	/^struct git_odb_object {$/;"	s
git_odb_object::buffer	src/odb.h	/^	void *buffer;$/;"	m	struct:git_odb_object	access:public
git_odb_object::cached	src/odb.h	/^	git_cached_obj cached;$/;"	m	struct:git_odb_object	access:public
git_odb_object__free	src/odb.c	/^void git_odb_object__free(void *object)$/;"	f	signature:(void *object)
git_odb_object_data	src/odb.c	/^const void *git_odb_object_data(git_odb_object *object)$/;"	f	signature:(git_odb_object *object)
git_odb_object_dup	src/odb.c	/^int git_odb_object_dup(git_odb_object **dest, git_odb_object *source)$/;"	f	signature:(git_odb_object **dest, git_odb_object *source)
git_odb_object_free	src/odb.c	/^void git_odb_object_free(git_odb_object *object)$/;"	f	signature:(git_odb_object *object)
git_odb_object_id	src/odb.c	/^const git_oid *git_odb_object_id(git_odb_object *object)$/;"	f	signature:(git_odb_object *object)
git_odb_object_size	src/odb.c	/^size_t git_odb_object_size(git_odb_object *object)$/;"	f	signature:(git_odb_object *object)
git_odb_object_type	src/odb.c	/^git_otype git_odb_object_type(git_odb_object *object)$/;"	f	signature:(git_odb_object *object)
git_odb_open	src/odb.c	/^int git_odb_open(git_odb **out, const char *objects_dir)$/;"	f	signature:(git_odb **out, const char *objects_dir)
git_odb_open_rstream	src/odb.c	/^int git_odb_open_rstream(git_odb_stream **stream, git_odb *db, const git_oid *oid)$/;"	f	signature:(git_odb_stream **stream, git_odb *db, const git_oid *oid)
git_odb_open_wstream	src/odb.c	/^int git_odb_open_wstream($/;"	f	signature:( git_odb_stream **stream, git_odb *db, git_off_t size, git_otype type)
git_odb_read	src/odb.c	/^int git_odb_read(git_odb_object **out, git_odb *db, const git_oid *id)$/;"	f	signature:(git_odb_object **out, git_odb *db, const git_oid *id)
git_odb_read_header	src/odb.c	/^int git_odb_read_header(size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id)$/;"	f	signature:(size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id)
git_odb_read_prefix	src/odb.c	/^int git_odb_read_prefix($/;"	f	signature:( git_odb_object **out, git_odb *db, const git_oid *short_id, size_t len)
git_odb_refresh	src/odb.c	/^int git_odb_refresh(struct git_odb *db)$/;"	f	signature:(struct git_odb *db)
git_odb_stream	include/git2/odb_backend.h	/^struct git_odb_stream {$/;"	s
git_odb_stream	include/git2/types.h	/^typedef struct git_odb_stream git_odb_stream;$/;"	t	typeref:struct:git_odb_stream
git_odb_stream::backend	include/git2/odb_backend.h	/^	git_odb_backend *backend;$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::declared_size	include/git2/odb_backend.h	/^	git_off_t declared_size;$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::finalize_write	include/git2/odb_backend.h	/^	int (*finalize_write)(git_odb_stream *stream, const git_oid *oid);$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::free	include/git2/odb_backend.h	/^	void (*free)(git_odb_stream *stream);$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::hash_ctx	include/git2/odb_backend.h	/^	void *hash_ctx;$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::mode	include/git2/odb_backend.h	/^	unsigned int mode;$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::read	include/git2/odb_backend.h	/^	int (*read)(git_odb_stream *stream, char *buffer, size_t len);$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::received_bytes	include/git2/odb_backend.h	/^	git_off_t received_bytes;$/;"	m	struct:git_odb_stream	access:public
git_odb_stream::write	include/git2/odb_backend.h	/^	int (*write)(git_odb_stream *stream, const char *buffer, size_t len);$/;"	m	struct:git_odb_stream	access:public
git_odb_stream__invalid_length	src/odb.c	/^static int git_odb_stream__invalid_length($/;"	f	file:	signature:( const git_odb_stream *stream, const char *action)
git_odb_stream_finalize_write	src/odb.c	/^int git_odb_stream_finalize_write(git_oid *out, git_odb_stream *stream)$/;"	f	signature:(git_oid *out, git_odb_stream *stream)
git_odb_stream_free	src/odb.c	/^void git_odb_stream_free(git_odb_stream *stream)$/;"	f	signature:(git_odb_stream *stream)
git_odb_stream_read	src/odb.c	/^int git_odb_stream_read(git_odb_stream *stream, char *buffer, size_t len)$/;"	f	signature:(git_odb_stream *stream, char *buffer, size_t len)
git_odb_stream_t	include/git2/odb_backend.h	/^} git_odb_stream_t;$/;"	t	typeref:enum:__anon140
git_odb_stream_write	src/odb.c	/^int git_odb_stream_write(git_odb_stream *stream, const char *buffer, size_t len)$/;"	f	signature:(git_odb_stream *stream, const char *buffer, size_t len)
git_odb_write	src/odb.c	/^int git_odb_write($/;"	f	signature:( git_oid *oid, git_odb *db, const void *data, size_t len, git_otype type)
git_odb_write_pack	src/odb.c	/^int git_odb_write_pack(struct git_odb_writepack **out, git_odb *db, git_transfer_progress_cb progress_cb, void *progress_payload)$/;"	f	signature:(struct git_odb_writepack **out, git_odb *db, git_transfer_progress_cb progress_cb, void *progress_payload)
git_odb_writepack	include/git2/odb_backend.h	/^struct git_odb_writepack {$/;"	s
git_odb_writepack	include/git2/types.h	/^typedef struct git_odb_writepack git_odb_writepack;$/;"	t	typeref:struct:git_odb_writepack
git_odb_writepack::append	include/git2/odb_backend.h	/^	int (*append)(git_odb_writepack *writepack, const void *data, size_t size, git_transfer_progress *stats);$/;"	m	struct:git_odb_writepack	access:public
git_odb_writepack::backend	include/git2/odb_backend.h	/^	git_odb_backend *backend;$/;"	m	struct:git_odb_writepack	access:public
git_odb_writepack::commit	include/git2/odb_backend.h	/^	int (*commit)(git_odb_writepack *writepack, git_transfer_progress *stats);$/;"	m	struct:git_odb_writepack	access:public
git_odb_writepack::free	include/git2/odb_backend.h	/^	void (*free)(git_odb_writepack *writepack);$/;"	m	struct:git_odb_writepack	access:public
git_off_t	include/git2/types.h	/^typedef __int64 git_off_t;$/;"	t
git_offmap	src/offmap.h	/^typedef khash_t(off) git_offmap;$/;"	t
git_offmap_alloc	src/offmap.h	26;"	d
git_offmap_clear	src/offmap.h	28;"	d
git_offmap_delete	src/offmap.h	58;"	d
git_offmap_delete_at	src/offmap.h	39;"	d
git_offmap_exists	src/offmap.h	35;"	d
git_offmap_foreach	src/offmap.h	63;"	d
git_offmap_foreach_value	src/offmap.h	64;"	d
git_offmap_free	src/offmap.h	27;"	d
git_offmap_insert	src/offmap.h	41;"	d
git_offmap_insert2	src/offmap.h	48;"	d
git_offmap_lookup_index	src/offmap.h	32;"	d
git_offmap_num_entries	src/offmap.h	30;"	d
git_offmap_set_value_at	src/offmap.h	38;"	d
git_offmap_valid_index	src/offmap.h	33;"	d
git_offmap_value_at	src/offmap.h	37;"	d
git_oid	include/git2/oid.h	/^typedef struct git_oid {$/;"	s
git_oid	include/git2/oid.h	/^} git_oid;$/;"	t	typeref:struct:git_oid
git_oid::id	include/git2/oid.h	/^	unsigned char id[GIT_OID_RAWSZ];$/;"	m	struct:git_oid	access:public
git_oid__cmp	src/oid.h	/^GIT_INLINE(int) git_oid__cmp(const git_oid *a, const git_oid *b)$/;"	f	signature:(const git_oid *a, const git_oid *b)
git_oid__cpy_prefix	src/oid.h	/^GIT_INLINE(void) git_oid__cpy_prefix($/;"	f	signature:( git_oid *out, const git_oid *id, size_t len)
git_oid__hashcmp	src/oid.h	/^GIT_INLINE(int) git_oid__hashcmp(const unsigned char *sha1, const unsigned char *sha2)$/;"	f	signature:(const unsigned char *sha1, const unsigned char *sha2)
git_oid__parse	src/oid.c	/^int git_oid__parse($/;"	f	signature:( git_oid *oid, const char **buffer_out, const char *buffer_end, const char *header)
git_oid__writebuf	src/oid.c	/^void git_oid__writebuf(git_buf *buf, const char *header, const git_oid *oid)$/;"	f	signature:(git_buf *buf, const char *header, const git_oid *oid)
git_oid_allocfmt	src/oid.c	/^char *git_oid_allocfmt(const git_oid *oid)$/;"	f	signature:(const git_oid *oid)
git_oid_cmp	src/oid.c	/^int git_oid_cmp(const git_oid *a, const git_oid *b)$/;"	f	signature:(const git_oid *a, const git_oid *b)
git_oid_cpy	src/oid.c	/^void git_oid_cpy(git_oid *out, const git_oid *src)$/;"	f	signature:(git_oid *out, const git_oid *src)
git_oid_equal	src/oid.c	/^int git_oid_equal(const git_oid *a, const git_oid *b)$/;"	f	signature:(const git_oid *a, const git_oid *b)
git_oid_fmt	src/oid.c	/^void git_oid_fmt(char *str, const git_oid *oid)$/;"	f	signature:(char *str, const git_oid *oid)
git_oid_fromraw	src/oid.c	/^void git_oid_fromraw(git_oid *out, const unsigned char *raw)$/;"	f	signature:(git_oid *out, const unsigned char *raw)
git_oid_fromstr	src/oid.c	/^int git_oid_fromstr(git_oid *out, const char *str)$/;"	f	signature:(git_oid *out, const char *str)
git_oid_fromstrn	src/oid.c	/^int git_oid_fromstrn(git_oid *out, const char *str, size_t length)$/;"	f	signature:(git_oid *out, const char *str, size_t length)
git_oid_fromstrp	src/oid.c	/^int git_oid_fromstrp(git_oid *out, const char *str)$/;"	f	signature:(git_oid *out, const char *str)
git_oid_iszero	src/oid.c	/^int git_oid_iszero(const git_oid *oid_a)$/;"	f	signature:(const git_oid *oid_a)
git_oid_ncmp	src/oid.c	/^int git_oid_ncmp(const git_oid *oid_a, const git_oid *oid_b, size_t len)$/;"	f	signature:(const git_oid *oid_a, const git_oid *oid_b, size_t len)
git_oid_nfmt	src/oid.c	/^void git_oid_nfmt(char *str, size_t n, const git_oid *oid)$/;"	f	signature:(char *str, size_t n, const git_oid *oid)
git_oid_pathfmt	src/oid.c	/^void git_oid_pathfmt(char *str, const git_oid *oid)$/;"	f	signature:(char *str, const git_oid *oid)
git_oid_shorten	include/git2/oid.h	/^typedef struct git_oid_shorten git_oid_shorten;$/;"	t	typeref:struct:git_oid_shorten
git_oid_shorten	src/oid.c	/^struct git_oid_shorten {$/;"	s	file:
git_oid_shorten::full	src/oid.c	/^	int min_length, full;$/;"	m	struct:git_oid_shorten	file:	access:public
git_oid_shorten::min_length	src/oid.c	/^	int min_length, full;$/;"	m	struct:git_oid_shorten	file:	access:public
git_oid_shorten::node_count	src/oid.c	/^	size_t node_count, size;$/;"	m	struct:git_oid_shorten	file:	access:public
git_oid_shorten::nodes	src/oid.c	/^	trie_node *nodes;$/;"	m	struct:git_oid_shorten	file:	access:public
git_oid_shorten::size	src/oid.c	/^	size_t node_count, size;$/;"	m	struct:git_oid_shorten	file:	access:public
git_oid_shorten_add	src/oid.c	/^int git_oid_shorten_add(git_oid_shorten *os, const char *text_oid)$/;"	f	signature:(git_oid_shorten *os, const char *text_oid)
git_oid_shorten_free	src/oid.c	/^void git_oid_shorten_free(git_oid_shorten *os)$/;"	f	signature:(git_oid_shorten *os)
git_oid_shorten_new	src/oid.c	/^git_oid_shorten *git_oid_shorten_new(size_t min_length)$/;"	f	signature:(size_t min_length)
git_oid_strcmp	src/oid.c	/^int git_oid_strcmp(const git_oid *oid_a, const char *str)$/;"	f	signature:(const git_oid *oid_a, const char *str)
git_oid_streq	src/oid.c	/^int git_oid_streq(const git_oid *oid_a, const char *str)$/;"	f	signature:(const git_oid *oid_a, const char *str)
git_oid_tostr	src/oid.c	/^char *git_oid_tostr(char *out, size_t n, const git_oid *oid)$/;"	f	signature:(char *out, size_t n, const git_oid *oid)
git_oid_tostr_s	src/oid.c	/^char *git_oid_tostr_s(const git_oid *oid)$/;"	f	signature:(const git_oid *oid)
git_oidarray	include/git2/oidarray.h	/^typedef struct git_oidarray {$/;"	s
git_oidarray	include/git2/oidarray.h	/^} git_oidarray;$/;"	t	typeref:struct:git_oidarray
git_oidarray::count	include/git2/oidarray.h	/^	size_t count;$/;"	m	struct:git_oidarray	access:public
git_oidarray::ids	include/git2/oidarray.h	/^	git_oid *ids;$/;"	m	struct:git_oidarray	access:public
git_oidarray__from_array	src/oidarray.c	/^void git_oidarray__from_array(git_oidarray *arr, git_array_oid_t *array)$/;"	f	signature:(git_oidarray *arr, git_array_oid_t *array)
git_oidarray_free	src/oidarray.c	/^void git_oidarray_free(git_oidarray *arr)$/;"	f	signature:(git_oidarray *arr)
git_oidmap	src/oidmap.h	/^typedef khash_t(oid) git_oidmap;$/;"	t
git_oidmap_alloc	src/oidmap.h	33;"	d
git_oidmap_clear	src/oidmap.h	52;"	d
git_oidmap_foreach_value	src/oidmap.h	48;"	d
git_oidmap_free	src/oidmap.h	34;"	d
git_oidmap_hash	src/oidmap.h	/^GIT_INLINE(khint_t) git_oidmap_hash(const git_oid *oid)$/;"	f	signature:(const git_oid *oid)
git_oidmap_insert	src/oidmap.h	41;"	d
git_oidmap_lookup_index	src/oidmap.h	36;"	d
git_oidmap_size	src/oidmap.h	50;"	d
git_oidmap_valid_index	src/oidmap.h	37;"	d
git_oidmap_value_at	src/oidmap.h	39;"	d
git_online_cpus	src/thread-utils.c	/^int git_online_cpus(void)$/;"	f	signature:(void)
git_openssl_set_locking	src/openssl_stream.c	/^int git_openssl_set_locking(void)$/;"	f	signature:(void)
git_openssl_stream_global_init	src/openssl_stream.c	/^int git_openssl_stream_global_init(void)$/;"	f	signature:(void)
git_openssl_stream_new	src/openssl_stream.c	/^int git_openssl_stream_new(git_stream **out, const char *host, const char *port)$/;"	f	signature:(git_stream **out, const char *host, const char *port)
git_otype	include/git2/types.h	/^} git_otype;$/;"	t	typeref:enum:__anon143
git_pack_cache	src/pack.h	/^} git_pack_cache;$/;"	t	typeref:struct:__anon295
git_pack_cache_entry	src/pack.h	/^typedef struct git_pack_cache_entry {$/;"	s
git_pack_cache_entry	src/pack.h	/^} git_pack_cache_entry;$/;"	t	typeref:struct:git_pack_cache_entry
git_pack_cache_entry::last_usage	src/pack.h	/^	size_t last_usage; \/* enough? *\/$/;"	m	struct:git_pack_cache_entry	access:public
git_pack_cache_entry::raw	src/pack.h	/^	git_rawobj raw;$/;"	m	struct:git_pack_cache_entry	access:public
git_pack_cache_entry::refcount	src/pack.h	/^	git_atomic refcount;$/;"	m	struct:git_pack_cache_entry	access:public
git_pack_entry	src/pack.h	/^struct git_pack_entry {$/;"	s
git_pack_entry::offset	src/pack.h	/^	git_off_t offset;$/;"	m	struct:git_pack_entry	access:public
git_pack_entry::p	src/pack.h	/^	struct git_pack_file *p;$/;"	m	struct:git_pack_entry	typeref:struct:git_pack_entry::git_pack_file	access:public
git_pack_entry::sha1	src/pack.h	/^	git_oid sha1;$/;"	m	struct:git_pack_entry	access:public
git_pack_entry_find	src/pack.c	/^int git_pack_entry_find($/;"	f	signature:( struct git_pack_entry *e, struct git_pack_file *p, const git_oid *short_oid, size_t len)
git_pack_file	src/mwindow.h	/^struct git_pack_file; \/* just declaration to avoid cyclical includes *\/$/;"	x
git_pack_file	src/pack.h	/^struct git_pack_file {$/;"	s
git_pack_file::bad_object_sha1	src/pack.h	/^	git_oid *bad_object_sha1; \/* array of git_oid *\/$/;"	m	struct:git_pack_file	access:public
git_pack_file::bases	src/pack.h	/^	git_pack_cache bases; \/* delta base cache *\/$/;"	m	struct:git_pack_file	access:public
git_pack_file::has_cache	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file	access:public
git_pack_file::idx_cache	src/pack.h	/^	git_oidmap *idx_cache;$/;"	m	struct:git_pack_file	access:public
git_pack_file::index_map	src/pack.h	/^	git_map index_map;$/;"	m	struct:git_pack_file	access:public
git_pack_file::index_version	src/pack.h	/^	int index_version;$/;"	m	struct:git_pack_file	access:public
git_pack_file::last_freshen	src/pack.h	/^	time_t last_freshen; \/* last time the packfile was freshened *\/$/;"	m	struct:git_pack_file	access:public
git_pack_file::lock	src/pack.h	/^	git_mutex lock; \/* protect updates to mwf and index_map *\/$/;"	m	struct:git_pack_file	access:public
git_pack_file::mtime	src/pack.h	/^	git_time_t mtime;$/;"	m	struct:git_pack_file	access:public
git_pack_file::mwf	src/pack.h	/^	git_mwindow_file mwf;$/;"	m	struct:git_pack_file	access:public
git_pack_file::num_bad_objects	src/pack.h	/^	uint32_t num_bad_objects;$/;"	m	struct:git_pack_file	access:public
git_pack_file::num_objects	src/pack.h	/^	uint32_t num_objects;$/;"	m	struct:git_pack_file	access:public
git_pack_file::oids	src/pack.h	/^	git_oid **oids;$/;"	m	struct:git_pack_file	access:public
git_pack_file::pack_keep	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file	access:public
git_pack_file::pack_local	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file	access:public
git_pack_file::pack_name	src/pack.h	/^	char pack_name[GIT_FLEX_ARRAY]; \/* more *\/$/;"	m	struct:git_pack_file	access:public
git_pack_file::refcount	src/pack.h	/^	git_atomic refcount;$/;"	m	struct:git_pack_file	access:public
git_pack_foreach_entry	src/pack.c	/^int git_pack_foreach_entry($/;"	f	signature:( struct git_pack_file *p, git_odb_foreach_cb cb, void *data)
git_pack_header	src/pack.h	/^struct git_pack_header {$/;"	s
git_pack_header::hdr_entries	src/pack.h	/^	uint32_t hdr_entries;$/;"	m	struct:git_pack_header	access:public
git_pack_header::hdr_signature	src/pack.h	/^	uint32_t hdr_signature;$/;"	m	struct:git_pack_header	access:public
git_pack_header::hdr_version	src/pack.h	/^	uint32_t hdr_version;$/;"	m	struct:git_pack_header	access:public
git_pack_idx_header	src/pack.h	/^struct git_pack_idx_header {$/;"	s
git_pack_idx_header::idx_signature	src/pack.h	/^	uint32_t idx_signature;$/;"	m	struct:git_pack_idx_header	access:public
git_pack_idx_header::idx_version	src/pack.h	/^	uint32_t idx_version;$/;"	m	struct:git_pack_idx_header	access:public
git_packbuilder	include/git2/types.h	/^typedef struct git_packbuilder git_packbuilder;$/;"	t	typeref:struct:git_packbuilder
git_packbuilder	src/pack-objects.h	/^struct git_packbuilder {$/;"	s
git_packbuilder::big_file_threshold	src/pack-objects.h	/^	size_t big_file_threshold;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::cache_max_small_delta_size	src/pack-objects.h	/^	size_t cache_max_small_delta_size;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::cache_mutex	src/pack-objects.h	/^	git_mutex cache_mutex;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::ctx	src/pack-objects.h	/^	git_hash_ctx ctx;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::delta_cache_size	src/pack-objects.h	/^	size_t delta_cache_size;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::done	src/pack-objects.h	/^	bool done;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::last_progress_report_time	src/pack-objects.h	/^	double last_progress_report_time; \/* the time progress was last reported *\/$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::max_delta_cache_size	src/pack-objects.h	/^	size_t max_delta_cache_size;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::nr_alloc	src/pack-objects.h	/^	size_t nr_alloc;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::nr_deltified	src/pack-objects.h	/^		nr_deltified,$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::nr_objects	src/pack-objects.h	/^	uint32_t nr_objects,$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::nr_remaining	src/pack-objects.h	/^		nr_remaining;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::nr_threads	src/pack-objects.h	/^	unsigned int nr_threads; \/* nr of threads to use *\/$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::nr_written	src/pack-objects.h	/^		nr_written,$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::object_ix	src/pack-objects.h	/^	git_oidmap *object_ix;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::object_list	src/pack-objects.h	/^	git_pobject *object_list;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::object_pool	src/pack-objects.h	/^	git_pool object_pool;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::odb	src/pack-objects.h	/^	git_odb *odb; \/* associated object database *\/$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::pack_oid	src/pack-objects.h	/^	git_oid pack_oid; \/* hash of written pack *\/$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::progress_cb	src/pack-objects.h	/^	git_packbuilder_progress progress_cb;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::progress_cb_payload	src/pack-objects.h	/^	void *progress_cb_payload;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::progress_cond	src/pack-objects.h	/^	git_cond progress_cond;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::progress_mutex	src/pack-objects.h	/^	git_mutex progress_mutex;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::repo	src/pack-objects.h	/^	git_repository *repo; \/* associated repository *\/$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::walk_objects	src/pack-objects.h	/^	git_oidmap *walk_objects;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::window_memory_limit	src/pack-objects.h	/^	size_t window_memory_limit;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder::zstream	src/pack-objects.h	/^	git_zstream zstream;$/;"	m	struct:git_packbuilder	access:public
git_packbuilder__cache_lock	src/pack-objects.c	60;"	d	file:
git_packbuilder__cache_unlock	src/pack-objects.c	61;"	d	file:
git_packbuilder__progress_lock	src/pack-objects.c	62;"	d	file:
git_packbuilder__progress_unlock	src/pack-objects.c	63;"	d	file:
git_packbuilder_foreach	src/pack-objects.c	/^int git_packbuilder_foreach(git_packbuilder *pb, int (*cb)(void *buf, size_t size, void *payload), void *payload)$/;"	f	signature:(git_packbuilder *pb, int (*cb)(void *buf, size_t size, void *payload), void *payload)
git_packbuilder_foreach_cb	include/git2/pack.h	/^typedef int (*git_packbuilder_foreach_cb)(void *buf, size_t size, void *payload);$/;"	t
git_packbuilder_free	src/pack-objects.c	/^void git_packbuilder_free(git_packbuilder *pb)$/;"	f	signature:(git_packbuilder *pb)
git_packbuilder_hash	src/pack-objects.c	/^const git_oid *git_packbuilder_hash(git_packbuilder *pb)$/;"	f	signature:(git_packbuilder *pb)
git_packbuilder_insert	src/pack-objects.c	/^int git_packbuilder_insert(git_packbuilder *pb, const git_oid *oid,$/;"	f	signature:(git_packbuilder *pb, const git_oid *oid, const char *name)
git_packbuilder_insert_commit	src/pack-objects.c	/^int git_packbuilder_insert_commit(git_packbuilder *pb, const git_oid *oid)$/;"	f	signature:(git_packbuilder *pb, const git_oid *oid)
git_packbuilder_insert_recur	src/pack-objects.c	/^int git_packbuilder_insert_recur(git_packbuilder *pb, const git_oid *id, const char *name)$/;"	f	signature:(git_packbuilder *pb, const git_oid *id, const char *name)
git_packbuilder_insert_tree	src/pack-objects.c	/^int git_packbuilder_insert_tree(git_packbuilder *pb, const git_oid *oid)$/;"	f	signature:(git_packbuilder *pb, const git_oid *oid)
git_packbuilder_insert_walk	src/pack-objects.c	/^int git_packbuilder_insert_walk(git_packbuilder *pb, git_revwalk *walk)$/;"	f	signature:(git_packbuilder *pb, git_revwalk *walk)
git_packbuilder_new	src/pack-objects.c	/^int git_packbuilder_new(git_packbuilder **out, git_repository *repo)$/;"	f	signature:(git_packbuilder **out, git_repository *repo)
git_packbuilder_object_count	src/pack-objects.c	/^size_t git_packbuilder_object_count(git_packbuilder *pb)$/;"	f	signature:(git_packbuilder *pb)
git_packbuilder_progress	include/git2/pack.h	/^typedef int (*git_packbuilder_progress)($/;"	t
git_packbuilder_set_callbacks	src/pack-objects.c	/^int git_packbuilder_set_callbacks(git_packbuilder *pb, git_packbuilder_progress progress_cb, void *progress_cb_payload)$/;"	f	signature:(git_packbuilder *pb, git_packbuilder_progress progress_cb, void *progress_cb_payload)
git_packbuilder_set_threads	src/pack-objects.c	/^unsigned int git_packbuilder_set_threads(git_packbuilder *pb, unsigned int n)$/;"	f	signature:(git_packbuilder *pb, unsigned int n)
git_packbuilder_stage_t	include/git2/pack.h	/^} git_packbuilder_stage_t;$/;"	t	typeref:enum:__anon113
git_packbuilder_write	src/pack-objects.c	/^int git_packbuilder_write($/;"	f	signature:( git_packbuilder *pb, const char *path, unsigned int mode, git_transfer_progress_cb progress_cb, void *progress_cb_payload)
git_packbuilder_write_buf	src/pack-objects.c	/^int git_packbuilder_write_buf(git_buf *buf, git_packbuilder *pb)$/;"	f	signature:(git_buf *buf, git_packbuilder *pb)
git_packbuilder_written	src/pack-objects.c	/^size_t git_packbuilder_written(git_packbuilder *pb)$/;"	f	signature:(git_packbuilder *pb)
git_packfile__name	src/pack.c	/^int git_packfile__name(char **out, const char *path)$/;"	f	signature:(char **out, const char *path)
git_packfile__object_header	src/pack.c	/^size_t git_packfile__object_header(unsigned char *hdr, size_t size, git_otype type)$/;"	f	signature:(unsigned char *hdr, size_t size, git_otype type)
git_packfile_alloc	src/pack.c	/^int git_packfile_alloc(struct git_pack_file **pack_out, const char *path)$/;"	f	signature:(struct git_pack_file **pack_out, const char *path)
git_packfile_free	src/pack.c	/^void git_packfile_free(struct git_pack_file *p)$/;"	f	signature:(struct git_pack_file *p)
git_packfile_resolve_header	src/pack.c	/^int git_packfile_resolve_header($/;"	f	signature:( size_t *size_p, git_otype *type_p, struct git_pack_file *p, git_off_t offset)
git_packfile_stream	src/pack.h	/^typedef struct git_packfile_stream {$/;"	s
git_packfile_stream	src/pack.h	/^} git_packfile_stream;$/;"	t	typeref:struct:git_packfile_stream
git_packfile_stream::curpos	src/pack.h	/^	git_off_t curpos;$/;"	m	struct:git_packfile_stream	access:public
git_packfile_stream::done	src/pack.h	/^	int done;$/;"	m	struct:git_packfile_stream	access:public
git_packfile_stream::mw	src/pack.h	/^	git_mwindow *mw;$/;"	m	struct:git_packfile_stream	access:public
git_packfile_stream::p	src/pack.h	/^	struct git_pack_file *p;$/;"	m	struct:git_packfile_stream	typeref:struct:git_packfile_stream::git_pack_file	access:public
git_packfile_stream::zstream	src/pack.h	/^	z_stream zstream;$/;"	m	struct:git_packfile_stream	access:public
git_packfile_stream_free	src/pack.c	/^void git_packfile_stream_free(git_packfile_stream *obj)$/;"	f	signature:(git_packfile_stream *obj)
git_packfile_stream_open	src/pack.c	/^int git_packfile_stream_open(git_packfile_stream *obj, struct git_pack_file *p, git_off_t curpos)$/;"	f	signature:(git_packfile_stream *obj, struct git_pack_file *p, git_off_t curpos)
git_packfile_stream_read	src/pack.c	/^ssize_t git_packfile_stream_read(git_packfile_stream *obj, void *buffer, size_t len)$/;"	f	signature:(git_packfile_stream *obj, void *buffer, size_t len)
git_packfile_unpack	src/pack.c	/^int git_packfile_unpack($/;"	f	signature:( git_rawobj *obj, struct git_pack_file *p, git_off_t *obj_offset)
git_packfile_unpack_header	src/pack.c	/^int git_packfile_unpack_header($/;"	f	signature:( size_t *size_p, git_otype *type_p, git_mwindow_file *mwf, git_mwindow **w_curs, git_off_t *curpos)
git_patch	include/git2/patch.h	/^typedef struct git_patch git_patch;$/;"	t	typeref:struct:git_patch
git_patch	src/patch.h	/^struct git_patch {$/;"	s
git_patch::binary	src/patch.h	/^	git_diff_binary binary;$/;"	m	struct:git_patch	access:public
git_patch::content_size	src/patch.h	/^	size_t content_size;$/;"	m	struct:git_patch	access:public
git_patch::context_size	src/patch.h	/^	size_t context_size;$/;"	m	struct:git_patch	access:public
git_patch::delta	src/patch.h	/^	git_diff_delta *delta;$/;"	m	struct:git_patch	access:public
git_patch::diff_opts	src/patch.h	/^	git_diff_options diff_opts;$/;"	m	struct:git_patch	access:public
git_patch::free_fn	src/patch.h	/^	void (*free_fn)(git_patch *patch);$/;"	m	struct:git_patch	access:public
git_patch::header_size	src/patch.h	/^	size_t header_size;$/;"	m	struct:git_patch	access:public
git_patch::hunks	src/patch.h	/^	git_array_t(git_patch_hunk) hunks;$/;"	m	struct:git_patch	access:public
git_patch::lines	src/patch.h	/^	git_array_t(git_diff_line) lines;$/;"	m	struct:git_patch	access:public
git_patch::rc	src/patch.h	/^	git_refcount rc;$/;"	m	struct:git_patch	access:public
git_patch::repo	src/patch.h	/^	git_repository *repo; \/* may be null *\/$/;"	m	struct:git_patch	access:public
git_patch__free	src/patch.c	/^static void git_patch__free(git_patch *patch)$/;"	f	file:	signature:(git_patch *patch)
git_patch__invoke_callbacks	src/patch.c	/^int git_patch__invoke_callbacks($/;"	f	signature:( git_patch *patch, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb line_cb, void *payload)
git_patch_free	src/patch.c	/^void git_patch_free(git_patch *patch)$/;"	f	signature:(git_patch *patch)
git_patch_from_blob_and_buffer	src/patch_generate.c	/^int git_patch_from_blob_and_buffer($/;"	f	signature:( git_patch **out, const git_blob *old_blob, const char *old_path, const char *buf, size_t buflen, const char *buf_path, const git_diff_options *opts)
git_patch_from_blobs	src/patch_generate.c	/^int git_patch_from_blobs($/;"	f	signature:( git_patch **out, const git_blob *old_blob, const char *old_path, const git_blob *new_blob, const char *new_path, const git_diff_options *opts)
git_patch_from_buffer	src/patch_parse.c	/^int git_patch_from_buffer($/;"	f	signature:( git_patch **out, const char *content, size_t content_len, const git_patch_options *opts)
git_patch_from_buffers	src/patch_generate.c	/^int git_patch_from_buffers($/;"	f	signature:( git_patch **out, const void *old_buf, size_t old_len, const char *old_path, const char *new_buf, size_t new_len, const char *new_path, const git_diff_options *opts)
git_patch_from_diff	src/patch.c	/^int git_patch_from_diff(git_patch **out, git_diff *diff, size_t idx)$/;"	f	signature:(git_patch **out, git_diff *diff, size_t idx)
git_patch_generated	src/patch_generate.h	/^struct git_patch_generated {$/;"	s
git_patch_generated	src/patch_generate.h	/^typedef struct git_patch_generated git_patch_generated;$/;"	t	typeref:struct:git_patch_generated
git_patch_generated::base	src/patch_generate.h	/^	struct git_patch base;$/;"	m	struct:git_patch_generated	typeref:struct:git_patch_generated::git_patch	access:public
git_patch_generated::delta_index	src/patch_generate.h	/^	size_t delta_index;$/;"	m	struct:git_patch_generated	access:public
git_patch_generated::diff	src/patch_generate.h	/^	git_diff *diff; \/* for refcount purposes, maybe NULL for blob diffs *\/$/;"	m	struct:git_patch_generated	access:public
git_patch_generated::flags	src/patch_generate.h	/^	uint32_t flags;$/;"	m	struct:git_patch_generated	access:public
git_patch_generated::flattened	src/patch_generate.h	/^	git_pool flattened;$/;"	m	struct:git_patch_generated	access:public
git_patch_generated::nfile	src/patch_generate.h	/^	git_diff_file_content nfile;$/;"	m	struct:git_patch_generated	access:public
git_patch_generated::ofile	src/patch_generate.h	/^	git_diff_file_content ofile;$/;"	m	struct:git_patch_generated	access:public
git_patch_generated_driver	src/patch_generate.c	/^git_diff_driver *git_patch_generated_driver(git_patch_generated *patch)$/;"	f	signature:(git_patch_generated *patch)
git_patch_generated_from_diff	src/patch_generate.c	/^int git_patch_generated_from_diff($/;"	f	signature:( git_patch **patch_ptr, git_diff *diff, size_t idx)
git_patch_generated_new_data	src/patch_generate.c	/^void git_patch_generated_new_data($/;"	f	signature:( char **ptr, size_t *len, git_patch_generated *patch)
git_patch_generated_old_data	src/patch_generate.c	/^void git_patch_generated_old_data($/;"	f	signature:( char **ptr, size_t *len, git_patch_generated *patch)
git_patch_generated_output	src/patch_generate.h	/^struct git_patch_generated_output {$/;"	s
git_patch_generated_output	src/patch_generate.h	/^typedef struct git_patch_generated_output git_patch_generated_output;$/;"	t	typeref:struct:git_patch_generated_output
git_patch_generated_output::binary_cb	src/patch_generate.h	/^	git_diff_binary_cb binary_cb;$/;"	m	struct:git_patch_generated_output	access:public
git_patch_generated_output::data_cb	src/patch_generate.h	/^	git_diff_line_cb data_cb;$/;"	m	struct:git_patch_generated_output	access:public
git_patch_generated_output::diff_cb	src/patch_generate.h	/^	int (*diff_cb)(git_patch_generated_output *output,$/;"	m	struct:git_patch_generated_output	access:public
git_patch_generated_output::error	src/patch_generate.h	/^	int error;$/;"	m	struct:git_patch_generated_output	access:public
git_patch_generated_output::file_cb	src/patch_generate.h	/^	git_diff_file_cb file_cb;$/;"	m	struct:git_patch_generated_output	access:public
git_patch_generated_output::hunk_cb	src/patch_generate.h	/^	git_diff_hunk_cb hunk_cb;$/;"	m	struct:git_patch_generated_output	access:public
git_patch_generated_output::payload	src/patch_generate.h	/^	void *payload;$/;"	m	struct:git_patch_generated_output	access:public
git_patch_get_delta	src/patch.c	/^const git_diff_delta *git_patch_get_delta(const git_patch *patch)$/;"	f	signature:(const git_patch *patch)
git_patch_get_hunk	src/patch.c	/^int git_patch_get_hunk($/;"	f	signature:( const git_diff_hunk **out, size_t *lines_in_hunk, git_patch *patch, size_t hunk_idx)
git_patch_get_line_in_hunk	src/patch.c	/^int git_patch_get_line_in_hunk($/;"	f	signature:( const git_diff_line **out, git_patch *patch, size_t hunk_idx, size_t line_of_hunk)
git_patch_hunk	src/patch.h	/^typedef struct git_patch_hunk {$/;"	s
git_patch_hunk	src/patch.h	/^} git_patch_hunk;$/;"	t	typeref:struct:git_patch_hunk
git_patch_hunk::hunk	src/patch.h	/^	git_diff_hunk hunk;$/;"	m	struct:git_patch_hunk	access:public
git_patch_hunk::line_count	src/patch.h	/^	size_t line_count;$/;"	m	struct:git_patch_hunk	access:public
git_patch_hunk::line_start	src/patch.h	/^	size_t line_start;$/;"	m	struct:git_patch_hunk	access:public
git_patch_hunk_cb	src/patch_generate.c	/^static int git_patch_hunk_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk_, void *payload)
git_patch_line_stats	src/patch.c	/^int git_patch_line_stats($/;"	f	signature:( size_t *total_ctxt, size_t *total_adds, size_t *total_dels, const git_patch *patch)
git_patch_num_hunks	src/patch.c	/^size_t git_patch_num_hunks(const git_patch *patch)$/;"	f	signature:(const git_patch *patch)
git_patch_num_lines_in_hunk	src/patch.c	/^int git_patch_num_lines_in_hunk(const git_patch *patch, size_t hunk_idx)$/;"	f	signature:(const git_patch *patch, size_t hunk_idx)
git_patch_options	src/patch.h	/^} git_patch_options;$/;"	t	typeref:struct:__anon243
git_patch_parse	src/patch_parse.c	/^int git_patch_parse($/;"	f	signature:( git_patch **out, git_patch_parse_ctx *ctx)
git_patch_parse_ctx	src/patch_parse.h	/^} git_patch_parse_ctx;$/;"	t	typeref:struct:__anon327
git_patch_parse_ctx_free	src/patch_parse.c	/^void git_patch_parse_ctx_free(git_patch_parse_ctx *ctx)$/;"	f	signature:(git_patch_parse_ctx *ctx)
git_patch_parse_ctx_init	src/patch_parse.c	/^git_patch_parse_ctx *git_patch_parse_ctx_init($/;"	f	signature:( const char *content, size_t content_len, const git_patch_options *opts)
git_patch_parsed	src/patch_parse.c	/^} git_patch_parsed;$/;"	t	typeref:struct:__anon163	file:
git_patch_parsed_from_diff	src/patch_parse.c	/^int git_patch_parsed_from_diff(git_patch **out, git_diff *d, size_t idx)$/;"	f	signature:(git_patch **out, git_diff *d, size_t idx)
git_patch_print	src/diff_print.c	/^int git_patch_print($/;"	f	signature:( git_patch *patch, git_diff_line_cb print_cb, void *payload)
git_patch_size	src/patch.c	/^size_t git_patch_size($/;"	f	signature:( git_patch *patch, int include_context, int include_hunk_headers, int include_file_headers)
git_patch_to_buf	src/diff_print.c	/^int git_patch_to_buf(git_buf *out, git_patch *patch)$/;"	f	signature:(git_buf *out, git_patch *patch)
git_path_apply_relative	src/path.c	/^int git_path_apply_relative(git_buf *target, const char *relpath)$/;"	f	signature:(git_buf *target, const char *relpath)
git_path_at_end_of_segment	src/path.h	/^GIT_INLINE(int) git_path_at_end_of_segment(const char *p)$/;"	f	signature:(const char *p)
git_path_basename	src/path.c	/^char *git_path_basename(const char *path)$/;"	f	signature:(const char *path)
git_path_basename_offset	src/path.c	/^size_t git_path_basename_offset(git_buf *buffer)$/;"	f	signature:(git_buf *buffer)
git_path_basename_r	src/path.c	/^int git_path_basename_r(git_buf *buffer, const char *path)$/;"	f	signature:(git_buf *buffer, const char *path)
git_path_cmp	src/path.c	/^int git_path_cmp($/;"	f	signature:( const char *name1, size_t len1, int isdir1, const char *name2, size_t len2, int isdir2, int (*compare)(const char *, const char *, size_t))
git_path_common_dirlen	src/path.c	/^size_t git_path_common_dirlen(const char *one, const char *two)$/;"	f	signature:(const char *one, const char *two)
git_path_contains	src/path.c	/^bool git_path_contains(git_buf *dir, const char *item)$/;"	f	signature:(git_buf *dir, const char *item)
git_path_contains_dir	src/path.c	/^bool git_path_contains_dir(git_buf *base, const char *subdir)$/;"	f	signature:(git_buf *base, const char *subdir)
git_path_contains_file	src/path.c	/^bool git_path_contains_file(git_buf *base, const char *file)$/;"	f	signature:(git_buf *base, const char *file)
git_path_direach	src/path.c	/^int git_path_direach($/;"	f	signature:( git_buf *path, uint32_t flags, int (*fn)(void *, git_buf *), void *arg)
git_path_diriter	src/path.h	/^struct git_path_diriter$/;"	s
git_path_diriter	src/path.h	/^typedef struct git_path_diriter git_path_diriter;$/;"	t	typeref:struct:git_path_diriter
git_path_diriter::current	src/path.h	/^	WIN32_FIND_DATAW current;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::dir	src/path.h	/^	DIR *dir;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::flags	src/path.h	/^	unsigned int flags;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::handle	src/path.h	/^	HANDLE handle;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::ic	src/path.h	/^	git_path_iconv_t ic;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::needs_next	src/path.h	/^	unsigned int needs_next;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::parent_len	src/path.h	/^	size_t parent_len;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::parent_utf8_len	src/path.h	/^	size_t parent_utf8_len;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::path	src/path.h	/^	git_buf path;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::path	src/path.h	/^	git_win32_path path;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter::path_utf8	src/path.h	/^	git_buf path_utf8;$/;"	m	struct:git_path_diriter	access:public
git_path_diriter_filename	src/path.c	/^int git_path_diriter_filename($/;"	f	signature:( const char **out, size_t *out_len, git_path_diriter *diriter)
git_path_diriter_free	src/path.c	/^void git_path_diriter_free(git_path_diriter *diriter)$/;"	f	signature:(git_path_diriter *diriter)
git_path_diriter_fullpath	src/path.c	/^int git_path_diriter_fullpath($/;"	f	signature:( const char **out, size_t *out_len, git_path_diriter *diriter)
git_path_diriter_init	src/path.c	/^int git_path_diriter_init($/;"	f	signature:( git_path_diriter *diriter, const char *path, unsigned int flags)
git_path_diriter_next	src/path.c	/^int git_path_diriter_next(git_path_diriter *diriter)$/;"	f	signature:(git_path_diriter *diriter)
git_path_diriter_stat	src/path.c	/^int git_path_diriter_stat(struct stat *out, git_path_diriter *diriter)$/;"	f	signature:(struct stat *out, git_path_diriter *diriter)
git_path_dirload	src/path.c	/^int git_path_dirload($/;"	f	signature:( git_vector *contents, const char *path, size_t prefix_len, uint32_t flags)
git_path_dirname	src/path.c	/^char *git_path_dirname(const char *path)$/;"	f	signature:(const char *path)
git_path_dirname_r	src/path.c	/^int git_path_dirname_r(git_buf *buffer, const char *path)$/;"	f	signature:(git_buf *buffer, const char *path)
git_path_does_fs_decompose_unicode	src/path.c	/^bool git_path_does_fs_decompose_unicode(const char *root)$/;"	f	signature:(const char *root)
git_path_equal_or_prefixed	src/path.h	/^GIT_INLINE(int) git_path_equal_or_prefixed($/;"	f	signature:( const char *parent, const char *child, ssize_t *prefixlen)
git_path_exists	src/path.c	/^bool git_path_exists(const char *path)$/;"	f	signature:(const char *path)
git_path_find_dir	src/path.c	/^int git_path_find_dir(git_buf *dir, const char *path, const char *base)$/;"	f	signature:(git_buf *dir, const char *path, const char *base)
git_path_from_url_or_path	src/path.c	/^int git_path_from_url_or_path(git_buf *local_path_out, const char *url_or_path)$/;"	f	signature:(git_buf *local_path_out, const char *url_or_path)
git_path_fromurl	src/path.c	/^int git_path_fromurl(git_buf *local_path_out, const char *file_url)$/;"	f	signature:(git_buf *local_path_out, const char *file_url)
git_path_has_non_ascii	src/path.c	/^bool git_path_has_non_ascii(const char *path, size_t pathlen)$/;"	f	signature:(const char *path, size_t pathlen)
git_path_iconv	src/path.c	/^int git_path_iconv(git_path_iconv_t *ic, const char **in, size_t *inlen)$/;"	f	signature:(git_path_iconv_t *ic, const char **in, size_t *inlen)
git_path_iconv_clear	src/path.c	/^void git_path_iconv_clear(git_path_iconv_t *ic)$/;"	f	signature:(git_path_iconv_t *ic)
git_path_iconv_init_precompose	src/path.c	/^int git_path_iconv_init_precompose(git_path_iconv_t *ic)$/;"	f	signature:(git_path_iconv_t *ic)
git_path_iconv_t	src/path.h	/^} git_path_iconv_t;$/;"	t	typeref:struct:__anon313
git_path_is_dot_or_dotdot	src/path.h	/^GIT_INLINE(int) git_path_is_dot_or_dotdot(const char *name)$/;"	f	signature:(const char *name)
git_path_is_dot_or_dotdotW	src/path.h	/^GIT_INLINE(int) git_path_is_dot_or_dotdotW(const wchar_t *name)$/;"	f	signature:(const wchar_t *name)
git_path_is_empty_dir	src/path.c	/^bool git_path_is_empty_dir(const char *path)$/;"	f	signature:(const char *path)
git_path_is_local_file_url	src/path.c	/^bool git_path_is_local_file_url(const char *file_url)$/;"	f	signature:(const char *file_url)
git_path_is_relative	src/path.h	/^GIT_INLINE(int) git_path_is_relative(const char *p)$/;"	f	signature:(const char *p)
git_path_isdir	src/path.c	/^bool git_path_isdir(const char *path)$/;"	f	signature:(const char *path)
git_path_isfile	src/path.c	/^bool git_path_isfile(const char *path)$/;"	f	signature:(const char *path)
git_path_islink	src/path.c	/^bool git_path_islink(const char *path)$/;"	f	signature:(const char *path)
git_path_isvalid	src/path.c	/^bool git_path_isvalid($/;"	f	signature:( git_repository *repo, const char *path, unsigned int flags)
git_path_join_unrooted	src/path.c	/^int git_path_join_unrooted($/;"	f	signature:( git_buf *path_out, const char *path, const char *base, ssize_t *root_at)
git_path_lstat	src/path.c	/^int git_path_lstat(const char *path, struct stat *st)$/;"	f	signature:(const char *path, struct stat *st)
git_path_make_relative	src/path.c	/^int git_path_make_relative(git_buf *path, const char *parent)$/;"	f	signature:(git_buf *path, const char *parent)
git_path_mkposix	src/path.h	/^GIT_INLINE(void) git_path_mkposix(char *path)$/;"	f	signature:(char *path)
git_path_mkposix	src/path.h	120;"	d
git_path_normalize_slashes	src/path.c	/^int git_path_normalize_slashes(git_buf *out, const char *path)$/;"	f	signature:(git_buf *out, const char *path)
git_path_prettify	src/path.c	/^int git_path_prettify(git_buf *path_out, const char *path, const char *base)$/;"	f	signature:(git_buf *path_out, const char *path, const char *base)
git_path_prettify_dir	src/path.c	/^int git_path_prettify_dir(git_buf *path_out, const char *path, const char *base)$/;"	f	signature:(git_buf *path_out, const char *path, const char *base)
git_path_resolve_relative	src/path.c	/^int git_path_resolve_relative(git_buf *path, size_t ceiling)$/;"	f	signature:(git_buf *path, size_t ceiling)
git_path_root	src/path.c	/^int git_path_root(const char *path)$/;"	f	signature:(const char *path)
git_path_set_error	src/path.c	/^int git_path_set_error(int errno_value, const char *path, const char *action)$/;"	f	signature:(int errno_value, const char *path, const char *action)
git_path_squash_slashes	src/path.c	/^void git_path_squash_slashes(git_buf *path)$/;"	f	signature:(git_buf *path)
git_path_string_to_dir	src/path.c	/^void git_path_string_to_dir(char* path, size_t size)$/;"	f	signature:(char* path, size_t size)
git_path_to_dir	src/path.c	/^int git_path_to_dir(git_buf *path)$/;"	f	signature:(git_buf *path)
git_path_topdir	src/path.c	/^const char *git_path_topdir(const char *path)$/;"	f	signature:(const char *path)
git_path_trim_slashes	src/path.c	/^void git_path_trim_slashes(git_buf *path)$/;"	f	signature:(git_buf *path)
git_path_walk_up	src/path.c	/^int git_path_walk_up($/;"	f	signature:( git_buf *path, const char *ceiling, int (*cb)(void *data, const char *), void *data)
git_pathspec	include/git2/pathspec.h	/^typedef struct git_pathspec git_pathspec;$/;"	t	typeref:struct:git_pathspec
git_pathspec	src/pathspec.h	/^struct git_pathspec {$/;"	s
git_pathspec::pathspec	src/pathspec.h	/^	git_vector pathspec;$/;"	m	struct:git_pathspec	access:public
git_pathspec::pool	src/pathspec.h	/^	git_pool pool;$/;"	m	struct:git_pathspec	access:public
git_pathspec::prefix	src/pathspec.h	/^	char *prefix;$/;"	m	struct:git_pathspec	access:public
git_pathspec::rc	src/pathspec.h	/^	git_refcount rc;$/;"	m	struct:git_pathspec	access:public
git_pathspec__clear	src/pathspec.c	/^void git_pathspec__clear(git_pathspec *ps)$/;"	f	signature:(git_pathspec *ps)
git_pathspec__init	src/pathspec.c	/^int git_pathspec__init(git_pathspec *ps, const git_strarray *paths)$/;"	f	signature:(git_pathspec *ps, const git_strarray *paths)
git_pathspec__match	src/pathspec.c	/^bool git_pathspec__match($/;"	f	signature:( const git_vector *vspec, const char *path, bool disable_fnmatch, bool casefold, const char **matched_pathspec, size_t *matched_at)
git_pathspec__match_at	src/pathspec.c	/^static int git_pathspec__match_at($/;"	f	file:	signature:( size_t *matched_at, const git_vector *vspec, struct pathspec_match_context *ctxt, const char *path0, const char *path1)
git_pathspec__vfree	src/pathspec.c	/^void git_pathspec__vfree(git_vector *vspec)$/;"	f	signature:(git_vector *vspec)
git_pathspec__vinit	src/pathspec.c	/^int git_pathspec__vinit($/;"	f	signature:( git_vector *vspec, const git_strarray *strspec, git_pool *strpool)
git_pathspec_flag_t	include/git2/pathspec.h	/^} git_pathspec_flag_t;$/;"	t	typeref:enum:__anon136
git_pathspec_free	src/pathspec.c	/^void git_pathspec_free(git_pathspec *ps)$/;"	f	signature:(git_pathspec *ps)
git_pathspec_is_empty	src/pathspec.c	/^bool git_pathspec_is_empty(const git_strarray *pathspec)$/;"	f	signature:(const git_strarray *pathspec)
git_pathspec_match_diff	src/pathspec.c	/^int git_pathspec_match_diff($/;"	f	signature:( git_pathspec_match_list **out, git_diff *diff, uint32_t flags, git_pathspec *ps)
git_pathspec_match_index	src/pathspec.c	/^int git_pathspec_match_index($/;"	f	signature:( git_pathspec_match_list **out, git_index *index, uint32_t flags, git_pathspec *ps)
git_pathspec_match_list	include/git2/pathspec.h	/^typedef struct git_pathspec_match_list git_pathspec_match_list;$/;"	t	typeref:struct:git_pathspec_match_list
git_pathspec_match_list	src/pathspec.h	/^struct git_pathspec_match_list {$/;"	s
git_pathspec_match_list::datatype	src/pathspec.h	/^	int datatype;$/;"	m	struct:git_pathspec_match_list	access:public
git_pathspec_match_list::failures	src/pathspec.h	/^	git_pathspec_string_array_t failures;$/;"	m	struct:git_pathspec_match_list	access:public
git_pathspec_match_list::matches	src/pathspec.h	/^	git_array_t(void *) matches;$/;"	m	struct:git_pathspec_match_list	access:public
git_pathspec_match_list::pathspec	src/pathspec.h	/^	git_pathspec *pathspec;$/;"	m	struct:git_pathspec_match_list	access:public
git_pathspec_match_list::pool	src/pathspec.h	/^	git_pool pool;$/;"	m	struct:git_pathspec_match_list	access:public
git_pathspec_match_list_diff_entry	src/pathspec.c	/^const git_diff_delta *git_pathspec_match_list_diff_entry($/;"	f	signature:( const git_pathspec_match_list *m, size_t pos)
git_pathspec_match_list_entry	src/pathspec.c	/^const char *git_pathspec_match_list_entry($/;"	f	signature:( const git_pathspec_match_list *m, size_t pos)
git_pathspec_match_list_entrycount	src/pathspec.c	/^size_t git_pathspec_match_list_entrycount($/;"	f	signature:( const git_pathspec_match_list *m)
git_pathspec_match_list_failed_entry	src/pathspec.c	/^const char * git_pathspec_match_list_failed_entry($/;"	f	signature:( const git_pathspec_match_list *m, size_t pos)
git_pathspec_match_list_failed_entrycount	src/pathspec.c	/^size_t git_pathspec_match_list_failed_entrycount($/;"	f	signature:( const git_pathspec_match_list *m)
git_pathspec_match_list_free	src/pathspec.c	/^void git_pathspec_match_list_free(git_pathspec_match_list *m)$/;"	f	signature:(git_pathspec_match_list *m)
git_pathspec_match_tree	src/pathspec.c	/^int git_pathspec_match_tree($/;"	f	signature:( git_pathspec_match_list **out, git_tree *tree, uint32_t flags, git_pathspec *ps)
git_pathspec_match_workdir	src/pathspec.c	/^int git_pathspec_match_workdir($/;"	f	signature:( git_pathspec_match_list **out, git_repository *repo, uint32_t flags, git_pathspec *ps)
git_pathspec_matches_path	src/pathspec.c	/^int git_pathspec_matches_path($/;"	f	signature:( const git_pathspec *ps, uint32_t flags, const char *path)
git_pathspec_new	src/pathspec.c	/^int git_pathspec_new(git_pathspec **out, const git_strarray *pathspec)$/;"	f	signature:(git_pathspec **out, const git_strarray *pathspec)
git_pathspec_prefix	src/pathspec.c	/^char *git_pathspec_prefix(const git_strarray *pathspec)$/;"	f	signature:(const git_strarray *pathspec)
git_pathspec_string_array_t	src/pathspec.h	/^typedef git_array_t(char *) git_pathspec_string_array_t;$/;"	t
git_pkt	src/transports/smart.h	/^} git_pkt;$/;"	t	typeref:struct:__anon184
git_pkt_ack	src/transports/smart.h	/^} git_pkt_ack;$/;"	t	typeref:struct:__anon186
git_pkt_buffer_done	src/transports/smart_pkt.c	/^int git_pkt_buffer_done(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_pkt_buffer_flush	src/transports/smart_pkt.c	/^int git_pkt_buffer_flush(git_buf *buf)$/;"	f	signature:(git_buf *buf)
git_pkt_buffer_have	src/transports/smart_pkt.c	/^int git_pkt_buffer_have(git_oid *oid, git_buf *buf)$/;"	f	signature:(git_oid *oid, git_buf *buf)
git_pkt_buffer_wants	src/transports/smart_pkt.c	/^int git_pkt_buffer_wants($/;"	f	signature:( const git_remote_head * const *refs, size_t count, transport_smart_caps *caps, git_buf *buf)
git_pkt_cmd	src/transports/smart.h	/^struct git_pkt_cmd {$/;"	s
git_pkt_cmd::cmd	src/transports/smart.h	/^	char *cmd;$/;"	m	struct:git_pkt_cmd	access:public
git_pkt_cmd::host	src/transports/smart.h	/^	char *host;$/;"	m	struct:git_pkt_cmd	access:public
git_pkt_cmd::path	src/transports/smart.h	/^	char *path;$/;"	m	struct:git_pkt_cmd	access:public
git_pkt_cmd::type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:git_pkt_cmd	typeref:enum:git_pkt_cmd::git_pkt_type	access:public
git_pkt_comment	src/transports/smart.h	/^} git_pkt_comment;$/;"	t	typeref:struct:__anon187
git_pkt_data	src/transports/smart.h	/^} git_pkt_data;$/;"	t	typeref:struct:__anon188
git_pkt_err	src/transports/smart.h	/^} git_pkt_err;$/;"	t	typeref:struct:__anon189
git_pkt_free	src/transports/smart_pkt.c	/^void git_pkt_free(git_pkt *pkt)$/;"	f	signature:(git_pkt *pkt)
git_pkt_ng	src/transports/smart.h	/^} git_pkt_ng;$/;"	t	typeref:struct:__anon191
git_pkt_ok	src/transports/smart.h	/^} git_pkt_ok;$/;"	t	typeref:struct:__anon190
git_pkt_parse_line	src/transports/smart_pkt.c	/^int git_pkt_parse_line($/;"	f	signature:( git_pkt **head, const char *line, const char **out, size_t bufflen)
git_pkt_progress	src/transports/smart.h	/^typedef git_pkt_data git_pkt_progress;$/;"	t
git_pkt_ref	src/transports/smart.h	/^} git_pkt_ref;$/;"	t	typeref:struct:__anon185
git_pkt_type	src/transports/smart.h	/^enum git_pkt_type {$/;"	g
git_pkt_unpack	src/transports/smart.h	/^} git_pkt_unpack;$/;"	t	typeref:struct:__anon192
git_pobject	src/pack-objects.h	/^typedef struct git_pobject {$/;"	s
git_pobject	src/pack-objects.h	/^} git_pobject;$/;"	t	typeref:struct:git_pobject
git_pobject::delta	src/pack-objects.h	/^	struct git_pobject *delta; \/* delta base object *\/$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject	access:public
git_pobject::delta_child	src/pack-objects.h	/^	struct git_pobject *delta_child; \/* deltified objects who bases me *\/$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject	access:public
git_pobject::delta_data	src/pack-objects.h	/^	void *delta_data;$/;"	m	struct:git_pobject	access:public
git_pobject::delta_sibling	src/pack-objects.h	/^	struct git_pobject *delta_sibling; \/* other deltified objects$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject	access:public
git_pobject::delta_size	src/pack-objects.h	/^	size_t delta_size;$/;"	m	struct:git_pobject	access:public
git_pobject::filled	src/pack-objects.h	/^	    filled:1;$/;"	m	struct:git_pobject	access:public
git_pobject::hash	src/pack-objects.h	/^	unsigned int hash; \/* name hint hash *\/$/;"	m	struct:git_pobject	access:public
git_pobject::id	src/pack-objects.h	/^	git_oid id;$/;"	m	struct:git_pobject	access:public
git_pobject::offset	src/pack-objects.h	/^	git_off_t offset;$/;"	m	struct:git_pobject	access:public
git_pobject::recursing	src/pack-objects.h	/^	    recursing:1,$/;"	m	struct:git_pobject	access:public
git_pobject::size	src/pack-objects.h	/^	size_t size;$/;"	m	struct:git_pobject	access:public
git_pobject::tagged	src/pack-objects.h	/^	    tagged:1,$/;"	m	struct:git_pobject	access:public
git_pobject::type	src/pack-objects.h	/^	git_otype type;$/;"	m	struct:git_pobject	access:public
git_pobject::written	src/pack-objects.h	/^	int written:1,$/;"	m	struct:git_pobject	access:public
git_pobject::z_delta_size	src/pack-objects.h	/^	size_t z_delta_size;$/;"	m	struct:git_pobject	access:public
git_pool	src/pool.h	/^} git_pool;$/;"	t	typeref:struct:__anon306
git_pool	src/pool.h	/^} git_pool;$/;"	t	typeref:struct:__anon307
git_pool__open_pages	src/pool.c	/^uint32_t git_pool__open_pages(git_pool *pool)$/;"	f	signature:(git_pool *pool)
git_pool__ptr_cmp	src/pool.c	/^static int git_pool__ptr_cmp(const void * a, const void * b)$/;"	f	file:	signature:(const void * a, const void * b)
git_pool__ptr_in_pool	src/pool.c	/^bool git_pool__ptr_in_pool(git_pool *pool, void *ptr)$/;"	f	signature:(git_pool *pool, void *ptr)
git_pool__system_page_size	src/pool.c	/^uint32_t git_pool__system_page_size(void)$/;"	f	signature:(void)
git_pool_clear	src/pool.c	/^void git_pool_clear(git_pool *pool)$/;"	f	signature:(git_pool *pool)
git_pool_init	src/pool.c	/^void git_pool_init(git_pool *pool, uint32_t item_size)$/;"	f	signature:(git_pool *pool, uint32_t item_size)
git_pool_malloc	src/pool.c	/^void *git_pool_malloc(git_pool *pool, uint32_t items)$/;"	f	signature:(git_pool *pool, uint32_t items)
git_pool_mallocz	src/pool.c	/^void *git_pool_mallocz(git_pool *pool, uint32_t items)$/;"	f	signature:(git_pool *pool, uint32_t items)
git_pool_page	src/pool.c	/^struct git_pool_page {$/;"	s	file:
git_pool_page	src/pool.h	/^typedef struct git_pool_page git_pool_page;$/;"	t	typeref:struct:git_pool_page
git_pool_page::avail	src/pool.c	/^	uint32_t avail;$/;"	m	struct:git_pool_page	file:	access:public
git_pool_page::next	src/pool.c	/^	git_pool_page *next;$/;"	m	struct:git_pool_page	file:	access:public
git_pool_page::size	src/pool.c	/^	uint32_t size;$/;"	m	struct:git_pool_page	file:	access:public
git_pool_strcat	src/pool.c	/^char *git_pool_strcat(git_pool *pool, const char *a, const char *b)$/;"	f	signature:(git_pool *pool, const char *a, const char *b)
git_pool_strdup	src/pool.c	/^char *git_pool_strdup(git_pool *pool, const char *str)$/;"	f	signature:(git_pool *pool, const char *str)
git_pool_strdup_safe	src/pool.c	/^char *git_pool_strdup_safe(git_pool *pool, const char *str)$/;"	f	signature:(git_pool *pool, const char *str)
git_pool_strndup	src/pool.c	/^char *git_pool_strndup(git_pool *pool, const char *str, size_t n)$/;"	f	signature:(git_pool *pool, const char *str, size_t n)
git_pool_swap	src/pool.c	/^void git_pool_swap(git_pool *a, git_pool *b)$/;"	f	signature:(git_pool *a, git_pool *b)
git_pqueue	src/pqueue.h	/^typedef git_vector git_pqueue;$/;"	t
git_pqueue_clear	src/pqueue.h	35;"	d
git_pqueue_free	src/pqueue.h	34;"	d
git_pqueue_get	src/pqueue.h	37;"	d
git_pqueue_init	src/pqueue.c	/^int git_pqueue_init($/;"	f	signature:( git_pqueue *pq, uint32_t flags, size_t init_size, git_vector_cmp cmp)
git_pqueue_insert	src/pqueue.c	/^int git_pqueue_insert(git_pqueue *pq, void *item)$/;"	f	signature:(git_pqueue *pq, void *item)
git_pqueue_pop	src/pqueue.c	/^void *git_pqueue_pop(git_pqueue *pq)$/;"	f	signature:(git_pqueue *pq)
git_pqueue_reverse	src/pqueue.h	38;"	d
git_pqueue_size	src/pqueue.h	36;"	d
git_proto_stream	src/transports/git.c	/^} git_proto_stream;$/;"	t	typeref:struct:__anon197	file:
git_proto_stream_alloc	src/transports/git.c	/^static int git_proto_stream_alloc($/;"	f	file:	signature:( git_subtransport *t, const char *url, const char *cmd, const char *host, const char *port, git_smart_subtransport_stream **stream)
git_proto_stream_free	src/transports/git.c	/^static void git_proto_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:	signature:(git_smart_subtransport_stream *stream)
git_proto_stream_read	src/transports/git.c	/^static int git_proto_stream_read($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, char *buffer, size_t buf_size, size_t *bytes_read)
git_proto_stream_write	src/transports/git.c	/^static int git_proto_stream_write($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
git_proxy_init_options	src/proxy.c	/^int git_proxy_init_options(git_proxy_options *opts, unsigned int version)$/;"	f	signature:(git_proxy_options *opts, unsigned int version)
git_proxy_options	include/git2/proxy.h	/^} git_proxy_options;$/;"	t	typeref:struct:__anon125
git_proxy_options_dup	src/proxy.c	/^int git_proxy_options_dup(git_proxy_options *tgt, const git_proxy_options *src)$/;"	f	signature:(git_proxy_options *tgt, const git_proxy_options *src)
git_proxy_t	include/git2/proxy.h	/^} git_proxy_t;$/;"	t	typeref:enum:__anon124
git_push	include/git2/types.h	/^typedef struct git_push git_push;$/;"	t	typeref:struct:git_push
git_push	src/push.h	/^struct git_push {$/;"	s
git_push::custom_headers	src/push.h	/^	const git_strarray *custom_headers;$/;"	m	struct:git_push	access:public
git_push::pb	src/push.h	/^	git_packbuilder *pb;$/;"	m	struct:git_push	access:public
git_push::pb_parallelism	src/push.h	/^	unsigned pb_parallelism;$/;"	m	struct:git_push	access:public
git_push::remote	src/push.h	/^	git_remote *remote;$/;"	m	struct:git_push	access:public
git_push::repo	src/push.h	/^	git_repository *repo;$/;"	m	struct:git_push	access:public
git_push::report_status	src/push.h	/^	bool report_status;$/;"	m	struct:git_push	access:public
git_push::specs	src/push.h	/^	git_vector specs;$/;"	m	struct:git_push	access:public
git_push::status	src/push.h	/^	git_vector status;$/;"	m	struct:git_push	access:public
git_push::unpack_ok	src/push.h	/^	bool unpack_ok;$/;"	m	struct:git_push	access:public
git_push::updates	src/push.h	/^	git_vector updates;$/;"	m	struct:git_push	access:public
git_push_add_refspec	src/push.c	/^int git_push_add_refspec(git_push *push, const char *refspec)$/;"	f	signature:(git_push *push, const char *refspec)
git_push_finish	src/push.c	/^int git_push_finish(git_push *push, const git_remote_callbacks *callbacks)$/;"	f	signature:(git_push *push, const git_remote_callbacks *callbacks)
git_push_free	src/push.c	/^void git_push_free(git_push *push)$/;"	f	signature:(git_push *push)
git_push_init_options	src/push.c	/^int git_push_init_options(git_push_options *opts, unsigned int version)$/;"	f	signature:(git_push_options *opts, unsigned int version)
git_push_negotiation	include/git2/remote.h	/^typedef int (*git_push_negotiation)(const git_push_update **updates, size_t len, void *payload);$/;"	t
git_push_new	src/push.c	/^int git_push_new(git_push **out, git_remote *remote)$/;"	f	signature:(git_push **out, git_remote *remote)
git_push_options	include/git2/remote.h	/^} git_push_options;$/;"	t	typeref:struct:__anon56
git_push_set_options	src/push.c	/^int git_push_set_options(git_push *push, const git_push_options *opts)$/;"	f	signature:(git_push *push, const git_push_options *opts)
git_push_status_foreach	src/push.c	/^int git_push_status_foreach(git_push *push,$/;"	f	signature:(git_push *push, int (*cb)(const char *ref, const char *msg, void *data), void *data)
git_push_status_free	src/push.c	/^void git_push_status_free(push_status *status)$/;"	f	signature:(push_status *status)
git_push_transfer_progress	include/git2/remote.h	/^typedef int (*git_push_transfer_progress)($/;"	t
git_push_update	include/git2/remote.h	/^} git_push_update;$/;"	t	typeref:struct:__anon52
git_push_update_tips	src/push.c	/^int git_push_update_tips(git_push *push, const git_remote_callbacks *callbacks)$/;"	f	signature:(git_push *push, const git_remote_callbacks *callbacks)
git_rawobj	src/odb.h	/^} git_rawobj;$/;"	t	typeref:struct:__anon162
git_rebase	include/git2/types.h	/^typedef struct git_rebase git_rebase;$/;"	t	typeref:struct:git_rebase
git_rebase	src/rebase.c	/^struct git_rebase {$/;"	s	file:
git_rebase::current	src/rebase.c	/^	size_t current;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::head_detached	src/rebase.c	/^	int head_detached : 1,$/;"	m	struct:git_rebase	file:	access:public
git_rebase::index	src/rebase.c	/^	git_index *index;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::inmemory	src/rebase.c	/^		inmemory : 1,$/;"	m	struct:git_rebase	file:	access:public
git_rebase::last_commit	src/rebase.c	/^	git_commit *last_commit;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::onto_id	src/rebase.c	/^	git_oid onto_id;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::onto_name	src/rebase.c	/^	char *onto_name;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::options	src/rebase.c	/^	git_rebase_options options;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::orig_head_id	src/rebase.c	/^	git_oid orig_head_id;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::orig_head_name	src/rebase.c	/^	char *orig_head_name;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::quiet	src/rebase.c	/^		quiet : 1,$/;"	m	struct:git_rebase	file:	access:public
git_rebase::repo	src/rebase.c	/^	git_repository *repo;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::started	src/rebase.c	/^		started : 1;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::state_path	src/rebase.c	/^	char *state_path;$/;"	m	struct:git_rebase	file:	access:public
git_rebase::type	src/rebase.c	/^	git_rebase_type_t type;$/;"	m	struct:git_rebase	file:	access:public
git_rebase_abort	src/rebase.c	/^int git_rebase_abort(git_rebase *rebase)$/;"	f	signature:(git_rebase *rebase)
git_rebase_commit	src/rebase.c	/^int git_rebase_commit($/;"	f	signature:( git_oid *id, git_rebase *rebase, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message)
git_rebase_finish	src/rebase.c	/^int git_rebase_finish($/;"	f	signature:( git_rebase *rebase, const git_signature *signature)
git_rebase_free	src/rebase.c	/^void git_rebase_free(git_rebase *rebase)$/;"	f	signature:(git_rebase *rebase)
git_rebase_init	src/rebase.c	/^int git_rebase_init($/;"	f	signature:( git_rebase **out, git_repository *repo, const git_annotated_commit *branch, const git_annotated_commit *upstream, const git_annotated_commit *onto, const git_rebase_options *given_opts)
git_rebase_init_options	src/rebase.c	/^int git_rebase_init_options(git_rebase_options *opts, unsigned int version)$/;"	f	signature:(git_rebase_options *opts, unsigned int version)
git_rebase_inmemory_index	src/rebase.c	/^int git_rebase_inmemory_index($/;"	f	signature:( git_index **out, git_rebase *rebase)
git_rebase_next	src/rebase.c	/^int git_rebase_next($/;"	f	signature:( git_rebase_operation **out, git_rebase *rebase)
git_rebase_open	src/rebase.c	/^int git_rebase_open($/;"	f	signature:( git_rebase **out, git_repository *repo, const git_rebase_options *given_opts)
git_rebase_operation	include/git2/rebase.h	/^} git_rebase_operation;$/;"	t	typeref:struct:__anon69
git_rebase_operation_byindex	src/rebase.c	/^git_rebase_operation *git_rebase_operation_byindex(git_rebase *rebase, size_t idx)$/;"	f	signature:(git_rebase *rebase, size_t idx)
git_rebase_operation_current	src/rebase.c	/^size_t git_rebase_operation_current(git_rebase *rebase)$/;"	f	signature:(git_rebase *rebase)
git_rebase_operation_entrycount	src/rebase.c	/^size_t git_rebase_operation_entrycount(git_rebase *rebase)$/;"	f	signature:(git_rebase *rebase)
git_rebase_operation_t	include/git2/rebase.h	/^} git_rebase_operation_t;$/;"	t	typeref:enum:__anon68
git_rebase_options	include/git2/rebase.h	/^} git_rebase_options;$/;"	t	typeref:struct:__anon67
git_rebase_type_t	src/rebase.c	/^} git_rebase_type_t;$/;"	t	typeref:enum:__anon250	file:
git_ref_t	include/git2/types.h	/^} git_ref_t;$/;"	t	typeref:enum:__anon144
git_refcache	src/refdb_fs.h	/^} git_refcache;$/;"	t	typeref:struct:__anon221
git_refcount	src/util.h	/^} git_refcount;$/;"	t	typeref:struct:__anon199
git_refcount_freeptr	src/util.h	/^typedef void (*git_refcount_freeptr)(void *r);$/;"	t
git_refdb	include/git2/types.h	/^typedef struct git_refdb git_refdb;$/;"	t	typeref:struct:git_refdb
git_refdb	src/refdb.h	/^struct git_refdb {$/;"	s
git_refdb::backend	src/refdb.h	/^	git_refdb_backend *backend;$/;"	m	struct:git_refdb	access:public
git_refdb::rc	src/refdb.h	/^	git_refcount rc;$/;"	m	struct:git_refdb	access:public
git_refdb::repo	src/refdb.h	/^	git_repository *repo;$/;"	m	struct:git_refdb	access:public
git_refdb__free	src/refdb.c	/^void git_refdb__free(git_refdb *db)$/;"	f	signature:(git_refdb *db)
git_refdb_backend	include/git2/sys/refdb_backend.h	/^struct git_refdb_backend {$/;"	s
git_refdb_backend	include/git2/types.h	/^typedef struct git_refdb_backend git_refdb_backend;$/;"	t	typeref:struct:git_refdb_backend
git_refdb_backend::compress	include/git2/sys/refdb_backend.h	/^	int (*compress)(git_refdb_backend *backend);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::del	include/git2/sys/refdb_backend.h	/^	int (*del)(git_refdb_backend *backend, const char *ref_name, const git_oid *old_id, const char *old_target);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::ensure_log	include/git2/sys/refdb_backend.h	/^	int (*ensure_log)(git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::exists	include/git2/sys/refdb_backend.h	/^	int (*exists)($/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::free	include/git2/sys/refdb_backend.h	/^	void (*free)(git_refdb_backend *backend);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::has_log	include/git2/sys/refdb_backend.h	/^	int (*has_log)(git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::iterator	include/git2/sys/refdb_backend.h	/^	int (*iterator)($/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::lock	include/git2/sys/refdb_backend.h	/^	int (*lock)(void **payload_out, git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::lookup	include/git2/sys/refdb_backend.h	/^	int (*lookup)($/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::reflog_delete	include/git2/sys/refdb_backend.h	/^	int (*reflog_delete)(git_refdb_backend *backend, const char *name);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::reflog_read	include/git2/sys/refdb_backend.h	/^	int (*reflog_read)(git_reflog **out, git_refdb_backend *backend, const char *name);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::reflog_rename	include/git2/sys/refdb_backend.h	/^	int (*reflog_rename)(git_refdb_backend *_backend, const char *old_name, const char *new_name);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::reflog_write	include/git2/sys/refdb_backend.h	/^	int (*reflog_write)(git_refdb_backend *backend, git_reflog *reflog);$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::rename	include/git2/sys/refdb_backend.h	/^	int (*rename)($/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::unlock	include/git2/sys/refdb_backend.h	/^	int (*unlock)(git_refdb_backend *backend, void *payload, int success, int update_reflog,$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::version	include/git2/sys/refdb_backend.h	/^	unsigned int version;$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend::write	include/git2/sys/refdb_backend.h	/^	int (*write)(git_refdb_backend *backend,$/;"	m	struct:git_refdb_backend	access:public
git_refdb_backend_fs	src/refdb_fs.c	/^int git_refdb_backend_fs($/;"	f	signature:( git_refdb_backend **backend_out, git_repository *repository)
git_refdb_compress	src/refdb.c	/^int git_refdb_compress(git_refdb *db)$/;"	f	signature:(git_refdb *db)
git_refdb_delete	src/refdb.c	/^int git_refdb_delete(struct git_refdb *db, const char *ref_name, const git_oid *old_id, const char *old_target)$/;"	f	signature:(struct git_refdb *db, const char *ref_name, const git_oid *old_id, const char *old_target)
git_refdb_ensure_log	src/refdb.c	/^int git_refdb_ensure_log(git_refdb *db, const char *refname)$/;"	f	signature:(git_refdb *db, const char *refname)
git_refdb_exists	src/refdb.c	/^int git_refdb_exists(int *exists, git_refdb *refdb, const char *ref_name)$/;"	f	signature:(int *exists, git_refdb *refdb, const char *ref_name)
git_refdb_free	src/refdb.c	/^void git_refdb_free(git_refdb *db)$/;"	f	signature:(git_refdb *db)
git_refdb_has_log	src/refdb.c	/^int git_refdb_has_log(git_refdb *db, const char *refname)$/;"	f	signature:(git_refdb *db, const char *refname)
git_refdb_init_backend	src/refdb.c	/^int git_refdb_init_backend(git_refdb_backend *backend, unsigned int version)$/;"	f	signature:(git_refdb_backend *backend, unsigned int version)
git_refdb_iterator	src/refdb.c	/^int git_refdb_iterator(git_reference_iterator **out, git_refdb *db, const char *glob)$/;"	f	signature:(git_reference_iterator **out, git_refdb *db, const char *glob)
git_refdb_iterator_free	src/refdb.c	/^void git_refdb_iterator_free(git_reference_iterator *iter)$/;"	f	signature:(git_reference_iterator *iter)
git_refdb_iterator_next	src/refdb.c	/^int git_refdb_iterator_next(git_reference **out, git_reference_iterator *iter)$/;"	f	signature:(git_reference **out, git_reference_iterator *iter)
git_refdb_iterator_next_name	src/refdb.c	/^int git_refdb_iterator_next_name(const char **out, git_reference_iterator *iter)$/;"	f	signature:(const char **out, git_reference_iterator *iter)
git_refdb_lock	src/refdb.c	/^int git_refdb_lock(void **payload, git_refdb *db, const char *refname)$/;"	f	signature:(void **payload, git_refdb *db, const char *refname)
git_refdb_lookup	src/refdb.c	/^int git_refdb_lookup(git_reference **out, git_refdb *db, const char *ref_name)$/;"	f	signature:(git_reference **out, git_refdb *db, const char *ref_name)
git_refdb_new	src/refdb.c	/^int git_refdb_new(git_refdb **out, git_repository *repo)$/;"	f	signature:(git_refdb **out, git_repository *repo)
git_refdb_open	src/refdb.c	/^int git_refdb_open(git_refdb **out, git_repository *repo)$/;"	f	signature:(git_refdb **out, git_repository *repo)
git_refdb_reflog_read	src/refdb.c	/^int git_refdb_reflog_read(git_reflog **out, git_refdb *db,  const char *name)$/;"	f	signature:(git_reflog **out, git_refdb *db, const char *name)
git_refdb_rename	src/refdb.c	/^int git_refdb_rename($/;"	f	signature:( git_reference **out, git_refdb *db, const char *old_name, const char *new_name, int force, const git_signature *who, const char *message)
git_refdb_set_backend	src/refdb.c	/^int git_refdb_set_backend(git_refdb *db, git_refdb_backend *backend)$/;"	f	signature:(git_refdb *db, git_refdb_backend *backend)
git_refdb_unlock	src/refdb.c	/^int git_refdb_unlock(git_refdb *db, void *payload, int success, int update_reflog, const git_reference *ref, const git_signature *sig, const char *message)$/;"	f	signature:(git_refdb *db, void *payload, int success, int update_reflog, const git_reference *ref, const git_signature *sig, const char *message)
git_refdb_write	src/refdb.c	/^int git_refdb_write(git_refdb *db, git_reference *ref, int force, const git_signature *who, const char *message, const git_oid *old_id, const char *old_target)$/;"	f	signature:(git_refdb *db, git_reference *ref, int force, const git_signature *who, const char *message, const git_oid *old_id, const char *old_target)
git_reference	include/git2/types.h	/^typedef struct git_reference git_reference;$/;"	t	typeref:struct:git_reference
git_reference	src/refs.h	/^struct git_reference {$/;"	s
git_reference::__anon258::oid	src/refs.h	/^		git_oid oid;$/;"	m	union:git_reference::__anon258	access:public
git_reference::__anon258::symbolic	src/refs.h	/^		char *symbolic;$/;"	m	union:git_reference::__anon258	access:public
git_reference::db	src/refs.h	/^	git_refdb *db;$/;"	m	struct:git_reference	access:public
git_reference::name	src/refs.h	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_reference	access:public
git_reference::peel	src/refs.h	/^	git_oid peel;$/;"	m	struct:git_reference	access:public
git_reference::target	src/refs.h	/^	} target;$/;"	m	struct:git_reference	typeref:union:git_reference::__anon258	access:public
git_reference::type	src/refs.h	/^	git_ref_t type;$/;"	m	struct:git_reference	access:public
git_reference__alloc	src/refs.c	/^git_reference *git_reference__alloc($/;"	f	signature:( const char *name, const git_oid *oid, const git_oid *peel)
git_reference__alloc_symbolic	src/refs.c	/^git_reference *git_reference__alloc_symbolic($/;"	f	signature:( const char *name, const char *target)
git_reference__is_branch	src/refs.c	/^int git_reference__is_branch(const char *ref_name)$/;"	f	signature:(const char *ref_name)
git_reference__is_note	src/refs.c	/^int git_reference__is_note(const char *ref_name)$/;"	f	signature:(const char *ref_name)
git_reference__is_remote	src/refs.c	/^int git_reference__is_remote(const char *ref_name)$/;"	f	signature:(const char *ref_name)
git_reference__is_tag	src/refs.c	/^int git_reference__is_tag(const char *ref_name)$/;"	f	signature:(const char *ref_name)
git_reference__is_valid_name	src/refs.c	/^int git_reference__is_valid_name(const char *refname, unsigned int flags)$/;"	f	signature:(const char *refname, unsigned int flags)
git_reference__log_signature	src/refs.c	/^int git_reference__log_signature(git_signature **out, git_repository *repo)$/;"	f	signature:(git_signature **out, git_repository *repo)
git_reference__normalize_name	src/refs.c	/^int git_reference__normalize_name($/;"	f	signature:( git_buf *buf, const char *name, unsigned int flags)
git_reference__set_name	src/refs.c	/^git_reference *git_reference__set_name($/;"	f	signature:( git_reference *ref, const char *name)
git_reference__shorthand	src/refs.c	/^const char *git_reference__shorthand(const char *name)$/;"	f	signature:(const char *name)
git_reference__update_for_commit	src/refs.c	/^int git_reference__update_for_commit($/;"	f	signature:( git_repository *repo, git_reference *ref, const char *ref_name, const git_oid *id, const char *operation)
git_reference__update_terminal	src/refs.c	/^int git_reference__update_terminal($/;"	f	signature:( git_repository *repo, const char *ref_name, const git_oid *oid, const git_signature *sig, const char *log_message)
git_reference_cmp	src/refs.c	/^int git_reference_cmp($/;"	f	signature:( const git_reference *ref1, const git_reference *ref2)
git_reference_create	src/refs.c	/^int git_reference_create($/;"	f	signature:( git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id, int force, const char *log_message)
git_reference_create_matching	src/refs.c	/^int git_reference_create_matching($/;"	f	signature:( git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id, int force, const git_oid *old_id, const char *log_message)
git_reference_delete	src/refs.c	/^int git_reference_delete(git_reference *ref)$/;"	f	signature:(git_reference *ref)
git_reference_dup	src/refs.c	/^int git_reference_dup(git_reference **dest, git_reference *source)$/;"	f	signature:(git_reference **dest, git_reference *source)
git_reference_dwim	src/refs.c	/^int git_reference_dwim(git_reference **out, git_repository *repo, const char *refname)$/;"	f	signature:(git_reference **out, git_repository *repo, const char *refname)
git_reference_ensure_log	src/refs.c	/^int git_reference_ensure_log(git_repository *repo, const char *refname)$/;"	f	signature:(git_repository *repo, const char *refname)
git_reference_foreach	src/refs.c	/^int git_reference_foreach($/;"	f	signature:( git_repository *repo, git_reference_foreach_cb callback, void *payload)
git_reference_foreach_cb	include/git2/refs.h	/^typedef int (*git_reference_foreach_cb)(git_reference *reference, void *payload);$/;"	t
git_reference_foreach_glob	src/refs.c	/^int git_reference_foreach_glob($/;"	f	signature:( git_repository *repo, const char *glob, git_reference_foreach_name_cb callback, void *payload)
git_reference_foreach_name	src/refs.c	/^int git_reference_foreach_name($/;"	f	signature:( git_repository *repo, git_reference_foreach_name_cb callback, void *payload)
git_reference_foreach_name_cb	include/git2/refs.h	/^typedef int (*git_reference_foreach_name_cb)(const char *name, void *payload);$/;"	t
git_reference_free	src/refs.c	/^void git_reference_free(git_reference *reference)$/;"	f	signature:(git_reference *reference)
git_reference_has_log	src/refs.c	/^int git_reference_has_log(git_repository *repo, const char *refname)$/;"	f	signature:(git_repository *repo, const char *refname)
git_reference_is_branch	src/refs.c	/^int git_reference_is_branch(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_is_note	src/refs.c	/^int git_reference_is_note(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_is_remote	src/refs.c	/^int git_reference_is_remote(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_is_tag	src/refs.c	/^int git_reference_is_tag(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_is_valid_name	src/refs.c	/^int git_reference_is_valid_name(const char *refname)$/;"	f	signature:(const char *refname)
git_reference_iterator	include/git2/sys/refdb_backend.h	/^struct git_reference_iterator {$/;"	s
git_reference_iterator	include/git2/types.h	/^typedef struct git_reference_iterator  git_reference_iterator;$/;"	t	typeref:struct:git_reference_iterator
git_reference_iterator::db	include/git2/sys/refdb_backend.h	/^	git_refdb *db;$/;"	m	struct:git_reference_iterator	access:public
git_reference_iterator::free	include/git2/sys/refdb_backend.h	/^	void (*free)($/;"	m	struct:git_reference_iterator	access:public
git_reference_iterator::next	include/git2/sys/refdb_backend.h	/^	int (*next)($/;"	m	struct:git_reference_iterator	access:public
git_reference_iterator::next_name	include/git2/sys/refdb_backend.h	/^	int (*next_name)($/;"	m	struct:git_reference_iterator	access:public
git_reference_iterator_free	src/refs.c	/^void git_reference_iterator_free(git_reference_iterator *iter)$/;"	f	signature:(git_reference_iterator *iter)
git_reference_iterator_glob_new	src/refs.c	/^int git_reference_iterator_glob_new($/;"	f	signature:( git_reference_iterator **out, git_repository *repo, const char *glob)
git_reference_iterator_new	src/refs.c	/^int git_reference_iterator_new(git_reference_iterator **out, git_repository *repo)$/;"	f	signature:(git_reference_iterator **out, git_repository *repo)
git_reference_list	src/refs.c	/^int git_reference_list($/;"	f	signature:( git_strarray *array, git_repository *repo)
git_reference_lookup	src/refs.c	/^int git_reference_lookup(git_reference **ref_out,$/;"	f	signature:(git_reference **ref_out, git_repository *repo, const char *name)
git_reference_lookup_resolved	src/refs.c	/^int git_reference_lookup_resolved($/;"	f	signature:( git_reference **ref_out, git_repository *repo, const char *name, int max_nesting)
git_reference_name	src/refs.c	/^const char *git_reference_name(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_name_to_id	src/refs.c	/^int git_reference_name_to_id($/;"	f	signature:( git_oid *out, git_repository *repo, const char *name)
git_reference_next	src/refs.c	/^int git_reference_next(git_reference **out, git_reference_iterator *iter)$/;"	f	signature:(git_reference **out, git_reference_iterator *iter)
git_reference_next_name	src/refs.c	/^int git_reference_next_name(const char **out, git_reference_iterator *iter)$/;"	f	signature:(const char **out, git_reference_iterator *iter)
git_reference_normalize_name	src/refs.c	/^int git_reference_normalize_name($/;"	f	signature:( char *buffer_out, size_t buffer_size, const char *name, unsigned int flags)
git_reference_normalize_t	include/git2/refs.h	/^} git_reference_normalize_t;$/;"	t	typeref:enum:__anon72
git_reference_owner	src/refs.c	/^git_repository *git_reference_owner(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_peel	src/refs.c	/^int git_reference_peel($/;"	f	signature:( git_object **peeled, git_reference *ref, git_otype target_type)
git_reference_remove	src/refs.c	/^int git_reference_remove(git_repository *repo, const char *name)$/;"	f	signature:(git_repository *repo, const char *name)
git_reference_rename	src/refs.c	/^int git_reference_rename($/;"	f	signature:( git_reference **out, git_reference *ref, const char *new_name, int force, const char *log_message)
git_reference_resolve	src/refs.c	/^int git_reference_resolve(git_reference **ref_out, const git_reference *ref)$/;"	f	signature:(git_reference **ref_out, const git_reference *ref)
git_reference_set_target	src/refs.c	/^int git_reference_set_target($/;"	f	signature:( git_reference **out, git_reference *ref, const git_oid *id, const char *log_message)
git_reference_shorthand	src/refs.c	/^const char *git_reference_shorthand(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_symbolic_create	src/refs.c	/^int git_reference_symbolic_create($/;"	f	signature:( git_reference **ref_out, git_repository *repo, const char *name, const char *target, int force, const char *log_message)
git_reference_symbolic_create_matching	src/refs.c	/^int git_reference_symbolic_create_matching($/;"	f	signature:( git_reference **ref_out, git_repository *repo, const char *name, const char *target, int force, const char *old_target, const char *log_message)
git_reference_symbolic_set_target	src/refs.c	/^int git_reference_symbolic_set_target($/;"	f	signature:( git_reference **out, git_reference *ref, const char *target, const char *log_message)
git_reference_symbolic_target	src/refs.c	/^const char *git_reference_symbolic_target(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_target	src/refs.c	/^const git_oid *git_reference_target(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_target_peel	src/refs.c	/^const git_oid *git_reference_target_peel(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reference_type	src/refs.c	/^git_ref_t git_reference_type(const git_reference *ref)$/;"	f	signature:(const git_reference *ref)
git_reflog	include/git2/types.h	/^typedef struct git_reflog git_reflog;$/;"	t	typeref:struct:git_reflog
git_reflog	src/reflog.h	/^struct git_reflog {$/;"	s
git_reflog::db	src/reflog.h	/^	git_refdb *db;$/;"	m	struct:git_reflog	access:public
git_reflog::entries	src/reflog.h	/^	git_vector entries;$/;"	m	struct:git_reflog	access:public
git_reflog::ref_name	src/reflog.h	/^	char *ref_name;$/;"	m	struct:git_reflog	access:public
git_reflog_append	src/reflog.c	/^int git_reflog_append(git_reflog *reflog, const git_oid *new_oid, const git_signature *committer, const char *msg)$/;"	f	signature:(git_reflog *reflog, const git_oid *new_oid, const git_signature *committer, const char *msg)
git_reflog_delete	src/reflog.c	/^int git_reflog_delete(git_repository *repo, const char *name)$/;"	f	signature:(git_repository *repo, const char *name)
git_reflog_drop	src/reflog.c	/^int git_reflog_drop(git_reflog *reflog, size_t idx, int rewrite_previous_entry)$/;"	f	signature:(git_reflog *reflog, size_t idx, int rewrite_previous_entry)
git_reflog_entry	include/git2/types.h	/^typedef struct git_reflog_entry git_reflog_entry;$/;"	t	typeref:struct:git_reflog_entry
git_reflog_entry	src/reflog.h	/^struct git_reflog_entry {$/;"	s
git_reflog_entry::committer	src/reflog.h	/^	git_signature *committer;$/;"	m	struct:git_reflog_entry	access:public
git_reflog_entry::msg	src/reflog.h	/^	char *msg;$/;"	m	struct:git_reflog_entry	access:public
git_reflog_entry::oid_cur	src/reflog.h	/^	git_oid oid_cur;$/;"	m	struct:git_reflog_entry	access:public
git_reflog_entry::oid_old	src/reflog.h	/^	git_oid oid_old;$/;"	m	struct:git_reflog_entry	access:public
git_reflog_entry__alloc	src/reflog.c	/^git_reflog_entry *git_reflog_entry__alloc(void)$/;"	f	signature:(void)
git_reflog_entry__free	src/reflog.c	/^void git_reflog_entry__free(git_reflog_entry *entry)$/;"	f	signature:(git_reflog_entry *entry)
git_reflog_entry_byindex	src/reflog.c	/^const git_reflog_entry * git_reflog_entry_byindex(const git_reflog *reflog, size_t idx)$/;"	f	signature:(const git_reflog *reflog, size_t idx)
git_reflog_entry_committer	src/reflog.c	/^const git_signature * git_reflog_entry_committer(const git_reflog_entry *entry)$/;"	f	signature:(const git_reflog_entry *entry)
git_reflog_entry_id_new	src/reflog.c	/^const git_oid * git_reflog_entry_id_new(const git_reflog_entry *entry)$/;"	f	signature:(const git_reflog_entry *entry)
git_reflog_entry_id_old	src/reflog.c	/^const git_oid * git_reflog_entry_id_old(const git_reflog_entry *entry)$/;"	f	signature:(const git_reflog_entry *entry)
git_reflog_entry_message	src/reflog.c	/^const char * git_reflog_entry_message(const git_reflog_entry *entry)$/;"	f	signature:(const git_reflog_entry *entry)
git_reflog_entrycount	src/reflog.c	/^size_t git_reflog_entrycount(git_reflog *reflog)$/;"	f	signature:(git_reflog *reflog)
git_reflog_free	src/reflog.c	/^void git_reflog_free(git_reflog *reflog)$/;"	f	signature:(git_reflog *reflog)
git_reflog_read	src/reflog.c	/^int git_reflog_read(git_reflog **reflog, git_repository *repo,  const char *name)$/;"	f	signature:(git_reflog **reflog, git_repository *repo, const char *name)
git_reflog_rename	src/reflog.c	/^int git_reflog_rename(git_repository *repo, const char *old_name, const char *new_name)$/;"	f	signature:(git_repository *repo, const char *old_name, const char *new_name)
git_reflog_write	src/reflog.c	/^int git_reflog_write(git_reflog *reflog)$/;"	f	signature:(git_reflog *reflog)
git_refname_t	src/refs.h	/^typedef char git_refname_t[GIT_REFNAME_MAX];$/;"	t
git_refspec	include/git2/types.h	/^typedef struct git_refspec git_refspec;$/;"	t	typeref:struct:git_refspec
git_refspec	src/refspec.h	/^struct git_refspec {$/;"	s
git_refspec::dst	src/refspec.h	/^	char *dst;$/;"	m	struct:git_refspec	access:public
git_refspec::force	src/refspec.h	/^	unsigned int force :1,$/;"	m	struct:git_refspec	access:public
git_refspec::matching	src/refspec.h	/^		matching :1;$/;"	m	struct:git_refspec	access:public
git_refspec::pattern	src/refspec.h	/^		pattern :1,$/;"	m	struct:git_refspec	access:public
git_refspec::push	src/refspec.h	/^		push : 1,$/;"	m	struct:git_refspec	access:public
git_refspec::src	src/refspec.h	/^	char *src;$/;"	m	struct:git_refspec	access:public
git_refspec::string	src/refspec.h	/^	char *string;$/;"	m	struct:git_refspec	access:public
git_refspec__dwim_one	src/refspec.c	/^int git_refspec__dwim_one(git_vector *out, git_refspec *spec, git_vector *refs)$/;"	f	signature:(git_vector *out, git_refspec *spec, git_vector *refs)
git_refspec__free	src/refspec.c	/^void git_refspec__free(git_refspec *refspec)$/;"	f	signature:(git_refspec *refspec)
git_refspec__parse	src/refspec.c	/^int git_refspec__parse(git_refspec *refspec, const char *input, bool is_fetch)$/;"	f	signature:(git_refspec *refspec, const char *input, bool is_fetch)
git_refspec__serialize	src/refspec.c	/^int git_refspec__serialize(git_buf *out, const git_refspec *refspec)$/;"	f	signature:(git_buf *out, const git_refspec *refspec)
git_refspec_direction	src/refspec.c	/^git_direction git_refspec_direction(const git_refspec *spec)$/;"	f	signature:(const git_refspec *spec)
git_refspec_dst	src/refspec.c	/^const char *git_refspec_dst(const git_refspec *refspec)$/;"	f	signature:(const git_refspec *refspec)
git_refspec_dst_matches	src/refspec.c	/^int git_refspec_dst_matches(const git_refspec *refspec, const char *refname)$/;"	f	signature:(const git_refspec *refspec, const char *refname)
git_refspec_force	src/refspec.c	/^int git_refspec_force(const git_refspec *refspec)$/;"	f	signature:(const git_refspec *refspec)
git_refspec_is_wildcard	src/refspec.c	/^int git_refspec_is_wildcard(const git_refspec *spec)$/;"	f	signature:(const git_refspec *spec)
git_refspec_rtransform	src/refspec.c	/^int git_refspec_rtransform(git_buf *out, const git_refspec *spec, const char *name)$/;"	f	signature:(git_buf *out, const git_refspec *spec, const char *name)
git_refspec_src	src/refspec.c	/^const char *git_refspec_src(const git_refspec *refspec)$/;"	f	signature:(const git_refspec *refspec)
git_refspec_src_matches	src/refspec.c	/^int git_refspec_src_matches(const git_refspec *refspec, const char *refname)$/;"	f	signature:(const git_refspec *refspec, const char *refname)
git_refspec_string	src/refspec.c	/^const char *git_refspec_string(const git_refspec *refspec)$/;"	f	signature:(const git_refspec *refspec)
git_refspec_transform	src/refspec.c	/^int git_refspec_transform(git_buf *out, const git_refspec *spec, const char *name)$/;"	f	signature:(git_buf *out, const git_refspec *spec, const char *name)
git_remote	include/git2/types.h	/^typedef struct git_remote git_remote;$/;"	t	typeref:struct:git_remote
git_remote	src/remote.h	/^struct git_remote {$/;"	s
git_remote::active_refspecs	src/remote.h	/^	git_vector active_refspecs;$/;"	m	struct:git_remote	access:public
git_remote::download_tags	src/remote.h	/^	git_remote_autotag_option_t download_tags;$/;"	m	struct:git_remote	access:public
git_remote::name	src/remote.h	/^	char *name;$/;"	m	struct:git_remote	access:public
git_remote::need_pack	src/remote.h	/^	unsigned int need_pack;$/;"	m	struct:git_remote	access:public
git_remote::passed_refspecs	src/remote.h	/^	int passed_refspecs;$/;"	m	struct:git_remote	access:public
git_remote::passive_refspecs	src/remote.h	/^	git_vector passive_refspecs;$/;"	m	struct:git_remote	access:public
git_remote::prune_refs	src/remote.h	/^	int prune_refs;$/;"	m	struct:git_remote	access:public
git_remote::push	src/remote.h	/^	git_push *push;$/;"	m	struct:git_remote	access:public
git_remote::pushurl	src/remote.h	/^	char *pushurl;$/;"	m	struct:git_remote	access:public
git_remote::refs	src/remote.h	/^	git_vector refs;$/;"	m	struct:git_remote	access:public
git_remote::refspecs	src/remote.h	/^	git_vector refspecs;$/;"	m	struct:git_remote	access:public
git_remote::repo	src/remote.h	/^	git_repository *repo;$/;"	m	struct:git_remote	access:public
git_remote::stats	src/remote.h	/^	git_transfer_progress stats;$/;"	m	struct:git_remote	access:public
git_remote::transport	src/remote.h	/^	git_transport *transport;$/;"	m	struct:git_remote	access:public
git_remote::url	src/remote.h	/^	char *url;$/;"	m	struct:git_remote	access:public
git_remote__get_http_proxy	src/remote.c	/^int git_remote__get_http_proxy(git_remote *remote, bool use_ssl, char **proxy_url)$/;"	f	signature:(git_remote *remote, bool use_ssl, char **proxy_url)
git_remote__matching_dst_refspec	src/remote.c	/^git_refspec *git_remote__matching_dst_refspec(git_remote *remote, const char *refname)$/;"	f	signature:(git_remote *remote, const char *refname)
git_remote__matching_refspec	src/remote.c	/^git_refspec *git_remote__matching_refspec(git_remote *remote, const char *refname)$/;"	f	signature:(git_remote *remote, const char *refname)
git_remote__urlfordirection	src/remote.c	/^const char* git_remote__urlfordirection(git_remote *remote, int direction)$/;"	f	signature:(git_remote *remote, int direction)
git_remote_add_fetch	src/remote.c	/^int git_remote_add_fetch(git_repository *repo, const char *remote, const char *refspec)$/;"	f	signature:(git_repository *repo, const char *remote, const char *refspec)
git_remote_add_push	src/remote.c	/^int git_remote_add_push(git_repository *repo, const char *remote, const char *refspec)$/;"	f	signature:(git_repository *repo, const char *remote, const char *refspec)
git_remote_autotag	src/remote.c	/^git_remote_autotag_option_t git_remote_autotag(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_autotag_option_t	include/git2/remote.h	/^} git_remote_autotag_option_t;$/;"	t	typeref:enum:__anon54
git_remote_callbacks	include/git2/remote.h	/^struct git_remote_callbacks {$/;"	s
git_remote_callbacks	include/git2/types.h	/^typedef struct git_remote_callbacks git_remote_callbacks;$/;"	t	typeref:struct:git_remote_callbacks
git_remote_callbacks::certificate_check	include/git2/remote.h	/^	git_transport_certificate_check_cb certificate_check;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::completion	include/git2/remote.h	/^	int (*completion)(git_remote_completion_type type, void *data);$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::credentials	include/git2/remote.h	/^	git_cred_acquire_cb credentials;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::pack_progress	include/git2/remote.h	/^	git_packbuilder_progress pack_progress;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::payload	include/git2/remote.h	/^	void *payload;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::push_negotiation	include/git2/remote.h	/^	git_push_negotiation push_negotiation;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::push_transfer_progress	include/git2/remote.h	/^	git_push_transfer_progress push_transfer_progress;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::push_update_reference	include/git2/remote.h	/^	int (*push_update_reference)(const char *refname, const char *status, void *data);$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::sideband_progress	include/git2/remote.h	/^	git_transport_message_cb sideband_progress;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::transfer_progress	include/git2/remote.h	/^	git_transfer_progress_cb transfer_progress;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::transport	include/git2/remote.h	/^	git_transport_cb transport;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::update_tips	include/git2/remote.h	/^	int (*update_tips)(const char *refname, const git_oid *a, const git_oid *b, void *data);$/;"	m	struct:git_remote_callbacks	access:public
git_remote_callbacks::version	include/git2/remote.h	/^	unsigned int version;$/;"	m	struct:git_remote_callbacks	access:public
git_remote_completion_type	include/git2/remote.h	/^typedef enum git_remote_completion_type {$/;"	g
git_remote_completion_type	include/git2/remote.h	/^} git_remote_completion_type;$/;"	t	typeref:enum:git_remote_completion_type
git_remote_connect	src/remote.c	/^int git_remote_connect(git_remote *remote, git_direction direction, const git_remote_callbacks *callbacks, const git_proxy_options *proxy, const git_strarray *custom_headers)$/;"	f	signature:(git_remote *remote, git_direction direction, const git_remote_callbacks *callbacks, const git_proxy_options *proxy, const git_strarray *custom_headers)
git_remote_connected	src/remote.c	/^int git_remote_connected(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_create	src/remote.c	/^int git_remote_create(git_remote **out, git_repository *repo, const char *name, const char *url)$/;"	f	signature:(git_remote **out, git_repository *repo, const char *name, const char *url)
git_remote_create_anonymous	src/remote.c	/^int git_remote_create_anonymous(git_remote **out, git_repository *repo, const char *url)$/;"	f	signature:(git_remote **out, git_repository *repo, const char *url)
git_remote_create_cb	include/git2/clone.h	/^typedef int (*git_remote_create_cb)($/;"	t
git_remote_create_with_fetchspec	src/remote.c	/^int git_remote_create_with_fetchspec(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)$/;"	f	signature:(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)
git_remote_default_branch	src/remote.c	/^int git_remote_default_branch(git_buf *out, git_remote *remote)$/;"	f	signature:(git_buf *out, git_remote *remote)
git_remote_delete	src/remote.c	/^int git_remote_delete(git_repository *repo, const char *name)$/;"	f	signature:(git_repository *repo, const char *name)
git_remote_disconnect	src/remote.c	/^void git_remote_disconnect(git_remote *remote)$/;"	f	signature:(git_remote *remote)
git_remote_download	src/remote.c	/^int git_remote_download(git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts)$/;"	f	signature:(git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts)
git_remote_dup	src/remote.c	/^int git_remote_dup(git_remote **dest, git_remote *source)$/;"	f	signature:(git_remote **dest, git_remote *source)
git_remote_fetch	src/remote.c	/^int git_remote_fetch($/;"	f	signature:( git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts, const char *reflog_message)
git_remote_free	src/remote.c	/^void git_remote_free(git_remote *remote)$/;"	f	signature:(git_remote *remote)
git_remote_get_fetch_refspecs	src/remote.c	/^int git_remote_get_fetch_refspecs(git_strarray *array, const git_remote *remote)$/;"	f	signature:(git_strarray *array, const git_remote *remote)
git_remote_get_push_refspecs	src/remote.c	/^int git_remote_get_push_refspecs(git_strarray *array, const git_remote *remote)$/;"	f	signature:(git_strarray *array, const git_remote *remote)
git_remote_get_refspec	src/remote.c	/^const git_refspec *git_remote_get_refspec(const git_remote *remote, size_t n)$/;"	f	signature:(const git_remote *remote, size_t n)
git_remote_head	include/git2/net.h	/^struct git_remote_head {$/;"	s
git_remote_head	include/git2/types.h	/^typedef struct git_remote_head git_remote_head;$/;"	t	typeref:struct:git_remote_head
git_remote_head::local	include/git2/net.h	/^	int local; \/* available locally *\/$/;"	m	struct:git_remote_head	access:public
git_remote_head::loid	include/git2/net.h	/^	git_oid loid;$/;"	m	struct:git_remote_head	access:public
git_remote_head::name	include/git2/net.h	/^	char *name;$/;"	m	struct:git_remote_head	access:public
git_remote_head::oid	include/git2/net.h	/^	git_oid oid;$/;"	m	struct:git_remote_head	access:public
git_remote_head::symref_target	include/git2/net.h	/^	char *symref_target;$/;"	m	struct:git_remote_head	access:public
git_remote_init_callbacks	src/remote.c	/^int git_remote_init_callbacks(git_remote_callbacks *opts, unsigned int version)$/;"	f	signature:(git_remote_callbacks *opts, unsigned int version)
git_remote_is_valid_name	src/remote.c	/^int git_remote_is_valid_name($/;"	f	signature:( const char *remote_name)
git_remote_list	src/remote.c	/^int git_remote_list(git_strarray *remotes_list, git_repository *repo)$/;"	f	signature:(git_strarray *remotes_list, git_repository *repo)
git_remote_lookup	src/remote.c	/^int git_remote_lookup(git_remote **out, git_repository *repo, const char *name)$/;"	f	signature:(git_remote **out, git_repository *repo, const char *name)
git_remote_ls	src/remote.c	/^int git_remote_ls(const git_remote_head ***out, size_t *size, git_remote *remote)$/;"	f	signature:(const git_remote_head ***out, size_t *size, git_remote *remote)
git_remote_name	src/remote.c	/^const char *git_remote_name(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_owner	src/remote.c	/^git_repository *git_remote_owner(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_prune	src/remote.c	/^int git_remote_prune(git_remote *remote, const git_remote_callbacks *callbacks)$/;"	f	signature:(git_remote *remote, const git_remote_callbacks *callbacks)
git_remote_prune_refs	src/remote.c	/^int git_remote_prune_refs(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_push	src/remote.c	/^int git_remote_push(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts)$/;"	f	signature:(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts)
git_remote_pushurl	src/remote.c	/^const char *git_remote_pushurl(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_refspec_count	src/remote.c	/^size_t git_remote_refspec_count(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_rename	src/remote.c	/^int git_remote_rename(git_strarray *out, git_repository *repo, const char *name, const char *new_name)$/;"	f	signature:(git_strarray *out, git_repository *repo, const char *name, const char *new_name)
git_remote_set_autotag	src/remote.c	/^int git_remote_set_autotag(git_repository *repo, const char *remote, git_remote_autotag_option_t value)$/;"	f	signature:(git_repository *repo, const char *remote, git_remote_autotag_option_t value)
git_remote_set_pushurl	src/remote.c	/^int git_remote_set_pushurl(git_repository *repo, const char *remote, const char* url)$/;"	f	signature:(git_repository *repo, const char *remote, const char* url)
git_remote_set_url	src/remote.c	/^int git_remote_set_url(git_repository *repo, const char *remote, const char *url)$/;"	f	signature:(git_repository *repo, const char *remote, const char *url)
git_remote_stats	src/remote.c	/^const git_transfer_progress* git_remote_stats(git_remote *remote)$/;"	f	signature:(git_remote *remote)
git_remote_stop	src/remote.c	/^void git_remote_stop(git_remote *remote)$/;"	f	signature:(git_remote *remote)
git_remote_update_tips	src/remote.c	/^int git_remote_update_tips($/;"	f	signature:( git_remote *remote, const git_remote_callbacks *callbacks, int update_fetchhead, git_remote_autotag_option_t download_tags, const char *reflog_message)
git_remote_upload	src/remote.c	/^int git_remote_upload(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts)$/;"	f	signature:(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts)
git_remote_url	src/remote.c	/^const char *git_remote_url(const git_remote *remote)$/;"	f	signature:(const git_remote *remote)
git_remote_write_fetchhead	src/remote.c	/^static int git_remote_write_fetchhead(git_remote *remote, git_refspec *spec, git_vector *update_heads)$/;"	f	file:	signature:(git_remote *remote, git_refspec *spec, git_vector *update_heads)
git_repository	include/git2/types.h	/^typedef struct git_repository git_repository;$/;"	t	typeref:struct:git_repository
git_repository	src/repository.h	/^struct git_repository {$/;"	s
git_repository::_config	src/repository.h	/^	git_config *_config;$/;"	m	struct:git_repository	access:public
git_repository::_index	src/repository.h	/^	git_index *_index;$/;"	m	struct:git_repository	access:public
git_repository::_odb	src/repository.h	/^	git_odb *_odb;$/;"	m	struct:git_repository	access:public
git_repository::_refdb	src/repository.h	/^	git_refdb *_refdb;$/;"	m	struct:git_repository	access:public
git_repository::attr_session_key	src/repository.h	/^	git_atomic attr_session_key;$/;"	m	struct:git_repository	access:public
git_repository::attrcache	src/repository.h	/^	git_attr_cache *attrcache;$/;"	m	struct:git_repository	access:public
git_repository::cvar_cache	src/repository.h	/^	git_cvar_value cvar_cache[GIT_CVAR_CACHE_MAX];$/;"	m	struct:git_repository	access:public
git_repository::diff_drivers	src/repository.h	/^	git_diff_driver_registry *diff_drivers;$/;"	m	struct:git_repository	access:public
git_repository::ident_email	src/repository.h	/^	char *ident_email;$/;"	m	struct:git_repository	access:public
git_repository::ident_name	src/repository.h	/^	char *ident_name;$/;"	m	struct:git_repository	access:public
git_repository::is_bare	src/repository.h	/^	unsigned is_bare:1;$/;"	m	struct:git_repository	access:public
git_repository::lru_counter	src/repository.h	/^	unsigned int lru_counter;$/;"	m	struct:git_repository	access:public
git_repository::objects	src/repository.h	/^	git_cache objects;$/;"	m	struct:git_repository	access:public
git_repository::path_gitlink	src/repository.h	/^	char *path_gitlink;$/;"	m	struct:git_repository	access:public
git_repository::path_repository	src/repository.h	/^	char *path_repository;$/;"	m	struct:git_repository	access:public
git_repository::reserved_names	src/repository.h	/^	git_array_t(git_buf) reserved_names;$/;"	m	struct:git_repository	access:public
git_repository::workdir	src/repository.h	/^	char *workdir;$/;"	m	struct:git_repository	access:public
git_repository__cleanup	src/repository.c	/^void git_repository__cleanup(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository__cleanup_files	src/repository.c	/^int git_repository__cleanup_files($/;"	f	signature:( git_repository *repo, const char *files[], size_t files_len)
git_repository__cvar	src/config_cache.c	/^int git_repository__cvar(int *out, git_repository *repo, git_cvar_cached cvar)$/;"	f	signature:(int *out, git_repository *repo, git_cvar_cached cvar)
git_repository__cvar_cache_clear	src/config_cache.c	/^void git_repository__cvar_cache_clear(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository__ensure_not_bare	src/repository.h	/^GIT_INLINE(int) git_repository__ensure_not_bare($/;"	f	signature:( git_repository *repo, const char *operation_name)
git_repository__reserved_names	src/repository.c	/^bool git_repository__reserved_names($/;"	f	signature:( git_buf **out, size_t *outlen, git_repository *repo, bool include_ntfs)
git_repository__reserved_names_posix	src/repository.c	/^git_buf git_repository__reserved_names_posix[] = {$/;"	v
git_repository__reserved_names_posix	src/repository.h	/^extern git_buf git_repository__reserved_names_posix[];$/;"	x
git_repository__reserved_names_posix_len	src/repository.c	/^size_t git_repository__reserved_names_posix_len = 1;$/;"	v
git_repository__reserved_names_posix_len	src/repository.h	/^extern size_t git_repository__reserved_names_posix_len;$/;"	x
git_repository__reserved_names_win32	src/repository.c	/^git_buf git_repository__reserved_names_win32[] = {$/;"	v
git_repository__reserved_names_win32	src/repository.h	/^extern git_buf git_repository__reserved_names_win32[];$/;"	x
git_repository__reserved_names_win32_len	src/repository.c	/^size_t git_repository__reserved_names_win32_len = 2;$/;"	v
git_repository__reserved_names_win32_len	src/repository.h	/^extern size_t git_repository__reserved_names_win32_len;$/;"	x
git_repository__set_orig_head	src/repository.c	/^int git_repository__set_orig_head(git_repository *repo, const git_oid *orig_head)$/;"	f	signature:(git_repository *repo, const git_oid *orig_head)
git_repository_attr_cache	src/repository.h	/^GIT_INLINE(git_attr_cache *) git_repository_attr_cache(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_config	src/repository.c	/^int git_repository_config(git_config **out, git_repository *repo)$/;"	f	signature:(git_config **out, git_repository *repo)
git_repository_config__weakptr	src/repository.c	/^int git_repository_config__weakptr(git_config **out, git_repository *repo)$/;"	f	signature:(git_config **out, git_repository *repo)
git_repository_config_snapshot	src/repository.c	/^int git_repository_config_snapshot(git_config **out, git_repository *repo)$/;"	f	signature:(git_config **out, git_repository *repo)
git_repository_create_cb	include/git2/clone.h	/^typedef int (*git_repository_create_cb)($/;"	t
git_repository_detach_head	src/repository.c	/^int git_repository_detach_head(git_repository* repo)$/;"	f	signature:(git_repository* repo)
git_repository_discover	src/repository.c	/^int git_repository_discover($/;"	f	signature:( git_buf *out, const char *start_path, int across_fs, const char *ceiling_dirs)
git_repository_driver_registry	src/diff_driver.c	/^static git_diff_driver_registry *git_repository_driver_registry($/;"	f	file:	signature:( git_repository *repo)
git_repository_fetchhead_foreach	src/fetchhead.c	/^int git_repository_fetchhead_foreach(git_repository *repo,$/;"	f	signature:(git_repository *repo, git_repository_fetchhead_foreach_cb cb, void *payload)
git_repository_fetchhead_foreach_cb	include/git2/repository.h	/^typedef int (*git_repository_fetchhead_foreach_cb)(const char *ref_name,$/;"	t
git_repository_free	src/repository.c	/^void git_repository_free(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_get_namespace	src/repository.c	/^const char *git_repository_get_namespace(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_hashfile	src/repository.c	/^int git_repository_hashfile($/;"	f	signature:( git_oid *out, git_repository *repo, const char *path, git_otype type, const char *as_path)
git_repository_head	src/repository.c	/^int git_repository_head(git_reference **head_out, git_repository *repo)$/;"	f	signature:(git_reference **head_out, git_repository *repo)
git_repository_head_detached	src/repository.c	/^int git_repository_head_detached(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_head_tree	src/repository.c	/^int git_repository_head_tree(git_tree **tree, git_repository *repo)$/;"	f	signature:(git_tree **tree, git_repository *repo)
git_repository_head_unborn	src/repository.c	/^int git_repository_head_unborn(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_ident	src/repository.c	/^int git_repository_ident(const char **name, const char **email, const git_repository *repo)$/;"	f	signature:(const char **name, const char **email, const git_repository *repo)
git_repository_index	src/repository.c	/^int git_repository_index(git_index **out, git_repository *repo)$/;"	f	signature:(git_index **out, git_repository *repo)
git_repository_index__weakptr	src/repository.c	/^int git_repository_index__weakptr(git_index **out, git_repository *repo)$/;"	f	signature:(git_index **out, git_repository *repo)
git_repository_init	src/repository.c	/^int git_repository_init($/;"	f	signature:( git_repository **repo_out, const char *path, unsigned is_bare)
git_repository_init_ext	src/repository.c	/^int git_repository_init_ext($/;"	f	signature:( git_repository **out, const char *given_repo, git_repository_init_options *opts)
git_repository_init_flag_t	include/git2/repository.h	/^} git_repository_init_flag_t;$/;"	t	typeref:enum:__anon117
git_repository_init_init_options	src/repository.c	/^int git_repository_init_init_options($/;"	f	signature:( git_repository_init_options *opts, unsigned int version)
git_repository_init_mode_t	include/git2/repository.h	/^} git_repository_init_mode_t;$/;"	t	typeref:enum:__anon118
git_repository_init_options	include/git2/repository.h	/^} git_repository_init_options;$/;"	t	typeref:struct:__anon119
git_repository_is_bare	src/repository.c	/^int git_repository_is_bare(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_is_empty	src/repository.c	/^int git_repository_is_empty(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_is_shallow	src/repository.c	/^int git_repository_is_shallow(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_mergehead_foreach	src/merge.c	/^int git_repository_mergehead_foreach($/;"	f	signature:( git_repository *repo, git_repository_mergehead_foreach_cb cb, void *payload)
git_repository_mergehead_foreach_cb	include/git2/repository.h	/^typedef int (*git_repository_mergehead_foreach_cb)(const git_oid *oid,$/;"	t
git_repository_message	src/repository.c	/^int git_repository_message(git_buf *out, git_repository *repo)$/;"	f	signature:(git_buf *out, git_repository *repo)
git_repository_message_remove	src/repository.c	/^int git_repository_message_remove(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_new	src/repository.c	/^int git_repository_new(git_repository **out)$/;"	f	signature:(git_repository **out)
git_repository_odb	src/repository.c	/^int git_repository_odb(git_odb **out, git_repository *repo)$/;"	f	signature:(git_odb **out, git_repository *repo)
git_repository_odb__weakptr	src/repository.c	/^int git_repository_odb__weakptr(git_odb **out, git_repository *repo)$/;"	f	signature:(git_odb **out, git_repository *repo)
git_repository_open	src/repository.c	/^int git_repository_open(git_repository **repo_out, const char *path)$/;"	f	signature:(git_repository **repo_out, const char *path)
git_repository_open_bare	src/repository.c	/^int git_repository_open_bare($/;"	f	signature:( git_repository **repo_ptr, const char *bare_path)
git_repository_open_ext	src/repository.c	/^int git_repository_open_ext($/;"	f	signature:( git_repository **repo_ptr, const char *start_path, unsigned int flags, const char *ceiling_dirs)
git_repository_open_flag_t	include/git2/repository.h	/^} git_repository_open_flag_t;$/;"	t	typeref:enum:__anon116
git_repository_path	src/repository.c	/^const char *git_repository_path(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_refdb	src/repository.c	/^int git_repository_refdb(git_refdb **out, git_repository *repo)$/;"	f	signature:(git_refdb **out, git_repository *repo)
git_repository_refdb__weakptr	src/repository.c	/^int git_repository_refdb__weakptr(git_refdb **out, git_repository *repo)$/;"	f	signature:(git_refdb **out, git_repository *repo)
git_repository_reinit_filesystem	src/repository.c	/^int git_repository_reinit_filesystem(git_repository *repo, int recurse)$/;"	f	signature:(git_repository *repo, int recurse)
git_repository_set_bare	src/repository.c	/^int git_repository_set_bare(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_set_config	src/repository.c	/^void git_repository_set_config(git_repository *repo, git_config *config)$/;"	f	signature:(git_repository *repo, git_config *config)
git_repository_set_head	src/repository.c	/^int git_repository_set_head($/;"	f	signature:( git_repository* repo, const char* refname)
git_repository_set_head_detached	src/repository.c	/^int git_repository_set_head_detached($/;"	f	signature:( git_repository* repo, const git_oid* commitish)
git_repository_set_head_detached_from_annotated	src/repository.c	/^int git_repository_set_head_detached_from_annotated($/;"	f	signature:( git_repository *repo, const git_annotated_commit *commitish)
git_repository_set_ident	src/repository.c	/^int git_repository_set_ident(git_repository *repo, const char *name, const char *email)$/;"	f	signature:(git_repository *repo, const char *name, const char *email)
git_repository_set_index	src/repository.c	/^void git_repository_set_index(git_repository *repo, git_index *index)$/;"	f	signature:(git_repository *repo, git_index *index)
git_repository_set_namespace	src/repository.c	/^int git_repository_set_namespace(git_repository *repo, const char *namespace)$/;"	f	signature:(git_repository *repo, const char *namespace)
git_repository_set_odb	src/repository.c	/^void git_repository_set_odb(git_repository *repo, git_odb *odb)$/;"	f	signature:(git_repository *repo, git_odb *odb)
git_repository_set_refdb	src/repository.c	/^void git_repository_set_refdb(git_repository *repo, git_refdb *refdb)$/;"	f	signature:(git_repository *repo, git_refdb *refdb)
git_repository_set_workdir	src/repository.c	/^int git_repository_set_workdir($/;"	f	signature:( git_repository *repo, const char *workdir, int update_gitlink)
git_repository_state	src/repository.c	/^int git_repository_state(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_state_cleanup	src/repository.c	/^int git_repository_state_cleanup(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_state_t	include/git2/repository.h	/^} git_repository_state_t;$/;"	t	typeref:enum:__anon120
git_repository_workdir	src/repository.c	/^const char *git_repository_workdir(git_repository *repo)$/;"	f	signature:(git_repository *repo)
git_repository_wrap_odb	src/repository.c	/^int git_repository_wrap_odb(git_repository **repo_out, git_odb *odb)$/;"	f	signature:(git_repository **repo_out, git_odb *odb)
git_reset	src/reset.c	/^int git_reset($/;"	f	signature:( git_repository *repo, git_object *target, git_reset_t reset_type, const git_checkout_options *checkout_opts)
git_reset_default	src/reset.c	/^int git_reset_default($/;"	f	signature:( git_repository *repo, git_object *target, git_strarray* pathspecs)
git_reset_from_annotated	src/reset.c	/^int git_reset_from_annotated($/;"	f	signature:( git_repository *repo, git_annotated_commit *commit, git_reset_t reset_type, const git_checkout_options *checkout_opts)
git_reset_t	include/git2/reset.h	/^} git_reset_t;$/;"	t	typeref:enum:__anon65
git_revert	src/revert.c	/^int git_revert($/;"	f	signature:( git_repository *repo, git_commit *commit, const git_revert_options *given_opts)
git_revert_commit	src/revert.c	/^int git_revert_commit($/;"	f	signature:( git_index **out, git_repository *repo, git_commit *revert_commit, git_commit *our_commit, unsigned int mainline, const git_merge_options *merge_opts)
git_revert_init_options	src/revert.c	/^int git_revert_init_options(git_revert_options *opts, unsigned int version)$/;"	f	signature:(git_revert_options *opts, unsigned int version)
git_revert_options	include/git2/revert.h	/^} git_revert_options;$/;"	t	typeref:struct:__anon142
git_revparse	src/revparse.c	/^int git_revparse($/;"	f	signature:( git_revspec *revspec, git_repository *repo, const char *spec)
git_revparse_ext	src/revparse.c	/^int git_revparse_ext($/;"	f	signature:( git_object **object_out, git_reference **reference_out, git_repository *repo, const char *spec)
git_revparse_mode_t	include/git2/revparse.h	/^} git_revparse_mode_t;$/;"	t	typeref:enum:__anon73
git_revparse_single	src/revparse.c	/^int git_revparse_single(git_object **out, git_repository *repo, const char *spec)$/;"	f	signature:(git_object **out, git_repository *repo, const char *spec)
git_revspec	include/git2/revparse.h	/^} git_revspec;$/;"	t	typeref:struct:__anon74
git_revwalk	include/git2/types.h	/^typedef struct git_revwalk git_revwalk;$/;"	t	typeref:struct:git_revwalk
git_revwalk	src/revwalk.h	/^struct git_revwalk {$/;"	s
git_revwalk::commit_pool	src/revwalk.h	/^	git_pool commit_pool;$/;"	m	struct:git_revwalk	access:public
git_revwalk::commits	src/revwalk.h	/^	git_oidmap *commits;$/;"	m	struct:git_revwalk	access:public
git_revwalk::did_hide	src/revwalk.h	/^		did_hide: 1,$/;"	m	struct:git_revwalk	access:public
git_revwalk::did_push	src/revwalk.h	/^		did_push: 1;$/;"	m	struct:git_revwalk	access:public
git_revwalk::enqueue	src/revwalk.h	/^	int (*enqueue)(git_revwalk *, git_commit_list_node *);$/;"	m	struct:git_revwalk	access:public
git_revwalk::first_parent	src/revwalk.h	/^		first_parent: 1,$/;"	m	struct:git_revwalk	access:public
git_revwalk::get_next	src/revwalk.h	/^	int (*get_next)(git_commit_list_node **, git_revwalk *);$/;"	m	struct:git_revwalk	access:public
git_revwalk::hide_cb	src/revwalk.h	/^	git_revwalk_hide_cb hide_cb;$/;"	m	struct:git_revwalk	access:public
git_revwalk::hide_cb_payload	src/revwalk.h	/^	void *hide_cb_payload;$/;"	m	struct:git_revwalk	access:public
git_revwalk::iterator_rand	src/revwalk.h	/^	git_commit_list *iterator_rand;$/;"	m	struct:git_revwalk	access:public
git_revwalk::iterator_reverse	src/revwalk.h	/^	git_commit_list *iterator_reverse;$/;"	m	struct:git_revwalk	access:public
git_revwalk::iterator_time	src/revwalk.h	/^	git_pqueue iterator_time;$/;"	m	struct:git_revwalk	access:public
git_revwalk::iterator_topo	src/revwalk.h	/^	git_commit_list *iterator_topo;$/;"	m	struct:git_revwalk	access:public
git_revwalk::odb	src/revwalk.h	/^	git_odb *odb;$/;"	m	struct:git_revwalk	access:public
git_revwalk::repo	src/revwalk.h	/^	git_repository *repo;$/;"	m	struct:git_revwalk	access:public
git_revwalk::sorting	src/revwalk.h	/^	unsigned int sorting;$/;"	m	struct:git_revwalk	access:public
git_revwalk::user_input	src/revwalk.h	/^	git_commit_list *user_input;$/;"	m	struct:git_revwalk	access:public
git_revwalk::walking	src/revwalk.h	/^	unsigned walking:1,$/;"	m	struct:git_revwalk	access:public
git_revwalk__commit_lookup	src/revwalk.c	/^git_commit_list_node *git_revwalk__commit_lookup($/;"	f	signature:( git_revwalk *walk, const git_oid *oid)
git_revwalk_add_hide_cb	src/revwalk.c	/^int git_revwalk_add_hide_cb($/;"	f	signature:( git_revwalk *walk, git_revwalk_hide_cb hide_cb, void *payload)
git_revwalk_free	src/revwalk.c	/^void git_revwalk_free(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_revwalk_hide	src/revwalk.c	/^int git_revwalk_hide(git_revwalk *walk, const git_oid *oid)$/;"	f	signature:(git_revwalk *walk, const git_oid *oid)
git_revwalk_hide_cb	include/git2/revwalk.h	/^typedef int(*git_revwalk_hide_cb)($/;"	t
git_revwalk_hide_glob	src/revwalk.c	/^int git_revwalk_hide_glob(git_revwalk *walk, const char *glob)$/;"	f	signature:(git_revwalk *walk, const char *glob)
git_revwalk_hide_head	src/revwalk.c	/^int git_revwalk_hide_head(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_revwalk_hide_ref	src/revwalk.c	/^int git_revwalk_hide_ref(git_revwalk *walk, const char *refname)$/;"	f	signature:(git_revwalk *walk, const char *refname)
git_revwalk_new	src/revwalk.c	/^int git_revwalk_new(git_revwalk **revwalk_out, git_repository *repo)$/;"	f	signature:(git_revwalk **revwalk_out, git_repository *repo)
git_revwalk_next	src/revwalk.c	/^int git_revwalk_next(git_oid *oid, git_revwalk *walk)$/;"	f	signature:(git_oid *oid, git_revwalk *walk)
git_revwalk_push	src/revwalk.c	/^int git_revwalk_push(git_revwalk *walk, const git_oid *oid)$/;"	f	signature:(git_revwalk *walk, const git_oid *oid)
git_revwalk_push_glob	src/revwalk.c	/^int git_revwalk_push_glob(git_revwalk *walk, const char *glob)$/;"	f	signature:(git_revwalk *walk, const char *glob)
git_revwalk_push_head	src/revwalk.c	/^int git_revwalk_push_head(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_revwalk_push_range	src/revwalk.c	/^int git_revwalk_push_range(git_revwalk *walk, const char *range)$/;"	f	signature:(git_revwalk *walk, const char *range)
git_revwalk_push_ref	src/revwalk.c	/^int git_revwalk_push_ref(git_revwalk *walk, const char *refname)$/;"	f	signature:(git_revwalk *walk, const char *refname)
git_revwalk_repository	src/revwalk.c	/^git_repository *git_revwalk_repository(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_revwalk_reset	src/revwalk.c	/^void git_revwalk_reset(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_revwalk_simplify_first_parent	src/revwalk.c	/^void git_revwalk_simplify_first_parent(git_revwalk *walk)$/;"	f	signature:(git_revwalk *walk)
git_revwalk_sorting	src/revwalk.c	/^void git_revwalk_sorting(git_revwalk *walk, unsigned int sort_mode)$/;"	f	signature:(git_revwalk *walk, unsigned int sort_mode)
git_rwlock	src/thread-utils.h	156;"	d
git_rwlock	src/unix/pthread.h	47;"	d
git_rwlock	src/win32/thread.h	/^} git_rwlock;$/;"	t	typeref:struct:__anon287
git_rwlock_free	src/thread-utils.h	162;"	d
git_rwlock_free	src/unix/pthread.h	53;"	d
git_rwlock_free	src/win32/thread.c	/^int git_rwlock_free(git_rwlock *lock)$/;"	f	signature:(git_rwlock *lock)
git_rwlock_init	src/thread-utils.h	157;"	d
git_rwlock_init	src/unix/pthread.h	48;"	d
git_rwlock_init	src/win32/thread.c	/^int git_rwlock_init(git_rwlock *GIT_RESTRICT lock)$/;"	f	signature:(git_rwlock *GIT_RESTRICT lock)
git_rwlock_rdlock	src/thread-utils.h	158;"	d
git_rwlock_rdlock	src/unix/pthread.h	49;"	d
git_rwlock_rdlock	src/win32/thread.c	/^int git_rwlock_rdlock(git_rwlock *lock)$/;"	f	signature:(git_rwlock *lock)
git_rwlock_rdunlock	src/thread-utils.h	159;"	d
git_rwlock_rdunlock	src/unix/pthread.h	50;"	d
git_rwlock_rdunlock	src/win32/thread.c	/^int git_rwlock_rdunlock(git_rwlock *lock)$/;"	f	signature:(git_rwlock *lock)
git_rwlock_wrlock	src/thread-utils.h	160;"	d
git_rwlock_wrlock	src/unix/pthread.h	51;"	d
git_rwlock_wrlock	src/win32/thread.c	/^int git_rwlock_wrlock(git_rwlock *lock)$/;"	f	signature:(git_rwlock *lock)
git_rwlock_wrunlock	src/thread-utils.h	161;"	d
git_rwlock_wrunlock	src/unix/pthread.h	52;"	d
git_rwlock_wrunlock	src/win32/thread.c	/^int git_rwlock_wrunlock(git_rwlock *lock)$/;"	f	signature:(git_rwlock *lock)
git_signature	include/git2/types.h	/^typedef struct git_signature {$/;"	s
git_signature	include/git2/types.h	/^} git_signature;$/;"	t	typeref:struct:git_signature
git_signature::email	include/git2/types.h	/^	char *email; \/**< email of the author *\/$/;"	m	struct:git_signature	access:public
git_signature::name	include/git2/types.h	/^	char *name; \/**< full name of the author *\/$/;"	m	struct:git_signature	access:public
git_signature::when	include/git2/types.h	/^	git_time when; \/**< time when the action happened *\/$/;"	m	struct:git_signature	access:public
git_signature__equal	src/signature.c	/^bool git_signature__equal(const git_signature *one, const git_signature *two)$/;"	f	signature:(const git_signature *one, const git_signature *two)
git_signature__parse	src/signature.c	/^int git_signature__parse(git_signature *sig, const char **buffer_out,$/;"	f	signature:(git_signature *sig, const char **buffer_out, const char *buffer_end, const char *header, char ender)
git_signature__pdup	src/signature.c	/^int git_signature__pdup(git_signature **dest, const git_signature *source, git_pool *pool)$/;"	f	signature:(git_signature **dest, const git_signature *source, git_pool *pool)
git_signature__writebuf	src/signature.c	/^void git_signature__writebuf(git_buf *buf, const char *header, const git_signature *sig)$/;"	f	signature:(git_buf *buf, const char *header, const git_signature *sig)
git_signature_default	src/signature.c	/^int git_signature_default(git_signature **out, git_repository *repo)$/;"	f	signature:(git_signature **out, git_repository *repo)
git_signature_dup	src/signature.c	/^int git_signature_dup(git_signature **dest, const git_signature *source)$/;"	f	signature:(git_signature **dest, const git_signature *source)
git_signature_free	src/signature.c	/^void git_signature_free(git_signature *sig)$/;"	f	signature:(git_signature *sig)
git_signature_from_buffer	src/signature.c	/^int git_signature_from_buffer(git_signature **out, const char *buf)$/;"	f	signature:(git_signature **out, const char *buf)
git_signature_new	src/signature.c	/^int git_signature_new(git_signature **sig_out, const char *name, const char *email, git_time_t time, int offset)$/;"	f	signature:(git_signature **sig_out, const char *name, const char *email, git_time_t time, int offset)
git_signature_now	src/signature.c	/^int git_signature_now(git_signature **sig_out, const char *name, const char *email)$/;"	f	signature:(git_signature **sig_out, const char *name, const char *email)
git_smart__cancel	src/transports/smart.c	/^static void git_smart__cancel(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
git_smart__close	src/transports/smart.c	/^static int git_smart__close(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
git_smart__connect	src/transports/smart.c	/^static int git_smart__connect($/;"	f	file:	signature:( git_transport *transport, const char *url, git_cred_acquire_cb cred_acquire_cb, void *cred_acquire_payload, const git_proxy_options *proxy, int direction, int flags)
git_smart__detect_caps	src/transports/smart_protocol.c	/^int git_smart__detect_caps(git_pkt_ref *pkt, transport_smart_caps *caps, git_vector *symrefs)$/;"	f	signature:(git_pkt_ref *pkt, transport_smart_caps *caps, git_vector *symrefs)
git_smart__download_pack	src/transports/smart_protocol.c	/^int git_smart__download_pack($/;"	f	signature:( git_transport *transport, git_repository *repo, git_transfer_progress *stats, git_transfer_progress_cb transfer_progress_cb, void *progress_payload)
git_smart__free	src/transports/smart.c	/^static void git_smart__free(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
git_smart__get_push_stream	src/transports/smart.c	/^int git_smart__get_push_stream(transport_smart *t, git_smart_subtransport_stream **stream)$/;"	f	signature:(transport_smart *t, git_smart_subtransport_stream **stream)
git_smart__is_connected	src/transports/smart.c	/^static int git_smart__is_connected(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
git_smart__ls	src/transports/smart.c	/^static int git_smart__ls(const git_remote_head ***out, size_t *size, git_transport *transport)$/;"	f	file:	signature:(const git_remote_head ***out, size_t *size, git_transport *transport)
git_smart__negotiate_fetch	src/transports/smart_protocol.c	/^int git_smart__negotiate_fetch(git_transport *transport, git_repository *repo, const git_remote_head * const *wants, size_t count)$/;"	f	signature:(git_transport *transport, git_repository *repo, const git_remote_head * const *wants, size_t count)
git_smart__negotiation_step	src/transports/smart.c	/^int git_smart__negotiation_step(git_transport *transport, void *data, size_t len)$/;"	f	signature:(git_transport *transport, void *data, size_t len)
git_smart__push	src/transports/smart_protocol.c	/^int git_smart__push(git_transport *transport, git_push *push, const git_remote_callbacks *cbs)$/;"	f	signature:(git_transport *transport, git_push *push, const git_remote_callbacks *cbs)
git_smart__read_flags	src/transports/smart.c	/^static int git_smart__read_flags(git_transport *transport, int *flags)$/;"	f	file:	signature:(git_transport *transport, int *flags)
git_smart__recv_cb	src/transports/smart.c	/^static int git_smart__recv_cb(gitno_buffer *buf)$/;"	f	file:	signature:(gitno_buffer *buf)
git_smart__reset_stream	src/transports/smart.c	/^GIT_INLINE(int) git_smart__reset_stream(transport_smart *t, bool close_subtransport)$/;"	f	signature:(transport_smart *t, bool close_subtransport)
git_smart__set_callbacks	src/transports/smart.c	/^static int git_smart__set_callbacks($/;"	f	file:	signature:( git_transport *transport, git_transport_message_cb progress_cb, git_transport_message_cb error_cb, git_transport_certificate_check_cb certificate_check_cb, void *message_cb_payload)
git_smart__set_custom_headers	src/transports/smart.c	/^static int git_smart__set_custom_headers($/;"	f	file:	signature:( git_transport *transport, const git_strarray *custom_headers)
git_smart__store_refs	src/transports/smart_protocol.c	/^int git_smart__store_refs(transport_smart *t, int flushes)$/;"	f	signature:(transport_smart *t, int flushes)
git_smart__update_heads	src/transports/smart.c	/^int git_smart__update_heads(transport_smart *t, git_vector *symrefs)$/;"	f	signature:(transport_smart *t, git_vector *symrefs)
git_smart_service_t	include/git2/sys/transport.h	/^} git_smart_service_t;$/;"	t	typeref:enum:__anon59
git_smart_subtransport	include/git2/sys/transport.h	/^struct git_smart_subtransport {$/;"	s
git_smart_subtransport	include/git2/sys/transport.h	/^typedef struct git_smart_subtransport git_smart_subtransport;$/;"	t	typeref:struct:git_smart_subtransport
git_smart_subtransport::action	include/git2/sys/transport.h	/^	int (* action)($/;"	m	struct:git_smart_subtransport	access:public
git_smart_subtransport::close	include/git2/sys/transport.h	/^	int (*close)(git_smart_subtransport *transport);$/;"	m	struct:git_smart_subtransport	access:public
git_smart_subtransport::free	include/git2/sys/transport.h	/^	void (*free)(git_smart_subtransport *transport);$/;"	m	struct:git_smart_subtransport	access:public
git_smart_subtransport_cb	include/git2/sys/transport.h	/^typedef int (*git_smart_subtransport_cb)($/;"	t
git_smart_subtransport_definition	include/git2/sys/transport.h	/^typedef struct git_smart_subtransport_definition {$/;"	s
git_smart_subtransport_definition	include/git2/sys/transport.h	/^} git_smart_subtransport_definition;$/;"	t	typeref:struct:git_smart_subtransport_definition
git_smart_subtransport_definition::callback	include/git2/sys/transport.h	/^	git_smart_subtransport_cb callback;$/;"	m	struct:git_smart_subtransport_definition	access:public
git_smart_subtransport_definition::param	include/git2/sys/transport.h	/^	void* param;$/;"	m	struct:git_smart_subtransport_definition	access:public
git_smart_subtransport_definition::rpc	include/git2/sys/transport.h	/^	unsigned rpc;$/;"	m	struct:git_smart_subtransport_definition	access:public
git_smart_subtransport_git	src/transports/git.c	/^int git_smart_subtransport_git(git_smart_subtransport **out, git_transport *owner, void *param)$/;"	f	signature:(git_smart_subtransport **out, git_transport *owner, void *param)
git_smart_subtransport_http	src/transports/http.c	/^int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner, void *param)$/;"	f	signature:(git_smart_subtransport **out, git_transport *owner, void *param)
git_smart_subtransport_http	src/transports/winhttp.c	/^int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner, void *param)$/;"	f	signature:(git_smart_subtransport **out, git_transport *owner, void *param)
git_smart_subtransport_ssh	src/transports/ssh.c	/^int git_smart_subtransport_ssh($/;"	f	signature:( git_smart_subtransport **out, git_transport *owner, void *param)
git_smart_subtransport_stream	include/git2/sys/transport.h	/^struct git_smart_subtransport_stream {$/;"	s
git_smart_subtransport_stream	include/git2/sys/transport.h	/^typedef struct git_smart_subtransport_stream git_smart_subtransport_stream;$/;"	t	typeref:struct:git_smart_subtransport_stream
git_smart_subtransport_stream::free	include/git2/sys/transport.h	/^	void (*free)($/;"	m	struct:git_smart_subtransport_stream	access:public
git_smart_subtransport_stream::read	include/git2/sys/transport.h	/^	int (*read)($/;"	m	struct:git_smart_subtransport_stream	access:public
git_smart_subtransport_stream::subtransport	include/git2/sys/transport.h	/^	git_smart_subtransport *subtransport;$/;"	m	struct:git_smart_subtransport_stream	access:public
git_smart_subtransport_stream::write	include/git2/sys/transport.h	/^	int (*write)($/;"	m	struct:git_smart_subtransport_stream	access:public
git_socket_stream	src/socket_stream.h	/^} git_socket_stream;$/;"	t	typeref:struct:__anon330
git_socket_stream_new	src/socket_stream.c	/^int git_socket_stream_new(git_stream **out, const char *host, const char *port)$/;"	f	signature:(git_stream **out, const char *host, const char *port)
git_sort_t	include/git2/revwalk.h	/^} git_sort_t;$/;"	t	typeref:enum:__anon66
git_sortedcache	src/sortedcache.h	/^} git_sortedcache;$/;"	t	typeref:struct:__anon310
git_sortedcache_clear	src/sortedcache.c	/^int git_sortedcache_clear(git_sortedcache *sc, bool wlock)$/;"	f	signature:(git_sortedcache *sc, bool wlock)
git_sortedcache_copy	src/sortedcache.c	/^int git_sortedcache_copy($/;"	f	signature:( git_sortedcache **out, git_sortedcache *src, bool lock, int (*copy_item)(void *payload, void *tgt_item, void *src_item), void *payload)
git_sortedcache_entry	src/sortedcache.c	/^void *git_sortedcache_entry(git_sortedcache *sc, size_t pos)$/;"	f	signature:(git_sortedcache *sc, size_t pos)
git_sortedcache_entrycount	src/sortedcache.c	/^size_t git_sortedcache_entrycount(const git_sortedcache *sc)$/;"	f	signature:(const git_sortedcache *sc)
git_sortedcache_free	src/sortedcache.c	/^void git_sortedcache_free(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_free_item_fn	src/sortedcache.h	/^typedef void (*git_sortedcache_free_item_fn)(void *payload, void *item);$/;"	t
git_sortedcache_incref	src/sortedcache.c	/^void git_sortedcache_incref(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_lockandload	src/sortedcache.c	/^int git_sortedcache_lockandload(git_sortedcache *sc, git_buf *buf)$/;"	f	signature:(git_sortedcache *sc, git_buf *buf)
git_sortedcache_lookup	src/sortedcache.c	/^void *git_sortedcache_lookup(const git_sortedcache *sc, const char *key)$/;"	f	signature:(const git_sortedcache *sc, const char *key)
git_sortedcache_lookup_index	src/sortedcache.c	/^int git_sortedcache_lookup_index($/;"	f	signature:( size_t *out, git_sortedcache *sc, const char *key)
git_sortedcache_new	src/sortedcache.c	/^int git_sortedcache_new($/;"	f	signature:( git_sortedcache **out, size_t item_path_offset, git_sortedcache_free_item_fn free_item, void *free_item_payload, git_vector_cmp item_cmp, const char *path)
git_sortedcache_path	src/sortedcache.c	/^const char *git_sortedcache_path(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_remove	src/sortedcache.c	/^int git_sortedcache_remove(git_sortedcache *sc, size_t pos)$/;"	f	signature:(git_sortedcache *sc, size_t pos)
git_sortedcache_rlock	src/sortedcache.c	/^int git_sortedcache_rlock(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_runlock	src/sortedcache.c	/^void git_sortedcache_runlock(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_updated	src/sortedcache.c	/^void git_sortedcache_updated(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_upsert	src/sortedcache.c	/^int git_sortedcache_upsert(void **out, git_sortedcache *sc, const char *key)$/;"	f	signature:(void **out, git_sortedcache *sc, const char *key)
git_sortedcache_wlock	src/sortedcache.c	/^int git_sortedcache_wlock(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_sortedcache_wunlock	src/sortedcache.c	/^void git_sortedcache_wunlock(git_sortedcache *sc)$/;"	f	signature:(git_sortedcache *sc)
git_ssh_extract_url_parts	src/transports/ssh.c	/^static int git_ssh_extract_url_parts($/;"	f	file:	signature:( char **host, char **username, const char *url)
git_stash_apply	src/stash.c	/^int git_stash_apply($/;"	f	signature:( git_repository *repo, size_t index, const git_stash_apply_options *given_opts)
git_stash_apply_flags	include/git2/stash.h	/^} git_stash_apply_flags;$/;"	t	typeref:enum:__anon63
git_stash_apply_init_options	src/stash.c	/^int git_stash_apply_init_options(git_stash_apply_options *opts, unsigned int version)$/;"	f	signature:(git_stash_apply_options *opts, unsigned int version)
git_stash_apply_options	include/git2/stash.h	/^typedef struct git_stash_apply_options {$/;"	s
git_stash_apply_options	include/git2/stash.h	/^} git_stash_apply_options;$/;"	t	typeref:struct:git_stash_apply_options
git_stash_apply_options::checkout_options	include/git2/stash.h	/^	git_checkout_options checkout_options;$/;"	m	struct:git_stash_apply_options	access:public
git_stash_apply_options::flags	include/git2/stash.h	/^	git_stash_apply_flags flags;$/;"	m	struct:git_stash_apply_options	access:public
git_stash_apply_options::progress_cb	include/git2/stash.h	/^	git_stash_apply_progress_cb progress_cb;$/;"	m	struct:git_stash_apply_options	access:public
git_stash_apply_options::progress_payload	include/git2/stash.h	/^	void *progress_payload;$/;"	m	struct:git_stash_apply_options	access:public
git_stash_apply_options::version	include/git2/stash.h	/^	unsigned int version;$/;"	m	struct:git_stash_apply_options	access:public
git_stash_apply_progress_cb	include/git2/stash.h	/^typedef int (*git_stash_apply_progress_cb)($/;"	t
git_stash_apply_progress_t	include/git2/stash.h	/^} git_stash_apply_progress_t;$/;"	t	typeref:enum:__anon64
git_stash_cb	include/git2/stash.h	/^typedef int (*git_stash_cb)($/;"	t
git_stash_drop	src/stash.c	/^int git_stash_drop($/;"	f	signature:( git_repository *repo, size_t index)
git_stash_flags	include/git2/stash.h	/^} git_stash_flags;$/;"	t	typeref:enum:__anon62
git_stash_foreach	src/stash.c	/^int git_stash_foreach($/;"	f	signature:( git_repository *repo, git_stash_cb callback, void *payload)
git_stash_pop	src/stash.c	/^int git_stash_pop($/;"	f	signature:( git_repository *repo, size_t index, const git_stash_apply_options *options)
git_stash_save	src/stash.c	/^int git_stash_save($/;"	f	signature:( git_oid *out, git_repository *repo, const git_signature *stasher, const char *message, uint32_t flags)
git_status_byindex	src/status.c	/^const git_status_entry *git_status_byindex(git_status_list *status, size_t i)$/;"	f	signature:(git_status_list *status, size_t i)
git_status_cb	include/git2/status.h	/^typedef int (*git_status_cb)($/;"	t
git_status_entry	include/git2/status.h	/^} git_status_entry;$/;"	t	typeref:struct:__anon50
git_status_file	src/status.c	/^int git_status_file($/;"	f	signature:( unsigned int *status_flags, git_repository *repo, const char *path)
git_status_foreach	src/status.c	/^int git_status_foreach(git_repository *repo, git_status_cb cb, void *payload)$/;"	f	signature:(git_repository *repo, git_status_cb cb, void *payload)
git_status_foreach_ext	src/status.c	/^int git_status_foreach_ext($/;"	f	signature:( git_repository *repo, const git_status_options *opts, git_status_cb cb, void *payload)
git_status_init_options	src/status.c	/^int git_status_init_options(git_status_options *opts, unsigned int version)$/;"	f	signature:(git_status_options *opts, unsigned int version)
git_status_list	include/git2/types.h	/^typedef struct git_status_list git_status_list;$/;"	t	typeref:struct:git_status_list
git_status_list	src/status.h	/^struct git_status_list {$/;"	s
git_status_list::head2idx	src/status.h	/^	git_diff *head2idx;$/;"	m	struct:git_status_list	access:public
git_status_list::idx2wd	src/status.h	/^	git_diff *idx2wd;$/;"	m	struct:git_status_list	access:public
git_status_list::opts	src/status.h	/^	git_status_options opts;$/;"	m	struct:git_status_list	access:public
git_status_list::paired	src/status.h	/^	git_vector paired;$/;"	m	struct:git_status_list	access:public
git_status_list_alloc	src/status.c	/^static git_status_list *git_status_list_alloc(git_index *index)$/;"	f	file:	signature:(git_index *index)
git_status_list_entrycount	src/status.c	/^size_t git_status_list_entrycount(git_status_list *status)$/;"	f	signature:(git_status_list *status)
git_status_list_free	src/status.c	/^void git_status_list_free(git_status_list *status)$/;"	f	signature:(git_status_list *status)
git_status_list_get_perfdata	src/status.c	/^int git_status_list_get_perfdata($/;"	f	signature:( git_diff_perfdata *out, const git_status_list *status)
git_status_list_new	src/status.c	/^int git_status_list_new($/;"	f	signature:( git_status_list **out, git_repository *repo, const git_status_options *opts)
git_status_opt_t	include/git2/status.h	/^} git_status_opt_t;$/;"	t	typeref:enum:__anon48
git_status_options	include/git2/status.h	/^} git_status_options;$/;"	t	typeref:struct:__anon49
git_status_should_ignore	src/status.c	/^int git_status_should_ignore($/;"	f	signature:( int *ignored, git_repository *repo, const char *path)
git_status_show_t	include/git2/status.h	/^} git_status_show_t;$/;"	t	typeref:enum:__anon47
git_status_t	include/git2/status.h	/^} git_status_t;$/;"	t	typeref:enum:__anon46
git_stransport_stream_new	src/stransport_stream.c	/^int git_stransport_stream_new(git_stream **out, const char *host, const char *port)$/;"	f	signature:(git_stream **out, const char *host, const char *port)
git_strarray	include/git2/strarray.h	/^typedef struct git_strarray {$/;"	s
git_strarray	include/git2/strarray.h	/^} git_strarray;$/;"	t	typeref:struct:git_strarray
git_strarray::count	include/git2/strarray.h	/^	size_t count;$/;"	m	struct:git_strarray	access:public
git_strarray::strings	include/git2/strarray.h	/^	char **strings;$/;"	m	struct:git_strarray	access:public
git_strarray_copy	src/util.c	/^int git_strarray_copy(git_strarray *tgt, const git_strarray *src)$/;"	f	signature:(git_strarray *tgt, const git_strarray *src)
git_strarray_free	src/util.c	/^void git_strarray_free(git_strarray *array)$/;"	f	signature:(git_strarray *array)
git_stream	include/git2/sys/stream.h	/^typedef struct git_stream {$/;"	s
git_stream	include/git2/sys/stream.h	/^} git_stream;$/;"	t	typeref:struct:git_stream
git_stream::certificate	include/git2/sys/stream.h	/^	int (*certificate)(git_cert **, struct git_stream *);$/;"	m	struct:git_stream	access:public
git_stream::close	include/git2/sys/stream.h	/^	int (*close)(struct git_stream *);$/;"	m	struct:git_stream	access:public
git_stream::connect	include/git2/sys/stream.h	/^	int (*connect)(struct git_stream *);$/;"	m	struct:git_stream	access:public
git_stream::encrypted	include/git2/sys/stream.h	/^	int encrypted;$/;"	m	struct:git_stream	access:public
git_stream::free	include/git2/sys/stream.h	/^	void (*free)(struct git_stream *);$/;"	m	struct:git_stream	access:public
git_stream::proxy_support	include/git2/sys/stream.h	/^	int proxy_support;$/;"	m	struct:git_stream	access:public
git_stream::read	include/git2/sys/stream.h	/^	ssize_t (*read)(struct git_stream *, void *, size_t);$/;"	m	struct:git_stream	access:public
git_stream::set_proxy	include/git2/sys/stream.h	/^	int (*set_proxy)(struct git_stream *, const git_proxy_options *proxy_opts);$/;"	m	struct:git_stream	access:public
git_stream::version	include/git2/sys/stream.h	/^	int version;$/;"	m	struct:git_stream	access:public
git_stream::write	include/git2/sys/stream.h	/^	ssize_t (*write)(struct git_stream *, const char *, size_t, int);$/;"	m	struct:git_stream	access:public
git_stream_bio_method	src/openssl_stream.c	/^static BIO_METHOD *git_stream_bio_method;$/;"	v	file:
git_stream_cb	include/git2/sys/stream.h	/^typedef int (*git_stream_cb)(git_stream **out, const char *host, const char *port);$/;"	t
git_stream_certificate	src/stream.h	/^GIT_INLINE(int) git_stream_certificate(git_cert **out, git_stream *st)$/;"	f	signature:(git_cert **out, git_stream *st)
git_stream_close	src/stream.h	/^GIT_INLINE(int) git_stream_close(git_stream *st)$/;"	f	signature:(git_stream *st)
git_stream_connect	src/stream.h	/^GIT_INLINE(int) git_stream_connect(git_stream *st)$/;"	f	signature:(git_stream *st)
git_stream_free	src/stream.h	/^GIT_INLINE(void) git_stream_free(git_stream *st)$/;"	f	signature:(git_stream *st)
git_stream_is_encrypted	src/stream.h	/^GIT_INLINE(int) git_stream_is_encrypted(git_stream *st)$/;"	f	signature:(git_stream *st)
git_stream_read	src/stream.h	/^GIT_INLINE(ssize_t) git_stream_read(git_stream *st, void *data, size_t len)$/;"	f	signature:(git_stream *st, void *data, size_t len)
git_stream_register_tls	src/tls_stream.c	/^int git_stream_register_tls(git_stream_cb ctor)$/;"	f	signature:(git_stream_cb ctor)
git_stream_set_proxy	src/stream.h	/^GIT_INLINE(int) git_stream_set_proxy(git_stream *st, const git_proxy_options *proxy_opts)$/;"	f	signature:(git_stream *st, const git_proxy_options *proxy_opts)
git_stream_supports_proxy	src/stream.h	/^GIT_INLINE(int) git_stream_supports_proxy(git_stream *st)$/;"	f	signature:(git_stream *st)
git_stream_write	src/stream.h	/^GIT_INLINE(ssize_t) git_stream_write(git_stream *st, const char *data, size_t len, int flags)$/;"	f	signature:(git_stream *st, const char *data, size_t len, int flags)
git_strmap	src/strmap.h	/^typedef khash_t(str) git_strmap;$/;"	t
git_strmap_alloc	src/strmap.h	26;"	d
git_strmap_begin	src/strmap.h	70;"	d
git_strmap_clear	src/strmap.h	30;"	d
git_strmap_delete	src/strmap.h	62;"	d
git_strmap_delete_at	src/strmap.h	43;"	d
git_strmap_end	src/strmap.h	71;"	d
git_strmap_exists	src/strmap.h	37;"	d
git_strmap_foreach	src/strmap.h	67;"	d
git_strmap_foreach_value	src/strmap.h	68;"	d
git_strmap_free	src/strmap.h	29;"	d
git_strmap_has_data	src/strmap.h	38;"	d
git_strmap_insert	src/strmap.h	45;"	d
git_strmap_insert2	src/strmap.h	52;"	d
git_strmap_iter	src/strmap.h	/^typedef khiter_t git_strmap_iter;$/;"	t
git_strmap_key	src/strmap.h	40;"	d
git_strmap_lookup_index	src/strmap.h	34;"	d
git_strmap_next	src/strmap.c	/^int git_strmap_next($/;"	f	signature:( void **data, git_strmap_iter* iter, git_strmap *map)
git_strmap_num_entries	src/strmap.h	32;"	d
git_strmap_set_value_at	src/strmap.h	42;"	d
git_strmap_valid_index	src/strmap.h	35;"	d
git_strmap_value_at	src/strmap.h	41;"	d
git_style_unc_path	tests/clone/local.c	/^static int git_style_unc_path(git_buf *buf, const char *host, const char *path)$/;"	f	file:	signature:(git_buf *buf, const char *host, const char *path)
git_submodule	include/git2/types.h	/^typedef struct git_submodule git_submodule;$/;"	t	typeref:struct:git_submodule
git_submodule	src/submodule.h	/^struct git_submodule {$/;"	s
git_submodule::branch	src/submodule.h	/^	char *branch;$/;"	m	struct:git_submodule	access:public
git_submodule::fetch_recurse	src/submodule.h	/^	git_submodule_recurse_t fetch_recurse;$/;"	m	struct:git_submodule	access:public
git_submodule::fetch_recurse_default	src/submodule.h	/^	git_submodule_recurse_t fetch_recurse_default;$/;"	m	struct:git_submodule	access:public
git_submodule::flags	src/submodule.h	/^	uint32_t flags;$/;"	m	struct:git_submodule	access:public
git_submodule::head_oid	src/submodule.h	/^	git_oid head_oid;$/;"	m	struct:git_submodule	access:public
git_submodule::ignore	src/submodule.h	/^	git_submodule_ignore_t ignore;$/;"	m	struct:git_submodule	access:public
git_submodule::ignore_default	src/submodule.h	/^	git_submodule_ignore_t ignore_default;$/;"	m	struct:git_submodule	access:public
git_submodule::index_oid	src/submodule.h	/^	git_oid index_oid;$/;"	m	struct:git_submodule	access:public
git_submodule::name	src/submodule.h	/^	char *name;$/;"	m	struct:git_submodule	access:public
git_submodule::path	src/submodule.h	/^	char *path; \/* important: may just point to "name" string *\/$/;"	m	struct:git_submodule	access:public
git_submodule::rc	src/submodule.h	/^	git_refcount rc;$/;"	m	struct:git_submodule	access:public
git_submodule::repo	src/submodule.h	/^	git_repository *repo;$/;"	m	struct:git_submodule	access:public
git_submodule::update	src/submodule.h	/^	git_submodule_update_t update;$/;"	m	struct:git_submodule	access:public
git_submodule::update_default	src/submodule.h	/^	git_submodule_update_t update_default;$/;"	m	struct:git_submodule	access:public
git_submodule::url	src/submodule.h	/^	char *url;$/;"	m	struct:git_submodule	access:public
git_submodule::wd_oid	src/submodule.h	/^	git_oid wd_oid;$/;"	m	struct:git_submodule	access:public
git_submodule__open	src/submodule.c	/^static int git_submodule__open($/;"	f	file:	signature:( git_repository **subrepo, git_submodule *sm, bool bare)
git_submodule__status	src/submodule.c	/^int git_submodule__status($/;"	f	signature:( unsigned int *out_status, git_oid *out_head_id, git_oid *out_index_id, git_oid *out_wd_id, git_submodule *sm, git_submodule_ignore_t ign)
git_submodule_add_finalize	src/submodule.c	/^int git_submodule_add_finalize(git_submodule *sm)$/;"	f	signature:(git_submodule *sm)
git_submodule_add_setup	src/submodule.c	/^int git_submodule_add_setup($/;"	f	signature:( git_submodule **out, git_repository *repo, const char *url, const char *path, int use_gitlink)
git_submodule_add_to_index	src/submodule.c	/^int git_submodule_add_to_index(git_submodule *sm, int write_index)$/;"	f	signature:(git_submodule *sm, int write_index)
git_submodule_branch	src/submodule.c	/^const char *git_submodule_branch(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_cb	include/git2/submodule.h	/^typedef int (*git_submodule_cb)($/;"	t
git_submodule_fetch_recurse_submodules	src/submodule.c	/^git_submodule_recurse_t git_submodule_fetch_recurse_submodules($/;"	f	signature:( git_submodule *submodule)
git_submodule_foreach	src/submodule.c	/^int git_submodule_foreach($/;"	f	signature:( git_repository *repo, git_submodule_cb callback, void *payload)
git_submodule_free	src/submodule.c	/^void git_submodule_free(git_submodule *sm)$/;"	f	signature:(git_submodule *sm)
git_submodule_head_id	src/submodule.c	/^const git_oid *git_submodule_head_id(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_ignore	src/submodule.c	/^git_submodule_ignore_t git_submodule_ignore(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_ignore_t	include/git2/types.h	/^} git_submodule_ignore_t;$/;"	t	typeref:enum:__anon149
git_submodule_index_id	src/submodule.c	/^const git_oid *git_submodule_index_id(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_init	src/submodule.c	/^int git_submodule_init(git_submodule *sm, int overwrite)$/;"	f	signature:(git_submodule *sm, int overwrite)
git_submodule_location	src/submodule.c	/^int git_submodule_location(unsigned int *location, git_submodule *sm)$/;"	f	signature:(unsigned int *location, git_submodule *sm)
git_submodule_lookup	src/submodule.c	/^int git_submodule_lookup($/;"	f	signature:( git_submodule **out, git_repository *repo, const char *name)
git_submodule_name	src/submodule.c	/^const char *git_submodule_name(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_open	src/submodule.c	/^int git_submodule_open(git_repository **subrepo, git_submodule *sm)$/;"	f	signature:(git_repository **subrepo, git_submodule *sm)
git_submodule_open_bare	src/submodule.c	/^int git_submodule_open_bare(git_repository **subrepo, git_submodule *sm)$/;"	f	signature:(git_repository **subrepo, git_submodule *sm)
git_submodule_owner	src/submodule.c	/^git_repository *git_submodule_owner(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_parse_ignore	src/submodule.c	/^int git_submodule_parse_ignore(git_submodule_ignore_t *out, const char *value)$/;"	f	signature:(git_submodule_ignore_t *out, const char *value)
git_submodule_parse_recurse	src/submodule.c	/^int git_submodule_parse_recurse(git_submodule_recurse_t *out, const char *value)$/;"	f	signature:(git_submodule_recurse_t *out, const char *value)
git_submodule_parse_update	src/submodule.c	/^int git_submodule_parse_update(git_submodule_update_t *out, const char *value)$/;"	f	signature:(git_submodule_update_t *out, const char *value)
git_submodule_path	src/submodule.c	/^const char *git_submodule_path(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_recurse_t	include/git2/types.h	/^} git_submodule_recurse_t;$/;"	t	typeref:enum:__anon150
git_submodule_reload	src/submodule.c	/^int git_submodule_reload(git_submodule *sm, int force)$/;"	f	signature:(git_submodule *sm, int force)
git_submodule_repo_init	src/submodule.c	/^int git_submodule_repo_init($/;"	f	signature:( git_repository **out, const git_submodule *sm, int use_gitlink)
git_submodule_resolve_url	src/submodule.c	/^int git_submodule_resolve_url(git_buf *out, git_repository *repo, const char *url)$/;"	f	signature:(git_buf *out, git_repository *repo, const char *url)
git_submodule_set_branch	src/submodule.c	/^int git_submodule_set_branch(git_repository *repo, const char *name, const char *branch)$/;"	f	signature:(git_repository *repo, const char *name, const char *branch)
git_submodule_set_fetch_recurse_submodules	src/submodule.c	/^int git_submodule_set_fetch_recurse_submodules(git_repository *repo, const char *name, git_submodule_recurse_t recurse)$/;"	f	signature:(git_repository *repo, const char *name, git_submodule_recurse_t recurse)
git_submodule_set_ignore	src/submodule.c	/^int git_submodule_set_ignore(git_repository *repo, const char *name, git_submodule_ignore_t ignore)$/;"	f	signature:(git_repository *repo, const char *name, git_submodule_ignore_t ignore)
git_submodule_set_update	src/submodule.c	/^int git_submodule_set_update(git_repository *repo, const char *name, git_submodule_update_t update)$/;"	f	signature:(git_repository *repo, const char *name, git_submodule_update_t update)
git_submodule_set_url	src/submodule.c	/^int git_submodule_set_url(git_repository *repo, const char *name, const char *url)$/;"	f	signature:(git_repository *repo, const char *name, const char *url)
git_submodule_status	src/submodule.c	/^int git_submodule_status(unsigned int *status, git_repository *repo, const char *name, git_submodule_ignore_t ignore)$/;"	f	signature:(unsigned int *status, git_repository *repo, const char *name, git_submodule_ignore_t ignore)
git_submodule_status_t	include/git2/submodule.h	/^} git_submodule_status_t;$/;"	t	typeref:enum:__anon141
git_submodule_sync	src/submodule.c	/^int git_submodule_sync(git_submodule *sm)$/;"	f	signature:(git_submodule *sm)
git_submodule_update	src/submodule.c	/^int git_submodule_update(git_submodule *sm, int init, git_submodule_update_options *_update_options)$/;"	f	signature:(git_submodule *sm, int init, git_submodule_update_options *_update_options)
git_submodule_update_init_options	src/submodule.c	/^int git_submodule_update_init_options(git_submodule_update_options *opts, unsigned int version)$/;"	f	signature:(git_submodule_update_options *opts, unsigned int version)
git_submodule_update_options	include/git2/submodule.h	/^typedef struct git_submodule_update_options {$/;"	s
git_submodule_update_options	include/git2/submodule.h	/^} git_submodule_update_options;$/;"	t	typeref:struct:git_submodule_update_options
git_submodule_update_options::allow_fetch	include/git2/submodule.h	/^	int allow_fetch;$/;"	m	struct:git_submodule_update_options	access:public
git_submodule_update_options::checkout_opts	include/git2/submodule.h	/^	git_checkout_options checkout_opts;$/;"	m	struct:git_submodule_update_options	access:public
git_submodule_update_options::clone_checkout_strategy	include/git2/submodule.h	/^	unsigned int clone_checkout_strategy;$/;"	m	struct:git_submodule_update_options	access:public
git_submodule_update_options::fetch_opts	include/git2/submodule.h	/^	git_fetch_options fetch_opts;$/;"	m	struct:git_submodule_update_options	access:public
git_submodule_update_options::version	include/git2/submodule.h	/^	unsigned int version;$/;"	m	struct:git_submodule_update_options	access:public
git_submodule_update_repo_init_cb	src/submodule.c	/^static int git_submodule_update_repo_init_cb($/;"	f	file:	signature:( git_repository **out, const char *path, int bare, void *payload)
git_submodule_update_strategy	src/submodule.c	/^git_submodule_update_t git_submodule_update_strategy(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_update_t	include/git2/types.h	/^} git_submodule_update_t;$/;"	t	typeref:enum:__anon148
git_submodule_update_to_str	src/submodule.c	/^const char *git_submodule_update_to_str(git_submodule_update_t update)$/;"	f	signature:(git_submodule_update_t update)
git_submodule_url	src/submodule.c	/^const char *git_submodule_url(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_submodule_wd_id	src/submodule.c	/^const git_oid *git_submodule_wd_id(git_submodule *submodule)$/;"	f	signature:(git_submodule *submodule)
git_subtransport	src/transports/git.c	/^} git_subtransport;$/;"	t	typeref:struct:__anon198	file:
git_subtransport_definition	src/transport.c	/^static git_smart_subtransport_definition git_subtransport_definition = { git_smart_subtransport_git, 0, NULL };$/;"	v	file:
git_sysdir__dir	src/sysdir.c	/^struct git_sysdir__dir {$/;"	s	file:
git_sysdir__dir::buf	src/sysdir.c	/^	git_buf buf;$/;"	m	struct:git_sysdir__dir	file:	access:public
git_sysdir__dir::guess	src/sysdir.c	/^	int (*guess)(git_buf *out);$/;"	m	struct:git_sysdir__dir	file:	access:public
git_sysdir__dirs	src/sysdir.c	/^static struct git_sysdir__dir git_sysdir__dirs[] = {$/;"	v	typeref:struct:git_sysdir__dir	file:
git_sysdir_check_selector	src/sysdir.c	/^static int git_sysdir_check_selector(git_sysdir_t which)$/;"	f	file:	signature:(git_sysdir_t which)
git_sysdir_find_global_file	src/sysdir.c	/^int git_sysdir_find_global_file(git_buf *path, const char *filename)$/;"	f	signature:(git_buf *path, const char *filename)
git_sysdir_find_in_dirlist	src/sysdir.c	/^static int git_sysdir_find_in_dirlist($/;"	f	file:	signature:( git_buf *path, const char *name, git_sysdir_t which, const char *label)
git_sysdir_find_programdata_file	src/sysdir.c	/^int git_sysdir_find_programdata_file(git_buf *path, const char *filename)$/;"	f	signature:(git_buf *path, const char *filename)
git_sysdir_find_system_file	src/sysdir.c	/^int git_sysdir_find_system_file(git_buf *path, const char *filename)$/;"	f	signature:(git_buf *path, const char *filename)
git_sysdir_find_template_dir	src/sysdir.c	/^int git_sysdir_find_template_dir(git_buf *path)$/;"	f	signature:(git_buf *path)
git_sysdir_find_xdg_file	src/sysdir.c	/^int git_sysdir_find_xdg_file(git_buf *path, const char *filename)$/;"	f	signature:(git_buf *path, const char *filename)
git_sysdir_get	src/sysdir.c	/^int git_sysdir_get(const git_buf **out, git_sysdir_t which)$/;"	f	signature:(const git_buf **out, git_sysdir_t which)
git_sysdir_get_str	src/sysdir.c	/^int git_sysdir_get_str($/;"	f	signature:( char *out, size_t outlen, git_sysdir_t which)
git_sysdir_global_init	src/sysdir.c	/^int git_sysdir_global_init(void)$/;"	f	signature:(void)
git_sysdir_global_shutdown	src/sysdir.c	/^static void git_sysdir_global_shutdown(void)$/;"	f	file:	signature:(void)
git_sysdir_guess_global_dirs	src/sysdir.c	/^static int git_sysdir_guess_global_dirs(git_buf *out)$/;"	f	file:	signature:(git_buf *out)
git_sysdir_guess_programdata_dirs	src/sysdir.c	/^static int git_sysdir_guess_programdata_dirs(git_buf *out)$/;"	f	file:	signature:(git_buf *out)
git_sysdir_guess_system_dirs	src/sysdir.c	/^static int git_sysdir_guess_system_dirs(git_buf *out)$/;"	f	file:	signature:(git_buf *out)
git_sysdir_guess_template_dirs	src/sysdir.c	/^static int git_sysdir_guess_template_dirs(git_buf *out)$/;"	f	file:	signature:(git_buf *out)
git_sysdir_guess_xdg_dirs	src/sysdir.c	/^static int git_sysdir_guess_xdg_dirs(git_buf *out)$/;"	f	file:	signature:(git_buf *out)
git_sysdir_set	src/sysdir.c	/^int git_sysdir_set(git_sysdir_t which, const char *search_path)$/;"	f	signature:(git_sysdir_t which, const char *search_path)
git_sysdir_t	src/sysdir.h	/^} git_sysdir_t;$/;"	t	typeref:enum:__anon158
git_tag	include/git2/types.h	/^typedef struct git_tag git_tag;$/;"	t	typeref:struct:git_tag
git_tag	src/tag.h	/^struct git_tag {$/;"	s
git_tag::message	src/tag.h	/^	char *message;$/;"	m	struct:git_tag	access:public
git_tag::object	src/tag.h	/^	git_object object;$/;"	m	struct:git_tag	access:public
git_tag::tag_name	src/tag.h	/^	char *tag_name;$/;"	m	struct:git_tag	access:public
git_tag::tagger	src/tag.h	/^	git_signature *tagger;$/;"	m	struct:git_tag	access:public
git_tag::target	src/tag.h	/^	git_oid target;$/;"	m	struct:git_tag	access:public
git_tag::type	src/tag.h	/^	git_otype type;$/;"	m	struct:git_tag	access:public
git_tag__free	src/tag.c	/^void git_tag__free(void *_tag)$/;"	f	signature:(void *_tag)
git_tag__parse	src/tag.c	/^int git_tag__parse(void *_tag, git_odb_object *odb_obj)$/;"	f	signature:(void *_tag, git_odb_object *odb_obj)
git_tag_annotation_create	src/tag.c	/^int git_tag_annotation_create($/;"	f	signature:( git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message)
git_tag_create	src/tag.c	/^int git_tag_create($/;"	f	signature:( git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message, int allow_ref_overwrite)
git_tag_create__internal	src/tag.c	/^static int git_tag_create__internal($/;"	f	file:	signature:( git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message, int allow_ref_overwrite, int create_tag_annotation)
git_tag_create_frombuffer	src/tag.c	/^int git_tag_create_frombuffer(git_oid *oid, git_repository *repo, const char *buffer, int allow_ref_overwrite)$/;"	f	signature:(git_oid *oid, git_repository *repo, const char *buffer, int allow_ref_overwrite)
git_tag_create_lightweight	src/tag.c	/^int git_tag_create_lightweight($/;"	f	signature:( git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, int allow_ref_overwrite)
git_tag_delete	src/tag.c	/^int git_tag_delete(git_repository *repo, const char *tag_name)$/;"	f	signature:(git_repository *repo, const char *tag_name)
git_tag_dup	src/object_api.c	/^int git_tag_dup(git_tag **out, git_tag *obj)$/;"	f	signature:(git_tag **out, git_tag *obj)
git_tag_foreach	src/tag.c	/^int git_tag_foreach(git_repository *repo, git_tag_foreach_cb cb, void *cb_data)$/;"	f	signature:(git_repository *repo, git_tag_foreach_cb cb, void *cb_data)
git_tag_foreach_cb	include/git2/tag.h	/^typedef int (*git_tag_foreach_cb)(const char *name, git_oid *oid, void *payload);$/;"	t
git_tag_free	src/object_api.c	/^void git_tag_free(git_tag *obj)$/;"	f	signature:(git_tag *obj)
git_tag_id	src/object_api.c	/^const git_oid *git_tag_id(const git_tag *obj)$/;"	f	signature:(const git_tag *obj)
git_tag_list	src/tag.c	/^int git_tag_list(git_strarray *tag_names, git_repository *repo)$/;"	f	signature:(git_strarray *tag_names, git_repository *repo)
git_tag_list_match	src/tag.c	/^int git_tag_list_match(git_strarray *tag_names, const char *pattern, git_repository *repo)$/;"	f	signature:(git_strarray *tag_names, const char *pattern, git_repository *repo)
git_tag_lookup	src/object_api.c	/^int git_tag_lookup(git_tag **out, git_repository *repo, const git_oid *id)$/;"	f	signature:(git_tag **out, git_repository *repo, const git_oid *id)
git_tag_lookup_prefix	src/object_api.c	/^int git_tag_lookup_prefix(git_tag **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f	signature:(git_tag **out, git_repository *repo, const git_oid *id, size_t len)
git_tag_message	src/tag.c	/^const char *git_tag_message(const git_tag *t)$/;"	f	signature:(const git_tag *t)
git_tag_name	src/tag.c	/^const char *git_tag_name(const git_tag *t)$/;"	f	signature:(const git_tag *t)
git_tag_owner	src/object_api.c	/^git_repository *git_tag_owner(const git_tag *obj)$/;"	f	signature:(const git_tag *obj)
git_tag_peel	src/tag.c	/^int git_tag_peel(git_object **tag_target, const git_tag *tag)$/;"	f	signature:(git_object **tag_target, const git_tag *tag)
git_tag_tagger	src/tag.c	/^const git_signature *git_tag_tagger(const git_tag *t)$/;"	f	signature:(const git_tag *t)
git_tag_target	src/tag.c	/^int git_tag_target(git_object **target, const git_tag *t)$/;"	f	signature:(git_object **target, const git_tag *t)
git_tag_target_id	src/tag.c	/^const git_oid *git_tag_target_id(const git_tag *t)$/;"	f	signature:(const git_tag *t)
git_tag_target_type	src/tag.c	/^git_otype git_tag_target_type(const git_tag *t)$/;"	f	signature:(const git_tag *t)
git_thread	src/thread-utils.h	134;"	d
git_thread	src/unix/pthread.h	/^} git_thread;$/;"	t	typeref:struct:__anon328
git_thread	src/win32/thread.h	/^} git_thread;$/;"	t	typeref:struct:__anon285
git_thread_create	src/thread-utils.h	135;"	d
git_thread_create	src/unix/pthread.h	16;"	d
git_thread_create	src/win32/thread.c	/^int git_thread_create($/;"	f	signature:( git_thread *GIT_RESTRICT thread, void *(*start_routine)(void*), void *GIT_RESTRICT arg)
git_thread_currentid	src/unix/pthread.h	20;"	d
git_thread_currentid	src/win32/thread.c	/^size_t git_thread_currentid(void)$/;"	f	signature:(void)
git_thread_exit	src/unix/pthread.h	21;"	d
git_thread_exit	src/win32/thread.c	/^void git_thread_exit(void *value)$/;"	f	signature:(void *value)
git_thread_join	src/thread-utils.h	136;"	d
git_thread_join	src/unix/pthread.h	18;"	d
git_thread_join	src/win32/thread.c	/^int git_thread_join($/;"	f	signature:( git_thread *thread, void **value_ptr)
git_thread_yield	tests/threads/diff.c	11;"	d	file:
git_thread_yield	tests/threads/diff.c	15;"	d	file:
git_thread_yield	tests/threads/diff.c	7;"	d	file:
git_thread_yield	tests/threads/diff.c	9;"	d	file:
git_threads_init	src/unix/pthread.h	15;"	d
git_threads_init	src/win32/thread.c	/^int git_threads_init(void)$/;"	f	signature:(void)
git_time	include/git2/types.h	/^typedef struct git_time {$/;"	s
git_time	include/git2/types.h	/^} git_time;$/;"	t	typeref:struct:git_time
git_time::offset	include/git2/types.h	/^	int offset; \/**< timezone offset, in minutes *\/$/;"	m	struct:git_time	access:public
git_time::time	include/git2/types.h	/^	git_time_t time; \/**< time in seconds from epoch *\/$/;"	m	struct:git_time	access:public
git_time_monotonic	src/util.c	/^double git_time_monotonic(void)$/;"	f	signature:(void)
git_time_t	include/git2/types.h	/^typedef __time64_t git_time_t;$/;"	t
git_tls_stream_new	src/tls_stream.c	/^int git_tls_stream_new(git_stream **out, const char *host, const char *port)$/;"	f	signature:(git_stream **out, const char *host, const char *port)
git_trace	src/trace.h	40;"	d
git_trace	src/trace.h	58;"	d
git_trace__data	src/trace.c	/^struct git_trace_data git_trace__data = {0};$/;"	v	typeref:struct:git_trace_data
git_trace__data	src/trace.h	/^extern struct git_trace_data git_trace__data;$/;"	x
git_trace__null	src/trace.h	/^GIT_INLINE(void) git_trace__null($/;"	f	signature:( git_trace_level_t level, const char *fmt, ...)
git_trace__write_fmt	src/trace.h	/^GIT_INLINE(void) git_trace__write_fmt($/;"	f	signature:( git_trace_level_t level, const char *fmt, ...)
git_trace_callback	include/git2/trace.h	/^typedef void (*git_trace_callback)(git_trace_level_t level, const char *msg);$/;"	t
git_trace_cb	tests/clar_libgit2_trace.c	/^	void (*git_trace_cb)(git_trace_level_t level, const char *msg);$/;"	m	struct:method	file:	access:public
git_trace_data	src/trace.h	/^struct git_trace_data {$/;"	s
git_trace_data::callback	src/trace.h	/^	git_trace_callback callback;$/;"	m	struct:git_trace_data	access:public
git_trace_data::level	src/trace.h	/^	git_trace_level_t level;$/;"	m	struct:git_trace_data	access:public
git_trace_level	src/trace.h	39;"	d
git_trace_level	src/trace.h	57;"	d
git_trace_level_t	include/git2/trace.h	/^} git_trace_level_t;$/;"	t	typeref:enum:__anon109
git_trace_set	src/trace.c	/^int git_trace_set(git_trace_level_t level, git_trace_callback callback)$/;"	f	signature:(git_trace_level_t level, git_trace_callback callback)
git_transaction	include/git2/types.h	/^typedef struct git_transaction git_transaction;$/;"	t	typeref:struct:git_transaction
git_transaction	src/transaction.c	/^struct git_transaction {$/;"	s	file:
git_transaction::cfg	src/transaction.c	/^	git_config *cfg;$/;"	m	struct:git_transaction	file:	access:public
git_transaction::db	src/transaction.c	/^	git_refdb *db;$/;"	m	struct:git_transaction	file:	access:public
git_transaction::locks	src/transaction.c	/^	git_strmap *locks;$/;"	m	struct:git_transaction	file:	access:public
git_transaction::pool	src/transaction.c	/^	git_pool pool;$/;"	m	struct:git_transaction	file:	access:public
git_transaction::repo	src/transaction.c	/^	git_repository *repo;$/;"	m	struct:git_transaction	file:	access:public
git_transaction::type	src/transaction.c	/^	transaction_t type;$/;"	m	struct:git_transaction	file:	access:public
git_transaction_commit	src/transaction.c	/^int git_transaction_commit(git_transaction *tx)$/;"	f	signature:(git_transaction *tx)
git_transaction_config_new	src/transaction.c	/^int git_transaction_config_new(git_transaction **out, git_config *cfg)$/;"	f	signature:(git_transaction **out, git_config *cfg)
git_transaction_free	src/transaction.c	/^void git_transaction_free(git_transaction *tx)$/;"	f	signature:(git_transaction *tx)
git_transaction_lock_ref	src/transaction.c	/^int git_transaction_lock_ref(git_transaction *tx, const char *refname)$/;"	f	signature:(git_transaction *tx, const char *refname)
git_transaction_new	src/transaction.c	/^int git_transaction_new(git_transaction **out, git_repository *repo)$/;"	f	signature:(git_transaction **out, git_repository *repo)
git_transaction_remove	src/transaction.c	/^int git_transaction_remove(git_transaction *tx, const char *refname)$/;"	f	signature:(git_transaction *tx, const char *refname)
git_transaction_set_reflog	src/transaction.c	/^int git_transaction_set_reflog(git_transaction *tx, const char *refname, const git_reflog *reflog)$/;"	f	signature:(git_transaction *tx, const char *refname, const git_reflog *reflog)
git_transaction_set_symbolic_target	src/transaction.c	/^int git_transaction_set_symbolic_target(git_transaction *tx, const char *refname, const char *target, const git_signature *sig, const char *msg)$/;"	f	signature:(git_transaction *tx, const char *refname, const char *target, const git_signature *sig, const char *msg)
git_transaction_set_target	src/transaction.c	/^int git_transaction_set_target(git_transaction *tx, const char *refname, const git_oid *target, const git_signature *sig, const char *msg)$/;"	f	signature:(git_transaction *tx, const char *refname, const git_oid *target, const git_signature *sig, const char *msg)
git_transfer_progress	include/git2/types.h	/^typedef struct git_transfer_progress {$/;"	s
git_transfer_progress	include/git2/types.h	/^} git_transfer_progress;$/;"	t	typeref:struct:git_transfer_progress
git_transfer_progress::indexed_deltas	include/git2/types.h	/^	unsigned int indexed_deltas;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress::indexed_objects	include/git2/types.h	/^	unsigned int indexed_objects;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress::local_objects	include/git2/types.h	/^	unsigned int local_objects;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress::received_bytes	include/git2/types.h	/^	size_t received_bytes;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress::received_objects	include/git2/types.h	/^	unsigned int received_objects;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress::total_deltas	include/git2/types.h	/^	unsigned int total_deltas;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress::total_objects	include/git2/types.h	/^	unsigned int total_objects;$/;"	m	struct:git_transfer_progress	access:public
git_transfer_progress_cb	include/git2/types.h	/^typedef int (*git_transfer_progress_cb)(const git_transfer_progress *stats, void *payload);$/;"	t
git_transport	include/git2/sys/transport.h	/^struct git_transport {$/;"	s
git_transport	include/git2/types.h	/^typedef struct git_transport git_transport;$/;"	t	typeref:struct:git_transport
git_transport::cancel	include/git2/sys/transport.h	/^	void (*cancel)(git_transport *transport);$/;"	m	struct:git_transport	access:public
git_transport::close	include/git2/sys/transport.h	/^	int (*close)(git_transport *transport);$/;"	m	struct:git_transport	access:public
git_transport::connect	include/git2/sys/transport.h	/^	int (*connect)($/;"	m	struct:git_transport	access:public
git_transport::download_pack	include/git2/sys/transport.h	/^	int (*download_pack)($/;"	m	struct:git_transport	access:public
git_transport::free	include/git2/sys/transport.h	/^	void (*free)(git_transport *transport);$/;"	m	struct:git_transport	access:public
git_transport::is_connected	include/git2/sys/transport.h	/^	int (*is_connected)(git_transport *transport);$/;"	m	struct:git_transport	access:public
git_transport::ls	include/git2/sys/transport.h	/^	int (*ls)($/;"	m	struct:git_transport	access:public
git_transport::negotiate_fetch	include/git2/sys/transport.h	/^	int (*negotiate_fetch)($/;"	m	struct:git_transport	access:public
git_transport::push	include/git2/sys/transport.h	/^	int(*push)(git_transport *transport, git_push *push, const git_remote_callbacks *callbacks);$/;"	m	struct:git_transport	access:public
git_transport::read_flags	include/git2/sys/transport.h	/^	int (*read_flags)(git_transport *transport, int *flags);$/;"	m	struct:git_transport	access:public
git_transport::set_callbacks	include/git2/sys/transport.h	/^	int (*set_callbacks)($/;"	m	struct:git_transport	access:public
git_transport::set_custom_headers	include/git2/sys/transport.h	/^	int (*set_custom_headers)($/;"	m	struct:git_transport	access:public
git_transport::version	include/git2/sys/transport.h	/^	unsigned int version;$/;"	m	struct:git_transport	access:public
git_transport_cb	include/git2/transport.h	/^typedef int (*git_transport_cb)(git_transport **out, git_remote *owner, void *param);$/;"	t
git_transport_certificate_check_cb	include/git2/types.h	/^typedef int (*git_transport_certificate_check_cb)(git_cert *cert, int valid, const char *host, void *payload);$/;"	t
git_transport_flags_t	include/git2/sys/transport.h	/^} git_transport_flags_t;$/;"	t	typeref:enum:__anon58
git_transport_init	src/transport.c	/^int git_transport_init(git_transport *opts, unsigned int version)$/;"	f	signature:(git_transport *opts, unsigned int version)
git_transport_local	src/transports/local.c	/^int git_transport_local(git_transport **out, git_remote *owner, void *param)$/;"	f	signature:(git_transport **out, git_remote *owner, void *param)
git_transport_message_cb	include/git2/types.h	/^typedef int (*git_transport_message_cb)(const char *str, int len, void *payload);$/;"	t
git_transport_new	src/transport.c	/^int git_transport_new(git_transport **out, git_remote *owner, const char *url)$/;"	f	signature:(git_transport **out, git_remote *owner, const char *url)
git_transport_register	src/transport.c	/^int git_transport_register($/;"	f	signature:( const char *scheme, git_transport_cb cb, void *param)
git_transport_smart	src/transports/smart.c	/^int git_transport_smart(git_transport **out, git_remote *owner, void *param)$/;"	f	signature:(git_transport **out, git_remote *owner, void *param)
git_transport_smart_certificate_check	src/transports/smart.c	/^int git_transport_smart_certificate_check(git_transport *transport, git_cert *cert, int valid, const char *hostname)$/;"	f	signature:(git_transport *transport, git_cert *cert, int valid, const char *hostname)
git_transport_smart_credentials	src/transports/smart.c	/^int git_transport_smart_credentials(git_cred **out, git_transport *transport, const char *user, int methods)$/;"	f	signature:(git_cred **out, git_transport *transport, const char *user, int methods)
git_transport_ssh_global_init	src/transports/ssh.c	/^int git_transport_ssh_global_init(void)$/;"	f	signature:(void)
git_transport_ssh_with_paths	src/transports/ssh.c	/^int git_transport_ssh_with_paths(git_transport **out, git_remote *owner, void *payload)$/;"	f	signature:(git_transport **out, git_remote *owner, void *payload)
git_transport_unregister	src/transport.c	/^int git_transport_unregister(const char *scheme)$/;"	f	signature:(const char *scheme)
git_tree	include/git2/types.h	/^typedef struct git_tree git_tree;$/;"	t	typeref:struct:git_tree
git_tree	src/tree.h	/^struct git_tree {$/;"	s
git_tree::entries	src/tree.h	/^	git_array_t(git_tree_entry) entries;$/;"	m	struct:git_tree	access:public
git_tree::object	src/tree.h	/^	git_object object;$/;"	m	struct:git_tree	access:public
git_tree::odb_obj	src/tree.h	/^	git_odb_object *odb_obj;$/;"	m	struct:git_tree	access:public
git_tree__free	src/tree.c	/^void git_tree__free(void *_tree)$/;"	f	signature:(void *_tree)
git_tree__parse	src/tree.c	/^int git_tree__parse(void *_tree, git_odb_object *odb_obj)$/;"	f	signature:(void *_tree, git_odb_object *odb_obj)
git_tree__prefix_position	src/tree.c	/^int git_tree__prefix_position(const git_tree *tree, const char *path)$/;"	f	signature:(const git_tree *tree, const char *path)
git_tree__write_index	src/tree.c	/^int git_tree__write_index($/;"	f	signature:( git_oid *oid, git_index *index, git_repository *repo)
git_tree_cache	src/tree-cache.h	/^typedef struct git_tree_cache {$/;"	s
git_tree_cache	src/tree-cache.h	/^} git_tree_cache;$/;"	t	typeref:struct:git_tree_cache
git_tree_cache::children	src/tree-cache.h	/^	struct git_tree_cache **children;$/;"	m	struct:git_tree_cache	typeref:struct:git_tree_cache::git_tree_cache	access:public
git_tree_cache::children_count	src/tree-cache.h	/^	size_t children_count;$/;"	m	struct:git_tree_cache	access:public
git_tree_cache::entry_count	src/tree-cache.h	/^	ssize_t entry_count;$/;"	m	struct:git_tree_cache	access:public
git_tree_cache::name	src/tree-cache.h	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_tree_cache	access:public
git_tree_cache::namelen	src/tree-cache.h	/^	size_t namelen;$/;"	m	struct:git_tree_cache	access:public
git_tree_cache::oid	src/tree-cache.h	/^	git_oid oid;$/;"	m	struct:git_tree_cache	access:public
git_tree_cache_get	src/tree-cache.c	/^const git_tree_cache *git_tree_cache_get(const git_tree_cache *tree, const char *path)$/;"	f	signature:(const git_tree_cache *tree, const char *path)
git_tree_cache_invalidate_path	src/tree-cache.c	/^void git_tree_cache_invalidate_path(git_tree_cache *tree, const char *path)$/;"	f	signature:(git_tree_cache *tree, const char *path)
git_tree_cache_new	src/tree-cache.c	/^int git_tree_cache_new(git_tree_cache **out, const char *name, git_pool *pool)$/;"	f	signature:(git_tree_cache **out, const char *name, git_pool *pool)
git_tree_cache_read	src/tree-cache.c	/^int git_tree_cache_read(git_tree_cache **tree, const char *buffer, size_t buffer_size, git_pool *pool)$/;"	f	signature:(git_tree_cache **tree, const char *buffer, size_t buffer_size, git_pool *pool)
git_tree_cache_read_tree	src/tree-cache.c	/^int git_tree_cache_read_tree(git_tree_cache **out, const git_tree *tree, git_pool *pool)$/;"	f	signature:(git_tree_cache **out, const git_tree *tree, git_pool *pool)
git_tree_cache_write	src/tree-cache.c	/^int git_tree_cache_write(git_buf *out, git_tree_cache *tree)$/;"	f	signature:(git_buf *out, git_tree_cache *tree)
git_tree_create_updated	src/tree.c	/^int git_tree_create_updated(git_oid *out, git_repository *repo, git_tree *baseline, size_t nupdates, const git_tree_update *updates)$/;"	f	signature:(git_oid *out, git_repository *repo, git_tree *baseline, size_t nupdates, const git_tree_update *updates)
git_tree_dup	src/object_api.c	/^int git_tree_dup(git_tree **out, git_tree *obj)$/;"	f	signature:(git_tree **out, git_tree *obj)
git_tree_entry	include/git2/types.h	/^typedef struct git_tree_entry git_tree_entry;$/;"	t	typeref:struct:git_tree_entry
git_tree_entry	src/tree.h	/^struct git_tree_entry {$/;"	s
git_tree_entry::attr	src/tree.h	/^	uint16_t attr;$/;"	m	struct:git_tree_entry	access:public
git_tree_entry::filename	src/tree.h	/^	const char *filename;$/;"	m	struct:git_tree_entry	access:public
git_tree_entry::filename_len	src/tree.h	/^	uint16_t filename_len;$/;"	m	struct:git_tree_entry	access:public
git_tree_entry::oid	src/tree.h	/^	const git_oid *oid;$/;"	m	struct:git_tree_entry	access:public
git_tree_entry__is_tree	src/tree.h	/^GIT_INLINE(bool) git_tree_entry__is_tree(const struct git_tree_entry *e)$/;"	f	signature:(const struct git_tree_entry *e)
git_tree_entry_byid	src/tree.c	/^const git_tree_entry *git_tree_entry_byid($/;"	f	signature:( const git_tree *tree, const git_oid *id)
git_tree_entry_byindex	src/tree.c	/^const git_tree_entry *git_tree_entry_byindex($/;"	f	signature:( const git_tree *tree, size_t idx)
git_tree_entry_byname	src/tree.c	/^const git_tree_entry *git_tree_entry_byname($/;"	f	signature:( const git_tree *tree, const char *filename)
git_tree_entry_bypath	src/tree.c	/^int git_tree_entry_bypath($/;"	f	signature:( git_tree_entry **entry_out, const git_tree *root, const char *path)
git_tree_entry_cmp	src/tree.c	/^int git_tree_entry_cmp(const git_tree_entry *e1, const git_tree_entry *e2)$/;"	f	signature:(const git_tree_entry *e1, const git_tree_entry *e2)
git_tree_entry_dup	src/tree.c	/^int git_tree_entry_dup(git_tree_entry **dest, const git_tree_entry *source)$/;"	f	signature:(git_tree_entry **dest, const git_tree_entry *source)
git_tree_entry_filemode	src/tree.c	/^git_filemode_t git_tree_entry_filemode(const git_tree_entry *entry)$/;"	f	signature:(const git_tree_entry *entry)
git_tree_entry_filemode_raw	src/tree.c	/^git_filemode_t git_tree_entry_filemode_raw(const git_tree_entry *entry)$/;"	f	signature:(const git_tree_entry *entry)
git_tree_entry_free	src/tree.c	/^void git_tree_entry_free(git_tree_entry *entry)$/;"	f	signature:(git_tree_entry *entry)
git_tree_entry_icmp	src/tree.c	/^int git_tree_entry_icmp(const git_tree_entry *e1, const git_tree_entry *e2)$/;"	f	signature:(const git_tree_entry *e1, const git_tree_entry *e2)
git_tree_entry_id	src/tree.c	/^const git_oid *git_tree_entry_id(const git_tree_entry *entry)$/;"	f	signature:(const git_tree_entry *entry)
git_tree_entry_name	src/tree.c	/^const char *git_tree_entry_name(const git_tree_entry *entry)$/;"	f	signature:(const git_tree_entry *entry)
git_tree_entry_to_object	src/tree.c	/^int git_tree_entry_to_object($/;"	f	signature:( git_object **object_out, git_repository *repo, const git_tree_entry *entry)
git_tree_entry_type	src/tree.c	/^git_otype git_tree_entry_type(const git_tree_entry *entry)$/;"	f	signature:(const git_tree_entry *entry)
git_tree_entrycount	src/tree.c	/^size_t git_tree_entrycount(const git_tree *tree)$/;"	f	signature:(const git_tree *tree)
git_tree_free	src/object_api.c	/^void git_tree_free(git_tree *obj)$/;"	f	signature:(git_tree *obj)
git_tree_id	src/object_api.c	/^const git_oid *git_tree_id(const git_tree *obj)$/;"	f	signature:(const git_tree *obj)
git_tree_lookup	src/object_api.c	/^int git_tree_lookup(git_tree **out, git_repository *repo, const git_oid *id)$/;"	f	signature:(git_tree **out, git_repository *repo, const git_oid *id)
git_tree_lookup_prefix	src/object_api.c	/^int git_tree_lookup_prefix(git_tree **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f	signature:(git_tree **out, git_repository *repo, const git_oid *id, size_t len)
git_tree_owner	src/object_api.c	/^git_repository *git_tree_owner(const git_tree *obj)$/;"	f	signature:(const git_tree *obj)
git_tree_update	include/git2/tree.h	/^} git_tree_update;$/;"	t	typeref:struct:__anon123
git_tree_update_t	include/git2/tree.h	/^} git_tree_update_t;$/;"	t	typeref:enum:__anon122
git_tree_walk	src/tree.c	/^int git_tree_walk($/;"	f	signature:( const git_tree *tree, git_treewalk_mode mode, git_treewalk_cb callback, void *payload)
git_treebuilder	include/git2/types.h	/^typedef struct git_treebuilder git_treebuilder;$/;"	t	typeref:struct:git_treebuilder
git_treebuilder	src/tree.h	/^struct git_treebuilder {$/;"	s
git_treebuilder::map	src/tree.h	/^	git_strmap *map;$/;"	m	struct:git_treebuilder	access:public
git_treebuilder::repo	src/tree.h	/^	git_repository *repo;$/;"	m	struct:git_treebuilder	access:public
git_treebuilder_clear	src/tree.c	/^void git_treebuilder_clear(git_treebuilder *bld)$/;"	f	signature:(git_treebuilder *bld)
git_treebuilder_entrycount	src/tree.c	/^unsigned int git_treebuilder_entrycount(git_treebuilder *bld)$/;"	f	signature:(git_treebuilder *bld)
git_treebuilder_filter	src/tree.c	/^void git_treebuilder_filter($/;"	f	signature:( git_treebuilder *bld, git_treebuilder_filter_cb filter, void *payload)
git_treebuilder_filter_cb	include/git2/tree.h	/^typedef int (*git_treebuilder_filter_cb)($/;"	t
git_treebuilder_free	src/tree.c	/^void git_treebuilder_free(git_treebuilder *bld)$/;"	f	signature:(git_treebuilder *bld)
git_treebuilder_get	src/tree.c	/^const git_tree_entry *git_treebuilder_get(git_treebuilder *bld, const char *filename)$/;"	f	signature:(git_treebuilder *bld, const char *filename)
git_treebuilder_insert	src/tree.c	/^int git_treebuilder_insert($/;"	f	signature:( const git_tree_entry **entry_out, git_treebuilder *bld, const char *filename, const git_oid *id, git_filemode_t filemode)
git_treebuilder_new	src/tree.c	/^int git_treebuilder_new($/;"	f	signature:( git_treebuilder **builder_p, git_repository *repo, const git_tree *source)
git_treebuilder_remove	src/tree.c	/^int git_treebuilder_remove(git_treebuilder *bld, const char *filename)$/;"	f	signature:(git_treebuilder *bld, const char *filename)
git_treebuilder_write	src/tree.c	/^int git_treebuilder_write(git_oid *oid, git_treebuilder *bld)$/;"	f	signature:(git_oid *oid, git_treebuilder *bld)
git_treewalk_cb	include/git2/tree.h	/^typedef int (*git_treewalk_cb)($/;"	t
git_treewalk_mode	include/git2/tree.h	/^} git_treewalk_mode;$/;"	t	typeref:enum:__anon121
git_vector	script/user_model.c	/^typedef struct git_vector {$/;"	s	file:
git_vector	script/user_model.c	/^} git_vector;$/;"	t	typeref:struct:git_vector	file:
git_vector	src/vector.h	/^typedef struct git_vector {$/;"	s
git_vector	src/vector.h	/^} git_vector;$/;"	t	typeref:struct:git_vector
git_vector::_alloc_size	src/vector.h	/^	size_t _alloc_size;$/;"	m	struct:git_vector	access:public
git_vector::_cmp	src/vector.h	/^	git_vector_cmp _cmp;$/;"	m	struct:git_vector	access:public
git_vector::contents	script/user_model.c	/^	void **contents;$/;"	m	struct:git_vector	file:	access:public
git_vector::contents	src/vector.h	/^	void **contents;$/;"	m	struct:git_vector	access:public
git_vector::flags	src/vector.h	/^	uint32_t flags;$/;"	m	struct:git_vector	access:public
git_vector::length	script/user_model.c	/^	size_t length;$/;"	m	struct:git_vector	file:	access:public
git_vector::length	src/vector.h	/^	size_t length;$/;"	m	struct:git_vector	access:public
git_vector_bsearch	src/vector.h	/^GIT_INLINE(int) git_vector_bsearch(size_t *at_pos, git_vector *v, const void *key)$/;"	f	signature:(size_t *at_pos, git_vector *v, const void *key)
git_vector_bsearch2	src/vector.c	/^int git_vector_bsearch2($/;"	f	signature:( size_t *at_pos, git_vector *v, git_vector_cmp key_lookup, const void *key)
git_vector_clear	src/vector.c	/^void git_vector_clear(git_vector *v)$/;"	f	signature:(git_vector *v)
git_vector_cmp	src/vector.h	/^typedef int (*git_vector_cmp)(const void *, const void *);$/;"	t
git_vector_detach	src/vector.c	/^void **git_vector_detach(size_t *size, size_t *asize, git_vector *v)$/;"	f	signature:(size_t *size, size_t *asize, git_vector *v)
git_vector_dup	src/vector.c	/^int git_vector_dup(git_vector *v, const git_vector *src, git_vector_cmp cmp)$/;"	f	signature:(git_vector *v, const git_vector *src, git_vector_cmp cmp)
git_vector_foreach	src/vector.h	77;"	d
git_vector_free	src/vector.c	/^void git_vector_free(git_vector *v)$/;"	f	signature:(git_vector *v)
git_vector_free_deep	src/vector.c	/^void git_vector_free_deep(git_vector *v)$/;"	f	signature:(git_vector *v)
git_vector_get	src/vector.h	/^GIT_INLINE(void *) git_vector_get(const git_vector *v, size_t position)$/;"	f	signature:(const git_vector *v, size_t position)
git_vector_init	src/vector.c	/^int git_vector_init(git_vector *v, size_t initial_size, git_vector_cmp cmp)$/;"	f	signature:(git_vector *v, size_t initial_size, git_vector_cmp cmp)
git_vector_insert	script/user_model.c	/^int git_vector_insert(git_vector *v, void *element)$/;"	f	signature:(git_vector *v, void *element)
git_vector_insert	src/vector.c	/^int git_vector_insert(git_vector *v, void *element)$/;"	f	signature:(git_vector *v, void *element)
git_vector_insert_null	src/vector.c	/^int git_vector_insert_null(git_vector *v, size_t idx, size_t insert_len)$/;"	f	signature:(git_vector *v, size_t idx, size_t insert_len)
git_vector_insert_sorted	src/vector.c	/^int git_vector_insert_sorted($/;"	f	signature:( git_vector *v, void *element, int (*on_dup)(void **old, void *new))
git_vector_is_sorted	src/vector.h	102;"	d
git_vector_last	src/vector.h	/^GIT_INLINE(void *) git_vector_last(const git_vector *v)$/;"	f	signature:(const git_vector *v)
git_vector_length	src/vector.h	/^GIT_INLINE(size_t) git_vector_length(const git_vector *v)$/;"	f	signature:(const git_vector *v)
git_vector_pop	src/vector.c	/^void git_vector_pop(git_vector *v)$/;"	f	signature:(git_vector *v)
git_vector_remove	src/vector.c	/^int git_vector_remove(git_vector *v, size_t idx)$/;"	f	signature:(git_vector *v, size_t idx)
git_vector_remove_matching	src/vector.c	/^void git_vector_remove_matching($/;"	f	signature:( git_vector *v, int (*match)(const git_vector *v, size_t idx, void *payload), void *payload)
git_vector_remove_range	src/vector.c	/^int git_vector_remove_range(git_vector *v, size_t idx, size_t remove_len)$/;"	f	signature:(git_vector *v, size_t idx, size_t remove_len)
git_vector_resize_to	src/vector.c	/^int git_vector_resize_to(git_vector *v, size_t new_length)$/;"	f	signature:(git_vector *v, size_t new_length)
git_vector_reverse	src/vector.c	/^void git_vector_reverse(git_vector *v)$/;"	f	signature:(git_vector *v)
git_vector_rforeach	src/vector.h	80;"	d
git_vector_search	src/vector.c	/^int git_vector_search(size_t *at_pos, const git_vector *v, const void *entry)$/;"	f	signature:(size_t *at_pos, const git_vector *v, const void *entry)
git_vector_search2	src/vector.c	/^int git_vector_search2($/;"	f	signature:( size_t *at_pos, const git_vector *v, git_vector_cmp key_lookup, const void *key)
git_vector_set	src/vector.c	/^int git_vector_set(void **old, git_vector *v, size_t position, void *value)$/;"	f	signature:(void **old, git_vector *v, size_t position, void *value)
git_vector_set_cmp	src/vector.h	/^GIT_INLINE(void) git_vector_set_cmp(git_vector *v, git_vector_cmp cmp)$/;"	f	signature:(git_vector *v, git_vector_cmp cmp)
git_vector_set_sorted	src/vector.h	105;"	d
git_vector_size_hint	src/vector.c	/^int git_vector_size_hint(git_vector *v, size_t size_hint)$/;"	f	signature:(git_vector *v, size_t size_hint)
git_vector_sort	src/vector.c	/^void git_vector_sort(git_vector *v)$/;"	f	signature:(git_vector *v)
git_vector_swap	src/vector.c	/^void git_vector_swap(git_vector *a, git_vector *b)$/;"	f	signature:(git_vector *a, git_vector *b)
git_vector_uniq	src/vector.c	/^void git_vector_uniq(git_vector *v, void  (*git_free_cb)(void *))$/;"	f	signature:(git_vector *v, void (*git_free_cb)(void *))
git_vector_verify_sorted	src/vector.c	/^int git_vector_verify_sorted(const git_vector *v)$/;"	f	signature:(const git_vector *v)
git_walk_object	src/pack-objects.h	/^} git_walk_object;$/;"	t	typeref:struct:__anon320
git_win32__canonicalize_path	src/win32/w32_util.c	/^size_t git_win32__canonicalize_path(wchar_t *str, size_t len)$/;"	f	signature:(wchar_t *str, size_t len)
git_win32__crtdbg_stacktrace	src/win32/w32_crtdbg_stacktrace.c	/^const char *git_win32__crtdbg_stacktrace(int skip, const char *file)$/;"	f	signature:(int skip, const char *file)
git_win32__crtdbg_stacktrace__dump	src/win32/w32_crtdbg_stacktrace.c	/^int git_win32__crtdbg_stacktrace__dump($/;"	f	signature:( git_win32__crtdbg_stacktrace_options opt, const char *label)
git_win32__crtdbg_stacktrace__row	src/win32/w32_crtdbg_stacktrace.c	/^} git_win32__crtdbg_stacktrace__row;$/;"	t	typeref:struct:__anon292	file:
git_win32__crtdbg_stacktrace__uid	src/win32/w32_crtdbg_stacktrace.c	/^} git_win32__crtdbg_stacktrace__uid;$/;"	t	typeref:struct:__anon291	file:
git_win32__crtdbg_stacktrace_cleanup	src/win32/w32_crtdbg_stacktrace.c	/^void git_win32__crtdbg_stacktrace_cleanup(void)$/;"	f	signature:(void)
git_win32__crtdbg_stacktrace_init	src/win32/w32_crtdbg_stacktrace.c	/^void git_win32__crtdbg_stacktrace_init(void)$/;"	f	signature:(void)
git_win32__crtdbg_stacktrace_options	src/win32/w32_crtdbg_stacktrace.h	/^typedef enum git_win32__crtdbg_stacktrace_options {$/;"	g
git_win32__crtdbg_stacktrace_options	src/win32/w32_crtdbg_stacktrace.h	/^} git_win32__crtdbg_stacktrace_options;$/;"	t	typeref:enum:git_win32__crtdbg_stacktrace_options
git_win32__expand_path	src/win32/findfile.c	/^static int git_win32__expand_path(_findfile_path *dest, const wchar_t *src)$/;"	f	file:	signature:(_findfile_path *dest, const wchar_t *src)
git_win32__file_attribute_to_stat	src/win32/w32_util.h	/^GIT_INLINE(int) git_win32__file_attribute_to_stat($/;"	f	signature:( struct stat *st, const WIN32_FILE_ATTRIBUTE_DATA *attrdata, const wchar_t *path)
git_win32__file_information_to_stat	src/win32/w32_util.h	/^GIT_INLINE(void) git_win32__file_information_to_stat($/;"	f	signature:( struct stat *st, const BY_HANDLE_FILE_INFORMATION *fileinfo)
git_win32__filetime_to_timespec	src/win32/w32_util.h	/^GIT_INLINE(void) git_win32__filetime_to_timespec($/;"	f	signature:( const FILETIME *ft, struct timespec *ts)
git_win32__find_global_dirs	src/win32/findfile.c	/^int git_win32__find_global_dirs(git_buf *out)$/;"	f	signature:(git_buf *out)
git_win32__find_programdata_dirs	src/win32/findfile.c	/^int git_win32__find_programdata_dirs(git_buf *out)$/;"	f	signature:(git_buf *out)
git_win32__find_system_dirs	src/win32/findfile.c	/^int git_win32__find_system_dirs(git_buf *out, const wchar_t *subdir)$/;"	f	signature:(git_buf *out, const wchar_t *subdir)
git_win32__find_xdg_dirs	src/win32/findfile.c	/^int git_win32__find_xdg_dirs(git_buf *out)$/;"	f	signature:(git_buf *out)
git_win32__findfirstfile_filter	src/win32/w32_util.c	/^bool git_win32__findfirstfile_filter(git_win32_path dest, const char *src)$/;"	f	signature:(git_win32_path dest, const char *src)
git_win32__hidden	src/win32/w32_util.c	/^int git_win32__hidden(bool *out, const char *path)$/;"	f	signature:(bool *out, const char *path)
git_win32__isalpha	src/win32/w32_util.h	/^GIT_INLINE(bool) git_win32__isalpha(wchar_t c)$/;"	f	signature:(wchar_t c)
git_win32__path_trim_end	src/win32/w32_util.c	/^size_t git_win32__path_trim_end(wchar_t *str, size_t len)$/;"	f	signature:(wchar_t *str, size_t len)
git_win32__set_hidden	src/win32/w32_util.c	/^int git_win32__set_hidden(const char *path, bool hidden)$/;"	f	signature:(const char *path, bool hidden)
git_win32__stack	src/win32/w32_stack.c	/^int git_win32__stack($/;"	f	signature:( char * pbuf, int buf_len, int skip, const char *prefix, const char *suffix)
git_win32__stack__aux_cb_alloc	src/win32/w32_stack.h	/^typedef void (*git_win32__stack__aux_cb_alloc)(unsigned int *aux_id);$/;"	t
git_win32__stack__aux_cb_lookup	src/win32/w32_stack.h	/^typedef void (*git_win32__stack__aux_cb_lookup)(unsigned int aux_id, char *aux_msg, unsigned int aux_msg_len);$/;"	t
git_win32__stack__raw_data	src/win32/w32_stack.h	/^} git_win32__stack__raw_data;$/;"	t	typeref:struct:__anon284
git_win32__stack__set_aux_cb	src/win32/w32_stack.c	/^int git_win32__stack__set_aux_cb($/;"	f	signature:( git_win32__stack__aux_cb_alloc cb_alloc, git_win32__stack__aux_cb_lookup cb_lookup)
git_win32__stack_capture	src/win32/w32_stack.c	/^int git_win32__stack_capture(git_win32__stack__raw_data *pdata, int skip)$/;"	f	signature:(git_win32__stack__raw_data *pdata, int skip)
git_win32__stack_cleanup	src/win32/w32_stack.c	/^void git_win32__stack_cleanup(void)$/;"	f	signature:(void)
git_win32__stack_compare	src/win32/w32_stack.c	/^int git_win32__stack_compare($/;"	f	signature:( git_win32__stack__raw_data *d1, git_win32__stack__raw_data *d2)
git_win32__stack_format	src/win32/w32_stack.c	/^int git_win32__stack_format($/;"	f	signature:( char *pbuf, int buf_len, const git_win32__stack__raw_data *pdata, const char *prefix, const char *suffix)
git_win32__stack_init	src/win32/w32_stack.c	/^void git_win32__stack_init(void)$/;"	f	signature:(void)
git_win32__stat_init	src/win32/w32_util.h	/^GIT_INLINE(void) git_win32__stat_init($/;"	f	signature:( struct stat *st, DWORD dwFileAttributes, DWORD nFileSizeHigh, DWORD nFileSizeLow, FILETIME ftCreationTime, FILETIME ftLastAccessTime, FILETIME ftLastWriteTime)
git_win32__threadproc	src/win32/thread.c	/^static DWORD WINAPI git_win32__threadproc(LPVOID lpParameter)$/;"	f	file:	signature:(LPVOID lpParameter)
git_win32__timeval_to_filetime	src/win32/w32_util.h	/^GIT_INLINE(void) git_win32__timeval_to_filetime($/;"	f	signature:( FILETIME *ft, const struct p_timeval tv)
git_win32_get_error_message	src/win32/error.c	/^char *git_win32_get_error_message(DWORD error_code)$/;"	f	signature:(DWORD error_code)
git_win32_path	src/win32/path_w32.h	/^typedef wchar_t git_win32_path[GIT_WIN_PATH_UTF16];$/;"	t
git_win32_path_8dot3_name	src/win32/path_w32.c	/^char *git_win32_path_8dot3_name(const char *path)$/;"	f	signature:(const char *path)
git_win32_path__cwd	src/win32/path_w32.c	/^int git_win32_path__cwd(wchar_t *out, size_t len)$/;"	f	signature:(wchar_t *out, size_t len)
git_win32_path_canonicalize	src/win32/path_w32.c	/^int git_win32_path_canonicalize(git_win32_path path)$/;"	f	signature:(git_win32_path path)
git_win32_path_from_utf8	src/win32/path_w32.c	/^int git_win32_path_from_utf8(git_win32_path out, const char *src)$/;"	f	signature:(git_win32_path out, const char *src)
git_win32_path_readlink_w	src/win32/path_w32.c	/^int git_win32_path_readlink_w(git_win32_path dest, const git_win32_path path)$/;"	f	signature:(git_win32_path dest, const git_win32_path path)
git_win32_path_to_utf8	src/win32/path_w32.c	/^int git_win32_path_to_utf8(git_win32_utf8_path dest, const wchar_t *src)$/;"	f	signature:(git_win32_utf8_path dest, const wchar_t *src)
git_win32_utf8_path	src/win32/path_w32.h	/^typedef char git_win32_utf8_path[GIT_WIN_PATH_UTF8];$/;"	t
git_writestream	include/git2/types.h	/^struct git_writestream {$/;"	s
git_writestream	include/git2/types.h	/^typedef struct git_writestream git_writestream;$/;"	t	typeref:struct:git_writestream
git_writestream::close	include/git2/types.h	/^	int (*close)(git_writestream *stream);$/;"	m	struct:git_writestream	access:public
git_writestream::free	include/git2/types.h	/^	void (*free)(git_writestream *stream);$/;"	m	struct:git_writestream	access:public
git_writestream::write	include/git2/types.h	/^	int (*write)(git_writestream *stream, const char *buffer, size_t len);$/;"	m	struct:git_writestream	access:public
git_xdiff	src/diff_xdiff.c	/^static int git_xdiff(git_patch_generated_output *output, git_patch_generated *patch)$/;"	f	file:	signature:(git_patch_generated_output *output, git_patch_generated *patch)
git_xdiff_cb	src/diff_xdiff.c	/^static int git_xdiff_cb(void *priv, mmbuffer_t *bufs, int len)$/;"	f	file:	signature:(void *priv, mmbuffer_t *bufs, int len)
git_xdiff_info	src/diff_xdiff.c	/^} git_xdiff_info;$/;"	t	typeref:struct:__anon224	file:
git_xdiff_init	src/diff_xdiff.c	/^void git_xdiff_init(git_xdiff_output *xo, const git_diff_options *opts)$/;"	f	signature:(git_xdiff_output *xo, const git_diff_options *opts)
git_xdiff_output	src/diff_xdiff.h	/^} git_xdiff_output;$/;"	t	typeref:struct:__anon251
git_xdiff_parse_hunk	src/diff_xdiff.c	/^static int git_xdiff_parse_hunk(git_diff_hunk *hunk, const char *header)$/;"	f	file:	signature:(git_diff_hunk *hunk, const char *header)
git_xdiff_scan_int	src/diff_xdiff.c	/^static int git_xdiff_scan_int(const char **str, int *value)$/;"	f	file:	signature:(const char **str, int *value)
git_zstream	src/zstream.h	/^} git_zstream;$/;"	t	typeref:struct:__anon294
git_zstream_deflatebuf	src/zstream.c	/^int git_zstream_deflatebuf(git_buf *out, const void *in, size_t in_len)$/;"	f	signature:(git_buf *out, const void *in, size_t in_len)
git_zstream_done	src/zstream.c	/^bool git_zstream_done(git_zstream *zstream)$/;"	f	signature:(git_zstream *zstream)
git_zstream_free	src/zstream.c	/^void git_zstream_free(git_zstream *zstream)$/;"	f	signature:(git_zstream *zstream)
git_zstream_get_output	src/zstream.c	/^int git_zstream_get_output(void *out, size_t *out_len, git_zstream *zstream)$/;"	f	signature:(void *out, size_t *out_len, git_zstream *zstream)
git_zstream_inflatebuf	src/zstream.c	/^int git_zstream_inflatebuf(git_buf *out, const void *in, size_t in_len)$/;"	f	signature:(git_buf *out, const void *in, size_t in_len)
git_zstream_init	src/zstream.c	/^int git_zstream_init(git_zstream *zstream, git_zstream_t type)$/;"	f	signature:(git_zstream *zstream, git_zstream_t type)
git_zstream_reset	src/zstream.c	/^void git_zstream_reset(git_zstream *zstream)$/;"	f	signature:(git_zstream *zstream)
git_zstream_set_input	src/zstream.c	/^int git_zstream_set_input(git_zstream *zstream, const void *in, size_t in_len)$/;"	f	signature:(git_zstream *zstream, const void *in, size_t in_len)
git_zstream_suggest_output_len	src/zstream.c	/^size_t git_zstream_suggest_output_len(git_zstream *zstream)$/;"	f	signature:(git_zstream *zstream)
git_zstream_t	src/zstream.h	/^} git_zstream_t;$/;"	t	typeref:enum:__anon293
gitdir	examples/init.c	/^	const char *gitdir;$/;"	m	struct:opts	file:	access:public
giterr__check_version	src/common.h	/^GIT_INLINE(int) giterr__check_version(const void *structure, unsigned int expected_max, const char *name)$/;"	f	signature:(const void *structure, unsigned int expected_max, const char *name)
giterr_clear	src/errors.c	/^void giterr_clear(void)$/;"	f	signature:(void)
giterr_last	src/errors.c	/^const git_error *giterr_last(void)$/;"	f	signature:(void)
giterr_set	src/errors.c	/^void giterr_set(int error_class, const char *string, ...)$/;"	f	signature:(int error_class, const char *string, ...)
giterr_set_after_callback	src/common.h	136;"	d
giterr_set_after_callback	src/common.h	139;"	d
giterr_set_after_callback_function	src/common.h	/^GIT_INLINE(int) giterr_set_after_callback_function($/;"	f	signature:( int error_code, const char *action)
giterr_set_oom	src/errors.c	/^void giterr_set_oom(void)$/;"	f	signature:(void)
giterr_set_regex	src/errors.c	/^int giterr_set_regex(const regex_t *regex, int error_code)$/;"	f	signature:(const regex_t *regex, int error_code)
giterr_set_str	src/errors.c	/^void giterr_set_str(int error_class, const char *string)$/;"	f	signature:(int error_class, const char *string)
giterr_state_capture	src/errors.c	/^int giterr_state_capture(git_error_state *state, int error_code)$/;"	f	signature:(git_error_state *state, int error_code)
giterr_state_free	src/errors.c	/^void giterr_state_free(git_error_state *state)$/;"	f	signature:(git_error_state *state)
giterr_state_restore	src/errors.c	/^int giterr_state_restore(git_error_state *state)$/;"	f	signature:(git_error_state *state)
giterr_system_last	src/errors.c	/^int giterr_system_last(void)$/;"	f	signature:(void)
giterr_system_set	src/errors.c	/^void giterr_system_set(int code)$/;"	f	signature:(int code)
gitmodules_snapshot	src/submodule.c	/^static git_config *gitmodules_snapshot(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
gitno__match_host	src/netops.c	/^int gitno__match_host(const char *pattern, const char *host)$/;"	f	signature:(const char *pattern, const char *host)
gitno_buffer	src/netops.h	/^typedef struct gitno_buffer {$/;"	s
gitno_buffer	src/netops.h	/^} gitno_buffer;$/;"	t	typeref:struct:gitno_buffer
gitno_buffer::cb_data	src/netops.h	/^	void *cb_data;$/;"	m	struct:gitno_buffer	access:public
gitno_buffer::data	src/netops.h	/^	char *data;$/;"	m	struct:gitno_buffer	access:public
gitno_buffer::len	src/netops.h	/^	size_t len;$/;"	m	struct:gitno_buffer	access:public
gitno_buffer::offset	src/netops.h	/^	size_t offset;$/;"	m	struct:gitno_buffer	access:public
gitno_buffer::recv	src/netops.h	/^	int (*recv)(struct gitno_buffer *buffer);$/;"	m	struct:gitno_buffer	access:public
gitno_buffer_setup_callback	src/netops.c	/^void gitno_buffer_setup_callback($/;"	f	signature:( gitno_buffer *buf, char *data, size_t len, int (*recv)(gitno_buffer *buf), void *cb_data)
gitno_buffer_setup_fromstream	src/netops.c	/^void gitno_buffer_setup_fromstream(git_stream *st, gitno_buffer *buf, char *data, size_t len)$/;"	f	signature:(git_stream *st, gitno_buffer *buf, char *data, size_t len)
gitno_connection_data	src/netops.h	/^typedef struct gitno_connection_data {$/;"	s
gitno_connection_data	src/netops.h	/^} gitno_connection_data;$/;"	t	typeref:struct:gitno_connection_data
gitno_connection_data::host	src/netops.h	/^	char *host;$/;"	m	struct:gitno_connection_data	access:public
gitno_connection_data::pass	src/netops.h	/^	char *pass;$/;"	m	struct:gitno_connection_data	access:public
gitno_connection_data::path	src/netops.h	/^	char *path;$/;"	m	struct:gitno_connection_data	access:public
gitno_connection_data::port	src/netops.h	/^	char *port;$/;"	m	struct:gitno_connection_data	access:public
gitno_connection_data::use_ssl	src/netops.h	/^	bool use_ssl;$/;"	m	struct:gitno_connection_data	access:public
gitno_connection_data::user	src/netops.h	/^	char *user;$/;"	m	struct:gitno_connection_data	access:public
gitno_connection_data_free_ptrs	src/netops.c	/^void gitno_connection_data_free_ptrs(gitno_connection_data *d)$/;"	f	signature:(gitno_connection_data *d)
gitno_connection_data_from_url	src/netops.c	/^int gitno_connection_data_from_url($/;"	f	signature:( gitno_connection_data *data, const char *url, const char *service_suffix)
gitno_consume	src/netops.c	/^void gitno_consume(gitno_buffer *buf, const char *ptr)$/;"	f	signature:(gitno_buffer *buf, const char *ptr)
gitno_consume_n	src/netops.c	/^void gitno_consume_n(gitno_buffer *buf, size_t cons)$/;"	f	signature:(gitno_buffer *buf, size_t cons)
gitno_extract_url_parts	src/netops.c	/^int gitno_extract_url_parts($/;"	f	signature:( char **host, char **port, char **path, char **username, char **password, const char *url, const char *default_port)
gitno_recv	src/netops.c	/^int gitno_recv(gitno_buffer *buf)$/;"	f	signature:(gitno_buffer *buf)
gitno_socket	src/netops.h	/^typedef struct gitno_socket {$/;"	s
gitno_socket	src/netops.h	/^} gitno_socket;$/;"	t	typeref:struct:gitno_socket
gitno_socket::socket	src/netops.h	/^	GIT_SOCKET socket;$/;"	m	struct:gitno_socket	access:public
gitno_socket::ssl	src/netops.h	/^	gitno_ssl ssl;$/;"	m	struct:gitno_socket	access:public
gitno_ssl	src/netops.h	/^typedef struct gitno_ssl {$/;"	s
gitno_ssl	src/netops.h	/^} gitno_ssl;$/;"	t	typeref:struct:gitno_ssl
gitno_ssl::ssl	src/netops.h	/^	SSL *ssl;$/;"	m	struct:gitno_ssl	access:public
glob	src/refdb_fs.c	/^	char *glob;$/;"	m	struct:__anon204	file:	access:public
global_drivers	src/diff_driver.c	/^static git_diff_driver global_drivers[3] = {$/;"	v	file:
good_length	deps/zlib/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
good_match	deps/zlib/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state	access:public
grep	examples/log.c	/^	const char *grep;$/;"	m	struct:log_options	file:	access:public
group_nodes_into_DFAstates	deps/regex/regexec.c	/^group_nodes_into_DFAstates (const re_dfa_t *dfa, const re_dfastate_t *state,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_dfastate_t *state, re_node_set *dests_node, bitset_t *dests_ch)
gss_context	src/transports/auth_negotiate.c	/^	gss_ctx_id_t gss_context;$/;"	m	struct:__anon194	file:	access:public
guess	src/sysdir.c	/^	int (*guess)(git_buf *out);$/;"	m	struct:git_sysdir__dir	file:	access:public
guilty	src/blame.h	/^	bool guilty;$/;"	m	struct:git_blame__entry	access:public
gzFile	deps/zlib/zlib.h	/^typedef struct gzFile_s *gzFile;    \/* semi-opaque gzip file descriptor *\/$/;"	t	typeref:struct:gzFile_s
gzFile_s	deps/zlib/zlib.h	/^struct gzFile_s {$/;"	s
gzFile_s::have	deps/zlib/zlib.h	/^    unsigned have;$/;"	m	struct:gzFile_s	access:public
gzFile_s::next	deps/zlib/zlib.h	/^    unsigned char *next;$/;"	m	struct:gzFile_s	access:public
gzFile_s::pos	deps/zlib/zlib.h	/^    z_off64_t pos;$/;"	m	struct:gzFile_s	access:public
gz_header	deps/zlib/zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header_s	deps/zlib/zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_header_s::comm_max	deps/zlib/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::comment	deps/zlib/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::done	deps/zlib/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra	deps/zlib/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra_len	deps/zlib/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra_max	deps/zlib/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::hcrc	deps/zlib/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::name	deps/zlib/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::name_max	deps/zlib/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::os	deps/zlib/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::text	deps/zlib/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::time	deps/zlib/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::xflags	deps/zlib/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s	access:public
gz_headerp	deps/zlib/zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gzgetc	deps/zlib/zlib.h	1681;"	d
gzhead	deps/zlib/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state	access:public
gzindex	deps/zlib/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state	access:public
gzoffset	deps/zlib/zlib.h	1712;"	d
gzopen	deps/zlib/zlib.h	1709;"	d
gzseek	deps/zlib/zlib.h	1710;"	d
gztell	deps/zlib/zlib.h	1711;"	d
h	src/win32/dir.h	/^	HANDLE h;$/;"	m	struct:__anon290	access:public
h_C	deps/http-parser/http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	deps/http-parser/http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	deps/http-parser/http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	deps/http-parser/http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	deps/http-parser/http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	deps/http-parser/http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_content_length	deps/http-parser/http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	deps/http-parser/http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	deps/http-parser/http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	deps/http-parser/http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	deps/http-parser/http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_content_length	deps/http-parser/http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	deps/http-parser/http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	deps/http-parser/http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	deps/http-parser/http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	deps/http-parser/http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	deps/http-parser/http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	deps/http-parser/http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	deps/http-parser/http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
ha	src/xdiff/xdiffi.h	/^	unsigned long const *ha;$/;"	m	struct:s_diffdata	access:public
ha	src/xdiff/xprepare.c	/^	unsigned long ha;$/;"	m	struct:s_xdlclass	file:	access:public
ha	src/xdiff/xtypes.h	/^	unsigned long *ha;$/;"	m	struct:s_xdfile	access:public
ha	src/xdiff/xtypes.h	/^	unsigned long ha;$/;"	m	struct:s_xrecord	access:public
hack_index	tests/merge/workdir/dirty.c	/^static void hack_index(char *files[])$/;"	f	file:	signature:(char *files[])
halt	deps/regex/regex_internal.h	/^  unsigned int halt : 1;$/;"	m	struct:re_dfastate_t	access:public
handle	src/curl_stream.c	/^	CURL *handle;$/;"	m	struct:__anon232	file:	access:public
handle	src/hash/hash_win32.h	/^	HANDLE \/* BCRYPT_ALG_HANDLE *\/ handle;$/;"	m	struct:hash_cng_prov	access:public
handle	src/hash/hash_win32.h	/^	HCRYPTPROV handle;$/;"	m	struct:hash_cryptoapi_prov	access:public
handle	src/path.h	/^	HANDLE handle;$/;"	m	struct:git_path_diriter	access:public
handle_at_syntax	src/revparse.c	/^static int handle_at_syntax(git_object **out, git_reference **ref, const char *spec, size_t identifier_len, git_repository* repo, const char *curly_braces_content)$/;"	f	file:	signature:(git_object **out, git_reference **ref, const char *spec, size_t identifier_len, git_repository* repo, const char *curly_braces_content)
handle_caret_curly_syntax	src/revparse.c	/^static int handle_caret_curly_syntax(git_object **out, git_object *obj, const char *curly_braces_content)$/;"	f	file:	signature:(git_object **out, git_object *obj, const char *curly_braces_content)
handle_caret_parent_syntax	src/revparse.c	/^static int handle_caret_parent_syntax(git_object **out, git_object *obj, int n)$/;"	f	file:	signature:(git_object **out, git_object *obj, int n)
handle_colon_syntax	src/revparse.c	/^static int handle_colon_syntax($/;"	f	file:	signature:( git_object **out, git_object *obj, const char *path)
handle_grep_syntax	src/revparse.c	/^static int handle_grep_syntax(git_object **out, git_repository *repo, const git_oid *spec_oid, const char *pattern)$/;"	f	file:	signature:(git_object **out, git_repository *repo, const git_oid *spec_oid, const char *pattern)
handle_linear_syntax	src/revparse.c	/^static int handle_linear_syntax(git_object **out, git_object *obj, int n)$/;"	f	file:	signature:(git_object **out, git_object *obj, int n)
handle_matched_item	src/diff_generate.c	/^static int handle_matched_item($/;"	f	file:	signature:( git_diff_generated *diff, diff_in_progress *info)
handle_next	tests/core/dirent.c	/^static void handle_next(git_path_diriter *diriter, walk_data *walk)$/;"	f	file:	signature:(git_path_diriter *diriter, walk_data *walk)
handle_unmatched_new_item	src/diff_generate.c	/^static int handle_unmatched_new_item($/;"	f	file:	signature:( git_diff_generated *diff, diff_in_progress *info)
handle_unmatched_old_item	src/diff_generate.c	/^static int handle_unmatched_old_item($/;"	f	file:	signature:( git_diff_generated *diff, diff_in_progress *info)
handle_wc_error	src/win32/w32_buffer.c	/^GIT_INLINE(int) handle_wc_error(void)$/;"	f	signature:(void)
has_backref	deps/regex/regex_internal.h	/^  unsigned int has_backref : 1;$/;"	m	struct:re_dfastate_t	access:public
has_cache	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file	access:public
has_common	src/xdiff/xhistogram.c	/^		     has_common;$/;"	m	struct:histindex	file:	access:public
has_constraint	deps/regex/regex_internal.h	/^  unsigned int has_constraint : 1;$/;"	m	struct:re_dfastate_t	access:public
has_cr_in_index	src/crlf.c	/^static int has_cr_in_index(const git_filter_source *src)$/;"	f	file:	signature:(const git_filter_source *src)
has_dir_name	src/index.c	/^static int has_dir_name(git_index *index,$/;"	f	file:	signature:(git_index *index, const git_index_entry *entry, int ok_to_replace)
has_file_name	src/index.c	/^static int has_file_name(git_index *index,$/;"	f	file:	signature:(git_index *index, const git_index_entry *entry, size_t pos, int ok_to_replace)
has_log	include/git2/sys/refdb_backend.h	/^	int (*has_log)(git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend	access:public
has_matches	src/xdiff/xpatience.c	/^	unsigned long has_matches;$/;"	m	struct:hashmap	file:	access:public
has_mb_node	deps/regex/regex_internal.h	/^  unsigned int has_mb_node : 1;$/;"	m	struct:re_dfa_t	access:public
has_nsecs	tests/index/nsec.c	/^static bool has_nsecs(void)$/;"	f	file:	signature:(void)
has_plural_match	deps/regex/regex_internal.h	/^  unsigned int has_plural_match : 1;$/;"	m	struct:re_dfa_t	access:public
has_reflog	src/refdb_fs.c	/^static int has_reflog(git_repository *repo, const char *name)$/;"	f	file:	signature:(git_repository *repo, const char *name)
hash	deps/regex/regex_internal.h	/^  unsigned int hash;$/;"	m	struct:re_dfastate_t	access:public
hash	src/delta.c	/^	struct index_entry *hash[GIT_FLEX_ARRAY];$/;"	m	struct:git_delta_index	typeref:struct:git_delta_index::index_entry	file:	access:public
hash	src/indexer.c	/^	git_oid hash;$/;"	m	struct:git_indexer	file:	access:public
hash	src/pack-objects.h	/^	unsigned int hash; \/* name hint hash *\/$/;"	m	struct:git_pobject	access:public
hash	src/xdiff/xpatience.c	/^		unsigned long hash;$/;"	m	struct:hashmap::entry	file:	access:public
hash__block	src/hash/hash_generic.c	/^static void hash__block(git_hash_ctx *ctx, const unsigned int *data)$/;"	f	file:	signature:(git_hash_ctx *ctx, const unsigned int *data)
hash_and_save	src/indexer.c	/^static int hash_and_save(git_indexer *idx, git_rawobj *obj, git_off_t entry_start)$/;"	f	file:	signature:(git_indexer *idx, git_rawobj *obj, git_off_t entry_start)
hash_bits	deps/zlib/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state	access:public
hash_cng_ctx	src/hash/hash_win32.h	/^struct hash_cng_ctx {$/;"	s
hash_cng_ctx::hash_handle	src/hash/hash_win32.h	/^	HANDLE \/* BCRYPT_HASH_HANDLE *\/ hash_handle;$/;"	m	struct:hash_cng_ctx	access:public
hash_cng_ctx::hash_object	src/hash/hash_win32.h	/^	PBYTE hash_object;$/;"	m	struct:hash_cng_ctx	access:public
hash_cng_ctx::updated	src/hash/hash_win32.h	/^	bool updated;$/;"	m	struct:hash_cng_ctx	access:public
hash_cng_final	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_final(git_oid *out, git_hash_ctx *ctx)$/;"	f	signature:(git_oid *out, git_hash_ctx *ctx)
hash_cng_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
hash_cng_prov	src/hash/hash_win32.h	/^struct hash_cng_prov {$/;"	s
hash_cng_prov::close_algorithm_provider	src/hash/hash_win32.h	/^	hash_win32_cng_close_algorithm_provider_fn close_algorithm_provider;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::create_hash	src/hash/hash_win32.h	/^	hash_win32_cng_create_hash_fn create_hash;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::destroy_hash	src/hash/hash_win32.h	/^	hash_win32_cng_destroy_hash_fn destroy_hash;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::dll	src/hash/hash_win32.h	/^	HINSTANCE dll;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::finish_hash	src/hash/hash_win32.h	/^	hash_win32_cng_finish_hash_fn finish_hash;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::get_property	src/hash/hash_win32.h	/^	hash_win32_cng_get_property_fn get_property;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::handle	src/hash/hash_win32.h	/^	HANDLE \/* BCRYPT_ALG_HANDLE *\/ handle;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::hash_data	src/hash/hash_win32.h	/^	hash_win32_cng_hash_data_fn hash_data;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::hash_object_size	src/hash/hash_win32.h	/^	DWORD hash_object_size;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov::open_algorithm_provider	src/hash/hash_win32.h	/^	hash_win32_cng_open_algorithm_provider_fn open_algorithm_provider;$/;"	m	struct:hash_cng_prov	access:public
hash_cng_prov_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_prov_init(void)$/;"	f	signature:(void)
hash_cng_prov_shutdown	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_cng_prov_shutdown(void)$/;"	f	signature:(void)
hash_cng_update	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f	signature:(git_hash_ctx *ctx, const void *data, size_t len)
hash_cryptoapi_ctx	src/hash/hash_win32.h	/^struct hash_cryptoapi_ctx {$/;"	s
hash_cryptoapi_ctx::hash_handle	src/hash/hash_win32.h	/^	HCRYPTHASH hash_handle;$/;"	m	struct:hash_cryptoapi_ctx	access:public
hash_cryptoapi_ctx::valid	src/hash/hash_win32.h	/^	bool valid;$/;"	m	struct:hash_cryptoapi_ctx	access:public
hash_cryptoapi_final	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_final(git_oid *out, git_hash_ctx *ctx)$/;"	f	signature:(git_oid *out, git_hash_ctx *ctx)
hash_cryptoapi_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
hash_cryptoapi_prov	src/hash/hash_win32.h	/^struct hash_cryptoapi_prov {$/;"	s
hash_cryptoapi_prov::handle	src/hash/hash_win32.h	/^	HCRYPTPROV handle;$/;"	m	struct:hash_cryptoapi_prov	access:public
hash_cryptoapi_prov_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_prov_init()$/;"	f
hash_cryptoapi_prov_shutdown	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_cryptoapi_prov_shutdown(void)$/;"	f	signature:(void)
hash_cryptoapi_update	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f	signature:(git_hash_ctx *ctx, const void *data, size_t len)
hash_ctx	include/git2/odb_backend.h	/^	void *hash_ctx;$/;"	m	struct:git_odb_stream	access:public
hash_ctx	src/indexer.c	/^	git_hash_ctx hash_ctx;$/;"	m	struct:git_indexer	file:	access:public
hash_ctx_cng_cleanup	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_ctx_cng_cleanup(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
hash_ctx_cng_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_ctx_cng_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
hash_ctx_cryptoapi_cleanup	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_ctx_cryptoapi_cleanup(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
hash_ctx_cryptoapi_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_ctx_cryptoapi_init(git_hash_ctx *ctx)$/;"	f	signature:(git_hash_ctx *ctx)
hash_data	src/hash/hash_win32.h	/^	hash_win32_cng_hash_data_fn hash_data;$/;"	m	struct:hash_cng_prov	access:public
hash_handle	src/hash/hash_win32.h	/^	HANDLE \/* BCRYPT_HASH_HANDLE *\/ hash_handle;$/;"	m	struct:hash_cng_ctx	access:public
hash_handle	src/hash/hash_win32.h	/^	HCRYPTHASH hash_handle;$/;"	m	struct:hash_cryptoapi_ctx	access:public
hash_header	src/indexer.c	/^static void hash_header(git_hash_ctx *ctx, git_off_t len, git_otype type)$/;"	f	file:	signature:(git_hash_ctx *ctx, git_off_t len, git_otype type)
hash_header	src/odb.c	/^static void hash_header(git_hash_ctx *ctx, git_off_t size, git_otype type)$/;"	f	file:	signature:(git_hash_ctx *ctx, git_off_t size, git_otype type)
hash_mask	deps/zlib/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state	access:public
hash_mask	src/delta.c	/^	unsigned int hash_mask;$/;"	m	struct:git_delta_index	file:	access:public
hash_md5	include/git2/transport.h	/^	unsigned char hash_md5[16];$/;"	m	struct:__anon78	access:public
hash_object	src/hash/hash_win32.h	/^	PBYTE hash_object;$/;"	m	struct:hash_cng_ctx	access:public
hash_object_fail	tests/object/raw/hash.c	/^static void hash_object_fail(git_oid *oid, git_rawobj *obj)$/;"	f	file:	signature:(git_oid *oid, git_rawobj *obj)
hash_object_pass	tests/object/raw/hash.c	/^static void hash_object_pass(git_oid *oid, git_rawobj *obj)$/;"	f	file:	signature:(git_oid *oid, git_rawobj *obj)
hash_object_size	src/hash/hash_win32.h	/^	DWORD hash_object_size;$/;"	m	struct:hash_cng_prov	access:public
hash_object_stream	src/indexer.c	/^static int hash_object_stream(git_indexer*idx, git_packfile_stream *stream)$/;"	f	file:	signature:(git_indexer*idx, git_packfile_stream *stream)
hash_partially	src/indexer.c	/^static void hash_partially(git_indexer *idx, const uint8_t *data, size_t size)$/;"	f	file:	signature:(git_indexer *idx, const uint8_t *data, size_t size)
hash_prov	src/hash/hash_win32.c	/^static struct git_hash_prov hash_prov = {0};$/;"	v	typeref:struct:git_hash_prov	file:
hash_sha1	include/git2/transport.h	/^	unsigned char hash_sha1[20];$/;"	m	struct:__anon78	access:public
hash_shift	deps/zlib/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state	access:public
hash_size	deps/zlib/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state	access:public
hash_win32_cng_close_algorithm_provider_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_close_algorithm_provider_fn)($/;"	t
hash_win32_cng_create_hash_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_create_hash_fn)($/;"	t
hash_win32_cng_destroy_hash_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_destroy_hash_fn)($/;"	t
hash_win32_cng_finish_hash_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_finish_hash_fn)($/;"	t
hash_win32_cng_get_property_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_get_property_fn)($/;"	t
hash_win32_cng_hash_data_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_hash_data_fn)($/;"	t
hash_win32_cng_open_algorithm_provider_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_open_algorithm_provider_fn)($/;"	t
hash_win32_prov_type	src/hash/hash_win32.h	/^enum hash_win32_prov_type {$/;"	g
hashmap	src/xdiff/xpatience.c	/^struct hashmap {$/;"	s	file:
hashmap::alloc	src/xdiff/xpatience.c	/^	int nr, alloc;$/;"	m	struct:hashmap	file:	access:public
hashmap::entries	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:	access:public
hashmap::entry	src/xdiff/xpatience.c	/^	struct entry {$/;"	s	struct:hashmap	file:	access:public
hashmap::entry::hash	src/xdiff/xpatience.c	/^		unsigned long hash;$/;"	m	struct:hashmap::entry	file:	access:public
hashmap::entry::line1	src/xdiff/xpatience.c	/^		unsigned long line1, line2;$/;"	m	struct:hashmap::entry	file:	access:public
hashmap::entry::line2	src/xdiff/xpatience.c	/^		unsigned long line1, line2;$/;"	m	struct:hashmap::entry	file:	access:public
hashmap::entry::next	src/xdiff/xpatience.c	/^		struct entry *next, *previous;$/;"	m	struct:hashmap::entry	typeref:struct:hashmap::entry::entry	file:	access:public
hashmap::entry::previous	src/xdiff/xpatience.c	/^		struct entry *next, *previous;$/;"	m	struct:hashmap::entry	typeref:struct:hashmap::entry::	file:	access:public
hashmap::env	src/xdiff/xpatience.c	/^	xdfenv_t *env;$/;"	m	struct:hashmap	file:	access:public
hashmap::file1	src/xdiff/xpatience.c	/^	mmfile_t *file1, *file2;$/;"	m	struct:hashmap	file:	access:public
hashmap::file2	src/xdiff/xpatience.c	/^	mmfile_t *file1, *file2;$/;"	m	struct:hashmap	file:	access:public
hashmap::first	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:	access:public
hashmap::has_matches	src/xdiff/xpatience.c	/^	unsigned long has_matches;$/;"	m	struct:hashmap	file:	access:public
hashmap::last	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:	access:public
hashmap::nr	src/xdiff/xpatience.c	/^	int nr, alloc;$/;"	m	struct:hashmap	file:	access:public
hashmap::xpp	src/xdiff/xpatience.c	/^	xpparam_t const *xpp;$/;"	m	struct:hashmap	file:	access:public
hashsig_add_hashes	src/hashsig.c	/^static int hashsig_add_hashes($/;"	f	file:	signature:( git_hashsig *sig, const uint8_t *data, size_t size, hashsig_in_progress *prog)
hashsig_alloc	src/hashsig.c	/^static git_hashsig *hashsig_alloc(git_hashsig_option_t opts)$/;"	f	file:	signature:(git_hashsig_option_t opts)
hashsig_cmp	src/hashsig.c	/^typedef int (*hashsig_cmp)(const void *a, const void *b, void *);$/;"	t	file:
hashsig_cmp_max	src/hashsig.c	/^static int hashsig_cmp_max(const void *a, const void *b, void *payload)$/;"	f	file:	signature:(const void *a, const void *b, void *payload)
hashsig_cmp_min	src/hashsig.c	/^static int hashsig_cmp_min(const void *a, const void *b, void *payload)$/;"	f	file:	signature:(const void *a, const void *b, void *payload)
hashsig_finalize_hashes	src/hashsig.c	/^static int hashsig_finalize_hashes(git_hashsig *sig)$/;"	f	file:	signature:(git_hashsig *sig)
hashsig_heap	src/hashsig.c	/^} hashsig_heap;$/;"	t	typeref:struct:__anon334	file:
hashsig_heap_compare	src/hashsig.c	/^static int hashsig_heap_compare(const hashsig_heap *a, const hashsig_heap *b)$/;"	f	file:	signature:(const hashsig_heap *a, const hashsig_heap *b)
hashsig_heap_down	src/hashsig.c	/^static void hashsig_heap_down(hashsig_heap *h, int el)$/;"	f	file:	signature:(hashsig_heap *h, int el)
hashsig_heap_init	src/hashsig.c	/^static void hashsig_heap_init(hashsig_heap *h, hashsig_cmp cmp)$/;"	f	file:	signature:(hashsig_heap *h, hashsig_cmp cmp)
hashsig_heap_insert	src/hashsig.c	/^static void hashsig_heap_insert(hashsig_heap *h, hashsig_t val)$/;"	f	file:	signature:(hashsig_heap *h, hashsig_t val)
hashsig_heap_sort	src/hashsig.c	/^static void hashsig_heap_sort(hashsig_heap *h)$/;"	f	file:	signature:(hashsig_heap *h)
hashsig_heap_up	src/hashsig.c	/^static void hashsig_heap_up(hashsig_heap *h, int el)$/;"	f	file:	signature:(hashsig_heap *h, int el)
hashsig_in_progress	src/hashsig.c	/^} hashsig_in_progress;$/;"	t	typeref:struct:__anon335	file:
hashsig_in_progress_init	src/hashsig.c	/^static void hashsig_in_progress_init($/;"	f	file:	signature:( hashsig_in_progress *prog, git_hashsig *sig)
hashsig_state	src/hashsig.c	/^typedef uint64_t hashsig_state;$/;"	t	file:
hashsig_t	src/hashsig.c	/^typedef uint32_t hashsig_t;$/;"	t	file:
have	deps/zlib/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state	access:public
have	deps/zlib/zlib.h	/^    unsigned have;$/;"	m	struct:gzFile_s	access:public
have_delta	src/indexer.c	/^		have_delta :1;$/;"	m	struct:git_indexer	file:	access:public
have_refs	src/transports/local.c	/^		have_refs : 1;$/;"	m	struct:__anon178	file:	access:public
have_refs	src/transports/smart.h	/^		have_refs : 1,$/;"	m	struct:__anon193	access:public
have_regex	src/config.c	/^	int have_regex;$/;"	m	struct:__anon339	file:	access:public
have_stream	src/indexer.c	/^		have_stream :1,$/;"	m	struct:git_indexer	file:	access:public
havedict	deps/zlib/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state	access:public
hbits	src/xdiff/xprepare.c	/^	unsigned int hbits;$/;"	m	struct:s_xdlclassifier	file:	access:public
hbits	src/xdiff/xtypes.h	/^	unsigned int hbits;$/;"	m	struct:s_xdfile	access:public
hcrc	deps/zlib/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s	access:public
hdr	src/indexer.c	/^	struct git_pack_header hdr;$/;"	m	struct:git_indexer	typeref:struct:git_indexer::git_pack_header	file:	access:public
hdr_entries	src/pack.h	/^	uint32_t hdr_entries;$/;"	m	struct:git_pack_header	access:public
hdr_signature	src/pack.h	/^	uint32_t hdr_signature;$/;"	m	struct:git_pack_header	access:public
hdr_sz	src/delta.c	/^static int hdr_sz($/;"	f	file:	signature:( size_t *size, const unsigned char **delta, const unsigned char *end)
hdr_version	src/pack.h	/^	uint32_t hdr_version;$/;"	m	struct:git_pack_header	access:public
head	deps/zlib/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state	access:public
head	deps/zlib/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state	access:public
head	src/transports/smart.h	/^	git_remote_head head;$/;"	m	struct:__anon185	access:public
head	src/xdiff/xtypes.h	/^	chanode_t *head, *tail;$/;"	m	struct:s_chastore	access:public
head	tests/commit/write.c	/^static git_reference *head, *branch;$/;"	v	file:
head2idx	src/status.h	/^	git_diff *head2idx;$/;"	m	struct:git_status_list	access:public
head_detached	src/rebase.c	/^	int head_detached : 1,$/;"	m	struct:git_rebase	file:	access:public
head_oid	src/submodule.h	/^	git_oid head_oid;$/;"	m	struct:git_submodule	access:public
head_old	tests/commit/write.c	/^static char *head_old;$/;"	v	file:
head_to_index	include/git2/status.h	/^	git_diff_delta *head_to_index;$/;"	m	struct:__anon50	access:public
head_tracker_sym_ref_name	tests/refs/read.c	/^static const char *head_tracker_sym_ref_name = "HEAD_TRACKER";$/;"	v	file:
header	include/git2/diff.h	/^	char   header[GIT_DIFF_HUNK_HEADER_SIZE];   \/** Header text, NUL-byte terminated *\/$/;"	m	struct:__anon91	access:public
header	src/config_file.c	/^	diskfile_header header;$/;"	m	struct:__anon154	file:	access:public
header	src/config_file.c	/^	diskfile_header header;$/;"	m	struct:__anon155	file:	access:public
header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon377	file:	access:public
header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon378	file:	access:public
header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon379	file:	access:public
header_git_op	src/patch_parse.c	/^} header_git_op;$/;"	t	typeref:struct:__anon164	file:
header_git_ops	src/patch_parse.c	/^static const header_git_op header_git_ops[] = {$/;"	v	file:
header_len	include/git2/diff.h	/^	size_t header_len;    \/** Number of bytes in header text *\/$/;"	m	struct:__anon91	access:public
header_new_path	src/patch_parse.c	/^	char *header_old_path, *header_new_path;$/;"	m	struct:__anon163	file:	access:public
header_old_path	src/patch_parse.c	/^	char *header_old_path, *header_new_path;$/;"	m	struct:__anon163	file:	access:public
header_path_len	src/patch_parse.c	/^static int header_path_len(git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_patch_parse_ctx *ctx)
header_size	src/patch.h	/^	size_t header_size;$/;"	m	struct:git_patch	access:public
header_state	deps/http-parser/http_parser.h	/^  unsigned char header_state; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser	access:public
header_states	deps/http-parser/http_parser.c	/^enum header_states$/;"	g	file:
heads	src/transports/smart.h	/^	git_vector heads;$/;"	m	struct:__anon193	access:public
heap	deps/zlib/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state	access:public
heap_len	deps/zlib/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state	access:public
heap_max	deps/zlib/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state	access:public
hello_id	tests/object/raw/hash.c	/^static char *hello_id = "22596363b3de40b06f981fb85d82312e8c0ed511";$/;"	v	file:
hello_text	tests/object/raw/hash.c	/^static char *hello_text = "hello world\\n";$/;"	v	file:
heur_min	src/xdiff/xdiffi.h	/^	long heur_min;$/;"	m	struct:s_xdalgoenv	access:public
hex2c	src/netops.c	209;"	d	file:
hide	examples/log.c	/^	int hide;$/;"	m	struct:log_state	file:	access:public
hide_cb	src/revwalk.h	/^	git_revwalk_hide_cb hide_cb;$/;"	m	struct:git_revwalk	access:public
hide_cb_payload	src/revwalk.h	/^	void *hide_cb_payload;$/;"	m	struct:git_revwalk	access:public
hide_commit_cb	tests/revwalk/hidecb.c	/^static int hide_commit_cb(const git_oid *commit_id, void *data)$/;"	f	file:	signature:(const git_oid *commit_id, void *data)
hide_commit_use_payload_cb	tests/revwalk/hidecb.c	/^static int hide_commit_use_payload_cb(const git_oid *commit_id, void *data)$/;"	f	file:	signature:(const git_oid *commit_id, void *data)
hide_every_commit_cb	tests/revwalk/hidecb.c	/^static int hide_every_commit_cb(const git_oid *commit_id, void *data)$/;"	f	file:	signature:(const git_oid *commit_id, void *data)
hide_none_cb	tests/revwalk/hidecb.c	/^static int hide_none_cb(const git_oid *commit_id, void *data)$/;"	f	file:	signature:(const git_oid *commit_id, void *data)
high_water	deps/zlib/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state	access:public
hintpath	src/blob.c	/^	char *hintpath;$/;"	m	struct:__anon279	file:	access:public
histindex	src/xdiff/xhistogram.c	/^struct histindex {$/;"	s	file:
histindex::cnt	src/xdiff/xhistogram.c	/^	unsigned int cnt,$/;"	m	struct:histindex	file:	access:public
histindex::env	src/xdiff/xhistogram.c	/^	xdfenv_t *env;$/;"	m	struct:histindex	file:	access:public
histindex::has_common	src/xdiff/xhistogram.c	/^		     has_common;$/;"	m	struct:histindex	file:	access:public
histindex::key_shift	src/xdiff/xhistogram.c	/^		     key_shift,$/;"	m	struct:histindex	file:	access:public
histindex::line_map	src/xdiff/xhistogram.c	/^	  **line_map; \/* map of line to record chain *\/$/;"	m	struct:histindex	typeref:struct:histindex::record	file:	access:public
histindex::line_map_size	src/xdiff/xhistogram.c	/^		     line_map_size;$/;"	m	struct:histindex	file:	access:public
histindex::max_chain_length	src/xdiff/xhistogram.c	/^	unsigned int max_chain_length,$/;"	m	struct:histindex	file:	access:public
histindex::next_ptrs	src/xdiff/xhistogram.c	/^	unsigned int *next_ptrs;$/;"	m	struct:histindex	file:	access:public
histindex::ptr_shift	src/xdiff/xhistogram.c	/^		     ptr_shift;$/;"	m	struct:histindex	file:	access:public
histindex::rcha	src/xdiff/xhistogram.c	/^	chastore_t rcha;$/;"	m	struct:histindex	file:	access:public
histindex::record	src/xdiff/xhistogram.c	/^	struct record {$/;"	s	struct:histindex	file:	access:public
histindex::record::cnt	src/xdiff/xhistogram.c	/^		unsigned int ptr, cnt;$/;"	m	struct:histindex::record	file:	access:public
histindex::record::next	src/xdiff/xhistogram.c	/^		struct record *next;$/;"	m	struct:histindex::record	typeref:struct:histindex::record::record	file:	access:public
histindex::record::ptr	src/xdiff/xhistogram.c	/^		unsigned int ptr, cnt;$/;"	m	struct:histindex::record	file:	access:public
histindex::records	src/xdiff/xhistogram.c	/^	} **records, \/* an occurrence *\/$/;"	m	struct:histindex	typeref:struct:histindex::record	file:	access:public
histindex::records_size	src/xdiff/xhistogram.c	/^		     records_size,$/;"	m	struct:histindex	file:	access:public
histindex::table_bits	src/xdiff/xhistogram.c	/^	unsigned int table_bits,$/;"	m	struct:histindex	file:	access:public
histindex::xpp	src/xdiff/xhistogram.c	/^	xpparam_t const *xpp;$/;"	m	struct:histindex	file:	access:public
histogram_diff	src/xdiff/xhistogram.c	/^static int histogram_diff($/;"	f	file:	signature:( xpparam_t const *xpp, xdfenv_t *env, unsigned int line1, unsigned int count1, unsigned int line2, unsigned int count2)
hold	deps/zlib/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state	access:public
home_values	tests/core/env.c	/^static char *home_values[] = {$/;"	v	file:
homing_search_cmp	src/tree.c	/^static int homing_search_cmp(const void *key, const void *array_member)$/;"	f	file:	signature:(const void *key, const void *array_member)
host	src/netops.h	/^	char *host;$/;"	m	struct:gitno_connection_data	access:public
host	src/openssl_stream.c	/^	char *host;$/;"	m	struct:__anon276	file:	access:public
host	src/socket_stream.h	/^	char *host;$/;"	m	struct:__anon330	access:public
host	src/transports/smart.h	/^	char *host;$/;"	m	struct:git_pkt_cmd	access:public
host	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
how	tests/stash/apply.c	/^	bool how;$/;"	m	struct:seen_paths	file:	access:public
hsize	src/xdiff/xprepare.c	/^	long hsize;$/;"	m	struct:s_xdlclassifier	file:	access:public
http_action	src/transports/http.c	/^static int http_action($/;"	f	file:	signature:( git_smart_subtransport_stream **stream, git_smart_subtransport *subtransport, const char *url, git_smart_service_t action)
http_auth_negotiate_context	src/transports/auth_negotiate.c	/^} http_auth_negotiate_context;$/;"	t	typeref:struct:__anon194	file:
http_body_is_final	deps/http-parser/http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f	signature:(const struct http_parser *parser)
http_cb	deps/http-parser/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_close	src/transports/http.c	/^static int http_close(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
http_connect	src/transports/http.c	/^static int http_connect(http_subtransport *t)$/;"	f	file:	signature:(http_subtransport *t)
http_data_cb	deps/http-parser/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	deps/http-parser/http_parser.h	/^  unsigned char http_errno : 7;$/;"	m	struct:http_parser	access:public
http_errno	deps/http-parser/http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	deps/http-parser/http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f	signature:(enum http_errno err)
http_errno_name	deps/http-parser/http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f	signature:(enum http_errno err)
http_free	src/transports/http.c	/^static void http_free(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
http_header_name_length	src/transports/smart.c	/^static int http_header_name_length(const char *http_header)$/;"	f	file:	signature:(const char *http_header)
http_host_state	deps/http-parser/http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	deps/http-parser/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser	access:public
http_message_needs_eof	deps/http-parser/http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f	signature:(const http_parser *parser)
http_method	deps/http-parser/http_parser.h	/^enum http_method$/;"	g
http_method_str	deps/http-parser/http_parser.c	/^http_method_str (enum http_method m)$/;"	f	signature:(enum http_method m)
http_minor	deps/http-parser/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser	access:public
http_parse_host	deps/http-parser/http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:	signature:(const char * buf, struct http_parser_url *u, int found_at)
http_parse_host_char	deps/http-parser/http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:	signature:(enum http_host_state s, const char ch)
http_parser	deps/http-parser/http_parser.h	/^struct http_parser {$/;"	s
http_parser	deps/http-parser/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser::content_length	deps/http-parser/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser	access:public
http_parser::data	deps/http-parser/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser	access:public
http_parser::flags	deps/http-parser/http_parser.h	/^  unsigned char flags : 6;    \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser	access:public
http_parser::header_state	deps/http-parser/http_parser.h	/^  unsigned char header_state; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser	access:public
http_parser::http_errno	deps/http-parser/http_parser.h	/^  unsigned char http_errno : 7;$/;"	m	struct:http_parser	access:public
http_parser::http_major	deps/http-parser/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser	access:public
http_parser::http_minor	deps/http-parser/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser	access:public
http_parser::index	deps/http-parser/http_parser.h	/^  unsigned char index;        \/* index into current matcher *\/$/;"	m	struct:http_parser	access:public
http_parser::method	deps/http-parser/http_parser.h	/^  unsigned char method;       \/* requests only *\/$/;"	m	struct:http_parser	access:public
http_parser::nread	deps/http-parser/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser	access:public
http_parser::state	deps/http-parser/http_parser.h	/^  unsigned char state;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser	access:public
http_parser::status_code	deps/http-parser/http_parser.h	/^  unsigned short status_code; \/* responses only *\/$/;"	m	struct:http_parser	access:public
http_parser::type	deps/http-parser/http_parser.h	/^  unsigned char type : 2;     \/* enum http_parser_type *\/$/;"	m	struct:http_parser	access:public
http_parser::upgrade	deps/http-parser/http_parser.h	/^  unsigned char upgrade : 1;$/;"	m	struct:http_parser	access:public
http_parser_execute	deps/http-parser/http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f	signature:(http_parser *parser, const http_parser_settings *settings, const char *data, size_t len)
http_parser_h	deps/http-parser/http_parser.h	22;"	d
http_parser_init	deps/http-parser/http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f	signature:(http_parser *parser, enum http_parser_type t)
http_parser_parse_url	deps/http-parser/http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f	signature:(const char *buf, size_t buflen, int is_connect, struct http_parser_url *u)
http_parser_pause	deps/http-parser/http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f	signature:(http_parser *parser, int paused)
http_parser_settings	deps/http-parser/http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	deps/http-parser/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings::on_body	deps/http-parser/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings	access:public
http_parser_settings::on_header_field	deps/http-parser/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings	access:public
http_parser_settings::on_header_value	deps/http-parser/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings	access:public
http_parser_settings::on_headers_complete	deps/http-parser/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings	access:public
http_parser_settings::on_message_begin	deps/http-parser/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings	access:public
http_parser_settings::on_message_complete	deps/http-parser/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings	access:public
http_parser_settings::on_url	deps/http-parser/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings	access:public
http_parser_type	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	deps/http-parser/http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url::__anon1::len	deps/http-parser/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon1	access:public
http_parser_url::__anon1::off	deps/http-parser/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon1	access:public
http_parser_url::field_data	deps/http-parser/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon1	access:public
http_parser_url::field_set	deps/http-parser/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url	access:public
http_parser_url::port	deps/http-parser/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url	access:public
http_parser_url_fields	deps/http-parser/http_parser.h	/^enum http_parser_url_fields$/;"	g
http_receivepack	src/transports/http.c	/^static int http_receivepack($/;"	f	file:	signature:( http_subtransport *t, git_smart_subtransport_stream **stream)
http_receivepack_ls	src/transports/http.c	/^static int http_receivepack_ls($/;"	f	file:	signature:( http_subtransport *t, git_smart_subtransport_stream **stream)
http_should_keep_alive	deps/http-parser/http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f	signature:(const http_parser *parser)
http_stream	src/transports/http.c	/^} http_stream;$/;"	t	typeref:struct:__anon175	file:
http_stream_alloc	src/transports/http.c	/^static int http_stream_alloc(http_subtransport *t,$/;"	f	file:	signature:(http_subtransport *t, git_smart_subtransport_stream **stream)
http_stream_free	src/transports/http.c	/^static void http_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:	signature:(git_smart_subtransport_stream *stream)
http_stream_read	src/transports/http.c	/^static int http_stream_read($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, char *buffer, size_t buf_size, size_t *bytes_read)
http_stream_write_chunked	src/transports/http.c	/^static int http_stream_write_chunked($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
http_stream_write_single	src/transports/http.c	/^static int http_stream_write_single($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
http_strerror_tab	deps/http-parser/http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon2	file:
http_subtransport	src/transports/http.c	/^} http_subtransport;$/;"	t	typeref:struct:__anon176	file:
http_subtransport_definition	src/transport.c	/^static git_smart_subtransport_definition http_subtransport_definition = { git_smart_subtransport_http, 1, NULL };$/;"	v	file:
http_uploadpack	src/transports/http.c	/^static int http_uploadpack($/;"	f	file:	signature:( http_subtransport *t, git_smart_subtransport_stream **stream)
http_uploadpack_ls	src/transports/http.c	/^static int http_uploadpack_ls($/;"	f	file:	signature:( http_subtransport *t, git_smart_subtransport_stream **stream)
hunk	src/diff_xdiff.c	/^	git_diff_hunk hunk;$/;"	m	struct:__anon224	file:	access:public
hunk	src/patch.h	/^	git_diff_hunk hunk;$/;"	m	struct:git_patch_hunk	access:public
hunk_byfinalline_search_cmp	src/blame.c	/^static int hunk_byfinalline_search_cmp(const void *key, const void *entry)$/;"	f	file:	signature:(const void *key, const void *entry)
hunk_cb	src/patch_generate.h	/^	git_diff_hunk_cb hunk_cb;$/;"	m	struct:git_patch_generated_output	access:public
hunk_cb	tests/diff/binary.c	/^static int hunk_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, void *payload)
hunk_cmp	src/blame.c	/^static int hunk_cmp(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
hunk_ends_at_or_before_line	src/blame.c	/^static bool hunk_ends_at_or_before_line(git_blame_hunk *hunk, size_t line)$/;"	f	file:	signature:(git_blame_hunk *hunk, size_t line)
hunk_from_entry	src/blame.c	/^static git_blame_hunk* hunk_from_entry(git_blame__entry *e)$/;"	f	file:	signature:(git_blame__entry *e)
hunk_func	src/xdiff/xdiff.h	/^	xdl_emit_hunk_consume_func_t hunk_func;$/;"	m	struct:s_xdemitconf	access:public
hunk_is_bufferblame	src/blame.c	/^static bool hunk_is_bufferblame(git_blame_hunk *hunk)$/;"	f	file:	signature:(git_blame_hunk *hunk)
hunk_message	tests/blame/blame_helpers.c	/^void hunk_message(size_t idx, const git_blame_hunk *hunk, const char *fmt, ...)$/;"	f	signature:(size_t idx, const git_blame_hunk *hunk, const char *fmt, ...)
hunk_new_lines	tests/diff/diff_helpers.h	/^	int hunk_new_lines;$/;"	m	struct:__anon369	access:public
hunk_old_lines	tests/diff/diff_helpers.h	/^	int hunk_old_lines;$/;"	m	struct:__anon369	access:public
hunk_starts_at_or_after_line	src/blame.c	/^static bool hunk_starts_at_or_after_line(git_blame_hunk *hunk, size_t line)$/;"	f	file:	signature:(git_blame_hunk *hunk, size_t line)
hunks	src/blame.h	/^	git_vector hunks;$/;"	m	struct:git_blame	access:public
hunks	src/patch.h	/^	git_array_t(git_patch_hunk) hunks;$/;"	m	struct:git_patch	access:public
hunks	tests/diff/diff_helpers.h	/^	int hunks;$/;"	m	struct:__anon369	access:public
i	src/config.c	/^	size_t i;$/;"	m	struct:__anon337	file:	access:public
i	tests/merge/workdir/setup.c	/^	unsigned int i;$/;"	m	struct:annotated_commit_cb_data	file:	access:public
i	tests/resources/userdiff/after/file.php	/^        $i = 0;$/;"	v
i	tests/resources/userdiff/before/file.php	/^        $i = 0;$/;"	v
i	tests/resources/userdiff/expected/driver/diff.php	/^+        $i = 0;$/;"	v
i	tests/resources/userdiff/expected/driver/diff.php	/^-        $i = 0;$/;"	v
i	tests/resources/userdiff/expected/nodriver/diff.php	/^+        $i = 0;$/;"	v
i	tests/resources/userdiff/expected/nodriver/diff.php	/^-        $i = 0;$/;"	v
i	tests/resources/userdiff/files/file.php	/^        $i = 0;$/;"	v
i0	src/xdiff/xmerge.c	/^	long i0;$/;"	m	struct:s_xdmerge	file:	access:public
i1	src/xdiff/xdiffi.c	/^	long i1, i2;$/;"	m	struct:s_xdpsplit	file:	access:public
i1	src/xdiff/xdiffi.h	/^	long i1, i2;$/;"	m	struct:s_xdchange	access:public
i1	src/xdiff/xmerge.c	/^	long i1, i2;$/;"	m	struct:s_xdmerge	file:	access:public
i2	src/xdiff/xdiffi.c	/^	long i1, i2;$/;"	m	struct:s_xdpsplit	file:	access:public
i2	src/xdiff/xdiffi.h	/^	long i1, i2;$/;"	m	struct:s_xdchange	access:public
i2	src/xdiff/xmerge.c	/^	long i1, i2;$/;"	m	struct:s_xdmerge	file:	access:public
ic	src/path.h	/^	git_path_iconv_t ic;$/;"	m	struct:git_path_diriter	access:public
ic	tests/core/iconv.c	/^static git_path_iconv_t ic;$/;"	v	file:
icase	deps/regex/regex_internal.h	/^  unsigned char icase;$/;"	m	struct:re_string_t	access:public
icase_paths	tests/status/worktree.c	/^static const char *icase_paths[] = { "B", "c", "g", "H" };$/;"	v	file:
icase_statuses	tests/status/worktree.c	/^static unsigned int icase_statuses[] = {$/;"	v	file:
icurr	src/xdiff/xtypes.h	/^	long icurr;$/;"	m	struct:s_chanode	access:public
id	include/git2/diff.h	/^	const git_oid *id;$/;"	m	struct:__anon100	access:public
id	include/git2/diff.h	/^	git_oid     id;$/;"	m	struct:__anon85	access:public
id	include/git2/index.h	/^	git_oid id;$/;"	m	struct:git_index_entry	access:public
id	include/git2/odb.h	/^	git_oid id;$/;"	m	struct:git_odb_expand_id	access:public
id	include/git2/oid.h	/^	unsigned char id[GIT_OID_RAWSZ];$/;"	m	struct:git_oid	access:public
id	include/git2/oid.h	/^GIT_EXTERN(int) git_oid_iszero(const git_oid *id);$/;"	v
id	include/git2/rebase.h	/^	const git_oid id;$/;"	m	struct:__anon69	access:public
id	include/git2/tree.h	/^	git_oid id;$/;"	m	struct:__anon123	access:public
id	src/notes.h	/^	git_oid id;$/;"	m	struct:git_note	access:public
id	src/pack-objects.h	/^	git_oid id;$/;"	m	struct:__anon320	access:public
id	src/pack-objects.h	/^	git_oid id;$/;"	m	struct:git_pobject	access:public
id	src/transaction.c	/^		git_oid id;$/;"	m	union:__anon208::__anon209	file:	access:public
id	tests/core/oid.c	/^static git_oid id;$/;"	v	file:
id	tests/object/raw/write.c	/^    char *id;     \/* object id (sha1)                          *\/$/;"	m	struct:object_data	file:	access:public
id	tests/odb/loose_data.h	/^    char          *id;     \/* object id (sha1)                          *\/$/;"	m	struct:object_data	access:public
id	tests/threads/refdb.c	/^	int id;$/;"	m	struct:th_data	file:	access:public
id_abbrev	include/git2/diff.h	/^	uint16_t    id_abbrev;       \/**< default 'core.abbrev' or 7 if unset *\/$/;"	m	struct:__anon87	access:public
id_abbrev	include/git2/diff.h	/^	uint16_t    id_abbrev;$/;"	m	struct:__anon85	access:public
id_str	src/annotated_commit.h	/^	char id_str[GIT_OID_HEXSZ+1];$/;"	m	struct:git_annotated_commit	access:public
id_strlen	src/diff_print.c	/^	int id_strlen;$/;"	m	struct:__anon236	file:	access:public
ident_apply	src/ident.c	/^static int ident_apply($/;"	f	file:	signature:( git_filter *self, void **payload, git_buf *to, const git_buf *from, const git_filter_source *src)
ident_email	src/repository.h	/^	char *ident_email;$/;"	m	struct:git_repository	access:public
ident_find_id	src/ident.c	/^static int ident_find_id($/;"	f	file:	signature:( const char **id_start, const char **id_end, const char *start, size_t len)
ident_insert_id	src/ident.c	/^static int ident_insert_id($/;"	f	file:	signature:( git_buf *to, const git_buf *from, const git_filter_source *src)
ident_name	src/repository.h	/^	char *ident_name;$/;"	m	struct:git_repository	access:public
ident_remove_id	src/ident.c	/^static int ident_remove_id($/;"	f	file:	signature:( git_buf *to, const git_buf *from)
idm	tests/core/oid.c	/^static git_oid idm;$/;"	v	file:
idp	tests/core/oid.c	/^static git_oid idp;$/;"	v	file:
ids	include/git2/oidarray.h	/^	git_oid *ids;$/;"	m	struct:git_oidarray	access:public
idx	deps/regex/regex_internal.h	/^    int idx;			\/* for BACK_REF *\/$/;"	m	union:__anon7::__anon8	access:public
idx	deps/regex/regex_internal.h	/^  int idx;$/;"	m	struct:re_fail_stack_ent_t	access:public
idx	include/git2/indexer.h	/^GIT_EXTERN(const git_oid *) git_indexer_hash(const git_indexer *idx);$/;"	v
idx	include/git2/indexer.h	/^GIT_EXTERN(void) git_indexer_free(git_indexer *idx);$/;"	v
idx	src/diff_tform.c	/^	size_t   idx;$/;"	m	struct:__anon157	file:	access:public
idx	src/diff_tform.c	/^	size_t idx;$/;"	m	struct:__anon156	file:	access:public
idx	src/xdiff/xprepare.c	/^	long idx;$/;"	m	struct:s_xdlclass	file:	access:public
idx	tests/diff/rename.c	/^	size_t idx;$/;"	m	struct:rename_expected	file:	access:public
idx	tests/fetchhead/nonetwork.c	/^	size_t idx;$/;"	m	struct:__anon376	file:	access:public
idx2wd	src/status.h	/^	git_diff *idx2wd;$/;"	m	struct:git_status_list	access:public
idx_cache	src/pack.h	/^	git_oidmap *idx_cache;$/;"	m	struct:git_pack_file	access:public
idx_signature	src/pack.h	/^	uint32_t idx_signature;$/;"	m	struct:git_pack_idx_header	access:public
idx_version	src/pack.h	/^	uint32_t idx_version;$/;"	m	struct:git_pack_idx_header	access:public
idxentry_equal	src/idxmap.h	38;"	d
idxentry_hash	src/idxmap.h	/^static kh_inline khint_t idxentry_hash(const git_index_entry *e)$/;"	f	signature:(const git_index_entry *e)
idxentry_icase_equal	src/idxmap.h	39;"	d
ign_global	src/ignore.h	/^	git_vector ign_global;$/;"	m	struct:__anon331	access:public
ign_internal	src/ignore.h	/^	git_attr_file *ign_internal;$/;"	m	struct:__anon331	access:public
ign_path	src/ignore.h	/^	git_vector ign_path;$/;"	m	struct:__anon331	access:public
ignore	src/submodule.h	/^	git_submodule_ignore_t ignore;$/;"	m	struct:git_submodule	access:public
ignore	src/xdiff/xdiffi.h	/^	int ignore;$/;"	m	struct:s_xdchange	access:public
ignore_case	src/ignore.h	/^	int ignore_case;$/;"	m	struct:__anon331	access:public
ignore_case	src/index.h	/^	unsigned int ignore_case:1;$/;"	m	struct:git_index	access:public
ignore_ch	src/hashsig.c	/^	uint8_t ignore_ch[256];$/;"	m	struct:__anon335	file:	access:public
ignore_default	src/submodule.h	/^	git_submodule_ignore_t ignore_default;$/;"	m	struct:git_submodule	access:public
ignore_lookup_in_rules	src/ignore.c	/^static bool ignore_lookup_in_rules($/;"	f	file:	signature:( int *ignored, git_attr_file *file, git_attr_path *path)
ignore_submodules	include/git2/diff.h	/^	git_submodule_ignore_t ignore_submodules; \/**< submodule ignore rule *\/$/;"	m	struct:__anon87	access:public
ignored	tests/checkout/typechange.c	/^	int ignored;$/;"	m	struct:__anon350	file:	access:public
ignores	src/iterator.c	/^	git_ignores ignores;$/;"	m	struct:__anon272	file:	access:public
ignores	tests/index/addall.c	/^	size_t ignores;$/;"	m	struct:__anon371	file:	access:public
imaxabs	include/git2/inttypes.h	273;"	d
imaxdiv	include/git2/inttypes.h	/^imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)$/;"	f	signature:(intmax_t numer, intmax_t denom)
imaxdiv_t	include/git2/inttypes.h	/^} imaxdiv_t;$/;"	t	typeref:struct:__anon45
impl__exists	src/odb_mempack.c	/^static int impl__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(git_odb_backend *backend, const git_oid *oid)
impl__free	src/odb_mempack.c	/^static void impl__free(git_odb_backend *_backend)$/;"	f	file:	signature:(git_odb_backend *_backend)
impl__read	src/odb_mempack.c	/^static int impl__read(void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
impl__read_header	src/odb_mempack.c	/^static int impl__read_header(size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
impl__write	src/odb_mempack.c	/^static int impl__write(git_odb_backend *_backend, const git_oid *oid, const void *data, size_t len, git_otype type)$/;"	f	file:	signature:(git_odb_backend *_backend, const git_oid *oid, const void *data, size_t len, git_otype type)
in	src/zstream.h	/^	const char *in;$/;"	m	struct:__anon294	access:public
in_degree	src/commit_list.h	/^	unsigned short in_degree;$/;"	m	struct:git_commit_list_node	access:public
in_func	deps/zlib/zlib.h	/^typedef unsigned (*in_func) OF((void FAR *,$/;"	t
in_len	src/zstream.h	/^	size_t in_len;$/;"	m	struct:__anon294	access:public
in_section	src/config_file.c	/^	unsigned int in_section : 1,$/;"	m	struct:write_data	file:	access:public
inbuf	src/indexer.c	/^	char inbuf[GIT_OID_RAWSZ];$/;"	m	struct:git_indexer	file:	access:public
inbuf_len	src/indexer.c	/^	size_t inbuf_len;$/;"	m	struct:git_indexer	file:	access:public
include_changed	src/stash.c	/^	bool include_changed;$/;"	m	struct:stash_update_rules	file:	access:public
include_ignored	src/stash.c	/^	bool include_ignored;$/;"	m	struct:stash_update_rules	file:	access:public
include_tag	src/transports/smart.h	/^		include_tag:1,$/;"	m	struct:transport_smart_caps	access:public
include_untracked	src/stash.c	/^	bool include_untracked;$/;"	m	struct:stash_update_rules	file:	access:public
included	src/config_file.c	/^	bool included; \/* whether this is part of [include] *\/$/;"	m	struct:cvar_t	file:	access:public
included_path	src/config_file.c	/^static int included_path(git_buf *out, const char *dir, const char *path)$/;"	f	file:	signature:(git_buf *out, const char *dir, const char *path)
index	deps/http-parser/http_parser.h	/^  unsigned char index;        \/* index into current matcher *\/$/;"	m	struct:http_parser	access:public
index	include/git2/index.h	/^GIT_EXTERN(const char *) git_index_path(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(const git_oid *) git_index_checksum(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(git_repository *) git_index_owner(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_caps(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_clear(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_conflict_cleanup(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_has_conflicts(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_write(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(size_t) git_index_entrycount(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(unsigned int) git_index_version(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(void) git_index_free(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(size_t) git_index_name_entrycount(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(size_t) git_index_reuc_entrycount(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(void) git_index_name_clear(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(void) git_index_reuc_clear(git_index *index);$/;"	v
index	src/annotated_commit.h	/^	git_index *index;$/;"	m	struct:git_annotated_commit	access:public
index	src/attr.c	/^	git_index *index;$/;"	m	struct:__anon247	file:	access:public
index	src/checkout.c	/^	git_index *index;$/;"	m	struct:__anon215	file:	access:public
index	src/index.c	/^	git_index *index;$/;"	m	struct:foreach_diff_data	file:	access:public
index	src/index.c	/^	git_index *index;$/;"	m	struct:read_tree_data	file:	access:public
index	src/index.h	/^	git_index *index;$/;"	m	struct:__anon275	access:public
index	src/index.h	/^	git_index *index;$/;"	m	struct:git_index_conflict_iterator	access:public
index	src/iterator.c	/^	git_index *index;$/;"	m	struct:__anon272	file:	access:public
index	src/iterator.h	/^	git_index *index;$/;"	m	struct:git_iterator	access:public
index	src/pack-objects.c	/^	struct git_delta_index *index;$/;"	m	struct:unpacked	typeref:struct:unpacked::git_delta_index	file:	access:public
index	src/rebase.c	/^	git_index *index;$/;"	m	struct:git_rebase	file:	access:public
index	tests/index/tests.c	/^   size_t index;$/;"	m	struct:test_entry	file:	access:public
index_adds	tests/index/addall.c	/^	size_t index_adds;$/;"	m	struct:__anon371	file:	access:public
index_apply_to_all	src/index.c	/^static int index_apply_to_all($/;"	f	file:	signature:( git_index *index, int action, const git_strarray *paths, git_index_matched_path_cb cb, void *payload)
index_apply_to_wd_diff	src/index.c	/^static int index_apply_to_wd_diff(git_index *index, int action, const git_strarray *paths,$/;"	f	file:	signature:(git_index *index, int action, const git_strarray *paths, unsigned int flags, git_index_matched_path_cb cb, void *payload)
index_blob_lines	src/blame.c	/^static int index_blob_lines(git_blame *blame)$/;"	f	file:	signature:(git_blame *blame)
index_cb	examples/network/index-pack.c	/^static int index_cb(const git_transfer_progress *stats, void *data)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *data)
index_conflict__get_byindex	src/index.c	/^static int index_conflict__get_byindex($/;"	f	file:	signature:( const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index *index, size_t n)
index_conflict_data_eq_merge_diff	tests/merge/merge_helpers.c	/^static int index_conflict_data_eq_merge_diff(const struct merge_index_conflict_data *expected, git_merge_diff *actual)$/;"	f	file:	signature:(const struct merge_index_conflict_data *expected, git_merge_diff *actual)
index_conflict_remove	src/index.c	/^static int index_conflict_remove(git_index *index, const char *path)$/;"	f	file:	signature:(git_index *index, const char *path)
index_conflict_to_reuc	src/index.c	/^static int index_conflict_to_reuc(git_index *index, const char *path)$/;"	f	file:	signature:(git_index *index, const char *path)
index_dels	tests/index/addall.c	/^	size_t index_dels;$/;"	m	struct:__anon371	file:	access:public
index_delta2status	src/status.c	/^static unsigned int index_delta2status(const git_diff_delta *head2idx)$/;"	f	file:	signature:(const git_diff_delta *head2idx)
index_entry	src/delta.c	/^struct index_entry {$/;"	s	file:
index_entry::next	src/delta.c	/^	struct index_entry *next;$/;"	m	struct:index_entry	typeref:struct:index_entry::index_entry	file:	access:public
index_entry::ptr	src/delta.c	/^	const unsigned char *ptr;$/;"	m	struct:index_entry	file:	access:public
index_entry::val	src/delta.c	/^	unsigned int val;$/;"	m	struct:index_entry	file:	access:public
index_entry_adjust_namemask	src/index.c	/^static void index_entry_adjust_namemask($/;"	f	file:	signature:( git_index_entry *entry, size_t path_length)
index_entry_cmp	src/merge.c	/^GIT_INLINE(int) index_entry_cmp(const git_index_entry *a, const git_index_entry *b)$/;"	f	signature:(const git_index_entry *a, const git_index_entry *b)
index_entry_count	tests/index/tests.c	/^static const size_t index_entry_count = 109;$/;"	v	file:
index_entry_count_2	tests/index/tests.c	/^static const size_t index_entry_count_2 = 1437;$/;"	v	file:
index_entry_cpy	src/index.c	/^static void index_entry_cpy($/;"	f	file:	signature:( git_index_entry *tgt, const git_index_entry *src)
index_entry_cpy_nocache	src/index.c	/^static void index_entry_cpy_nocache($/;"	f	file:	signature:( git_index_entry *tgt, const git_index_entry *src)
index_entry_create	src/index.c	/^static int index_entry_create($/;"	f	file:	signature:( git_index_entry **out, git_repository *repo, const char *path, bool from_workdir)
index_entry_dup	src/index.c	/^static int index_entry_dup($/;"	f	file:	signature:( git_index_entry **out, git_index *index, const git_index_entry *src)
index_entry_dup_nocache	src/index.c	/^static int index_entry_dup_nocache($/;"	f	file:	signature:( git_index_entry **out, git_index *index, const git_index_entry *src)
index_entry_dup_pool	src/merge.c	/^GIT_INLINE(int) index_entry_dup_pool($/;"	f	signature:( git_index_entry *out, git_pool *pool, const git_index_entry *src)
index_entry_eq_merge_index_entry	tests/merge/merge_helpers.c	/^static int index_entry_eq_merge_index_entry(const struct merge_index_entry *expected, const git_index_entry *actual)$/;"	f	file:	signature:(const struct merge_index_entry *expected, const git_index_entry *actual)
index_entry_free	src/index.c	/^static void index_entry_free(git_index_entry *entry)$/;"	f	file:	signature:(git_index_entry *entry)
index_entry_init	src/index.c	/^static int index_entry_init($/;"	f	file:	signature:( git_index_entry **entry_out, git_index *index, const char *rel_path)
index_entry_init	tests/reset/hard.c	/^static void index_entry_init(git_index *index, int side, git_oid *oid)$/;"	f	file:	signature:(git_index *index, int side, git_oid *oid)
index_entry_isrch_path	src/index.c	/^static int index_entry_isrch_path(const void *path, const void *array_member)$/;"	f	file:	signature:(const void *path, const void *array_member)
index_entry_reuc_free	src/index.c	/^static void index_entry_reuc_free(git_index_reuc_entry *reuc)$/;"	f	file:	signature:(git_index_reuc_entry *reuc)
index_entry_reuc_init	src/index.c	/^static int index_entry_reuc_init(git_index_reuc_entry **reuc_out,$/;"	f	file:	signature:(git_index_reuc_entry **reuc_out, const char *path, int ancestor_mode, const git_oid *ancestor_oid, int our_mode, const git_oid *our_oid, int their_mode, const git_oid *their_oid)
index_entry_similarity_calc	src/merge.c	/^static int index_entry_similarity_calc($/;"	f	file:	signature:( void **out, git_repository *repo, git_index_entry *entry, const git_merge_options *opts)
index_entry_similarity_exact	src/merge.c	/^static int index_entry_similarity_exact($/;"	f	file:	signature:( git_repository *repo, git_index_entry *a, size_t a_idx, git_index_entry *b, size_t b_idx, void **cache, const git_merge_options *opts)
index_entry_similarity_inexact	src/merge.c	/^static int index_entry_similarity_inexact($/;"	f	file:	signature:( git_repository *repo, git_index_entry *a, size_t a_idx, git_index_entry *b, size_t b_idx, void **cache, const git_merge_options *opts)
index_entry_srch_path	src/index.c	/^static int index_entry_srch_path(const void *path, const void *array_member)$/;"	f	file:	signature:(const void *path, const void *array_member)
index_error_invalid	src/index.c	/^static int index_error_invalid(const char *message)$/;"	f	file:	signature:(const char *message)
index_existing_and_best	src/index.c	/^static void index_existing_and_best($/;"	f	file:	signature:( git_index_entry **existing, size_t *existing_position, git_index_entry **best, git_index *index, const git_index_entry *entry)
index_extension	src/index.c	/^struct index_extension {$/;"	s	file:
index_extension::extension_size	src/index.c	/^	uint32_t extension_size;$/;"	m	struct:index_extension	file:	access:public
index_extension::signature	src/index.c	/^	char signature[4];$/;"	m	struct:index_extension	file:	access:public
index_file_path	src/index.h	/^	char *index_file_path;$/;"	m	struct:git_index	access:public
index_find	src/index.c	/^GIT_INLINE(int) index_find($/;"	f	signature:( size_t *out, git_index *index, const char *path, size_t path_len, int stage)
index_find_in_entries	src/index.c	/^GIT_INLINE(int) index_find_in_entries($/;"	f	signature:( size_t *out, git_vector *entries, git_vector_cmp entry_srch, const char *path, size_t path_len, int stage)
index_free	src/index.c	/^static void index_free(git_index *index)$/;"	f	file:	signature:(git_index *index)
index_free_deleted	src/index.c	/^static void index_free_deleted(git_index *index)$/;"	f	file:	signature:(git_index *index)
index_from_diff_list	src/merge.c	/^static int index_from_diff_list(git_index **out,$/;"	f	file:	signature:(git_index **out, git_merge_diff_list *diff_list, bool skip_reuc)
index_header	src/index.c	/^struct index_header {$/;"	s	file:
index_header::entry_count	src/index.c	/^	uint32_t entry_count;$/;"	m	struct:index_header	file:	access:public
index_header::signature	src/index.c	/^	uint32_t signature;$/;"	m	struct:index_header	file:	access:public
index_header::version	src/index.c	/^	uint32_t version;$/;"	m	struct:index_header	file:	access:public
index_insert	src/index.c	/^static int index_insert($/;"	f	file:	signature:( git_index *index, git_index_entry **entry_ptr, int replace, bool trust_path, bool trust_mode, bool trust_id)
index_iterator	src/iterator.c	/^} index_iterator;$/;"	t	typeref:struct:__anon273	file:
index_iterator_advance	src/iterator.c	/^static int index_iterator_advance($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
index_iterator_advance_into	src/iterator.c	/^static int index_iterator_advance_into($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
index_iterator_advance_over	src/iterator.c	/^static int index_iterator_advance_over($/;"	f	file:	signature:( const git_index_entry **out, git_iterator_status_t *status, git_iterator *i)
index_iterator_clear	src/iterator.c	/^static void index_iterator_clear(index_iterator *iter)$/;"	f	file:	signature:(index_iterator *iter)
index_iterator_create_pseudotree	src/iterator.c	/^static bool index_iterator_create_pseudotree($/;"	f	file:	signature:( const git_index_entry **out, index_iterator *iter, const char *path)
index_iterator_current	src/iterator.c	/^static int index_iterator_current($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
index_iterator_free	src/iterator.c	/^static void index_iterator_free(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
index_iterator_init	src/iterator.c	/^static int index_iterator_init(index_iterator *iter)$/;"	f	file:	signature:(index_iterator *iter)
index_iterator_reset	src/iterator.c	/^static int index_iterator_reset(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
index_iterator_skip_pseudotree	src/iterator.c	/^static int index_iterator_skip_pseudotree(index_iterator *iter)$/;"	f	file:	signature:(index_iterator *iter)
index_iterator_test	tests/iterator/index.c	/^static void index_iterator_test($/;"	f	file:	signature:( const char *sandbox, const char *start, const char *end, git_iterator_flag_t flags, int expected_count, const char **expected_names, const char **expected_oids)
index_map	src/pack.h	/^	git_map index_map;$/;"	m	struct:git_pack_file	access:public
index_merge_mode	src/index.c	/^static unsigned int index_merge_mode($/;"	f	file:	signature:( git_index *index, git_index_entry *existing, unsigned int mode)
index_mods	tests/index/addall.c	/^	size_t index_mods;$/;"	m	struct:__anon371	file:	access:public
index_name_entry_free	src/index.c	/^static void index_name_entry_free(git_index_name_entry *ne)$/;"	f	file:	signature:(git_index_name_entry *ne)
index_no_dups	src/index.c	/^static int index_no_dups(void **old, void *new)$/;"	f	file:	signature:(void **old, void *new)
index_oid	src/submodule.h	/^	git_oid index_oid;$/;"	m	struct:git_submodule	access:public
index_pack	examples/network/index-pack.c	/^int index_pack(git_repository *repo, int argc, char **argv)$/;"	f	signature:(git_repository *repo, int argc, char **argv)
index_path	src/indexer.c	/^static int index_path(git_buf *path, git_indexer *idx, const char *suffix)$/;"	f	file:	signature:(git_buf *path, git_indexer *idx, const char *suffix)
index_remove_entry	src/index.c	/^static int index_remove_entry(git_index *index, size_t pos)$/;"	f	file:	signature:(git_index *index, size_t pos)
index_reuc_insert	src/index.c	/^static int index_reuc_insert($/;"	f	file:	signature:( git_index *index, git_index_reuc_entry *reuc)
index_reuc_on_dup	src/index.c	/^static int index_reuc_on_dup(void **old, void *new)$/;"	f	file:	signature:(void **old, void *new)
index_snapshot	src/iterator.c	/^	git_vector index_snapshot;$/;"	m	struct:__anon272	file:	access:public
index_status_cb	tests/index/addall.c	/^static int index_status_cb($/;"	f	file:	signature:( const char *path, unsigned int status_flags, void *payload)
index_status_counts	tests/index/addall.c	/^} index_status_counts;$/;"	t	typeref:struct:__anon371	file:
index_to_workdir	include/git2/status.h	/^	git_diff_delta *index_to_workdir;$/;"	m	struct:__anon50	access:public
index_update_reuc	src/merge.c	/^static int index_update_reuc(git_index *index, git_merge_diff_list *diff_list)$/;"	f	file:	signature:(git_index *index, git_merge_diff_list *diff_list)
index_updated	src/diff_generate.c	/^	bool index_updated;$/;"	m	struct:__anon296	file:	access:public
index_version	src/pack.h	/^	int index_version;$/;"	m	struct:git_pack_file	access:public
index_walking	examples/general.c	/^static void index_walking(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
indexed_deltas	include/git2/types.h	/^	unsigned int indexed_deltas;$/;"	m	struct:git_transfer_progress	access:public
indexed_objects	include/git2/types.h	/^	unsigned int indexed_objects;$/;"	m	struct:git_transfer_progress	access:public
indexer	src/odb_pack.c	/^	git_indexer *indexer;$/;"	m	struct:pack_writepack	file:	access:public
indexer	src/pack-objects.c	/^	git_indexer *indexer;$/;"	m	struct:pack_write_context	file:	access:public
inflate	deps/zlib/inflate.c	/^int ZEXPORT inflate(strm, flush)$/;"	f
inflateBack	deps/zlib/infback.c	/^int ZEXPORT inflateBack(strm, in, in_desc, out, out_desc)$/;"	f
inflateBackEnd	deps/zlib/infback.c	/^int ZEXPORT inflateBackEnd(strm)$/;"	f
inflateBackInit	deps/zlib/zlib.h	1657;"	d
inflateBackInit_	deps/zlib/infback.c	/^int ZEXPORT inflateBackInit_(strm, windowBits, window, version, stream_size)$/;"	f
inflateCopy	deps/zlib/inflate.c	/^int ZEXPORT inflateCopy(dest, source)$/;"	f
inflateEnd	deps/zlib/inflate.c	/^int ZEXPORT inflateEnd(strm)$/;"	f
inflateGetDictionary	deps/zlib/inflate.c	/^int ZEXPORT inflateGetDictionary(strm, dictionary, dictLength)$/;"	f
inflateGetHeader	deps/zlib/inflate.c	/^int ZEXPORT inflateGetHeader(strm, head)$/;"	f
inflateInit	deps/zlib/zlib.h	1649;"	d
inflateInit2	deps/zlib/zlib.h	1654;"	d
inflateInit2_	deps/zlib/inflate.c	/^int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)$/;"	f
inflateInit_	deps/zlib/inflate.c	/^int ZEXPORT inflateInit_(strm, version, stream_size)$/;"	f
inflateMark	deps/zlib/inflate.c	/^long ZEXPORT inflateMark(strm)$/;"	f
inflatePrime	deps/zlib/inflate.c	/^int ZEXPORT inflatePrime(strm, bits, value)$/;"	f
inflateReset	deps/zlib/inflate.c	/^int ZEXPORT inflateReset(strm)$/;"	f
inflateReset2	deps/zlib/inflate.c	/^int ZEXPORT inflateReset2(strm, windowBits)$/;"	f
inflateResetKeep	deps/zlib/inflate.c	/^int ZEXPORT inflateResetKeep(strm)$/;"	f
inflateSetDictionary	deps/zlib/inflate.c	/^int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)$/;"	f
inflateSync	deps/zlib/inflate.c	/^int ZEXPORT inflateSync(strm)$/;"	f
inflateSyncPoint	deps/zlib/inflate.c	/^int ZEXPORT inflateSyncPoint(strm)$/;"	f
inflateUndermine	deps/zlib/inflate.c	/^int ZEXPORT inflateUndermine(strm, subvert)$/;"	f
inflate_buffer	src/odb_loose.c	/^static int inflate_buffer(void *in, size_t inlen, void *out, size_t outlen)$/;"	f	file:	signature:(void *in, size_t inlen, void *out, size_t outlen)
inflate_copyright	deps/zlib/inftrees.c	/^const char inflate_copyright[] =$/;"	v
inflate_disk_obj	src/odb_loose.c	/^static int inflate_disk_obj(git_rawobj *out, git_buf *obj)$/;"	f	file:	signature:(git_rawobj *out, git_buf *obj)
inflate_fast	deps/zlib/inffast.c	/^void ZLIB_INTERNAL inflate_fast(strm, start)$/;"	f
inflate_mode	deps/zlib/inflate.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon28
inflate_packlike_loose_disk_obj	src/odb_loose.c	/^static int inflate_packlike_loose_disk_obj(git_rawobj *out, git_buf *obj)$/;"	f	file:	signature:(git_rawobj *out, git_buf *obj)
inflate_state	deps/zlib/inflate.h	/^struct inflate_state {$/;"	s
inflate_state::back	deps/zlib/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state	access:public
inflate_state::bits	deps/zlib/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state	access:public
inflate_state::check	deps/zlib/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state	access:public
inflate_state::codes	deps/zlib/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state	access:public
inflate_state::distbits	deps/zlib/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state	access:public
inflate_state::distcode	deps/zlib/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state	access:public
inflate_state::dmax	deps/zlib/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state	access:public
inflate_state::extra	deps/zlib/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state	access:public
inflate_state::flags	deps/zlib/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state	access:public
inflate_state::have	deps/zlib/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state	access:public
inflate_state::havedict	deps/zlib/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state	access:public
inflate_state::head	deps/zlib/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state	access:public
inflate_state::hold	deps/zlib/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state	access:public
inflate_state::last	deps/zlib/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lenbits	deps/zlib/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lencode	deps/zlib/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state	access:public
inflate_state::length	deps/zlib/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lens	deps/zlib/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::mode	deps/zlib/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state	access:public
inflate_state::ncode	deps/zlib/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::ndist	deps/zlib/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::next	deps/zlib/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state	access:public
inflate_state::nlen	deps/zlib/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::offset	deps/zlib/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state	access:public
inflate_state::sane	deps/zlib/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state	access:public
inflate_state::total	deps/zlib/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state	access:public
inflate_state::was	deps/zlib/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wbits	deps/zlib/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state	access:public
inflate_state::whave	deps/zlib/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state	access:public
inflate_state::window	deps/zlib/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wnext	deps/zlib/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state	access:public
inflate_state::work	deps/zlib/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wrap	deps/zlib/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wsize	deps/zlib/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state	access:public
inflate_table	deps/zlib/inftrees.c	/^int ZLIB_INTERNAL inflate_table(type, lens, codes, table, bits, work)$/;"	f
inflate_tail	src/odb_loose.c	/^static void *inflate_tail(z_stream *s, void *hb, size_t used, obj_hdr *hdr)$/;"	f	file:	signature:(z_stream *s, void *hb, size_t used, obj_hdr *hdr)
inflatedlen	include/git2/diff.h	/^	size_t inflatedlen;$/;"	m	struct:__anon89	access:public
init_array	examples/add.c	/^void init_array(git_strarray *array, int argc, char **argv)$/;"	f	signature:(git_strarray *array, int argc, char **argv)
init_bio_method	src/openssl_stream.c	/^static int init_bio_method(void)$/;"	f	file:	signature:(void)
init_block	deps/zlib/trees.c	/^local void init_block(s)$/;"	f
init_common	src/global.c	/^static int init_common(void)$/;"	f	file:	signature:(void)
init_context	src/transports/auth.h	/^	int (*init_context)($/;"	m	struct:__anon196	access:public
init_dfa	deps/regex/regcomp.c	/^init_dfa (re_dfa_t *dfa, size_t pat_len)$/;"	f	file:	signature:(re_dfa_t *dfa, size_t pat_len)
init_error	src/global.c	/^int init_error = 0;$/;"	v
init_fake_wstream	src/odb.c	/^static int init_fake_wstream(git_odb_stream **stream_p, git_odb_backend *backend, git_off_t size, git_otype type)$/;"	f	file:	signature:(git_odb_stream **stream_p, git_odb_backend *backend, git_off_t size, git_otype type)
init_linked_repo	tests/odb/alternates.c	/^static void init_linked_repo(const char *path, const char *alternate)$/;"	f	file:	signature:(const char *path, const char *alternate)
init_node	deps/regex/regex_internal.h	/^  int init_node;$/;"	m	struct:re_dfa_t	access:public
init_once	src/global.c	/^static void init_once(void)$/;"	f	file:	signature:(void)
init_one_submodule	tests/submodule/modify.c	/^static int init_one_submodule($/;"	f	file:	signature:( git_submodule *sm, const char *name, void *payload)
init_setup	src/attr_file.h	/^	unsigned int init_setup:1,$/;"	m	struct:__anon173	access:public
init_state	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state;$/;"	m	struct:re_dfa_t	access:public
init_state_begbuf	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_begbuf;$/;"	m	struct:re_dfa_t	access:public
init_state_nl	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_nl;$/;"	m	struct:re_dfa_t	access:public
init_state_word	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_word;$/;"	m	struct:re_dfa_t	access:public
init_stream	src/odb_loose.c	/^static void init_stream(z_stream *s, void *out, size_t len)$/;"	f	file:	signature:(z_stream *s, void *out, size_t len)
init_sysdir	src/attr_file.h	/^		init_sysdir:1;$/;"	m	struct:__anon173	access:public
init_word_char	deps/regex/regcomp.c	/^init_word_char (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
initial_commit	examples/init.c	/^	int initial_commit;$/;"	m	struct:opts	file:	access:public
initial_head	include/git2/repository.h	/^	const char *initial_head;$/;"	m	struct:__anon119	access:public
initialize	include/git2/sys/filter.h	/^	git_filter_init_fn     initialize;$/;"	m	struct:git_filter	access:public
initialize	include/git2/sys/merge.h	/^	git_merge_driver_init_fn     initialize;$/;"	m	struct:git_merge_driver	access:public
initialize	tests/clar.c	/^	struct clar_func initialize;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:	access:public
initialize	tests/reset/default.c	/^static void initialize(const char *repo_name)$/;"	f	file:	signature:(const char *repo_name)
initialized	src/filter.c	/^	int initialized;$/;"	m	struct:__anon235	file:	access:public
initialized	src/merge_driver.c	/^	int initialized;$/;"	m	struct:__anon274	file:	access:public
initialized	tests/merge/driver.c	/^	int initialized;$/;"	m	struct:test_merge_driver	file:	access:public
inject_object	src/indexer.c	/^static int inject_object(git_indexer *idx, git_oid *id)$/;"	f	file:	signature:(git_indexer *idx, git_oid *id)
inline	deps/regex/regex_internal.h	135;"	d
inline	deps/regex/regex_internal.h	137;"	d
inmemory	include/git2/rebase.h	/^	int inmemory;$/;"	m	struct:__anon67	access:public
inmemory	src/rebase.c	/^		inmemory : 1,$/;"	m	struct:git_rebase	file:	access:public
ino	include/git2/index.h	/^	uint32_t ino;$/;"	m	struct:git_index_entry	access:public
ino	src/fileops.h	/^	unsigned int ino;$/;"	m	struct:__anon349	access:public
ino	src/index.c	/^	uint32_t ino;$/;"	m	struct:entry_long	file:	access:public
ino	src/index.c	/^	uint32_t ino;$/;"	m	struct:entry_short	file:	access:public
input	deps/regex/regex_internal.h	/^  re_string_t input;$/;"	m	struct:__anon12	access:public
input	src/filter.c	/^	git_buf input;$/;"	m	struct:proxy_stream	file:	access:public
input	tests/filter/wildcard.c	/^static unsigned char input[] = {$/;"	v	file:
ins_h	deps/zlib/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state	access:public
insert	deps/zlib/deflate.h	/^    uInt insert;        \/* bytes at end of window left to insert *\/$/;"	m	struct:internal_state	access:public
insert_commit	src/pack-objects.c	/^int insert_commit(git_packbuilder *pb, git_walk_object *obj)$/;"	f	signature:(git_packbuilder *pb, git_walk_object *obj)
insert_delete_side_of_split	src/diff_tform.c	/^static int insert_delete_side_of_split($/;"	f	file:	signature:( git_diff *diff, git_vector *onto, const git_diff_delta *delta)
insert_head_ids	src/merge.c	/^GIT_INLINE(int) insert_head_ids($/;"	f	signature:( git_array_oid_t *ids, const git_annotated_commit *annotated_commit)
insert_note_in_tree_eexists_cb	src/notes.c	/^static int insert_note_in_tree_eexists_cb(git_tree **out,$/;"	f	file:	signature:(git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int current_error)
insert_note_in_tree_enotfound_cb	src/notes.c	/^static int insert_note_in_tree_enotfound_cb(git_tree **out,$/;"	f	file:	signature:(git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int current_error)
insert_record	src/xdiff/xpatience.c	/^static void insert_record(int line, struct hashmap *map, int pass)$/;"	f	file:	signature:(int line, struct hashmap *map, int pass)
insert_sequential_oids	tests/object/raw/short.c	/^static int insert_sequential_oids($/;"	f	file:	signature:( char ***out, git_oid_shorten *os, int n, int fail)
insert_strings	tests/core/strmap.c	/^static void insert_strings(git_strmap *table, int count)$/;"	f	file:	signature:(git_strmap *table, int count)
insert_tree	src/pack-objects.c	/^int insert_tree(git_packbuilder *pb, git_tree *tree)$/;"	f	signature:(git_packbuilder *pb, git_tree *tree)
insert_unique	src/win32/w32_crtdbg_stacktrace.c	/^static git_win32__crtdbg_stacktrace__row * insert_unique($/;"	f	file:	signature:( const git_win32__stack__raw_data *pdata)
insertions	src/diff_stats.c	/^	size_t insertions;$/;"	m	struct:__anon227	file:	access:public
insertions	src/diff_stats.c	/^	size_t insertions;$/;"	m	struct:git_diff_stats	file:	access:public
int16_t	deps/http-parser/http_parser.h	/^typedef __int16 int16_t;$/;"	t
int16_t	include/git2/stdint.h	/^   typedef signed __int16    int16_t;$/;"	t
int16_t	include/git2/stdint.h	/^   typedef signed short      int16_t;$/;"	t
int32_t	deps/http-parser/http_parser.h	/^typedef __int32 int32_t;$/;"	t
int32_t	include/git2/stdint.h	/^   typedef signed __int32    int32_t;$/;"	t
int32_t	include/git2/stdint.h	/^   typedef signed int        int32_t;$/;"	t
int64_t	deps/http-parser/http_parser.h	/^typedef __int64 int64_t;$/;"	t
int64_t	include/git2/stdint.h	/^typedef signed __int64       int64_t;$/;"	t
int8_t	deps/http-parser/http_parser.h	/^typedef __int8 int8_t;$/;"	t
int8_t	include/git2/stdint.h	/^   typedef signed __int8     int8_t;$/;"	t
int8_t	include/git2/stdint.h	/^   typedef signed char       int8_t;$/;"	t
int_fast16_t	include/git2/stdint.h	/^typedef int16_t   int_fast16_t;$/;"	t
int_fast32_t	include/git2/stdint.h	/^typedef int32_t   int_fast32_t;$/;"	t
int_fast64_t	include/git2/stdint.h	/^typedef int64_t   int_fast64_t;$/;"	t
int_fast8_t	include/git2/stdint.h	/^typedef int8_t    int_fast8_t;$/;"	t
int_least16_t	include/git2/stdint.h	/^typedef int16_t   int_least16_t;$/;"	t
int_least32_t	include/git2/stdint.h	/^typedef int32_t   int_least32_t;$/;"	t
int_least64_t	include/git2/stdint.h	/^typedef int64_t   int_least64_t;$/;"	t
int_least8_t	include/git2/stdint.h	/^typedef int8_t    int_least8_t;$/;"	t
int_lookup	tests/core/array.c	/^static int int_lookup(const void *k, const void *a)$/;"	f	file:	signature:(const void *k, const void *a)
interesting	src/graph.c	/^static int interesting(git_pqueue *list, git_commit_list *roots)$/;"	f	file:	signature:(git_pqueue *list, git_commit_list *roots)
interesting	src/merge.c	/^static int interesting(git_pqueue *list)$/;"	f	file:	signature:(git_pqueue *list)
interhunk_lines	include/git2/diff.h	/^	uint32_t    interhunk_lines;  \/**< defaults to 0 *\/$/;"	m	struct:__anon87	access:public
interhunkctxlen	src/xdiff/xdiff.h	/^	long interhunkctxlen;$/;"	m	struct:s_xdemitconf	access:public
internal_function	deps/regex/regex_internal.h	426;"	d
internal_function	deps/regex/regex_internal.h	428;"	d
internal_state	deps/zlib/deflate.h	/^typedef struct internal_state {$/;"	s
internal_state	deps/zlib/zlib.h	/^    struct internal_state {int dummy;};$/;"	s
internal_state	deps/zlib/zlib.h	/^struct internal_state;$/;"	x
internal_state	deps/zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
internal_state::bi_buf	deps/zlib/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state	access:public
internal_state::bi_valid	deps/zlib/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state	access:public
internal_state::bits_sent	deps/zlib/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state	access:public
internal_state::bl_count	deps/zlib/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state	access:public
internal_state::bl_desc	deps/zlib/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
internal_state::bl_tree	deps/zlib/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
internal_state::block_start	deps/zlib/deflate.h	/^    long block_start;$/;"	m	struct:internal_state	access:public
internal_state::compressed_len	deps/zlib/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state	access:public
internal_state::d_buf	deps/zlib/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state	access:public
internal_state::d_desc	deps/zlib/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
internal_state::depth	deps/zlib/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state	access:public
internal_state::dummy	deps/zlib/zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state	access:public
internal_state::dummy	deps/zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:	access:public
internal_state::dyn_dtree	deps/zlib/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
internal_state::dyn_ltree	deps/zlib/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
internal_state::good_match	deps/zlib/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state	access:public
internal_state::gzhead	deps/zlib/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state	access:public
internal_state::gzindex	deps/zlib/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state	access:public
internal_state::hash_bits	deps/zlib/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state	access:public
internal_state::hash_mask	deps/zlib/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state	access:public
internal_state::hash_shift	deps/zlib/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state	access:public
internal_state::hash_size	deps/zlib/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state	access:public
internal_state::head	deps/zlib/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state	access:public
internal_state::heap	deps/zlib/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state	access:public
internal_state::heap_len	deps/zlib/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state	access:public
internal_state::heap_max	deps/zlib/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state	access:public
internal_state::high_water	deps/zlib/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state	access:public
internal_state::ins_h	deps/zlib/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state	access:public
internal_state::insert	deps/zlib/deflate.h	/^    uInt insert;        \/* bytes at end of window left to insert *\/$/;"	m	struct:internal_state	access:public
internal_state::l_buf	deps/zlib/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state	access:public
internal_state::l_desc	deps/zlib/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
internal_state::last_flush	deps/zlib/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state	access:public
internal_state::last_lit	deps/zlib/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state	access:public
internal_state::level	deps/zlib/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state	access:public
internal_state::lit_bufsize	deps/zlib/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state	access:public
internal_state::lookahead	deps/zlib/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state	access:public
internal_state::match_available	deps/zlib/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state	access:public
internal_state::match_length	deps/zlib/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state	access:public
internal_state::match_start	deps/zlib/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state	access:public
internal_state::matches	deps/zlib/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state	access:public
internal_state::max_chain_length	deps/zlib/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state	access:public
internal_state::max_lazy_match	deps/zlib/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state	access:public
internal_state::method	deps/zlib/deflate.h	/^    Byte  method;        \/* can only be DEFLATED *\/$/;"	m	struct:internal_state	access:public
internal_state::nice_match	deps/zlib/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state	access:public
internal_state::opt_len	deps/zlib/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state	access:public
internal_state::pending	deps/zlib/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state	access:public
internal_state::pending_buf	deps/zlib/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state	access:public
internal_state::pending_buf_size	deps/zlib/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state	access:public
internal_state::pending_out	deps/zlib/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state	access:public
internal_state::prev	deps/zlib/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state	access:public
internal_state::prev_length	deps/zlib/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state	access:public
internal_state::prev_match	deps/zlib/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state	access:public
internal_state::static_len	deps/zlib/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state	access:public
internal_state::status	deps/zlib/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state	access:public
internal_state::strategy	deps/zlib/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state	access:public
internal_state::strm	deps/zlib/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state	access:public
internal_state::strstart	deps/zlib/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state	access:public
internal_state::w_bits	deps/zlib/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state	access:public
internal_state::w_mask	deps/zlib/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state	access:public
internal_state::w_size	deps/zlib/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state	access:public
internal_state::window	deps/zlib/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state	access:public
internal_state::window_size	deps/zlib/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state	access:public
internal_state::wrap	deps/zlib/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state	access:public
interrupt_cb	tests/refs/foreachglob.c	/^static int interrupt_cb(const char *reference_name, void *payload)$/;"	f	file:	signature:(const char *reference_name, void *payload)
intf	deps/zlib/zconf.h	/^typedef int   FAR intf;$/;"	t
intmax_t	include/git2/stdint.h	/^typedef int64_t   intmax_t;$/;"	t
intptr_t	include/git2/stdint.h	/^   typedef _W64 signed int   intptr_t;$/;"	t
intptr_t	include/git2/stdint.h	/^   typedef signed __int64    intptr_t;$/;"	t
inuse_cnt	src/mwindow.h	/^	size_t inuse_cnt;$/;"	m	struct:git_mwindow	access:public
invalid_id	tests/index/add.c	/^static const char *invalid_id = "1234567890123456789012345678901234567890";$/;"	v	file:
inveclosure	deps/regex/regex_internal.h	/^  re_node_set inveclosure;$/;"	m	struct:re_dfastate_t	access:public
inveclosures	deps/regex/regex_internal.h	/^  re_node_set *inveclosures;$/;"	m	struct:re_dfa_t	access:public
invokes	tests/stash/foreach.c	/^	int invokes;$/;"	m	struct:callback_data	file:	access:public
io	src/openssl_stream.c	/^	git_stream *io;$/;"	m	struct:__anon276	file:	access:public
io	src/stransport_stream.c	/^	git_stream *io;$/;"	m	struct:__anon298	file:	access:public
io	src/transports/git.c	/^	git_stream *io;$/;"	m	struct:__anon197	file:	access:public
io	src/transports/http.c	/^	git_stream *io;$/;"	m	struct:__anon176	file:	access:public
io	src/transports/ssh.c	/^	git_stream *io;$/;"	m	struct:__anon182	file:	access:public
is_all_caps_and_underscore	src/refs.c	/^static bool is_all_caps_and_underscore(const char *name, size_t len)$/;"	f	file:	signature:(const char *name, size_t len)
is_alternate	src/odb.c	/^	bool is_alternate;$/;"	m	struct:__anon244	file:	access:public
is_bare	src/repository.h	/^	unsigned is_bare:1;$/;"	m	struct:git_repository	access:public
is_blank	deps/regex/regex_internal.h	/^is_blank (int c)$/;"	f	signature:(int c)
is_boundary	src/blame.h	/^	bool is_boundary;$/;"	m	struct:git_blame__entry	access:public
is_chmod_supported	src/repository.c	/^static bool is_chmod_supported(const char *file_path)$/;"	f	file:	signature:(const char *file_path)
is_connected	include/git2/sys/transport.h	/^	int (*is_connected)(git_transport *transport);$/;"	m	struct:git_transport	access:public
is_crud	src/signature.c	/^static bool is_crud(unsigned char c)$/;"	f	file:	signature:(unsigned char c)
is_date	src/date.c	/^static int is_date(int year, int month, int day, struct tm *now_tm, time_t now, struct tm *tm)$/;"	f	file:	signature:(int year, int month, int day, struct tm *now_tm, time_t now, struct tm *tm)
is_dir	src/attr_file.h	/^	int      is_dir;$/;"	m	struct:__anon172	access:public
is_dirty_cb	src/stash.c	/^static int is_dirty_cb(const char *path, unsigned int status, void *payload)$/;"	f	file:	signature:(const char *path, unsigned int status, void *payload)
is_filesystem_case_insensitive	src/repository.c	/^static bool is_filesystem_case_insensitive(const char *gitdir_path)$/;"	f	file:	signature:(const char *gitdir_path)
is_forbidden_custom_header	src/transports/smart.c	/^static bool is_forbidden_custom_header(const char *custom_header)$/;"	f	file:	signature:(const char *custom_header)
is_ignored	src/iterator.c	/^	int is_ignored;$/;"	m	struct:__anon271	file:	access:public
is_index_extended	src/index.c	/^static bool is_index_extended(git_index *index)$/;"	f	file:	signature:(git_index *index)
is_integer	examples/common.c	/^int is_integer(int *out, const char *str, int allow_negative)$/;"	f	signature:(int *out, const char *str, int allow_negative)
is_malformed_http_header	src/transports/smart.c	/^static bool is_malformed_http_header(const char *http_header)$/;"	f	file:	signature:(const char *http_header)
is_merge	src/fetchhead.h	/^	unsigned int is_merge;$/;"	m	struct:git_fetchhead_ref	access:public
is_prefixed	examples/common.c	/^size_t is_prefixed(const char *str, const char *pfx)$/;"	f	signature:(const char *str, const char *pfx)
is_racy_entry	src/index.c	/^static bool is_racy_entry(git_index *index, const git_index_entry *entry)$/;"	f	file:	signature:(git_index *index, const git_index_entry *entry)
is_readonly	src/config.c	/^static int is_readonly(const git_config *cfg)$/;"	f	file:	signature:(const git_config *cfg)
is_rename_source	src/diff_tform.c	/^static bool is_rename_source($/;"	f	file:	signature:( git_diff *diff, const git_diff_find_options *opts, size_t delta_idx, void **cache)
is_rename_target	src/diff_tform.c	/^static bool is_rename_target($/;"	f	file:	signature:( git_diff *diff, const git_diff_find_options *opts, size_t delta_idx, void **cache)
is_utf8	deps/regex/regex_internal.h	/^  unsigned char is_utf8;$/;"	m	struct:re_string_t	access:public
is_utf8	deps/regex/regex_internal.h	/^  unsigned int is_utf8 : 1;$/;"	m	struct:re_dfa_t	access:public
is_valid_ref_char	src/refs.c	/^static int is_valid_ref_char(char ch)$/;"	f	file:	signature:(char ch)
is_valid_tmp_path	tests/clar/sandbox.h	/^is_valid_tmp_path(const char *path)$/;"	f	signature:(const char *path)
is_zlib_compressed_data	src/odb_loose.c	/^static int is_zlib_compressed_data(unsigned char *data)$/;"	f	file:	signature:(unsigned char *data)
isblank	deps/regex/regex_internal.h	70;"	d
isize	src/xdiff/xtypes.h	/^	long isize, nsize;$/;"	m	struct:s_chastore	access:public
it	include/git2/notes.h	/^GIT_EXTERN(void) git_note_iterator_free(git_note_iterator *it);$/;"	v
item	src/commit_list.h	/^	git_commit_list_node *item;$/;"	m	struct:git_commit_list	access:public
item_path_offset	src/sortedcache.h	/^	size_t       item_path_offset;$/;"	m	struct:__anon310	access:public
item_size	src/pool.h	/^	uint32_t item_size;  \/* size of single alloc unit in bytes *\/$/;"	m	struct:__anon306	access:public
item_size	src/pool.h	/^	uint32_t item_size;$/;"	m	struct:__anon307	access:public
items	src/sortedcache.h	/^	git_vector   items;$/;"	m	struct:__anon310	access:public
iter	include/git2/branch.h	/^GIT_EXTERN(void) git_branch_iterator_free(git_branch_iterator *iter);$/;"	v
iter	include/git2/config.h	/^GIT_EXTERN(void) git_config_iterator_free(git_config_iterator *iter);$/;"	v
iter	include/git2/refs.h	/^GIT_EXTERN(void) git_reference_iterator_free(git_reference_iterator *iter);$/;"	v
iter	src/branch.c	/^	git_reference_iterator *iter;$/;"	m	struct:__anon308	file:	access:public
iter	src/config.c	/^	git_config_iterator *iter;$/;"	m	struct:__anon339	file:	access:public
iter	src/config_file.c	/^	git_strmap_iter iter;$/;"	m	struct:git_config_file_iter	file:	access:public
iter_load_loose_paths	src/refdb_fs.c	/^static int iter_load_loose_paths(refdb_fs_backend *backend, refdb_fs_iter *iter)$/;"	f	file:	signature:(refdb_fs_backend *backend, refdb_fs_iter *iter)
iterate_over_patch	tests/diff/diffiter.c	/^static void iterate_over_patch(git_patch *patch, diff_expects *exp)$/;"	f	file:	signature:(git_patch *patch, diff_expects *exp)
iterate_refs	tests/threads/refdb.c	/^static void *iterate_refs(void *arg)$/;"	f	file:	signature:(void *arg)
iterator	include/git2/index.h	/^	git_index_conflict_iterator *iterator);$/;"	v
iterator	include/git2/sys/config.h	/^	int (*iterator)(git_config_iterator **, struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
iterator	include/git2/sys/refdb_backend.h	/^	int (*iterator)($/;"	m	struct:git_refdb_backend	access:public
iterator__do_autoexpand	src/iterator.c	20;"	d	file:
iterator__dont_autoexpand	src/iterator.c	19;"	d	file:
iterator__flag	src/iterator.c	16;"	d	file:
iterator__has_been_accessed	src/iterator.c	22;"	d	file:
iterator__honor_ignores	src/iterator.c	23;"	d	file:
iterator__ignore_case	src/iterator.c	17;"	d	file:
iterator__ignore_dot_git	src/iterator.c	24;"	d	file:
iterator__include_conflicts	src/iterator.c	21;"	d	file:
iterator__include_trees	src/iterator.c	18;"	d	file:
iterator_advance	src/diff_generate.c	/^static int iterator_advance($/;"	f	file:	signature:( const git_index_entry **entry, git_iterator *iterator)
iterator_advance_into	src/diff_generate.c	/^static int iterator_advance_into($/;"	f	file:	signature:( const git_index_entry **entry, git_iterator *iterator)
iterator_advance_over	src/diff_generate.c	/^static int iterator_advance_over($/;"	f	file:	signature:( const git_index_entry **entry, git_iterator_status_t *status, git_iterator *iterator)
iterator_clear	src/iterator.c	/^static void iterator_clear(git_iterator *iter)$/;"	f	file:	signature:(git_iterator *iter)
iterator_current	src/diff_generate.c	/^static int iterator_current($/;"	f	file:	signature:( const git_index_entry **entry, git_iterator *iterator)
iterator_flags	src/refdb_fs.c	/^	git_iterator_flag_t iterator_flags;$/;"	m	struct:refdb_fs_backend	file:	access:public
iterator_for_annotated_commit	src/merge.c	/^static int iterator_for_annotated_commit($/;"	f	file:	signature:( git_iterator **out, git_annotated_commit *commit)
iterator_for_filesystem	src/iterator.c	/^static int iterator_for_filesystem($/;"	f	file:	signature:( git_iterator **out, git_repository *repo, const char *root, git_index *index, git_tree *tree, git_iterator_type_t type, git_iterator_options *options)
iterator_given_or_empty	src/merge.c	/^static git_iterator *iterator_given_or_empty(git_iterator **empty, git_iterator *given)$/;"	f	file:	signature:(git_iterator **empty, git_iterator *given)
iterator_init_common	src/iterator.c	/^static int iterator_init_common($/;"	f	file:	signature:( git_iterator *iter, git_repository *repo, git_index *index, git_iterator_options *given_opts)
iterator_pathlist_init	src/iterator.c	/^static int iterator_pathlist_init(git_iterator *iter, git_strarray *pathlist)$/;"	f	file:	signature:(git_iterator *iter, git_strarray *pathlist)
iterator_pathlist_next_is	src/iterator.c	/^static bool iterator_pathlist_next_is(git_iterator *iter, const char *path)$/;"	f	file:	signature:(git_iterator *iter, const char *path)
iterator_pathlist_search	src/iterator.c	/^static iterator_pathlist_search_t iterator_pathlist_search($/;"	f	file:	signature:( git_iterator *iter, const char *path, size_t path_len)
iterator_pathlist_search_t	src/iterator.c	/^} iterator_pathlist_search_t;$/;"	t	typeref:enum:__anon265	file:
iterator_rand	src/revwalk.h	/^	git_commit_list *iterator_rand;$/;"	m	struct:git_revwalk	access:public
iterator_range_free	src/iterator.c	/^static void iterator_range_free(git_iterator *iter)$/;"	f	file:	signature:(git_iterator *iter)
iterator_range_init	src/iterator.c	/^static int iterator_range_init($/;"	f	file:	signature:( git_iterator *iter, const char *start, const char *end)
iterator_reset_range	src/iterator.c	/^static int iterator_reset_range($/;"	f	file:	signature:( git_iterator *iter, const char *start, const char *end)
iterator_reverse	src/revwalk.h	/^	git_commit_list *iterator_reverse;$/;"	m	struct:git_revwalk	access:public
iterator_set_ignore_case	src/iterator.c	/^static void iterator_set_ignore_case(git_iterator *iter, bool ignore_case)$/;"	f	file:	signature:(git_iterator *iter, bool ignore_case)
iterator_time	src/revwalk.h	/^	git_pqueue iterator_time;$/;"	m	struct:git_revwalk	access:public
iterator_topo	src/revwalk.h	/^	git_commit_list *iterator_topo;$/;"	m	struct:git_revwalk	access:public
junk_obj	tests/object/raw/data.h	/^static git_rawobj junk_obj = {$/;"	v
just_return_origin	tests/clone/nonetwork.c	/^static int just_return_origin(git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)$/;"	f	file:	signature:(git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
just_return_repo	tests/clone/nonetwork.c	/^static int just_return_repo(git_repository **out, const char *path, int bare, void *payload)$/;"	f	file:	signature:(git_repository **out, const char *path, int bare, void *payload)
kcalloc	src/idxmap.h	15;"	d
kcalloc	src/khash.h	172;"	d
kcalloc	src/offmap.h	14;"	d
kcalloc	src/oidmap.h	14;"	d
kcalloc	src/strmap.h	13;"	d
key	src/attr_file.h	/^	int key;$/;"	m	struct:__anon173	access:public
key	src/sortedcache.c	/^	const char *key;$/;"	m	struct:sortedcache_magic_key	file:	access:public
key_shift	src/xdiff/xhistogram.c	/^		     key_shift,$/;"	m	struct:histindex	file:	access:public
kfree	src/idxmap.h	18;"	d
kfree	src/khash.h	184;"	d
kfree	src/offmap.h	17;"	d
kfree	src/oidmap.h	17;"	d
kfree	src/strmap.h	16;"	d
kh_begin	src/khash.h	523;"	d
kh_clear	src/khash.h	448;"	d
kh_cstr_t	src/khash.h	/^typedef const char *kh_cstr_t;$/;"	t
kh_del	src/khash.h	486;"	d
kh_destroy	src/khash.h	441;"	d
kh_end	src/khash.h	530;"	d
kh_exist	src/khash.h	494;"	d
kh_foreach	src/khash.h	553;"	d
kh_foreach_value	src/khash.h	567;"	d
kh_get	src/khash.h	478;"	d
kh_init	src/khash.h	434;"	d
kh_inline	src/khash.h	148;"	d
kh_inline	src/khash.h	150;"	d
kh_int64_hash_equal	src/khash.h	384;"	d
kh_int64_hash_func	src/khash.h	380;"	d
kh_int_hash_equal	src/khash.h	374;"	d
kh_int_hash_func	src/khash.h	370;"	d
kh_int_hash_func2	src/khash.h	417;"	d
kh_key	src/khash.h	502;"	d
kh_n_buckets	src/khash.h	544;"	d
kh_put	src/khash.h	469;"	d
kh_resize	src/khash.h	456;"	d
kh_size	src/khash.h	537;"	d
kh_str_hash_equal	src/khash.h	405;"	d
kh_str_hash_func	src/khash.h	401;"	d
kh_val	src/khash.h	511;"	d
kh_value	src/khash.h	516;"	d
khash_t	src/khash.h	427;"	d
khint32_t	src/khash.h	/^typedef unsigned int khint32_t;$/;"	t
khint32_t	src/khash.h	/^typedef unsigned long khint32_t;$/;"	t
khint64_t	src/khash.h	/^typedef unsigned long khint64_t;$/;"	t
khint64_t	src/khash.h	/^typedef unsigned long long khint64_t;$/;"	t
khint_t	src/khash.h	/^typedef khint32_t khint_t;$/;"	t
khiter_t	src/khash.h	/^typedef khint_t khiter_t;$/;"	t
klass	include/git2/errors.h	/^	int klass;$/;"	m	struct:__anon43	access:public
kmalloc	src/idxmap.h	14;"	d
kmalloc	src/khash.h	175;"	d
kmalloc	src/offmap.h	13;"	d
kmalloc	src/oidmap.h	13;"	d
kmalloc	src/strmap.h	12;"	d
krealloc	src/idxmap.h	16;"	d
krealloc	src/khash.h	178;"	d
krealloc	src/offmap.h	15;"	d
krealloc	src/oidmap.h	15;"	d
krealloc	src/strmap.h	14;"	d
kreallocarray	src/idxmap.h	17;"	d
kreallocarray	src/khash.h	181;"	d
kreallocarray	src/offmap.h	16;"	d
kreallocarray	src/oidmap.h	16;"	d
kreallocarray	src/strmap.h	15;"	d
kroundup32	src/khash.h	168;"	d
l_buf	deps/zlib/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state	access:public
l_desc	deps/zlib/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
last	deps/zlib/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state	access:public
last	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:	access:public
last	tests/clar_libgit2_timer.h	/^	double last;$/;"	m	struct:cl_perf_timer	access:public
last_bytes	src/transports/smart_protocol.c	/^	size_t last_bytes;$/;"	m	struct:push_packbuilder_payload	file:	access:public
last_cb	src/transports/http.c	/^	enum last_cb last_cb;$/;"	m	struct:__anon176	typeref:enum:__anon176::last_cb	file:	access:public
last_cb	src/transports/http.c	/^enum last_cb {$/;"	g	file:
last_commit	src/rebase.c	/^	git_commit *last_commit;$/;"	m	struct:git_rebase	file:	access:public
last_error	src/filebuf.h	/^	int last_error;$/;"	m	struct:git_filebuf	access:public
last_error	src/global.h	/^	git_error *last_error;$/;"	m	struct:__anon225	access:public
last_error	tests/clar.c	/^	struct clar_error *last_error;$/;"	m	struct:__anon364	typeref:struct:__anon364::clar_error	file:	access:public
last_fired_bytes	src/transports/smart_protocol.c	/^	size_t last_fired_bytes;$/;"	m	struct:network_packetsize_payload	file:	access:public
last_flush	deps/zlib/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state	access:public
last_found	src/odb_pack.c	/^	struct git_pack_file *last_found;$/;"	m	struct:pack_backend	typeref:struct:pack_backend::git_pack_file	file:	access:public
last_freshen	src/pack.h	/^	time_t last_freshen; \/* last time the packfile was freshened *\/$/;"	m	struct:git_pack_file	access:public
last_lit	deps/zlib/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state	access:public
last_node	deps/regex/regex_internal.h	/^  int last_node;$/;"	m	struct:__anon12	access:public
last_node	deps/regex/regex_internal.h	/^  int last_node;$/;"	m	struct:__anon13	access:public
last_progress_report_time	src/pack-objects.h	/^	double last_progress_report_time; \/* the time progress was last reported *\/$/;"	m	struct:git_packbuilder	access:public
last_progress_report_time	src/transports/smart_protocol.c	/^	double last_progress_report_time;$/;"	m	struct:push_packbuilder_payload	file:	access:public
last_str_idx	deps/regex/regex_internal.h	/^  int last_str_idx;$/;"	m	struct:__anon13	access:public
last_usage	src/pack.h	/^	size_t last_usage; \/* enough? *\/$/;"	m	struct:git_pack_cache_entry	access:public
last_used	src/mwindow.h	/^	size_t last_used;$/;"	m	struct:git_mwindow	access:public
lasts	deps/regex/regex_internal.h	/^  re_sub_match_last_t **lasts;$/;"	m	struct:__anon11	access:public
left	deps/regex/regex_internal.h	/^  struct bin_tree_t *left;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
len	deps/http-parser/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon1	access:public
len	deps/regex/regex_internal.h	/^  int len;$/;"	m	struct:re_string_t	access:public
len	deps/zlib/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon30	access:public
len	include/git2/merge.h	/^	size_t len;$/;"	m	struct:__anon131	access:public
len	include/git2/transport.h	/^	size_t len;$/;"	m	struct:__anon79	access:public
len	src/hash.h	/^	size_t len;$/;"	m	struct:__anon319	access:public
len	src/map.h	/^	size_t len; \/* data length			*\/$/;"	m	struct:__anon237	access:public
len	src/netops.h	/^	size_t len;$/;"	m	struct:gitno_buffer	access:public
len	src/odb.h	/^	size_t len;			\/**< Total number of bytes in data. *\/$/;"	m	struct:__anon162	access:public
len	src/odb_mempack.c	/^	size_t len;$/;"	m	struct:memobject	file:	access:public
len	src/transports/smart.h	/^	int len;$/;"	m	struct:__anon188	access:public
len	src/transports/smart.h	/^	int len;$/;"	m	struct:__anon189	access:public
len	src/win32/findfile.c	/^	DWORD len;$/;"	m	struct:__anon289	file:	access:public
len	src/xdiff/xemit.c	/^	long len;$/;"	m	struct:func_line	file:	access:public
len	tests/diff/rename.c	/^	size_t len;$/;"	m	struct:rename_expected	file:	access:public
len	tests/merge/workdir/setup.c	/^	unsigned int len;$/;"	m	struct:annotated_commit_cb_data	file:	access:public
len1	src/xdiff/xprepare.c	/^	long len1, len2;$/;"	m	struct:s_xdlclass	file:	access:public
len2	src/xdiff/xprepare.c	/^	long len1, len2;$/;"	m	struct:s_xdlclass	file:	access:public
lenbits	deps/zlib/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state	access:public
lencode	deps/zlib/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state	access:public
lenfix	deps/zlib/inffixed.h	/^    static const code lenfix[512] = {$/;"	v
length	deps/zlib/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state	access:public
length	include/git2/odb.h	/^	unsigned short length;$/;"	m	struct:git_odb_expand_id	access:public
length	script/user_model.c	/^	size_t length;$/;"	m	struct:git_vector	file:	access:public
length	src/attr_file.h	/^	size_t length;$/;"	m	struct:__anon166	access:public
length	src/bitvec.h	/^	size_t length;$/;"	m	struct:__anon205	access:public
length	src/date.c	/^	int length;$/;"	m	struct:typelen	file:	access:public
length	src/tsort.c	/^	ssize_t length;$/;"	m	struct:tsort_run	file:	access:public
length	src/vector.h	/^	size_t length;$/;"	m	struct:git_vector	access:public
lens	deps/zlib/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state	access:public
level	deps/zlib/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state	access:public
level	include/git2/config.h	/^	git_config_level_t level; \/**< Which config file this was found in *\/$/;"	m	struct:git_config_entry	access:public
level	src/config.c	/^	git_config_level_t level;$/;"	m	struct:__anon336	file:	access:public
level	src/config_file.c	/^	git_config_level_t level;$/;"	m	struct:__anon154	file:	access:public
level	src/config_file.c	/^	git_config_level_t level;$/;"	m	struct:parse_data	file:	access:public
level	src/trace.h	/^	git_trace_level_t level;$/;"	m	struct:git_trace_data	access:public
level	src/xdiff/xdiff.h	/^	int level;$/;"	m	struct:s_xmparam	access:public
lf	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
lfc_data	src/submodule.c	/^} lfc_data;$/;"	t	typeref:struct:__anon305	file:
libc_freeres_fn	deps/regex/regcomp.c	/^libc_freeres_fn (free_mem)$/;"	f
limit	examples/log.c	/^	int skip, limit;$/;"	m	struct:log_options	file:	access:public
limit_list	src/revwalk.c	/^static int limit_list(git_commit_list **out, git_revwalk *walk, git_commit_list *commits)$/;"	f	file:	signature:(git_commit_list **out, git_revwalk *walk, git_commit_list *commits)
limited_states	deps/regex/regex_internal.h	/^  re_dfastate_t **limited_states;$/;"	m	struct:__anon13	access:public
limits	deps/regex/regex_internal.h	/^  re_node_set limits;$/;"	m	struct:__anon13	access:public
line	src/diff_driver.h	/^	git_buf line;$/;"	m	struct:__anon201	access:public
line	src/diff_print.c	/^	git_diff_line line;$/;"	m	struct:__anon236	file:	access:public
line	src/patch_parse.h	/^	const char *line;$/;"	m	struct:__anon327	access:public
line	src/xdiff/xprepare.c	/^	char const *line;$/;"	m	struct:s_xdlclass	file:	access:public
line	tests/clar_libgit2.h	/^	int line;$/;"	m	struct:__anon360	access:public
line	tests/commit/parse.c	/^	const char *line;$/;"	m	struct:__anon377	file:	access:public
line	tests/status/status_helpers.h	/^	int line;$/;"	m	struct:__anon365	access:public
line1	src/xdiff/xpatience.c	/^		unsigned long line1, line2;$/;"	m	struct:hashmap::entry	file:	access:public
line2	src/xdiff/xpatience.c	/^		unsigned long line1, line2;$/;"	m	struct:hashmap::entry	file:	access:public
line_adds	tests/diff/diff_helpers.h	/^	int line_adds;$/;"	m	struct:__anon369	access:public
line_cb	tests/diff/binary.c	/^static int line_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
line_contains_alnum	src/xdiff/xmerge.c	/^static int line_contains_alnum(const char *ptr, long size)$/;"	f	file:	signature:(const char *ptr, long size)
line_count	src/patch.h	/^	size_t line_count;$/;"	m	struct:git_patch_hunk	access:public
line_ctxt	tests/diff/diff_helpers.h	/^	int line_ctxt;$/;"	m	struct:__anon369	access:public
line_dels	tests/diff/diff_helpers.h	/^	int line_dels;$/;"	m	struct:__anon369	access:public
line_ending	src/crlf.c	/^static const char *line_ending(struct crlf_attrs *ca)$/;"	f	file:	signature:(struct crlf_attrs *ca)
line_index	src/blame.h	/^	git_array_t(size_t) line_index;$/;"	m	struct:git_blame	access:public
line_len	src/patch_parse.h	/^	size_t line_len;$/;"	m	struct:__anon327	access:public
line_length_without_trailing_spaces	src/message.c	/^static size_t line_length_without_trailing_spaces(const char *line, size_t len)$/;"	f	file:	signature:(const char *line, size_t len)
line_map	src/xdiff/xhistogram.c	/^	  **line_map; \/* map of line to record chain *\/$/;"	m	struct:histindex	typeref:struct:histindex::record	file:	access:public
line_map_size	src/xdiff/xhistogram.c	/^		     line_map_size;$/;"	m	struct:histindex	file:	access:public
line_num	src/patch_parse.h	/^	size_t line_num;$/;"	m	struct:__anon327	access:public
line_number	src/config_file.c	/^	int line_number;$/;"	m	struct:reader	file:	access:public
line_number	tests/clar.c	/^	int line_number;$/;"	m	struct:clar_error	file:	access:public
line_start	src/patch.h	/^	size_t line_start;$/;"	m	struct:git_patch_hunk	access:public
lines	src/apply.c	/^	git_vector lines;$/;"	m	struct:__anon226	file:	access:public
lines	src/hashsig.c	/^	size_t lines;$/;"	m	struct:git_hashsig	file:	access:public
lines	src/patch.h	/^	git_array_t(git_diff_line) lines;$/;"	m	struct:git_patch	access:public
lines	tests/diff/diff_helpers.h	/^	int lines;$/;"	m	struct:__anon369	access:public
lines_contain_alnum	src/xdiff/xmerge.c	/^static int lines_contain_alnum(xdfenv_t *xe, int i, int chg)$/;"	f	file:	signature:(xdfenv_t *xe, int i, int chg)
lines_in_hunk	include/git2/blame.h	/^	size_t lines_in_hunk;$/;"	m	struct:git_blame_hunk	access:public
link_nfa_nodes	deps/regex/regcomp.c	/^link_nfa_nodes (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
list	src/pack-objects.c	/^	git_pobject **list;$/;"	m	struct:thread_params	file:	access:public
list_auth_methods	src/transports/ssh.c	/^static int list_auth_methods(int *out, LIBSSH2_SESSION *session, const char *username)$/;"	f	file:	signature:(int *out, LIBSSH2_SESSION *session, const char *username)
list_expectations	tests/notes/notes.c	/^list_expectations[] = {$/;"	v	typeref:struct:__anon372	file:
list_size	src/pack-objects.c	/^	size_t list_size;$/;"	m	struct:thread_params	file:	access:public
lit_bufsize	deps/zlib/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state	access:public
ll_find_deltas	src/pack-objects.c	/^static int ll_find_deltas(git_packbuilder *pb, git_pobject **list,$/;"	f	file:	signature:(git_packbuilder *pb, git_pobject **list, size_t list_size, size_t window, size_t depth)
ll_find_deltas	src/pack-objects.c	1312;"	d	file:
lm_init	deps/zlib/deflate.c	/^local void lm_init (s)$/;"	f
lno	src/blame.h	/^	size_t lno;$/;"	m	struct:git_blame__entry	access:public
load	tests/generate.py	/^    def load(self, force = False):$/;"	m	class:TestSuite	access:public
load_alternates	src/odb.c	/^static int load_alternates(git_odb *odb, const char *objects_dir, int alternate_depth)$/;"	f	file:	signature:(git_odb *odb, const char *objects_dir, int alternate_depth)
load_blob	src/blame.c	/^static int load_blob(git_blame *blame)$/;"	f	file:	signature:(git_blame *blame)
load_cache	tests/generate.py	/^    def load_cache(self):$/;"	m	class:TestSuite	access:public
load_config	src/repository.c	/^static int load_config($/;"	f	file:	signature:( git_config **out, git_repository *repo, const char *global_config_path, const char *xdg_config_path, const char *system_config_path, const char *programdata_path)
load_config_data	src/repository.c	/^static int load_config_data(git_repository *repo, const git_config *config)$/;"	f	file:	signature:(git_repository *repo, const git_config *config)
load_workdir	src/repository.c	/^static int load_workdir(git_repository *repo, git_config *config, git_buf *parent_path)$/;"	f	file:	signature:(git_repository *repo, git_config *config, git_buf *parent_path)
local	deps/zlib/adler32.c	10;"	d	file:
local	deps/zlib/crc32.c	33;"	d	file:
local	deps/zlib/zutil.h	37;"	d
local	include/git2/clone.h	/^	git_clone_local_t local;$/;"	m	struct:git_clone_options	access:public
local	include/git2/net.h	/^	int local; \/* available locally *\/$/;"	m	struct:git_remote_head	access:public
local_cancel	src/transports/local.c	/^static void local_cancel(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
local_cleanup	tests/clar.c	/^	void (*local_cleanup)(void *);$/;"	m	struct:__anon364	file:	access:public
local_cleanup_payload	tests/clar.c	/^	void *local_cleanup_payload;$/;"	m	struct:__anon364	file:	access:public
local_close	src/transports/local.c	/^static int local_close(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
local_connect	src/transports/local.c	/^static int local_connect($/;"	f	file:	signature:( git_transport *transport, const char *url, git_cred_acquire_cb cred_acquire_cb, void *cred_acquire_payload, const git_proxy_options *proxy, int direction, int flags)
local_counting	src/transports/local.c	/^static int local_counting(int stage, unsigned int current, unsigned int total, void *payload)$/;"	f	file:	signature:(int stage, unsigned int current, unsigned int total, void *payload)
local_download_pack	src/transports/local.c	/^static int local_download_pack($/;"	f	file:	signature:( git_transport *transport, git_repository *repo, git_transfer_progress *stats, git_transfer_progress_cb progress_cb, void *progress_payload)
local_file_url_prefixlen	src/path.c	/^static int local_file_url_prefixlen(const char *file_url)$/;"	f	file:	signature:(const char *file_url)
local_free	src/transports/local.c	/^static void local_free(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
local_is_connected	src/transports/local.c	/^static int local_is_connected(git_transport *transport)$/;"	f	file:	signature:(git_transport *transport)
local_ls	src/transports/local.c	/^static int local_ls(const git_remote_head ***out, size_t *size, git_transport *transport)$/;"	f	file:	signature:(const git_remote_head ***out, size_t *size, git_transport *transport)
local_negotiate_fetch	src/transports/local.c	/^static int local_negotiate_fetch($/;"	f	file:	signature:( git_transport *transport, git_repository *repo, const git_remote_head * const *refs, size_t count)
local_objects	include/git2/types.h	/^	unsigned int local_objects;$/;"	m	struct:git_transfer_progress	access:public
local_push	src/transports/local.c	/^static int local_push($/;"	f	file:	signature:( git_transport *transport, git_push *push, const git_remote_callbacks *cbs)
local_push_update_remote_ref	src/transports/local.c	/^static int local_push_update_remote_ref($/;"	f	file:	signature:( git_repository *remote_repo, const char *lref, const char *rref, git_oid *loid, git_oid *roid)
local_read_flags	src/transports/local.c	/^static int local_read_flags(git_transport *transport, int *flags)$/;"	f	file:	signature:(git_transport *transport, int *flags)
local_set_callbacks	src/transports/local.c	/^static int local_set_callbacks($/;"	f	file:	signature:( git_transport *transport, git_transport_message_cb progress_cb, git_transport_message_cb error_cb, git_transport_certificate_check_cb certificate_check_cb, void *message_cb_payload)
local_transport_definition	src/transport.c	/^static transport_definition local_transport_definition = { "file:\/\/", git_transport_local, NULL };$/;"	v	file:
locate_object	src/odb_loose.c	/^static int locate_object($/;"	f	file:	signature:( git_buf *object_location, loose_backend *backend, const git_oid *oid)
locate_object_short_oid	src/odb_loose.c	/^static int locate_object_short_oid($/;"	f	file:	signature:( git_buf *object_location, git_oid *res_oid, loose_backend *backend, const git_oid *short_oid, size_t len)
location	src/transports/http.c	/^	char *location;$/;"	m	struct:__anon176	file:	access:public
lock	include/git2/sys/config.h	/^	int (*lock)(struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
lock	include/git2/sys/refdb_backend.h	/^	int (*lock)(void **payload_out, git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend	access:public
lock	src/attr_file.h	/^	git_mutex lock;$/;"	m	struct:__anon170	access:public
lock	src/attrcache.h	/^	git_mutex lock;$/;"	m	struct:__anon309	access:public
lock	src/cache.h	/^	git_rwlock  lock;$/;"	m	struct:__anon230	access:public
lock	src/filter.c	/^	git_rwlock lock;$/;"	m	struct:git_filter_registry	file:	access:public
lock	src/merge_driver.c	/^	git_rwlock lock;$/;"	m	struct:merge_driver_registry	file:	access:public
lock	src/pack.h	/^	git_mutex lock; \/* protect updates to mwf and index_map *\/$/;"	m	struct:git_pack_file	access:public
lock	src/pack.h	/^	git_mutex lock;$/;"	m	struct:__anon295	access:public
lock	src/sortedcache.h	/^	git_rwlock   lock;$/;"	m	struct:__anon310	access:public
lock_file	src/filebuf.c	/^static int lock_file(git_filebuf *file, int flags, mode_t mode)$/;"	f	file:	signature:(git_filebuf *file, int flags, mode_t mode)
lock_reflog	src/refdb_fs.c	/^static int lock_reflog(git_filebuf *file, refdb_fs_backend *backend, const char *refname)$/;"	f	file:	signature:(git_filebuf *file, refdb_fs_backend *backend, const char *refname)
locked	src/config_file.c	/^	bool locked;$/;"	m	struct:__anon154	file:	access:public
locked_buf	src/config_file.c	/^	git_filebuf locked_buf;$/;"	m	struct:__anon154	file:	access:public
locked_content	src/config_file.c	/^	git_buf locked_content;$/;"	m	struct:__anon154	file:	access:public
locks	src/transaction.c	/^	git_strmap *locks;$/;"	m	struct:git_transaction	file:	access:public
log_message_matches	examples/log.c	/^static int log_message_matches(const git_commit *commit, const char *filter) {$/;"	f	file:	signature:(const git_commit *commit, const char *filter)
log_options	examples/log.c	/^struct log_options {$/;"	s	file:
log_options::after	examples/log.c	/^	git_time_t after;$/;"	m	struct:log_options	file:	access:public
log_options::author	examples/log.c	/^	const char *author;$/;"	m	struct:log_options	file:	access:public
log_options::before	examples/log.c	/^	git_time_t before;$/;"	m	struct:log_options	file:	access:public
log_options::committer	examples/log.c	/^	const char *committer;$/;"	m	struct:log_options	file:	access:public
log_options::grep	examples/log.c	/^	const char *grep;$/;"	m	struct:log_options	file:	access:public
log_options::limit	examples/log.c	/^	int skip, limit;$/;"	m	struct:log_options	file:	access:public
log_options::max_parents	examples/log.c	/^	int min_parents, max_parents;$/;"	m	struct:log_options	file:	access:public
log_options::min_parents	examples/log.c	/^	int min_parents, max_parents;$/;"	m	struct:log_options	file:	access:public
log_options::show_diff	examples/log.c	/^	int show_diff;$/;"	m	struct:log_options	file:	access:public
log_options::skip	examples/log.c	/^	int skip, limit;$/;"	m	struct:log_options	file:	access:public
log_state	examples/log.c	/^struct log_state {$/;"	s	file:
log_state::hide	examples/log.c	/^	int hide;$/;"	m	struct:log_state	file:	access:public
log_state::repo	examples/log.c	/^	git_repository *repo;$/;"	m	struct:log_state	file:	access:public
log_state::repodir	examples/log.c	/^	const char *repodir;$/;"	m	struct:log_state	file:	access:public
log_state::revisions	examples/log.c	/^	int revisions;$/;"	m	struct:log_state	file:	access:public
log_state::sorting	examples/log.c	/^	int sorting;$/;"	m	struct:log_state	file:	access:public
log_state::walker	examples/log.c	/^	git_revwalk *walker;$/;"	m	struct:log_state	file:	access:public
loid	include/git2/net.h	/^	git_oid loid;$/;"	m	struct:git_remote_head	access:public
loid	src/push.h	/^	git_oid loid;$/;"	m	struct:push_spec	access:public
long_entry_size	src/index.c	62;"	d	file:
longest_match	deps/zlib/deflate.c	/^local uInt longest_match(s, cur_match)$/;"	f
longname	tests/status/status_data.h	/^static const char *longname = "\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97";$/;"	v
lookahead	deps/zlib/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state	access:public
looks_like_network_computer_name	src/path.c	/^static bool looks_like_network_computer_name(const char *path, int pos)$/;"	f	file:	signature:(const char *path, int pos)
lookup	include/git2/sys/refdb_backend.h	/^	int (*lookup)($/;"	m	struct:git_refdb_backend	access:public
lookup_default_remote	src/submodule.c	/^static int lookup_default_remote(git_remote **remote, git_repository *repo)$/;"	f	file:	signature:(git_remote **remote, git_repository *repo)
lookup_head_remote	src/submodule.c	/^static int lookup_head_remote(git_remote **remote, git_repository *repo)$/;"	f	file:	signature:(git_remote **remote, git_repository *repo)
lookup_head_remote_key	src/submodule.c	/^static int lookup_head_remote_key(git_buf *remote_name, git_repository *repo)$/;"	f	file:	signature:(git_buf *remote_name, git_repository *repo)
lookup_id	tests/odb/mixed.c	/^	char *lookup_id;$/;"	m	struct:expand_id_test_data	file:	access:public
lookup_index_alloc	src/delta.c	/^static int lookup_index_alloc($/;"	f	file:	signature:( void **out, unsigned long *out_len, size_t entries, size_t hash_count)
lookup_remote_prune_config	src/remote.c	/^static int lookup_remote_prune_config(git_remote *remote, git_config *config, const char *name)$/;"	f	file:	signature:(git_remote *remote, git_config *config, const char *name)
lookup_walk_object	src/pack-objects.c	/^int lookup_walk_object(git_walk_object **out, git_packbuilder *pb, const git_oid *id)$/;"	f	signature:(git_walk_object **out, git_packbuilder *pb, const git_oid *id)
loose	src/refdb_fs.c	/^	git_vector loose;$/;"	m	struct:__anon204	file:	access:public
loose_backend	src/odb_loose.c	/^typedef struct loose_backend {$/;"	s	file:
loose_backend	src/odb_loose.c	/^} loose_backend;$/;"	t	typeref:struct:loose_backend	file:
loose_backend::fsync_object_files	src/odb_loose.c	/^	int fsync_object_files; \/** loose object file fsync flag. *\/$/;"	m	struct:loose_backend	file:	access:public
loose_backend::object_dir_mode	src/odb_loose.c	/^	mode_t object_dir_mode;$/;"	m	struct:loose_backend	file:	access:public
loose_backend::object_file_mode	src/odb_loose.c	/^	mode_t object_file_mode;$/;"	m	struct:loose_backend	file:	access:public
loose_backend::object_zlib_level	src/odb_loose.c	/^	int object_zlib_level; \/** loose object zlib compression level. *\/$/;"	m	struct:loose_backend	file:	access:public
loose_backend::objects_dir	src/odb_loose.c	/^	char objects_dir[GIT_FLEX_ARRAY];$/;"	m	struct:loose_backend	file:	access:public
loose_backend::objects_dirlen	src/odb_loose.c	/^	size_t objects_dirlen;$/;"	m	struct:loose_backend	file:	access:public
loose_backend::parent	src/odb_loose.c	/^	git_odb_backend parent;$/;"	m	struct:loose_backend	file:	access:public
loose_backend__exists	src/odb_loose.c	/^static int loose_backend__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(git_odb_backend *backend, const git_oid *oid)
loose_backend__exists_prefix	src/odb_loose.c	/^static int loose_backend__exists_prefix($/;"	f	file:	signature:( git_oid *out, git_odb_backend *backend, const git_oid *short_id, size_t len)
loose_backend__foreach	src/odb_loose.c	/^static int loose_backend__foreach(git_odb_backend *_backend, git_odb_foreach_cb cb, void *data)$/;"	f	file:	signature:(git_odb_backend *_backend, git_odb_foreach_cb cb, void *data)
loose_backend__free	src/odb_loose.c	/^static void loose_backend__free(git_odb_backend *_backend)$/;"	f	file:	signature:(git_odb_backend *_backend)
loose_backend__freshen	src/odb_loose.c	/^static int loose_backend__freshen($/;"	f	file:	signature:( git_odb_backend *_backend, const git_oid *oid)
loose_backend__read	src/odb_loose.c	/^static int loose_backend__read(void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
loose_backend__read_header	src/odb_loose.c	/^static int loose_backend__read_header(size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
loose_backend__read_prefix	src/odb_loose.c	/^static int loose_backend__read_prefix($/;"	f	file:	signature:( git_oid *out_oid, void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *short_oid, size_t len)
loose_backend__stream	src/odb_loose.c	/^static int loose_backend__stream(git_odb_stream **stream_out, git_odb_backend *_backend, git_off_t length, git_otype type)$/;"	f	file:	signature:(git_odb_stream **stream_out, git_odb_backend *_backend, git_off_t length, git_otype type)
loose_backend__stream_free	src/odb_loose.c	/^static void loose_backend__stream_free(git_odb_stream *_stream)$/;"	f	file:	signature:(git_odb_stream *_stream)
loose_backend__stream_fwrite	src/odb_loose.c	/^static int loose_backend__stream_fwrite(git_odb_stream *_stream, const git_oid *oid)$/;"	f	file:	signature:(git_odb_stream *_stream, const git_oid *oid)
loose_backend__stream_write	src/odb_loose.c	/^static int loose_backend__stream_write(git_odb_stream *_stream, const char *data, size_t len)$/;"	f	file:	signature:(git_odb_stream *_stream, const char *data, size_t len)
loose_backend__write	src/odb_loose.c	/^static int loose_backend__write(git_odb_backend *_backend, const git_oid *oid, const void *data, size_t len, git_otype type)$/;"	f	file:	signature:(git_odb_backend *_backend, const git_oid *oid, const void *data, size_t len, git_otype type)
loose_commit	src/refdb_fs.c	/^static int loose_commit(git_filebuf *file, const git_reference *ref)$/;"	f	file:	signature:(git_filebuf *file, const git_reference *ref)
loose_locate_object_state	src/odb_loose.c	/^} loose_locate_object_state;$/;"	t	typeref:struct:__anon345	file:
loose_lock	src/refdb_fs.c	/^static int loose_lock(git_filebuf *file, refdb_fs_backend *backend, const char *name)$/;"	f	file:	signature:(git_filebuf *file, refdb_fs_backend *backend, const char *name)
loose_lookup	src/refdb_fs.c	/^static int loose_lookup($/;"	f	file:	signature:( git_reference **out, refdb_fs_backend *backend, const char *ref_name)
loose_lookup_to_packfile	src/refdb_fs.c	/^static int loose_lookup_to_packfile(refdb_fs_backend *backend, const char *name)$/;"	f	file:	signature:(refdb_fs_backend *backend, const char *name)
loose_objects	tests/odb/pack_data.h	/^static const char *loose_objects[] = {$/;"	v
loose_parse_oid	src/refdb_fs.c	/^static int loose_parse_oid($/;"	f	file:	signature:( git_oid *oid, const char *filename, git_buf *file_content)
loose_parse_symbolic	src/refdb_fs.c	/^static const char *loose_parse_symbolic(git_buf *file_content)$/;"	f	file:	signature:(git_buf *file_content)
loose_pos	src/refdb_fs.c	/^	size_t loose_pos;$/;"	m	struct:__anon204	file:	access:public
loose_readbuffer	src/refdb_fs.c	/^static int loose_readbuffer(git_buf *buf, const char *base, const char *path)$/;"	f	file:	signature:(git_buf *buf, const char *base, const char *path)
loose_tag_ref_name	tests/refs/pack.c	/^static const char *loose_tag_ref_name = "refs\/tags\/e90810b";$/;"	v	file:
loose_tag_ref_name	tests/refs/read.c	/^static const char *loose_tag_ref_name = "refs\/tags\/e90810b";$/;"	v	file:
loose_tag_ref_name	tests/refs/rename.c	/^static const char *loose_tag_ref_name = "refs\/tags\/e90810b";$/;"	v	file:
loose_writestream	src/odb_loose.c	/^} loose_writestream;$/;"	t	typeref:struct:__anon344	file:
lower_subexp	deps/regex/regcomp.c	/^lower_subexp (reg_errcode_t *err, regex_t *preg, bin_tree_t *node)$/;"	f	file:	signature:(reg_errcode_t *err, regex_t *preg, bin_tree_t *node)
lower_subexps	deps/regex/regcomp.c	/^lower_subexps (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
lpVtbl	deps/winhttp/urlmon.h	/^	CONST_VTBL struct IInternetSecurityManagerVtbl *lpVtbl;$/;"	m	struct:IInternetSecurityManager	typeref:struct:IInternetSecurityManager::IInternetSecurityManagerVtbl	access:public
lpszAutoConfigUrl	deps/winhttp/winhttp.h	/^    LPCWSTR lpszAutoConfigUrl;$/;"	m	struct:__anon24	access:public
lpszAutoConfigUrl	deps/winhttp/winhttp.h	/^    LPWSTR lpszAutoConfigUrl;$/;"	m	struct:__anon23	access:public
lpszEncryptionAlgName	deps/winhttp/winhttp.h	/^    LPWSTR lpszEncryptionAlgName;$/;"	m	struct:__anon21	access:public
lpszExtraInfo	deps/winhttp/winhttp.h	/^    LPWSTR  lpszExtraInfo;$/;"	m	struct:__anon19	access:public
lpszHostName	deps/winhttp/winhttp.h	/^    LPWSTR  lpszHostName;$/;"	m	struct:__anon19	access:public
lpszIssuerInfo	deps/winhttp/winhttp.h	/^    LPWSTR lpszIssuerInfo;$/;"	m	struct:__anon21	access:public
lpszPassword	deps/winhttp/winhttp.h	/^    LPWSTR  lpszPassword;$/;"	m	struct:__anon19	access:public
lpszProtocolName	deps/winhttp/winhttp.h	/^    LPWSTR lpszProtocolName;$/;"	m	struct:__anon21	access:public
lpszProxy	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxy;$/;"	m	struct:__anon22	access:public
lpszProxy	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxy;$/;"	m	struct:__anon23	access:public
lpszProxyBypass	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxyBypass;$/;"	m	struct:__anon22	access:public
lpszProxyBypass	deps/winhttp/winhttp.h	/^    LPWSTR lpszProxyBypass;$/;"	m	struct:__anon23	access:public
lpszScheme	deps/winhttp/winhttp.h	/^    LPWSTR  lpszScheme;$/;"	m	struct:__anon19	access:public
lpszSignatureAlgName	deps/winhttp/winhttp.h	/^    LPWSTR lpszSignatureAlgName;$/;"	m	struct:__anon21	access:public
lpszSubjectInfo	deps/winhttp/winhttp.h	/^    LPWSTR lpszSubjectInfo;$/;"	m	struct:__anon21	access:public
lpszUrlPath	deps/winhttp/winhttp.h	/^    LPWSTR  lpszUrlPath;$/;"	m	struct:__anon19	access:public
lpszUserName	deps/winhttp/winhttp.h	/^    LPWSTR  lpszUserName;$/;"	m	struct:__anon19	access:public
lpvReserved	deps/winhttp/winhttp.h	/^    LPVOID lpvReserved;$/;"	m	struct:__anon24	access:public
lru_counter	src/repository.h	/^	unsigned int lru_counter;$/;"	m	struct:git_repository	access:public
ls	include/git2/sys/transport.h	/^	int (*ls)($/;"	m	struct:git_transport	access:public
ls_remote	examples/network/ls-remote.c	/^int ls_remote(git_repository *repo, int argc, char **argv)$/;"	f	signature:(git_repository *repo, int argc, char **argv)
ls_to_vector	src/remote.c	/^static int ls_to_vector(git_vector *out, git_remote *remote)$/;"	f	file:	signature:(git_vector *out, git_remote *remote)
lstat_w	src/win32/posix_w32.c	/^static int lstat_w($/;"	f	file:	signature:( wchar_t *path, struct stat *buf, bool posix_enotdir)
m	include/git2/pathspec.h	/^	const git_pathspec_match_list *m);$/;"	v
m	include/git2/pathspec.h	/^GIT_EXTERN(void) git_pathspec_match_list_free(git_pathspec_match_list *m);$/;"	v
macros	src/attrcache.h	/^	git_strmap *macros;	 \/* hash name to vector<git_attr_assignment> *\/$/;"	m	struct:__anon309	access:public
main	examples/add.c	/^int main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	examples/blame.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/cat-file.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/describe.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	examples/diff.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/for-each-ref.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	examples/general.c	/^int main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	examples/init.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/log.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/network/git2.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	examples/remote.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/rev-list.c	/^int main (int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	examples/rev-parse.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/showindex.c	/^int main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	examples/status.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	examples/tag.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tests/main.c	/^int __cdecl main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
mainline	include/git2/cherrypick.h	/^	unsigned int mainline;$/;"	m	struct:__anon115	access:public
mainline	include/git2/revert.h	/^	unsigned int mainline;$/;"	m	struct:__anon142	access:public
make_crc_table	deps/zlib/crc32.c	/^local void make_crc_table()$/;"	f
make_gitlink_dir	tests/repo/open.c	/^static void make_gitlink_dir(const char *dir, const char *linktext)$/;"	f	file:	signature:(const char *dir, const char *linktext)
make_head_unborn	tests/repo/repo_helpers.c	/^void make_head_unborn(git_repository* repo, const char *target)$/;"	f	signature:(git_repository* repo, const char *target)
make_odb_dir	tests/object/raw/write.c	/^static void make_odb_dir(void)$/;"	f	file:	signature:(void)
make_origin	src/blame_git.c	/^static int make_origin(git_blame__origin **out, git_commit *commit, const char *path)$/;"	f	file:	signature:(git_blame__origin **out, git_commit *commit, const char *path)
make_submodule_dirty	tests/checkout/typechange.c	/^static int make_submodule_dirty(git_submodule *sm, const char *name, void *payload)$/;"	f	file:	signature:(git_submodule *sm, const char *name, void *payload)
make_test_data	tests/status/ignore.c	/^static void make_test_data(const char *reponame, const char **files)$/;"	f	file:	signature:(const char *reponame, const char **files)
makefixed	deps/zlib/inflate.c	/^void makefixed()$/;"	f
manipulate_note_in_tree_r	src/notes.c	/^static int manipulate_note_in_tree_r($/;"	f	file:	signature:( git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int (*note_exists_cb)( git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int current_error), int (*note_notfound_cb)( git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int current_error))
map	src/cache.h	/^	git_oidmap *map;$/;"	m	struct:__anon230	access:public
map	src/diff_file.h	/^	git_map map;$/;"	m	struct:__anon277	access:public
map	src/path.h	/^	iconv_t map;$/;"	m	struct:__anon313	access:public
map	src/sortedcache.h	/^	git_strmap   *map;$/;"	m	struct:__anon310	access:public
map	src/submodule.c	/^	git_strmap *map;$/;"	m	struct:__anon305	file:	access:public
map	src/tree.h	/^	git_strmap *map;$/;"	m	struct:git_treebuilder	access:public
map_count	src/config_cache.c	/^	size_t map_count;$/;"	m	struct:map_data	file:	access:public
map_data	src/config_cache.c	/^struct map_data {$/;"	s	file:
map_data::cvar_name	src/config_cache.c	/^	const char *cvar_name;$/;"	m	struct:map_data	file:	access:public
map_data::default_value	src/config_cache.c	/^	int default_value;$/;"	m	struct:map_data	file:	access:public
map_data::map_count	src/config_cache.c	/^	size_t map_count;$/;"	m	struct:map_data	file:	access:public
map_data::maps	src/config_cache.c	/^	git_cvar_map *maps;$/;"	m	struct:map_data	file:	access:public
map_notascii	deps/regex/regex_internal.h	/^  unsigned char map_notascii;$/;"	m	struct:re_string_t	access:public
map_notascii	deps/regex/regex_internal.h	/^  unsigned int map_notascii : 1;$/;"	m	struct:re_dfa_t	access:public
map_value	include/git2/config.h	/^	int map_value;$/;"	m	struct:__anon112	access:public
mapped	src/mwindow.h	/^	size_t mapped;$/;"	m	struct:git_mwindow_ctl	access:public
maps	src/config_cache.c	/^	git_cvar_map *maps;$/;"	m	struct:map_data	file:	access:public
mark_blob_uninteresting	src/pack-objects.c	/^static int mark_blob_uninteresting(git_packbuilder *pb, const git_oid *id)$/;"	f	file:	signature:(git_packbuilder *pb, const git_oid *id)
mark_edges_uninteresting	src/pack-objects.c	/^static int mark_edges_uninteresting(git_packbuilder *pb, git_commit_list *commits)$/;"	f	file:	signature:(git_packbuilder *pb, git_commit_list *commits)
mark_opt_subexp	deps/regex/regcomp.c	/^mark_opt_subexp (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
mark_parents	src/graph.c	/^static int mark_parents(git_revwalk *walk, git_commit_list_node *one,$/;"	f	file:	signature:(git_revwalk *walk, git_commit_list_node *one, git_commit_list_node *two)
mark_parents_uninteresting	src/revwalk.c	/^static void mark_parents_uninteresting(git_commit_list_node *commit)$/;"	f	file:	signature:(git_commit_list_node *commit)
mark_tree_uninteresting	src/pack-objects.c	/^static int mark_tree_uninteresting(git_packbuilder *pb, const git_oid *id)$/;"	f	file:	signature:(git_packbuilder *pb, const git_oid *id)
marker_size	src/xdiff/xdiff.h	/^	int marker_size;$/;"	m	struct:s_xmparam	access:public
master_tip	tests/refs/settargetwithlog.c	/^static const char *master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
match	src/attr_file.h	/^	git_attr_fnmatch match;$/;"	m	struct:__anon167	access:public
match	src/iterator.c	/^	iterator_pathlist_search_t match;$/;"	m	struct:__anon270	file:	access:public
match	src/xdiff/xpatience.c	/^static int match(struct hashmap *map, int line1, int line2)$/;"	f	file:	signature:(struct hashmap *map, int line1, int line2)
match_alpha	src/date.c	/^static size_t match_alpha(const char *date, struct tm *tm, int *offset)$/;"	f	file:	signature:(const char *date, struct tm *tm, int *offset)
match_available	deps/zlib/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state	access:public
match_ctx_add_entry	deps/regex/regexec.c	/^match_ctx_add_entry (re_match_context_t *mctx, int node, int str_idx, int from,$/;"	f	file:	signature:(re_match_context_t *mctx, int node, int str_idx, int from, int to)
match_ctx_add_sublast	deps/regex/regexec.c	/^match_ctx_add_sublast (re_sub_match_top_t *subtop, int node, int str_idx)$/;"	f	file:	signature:(re_sub_match_top_t *subtop, int node, int str_idx)
match_ctx_add_subtop	deps/regex/regexec.c	/^match_ctx_add_subtop (re_match_context_t *mctx, int node, int str_idx)$/;"	f	file:	signature:(re_match_context_t *mctx, int node, int str_idx)
match_ctx_clean	deps/regex/regexec.c	/^match_ctx_clean (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
match_ctx_free	deps/regex/regexec.c	/^match_ctx_free (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
match_ctx_init	deps/regex/regexec.c	/^match_ctx_init (re_match_context_t *mctx, int eflags, int n)$/;"	f	file:	signature:(re_match_context_t *mctx, int eflags, int n)
match_digit	src/date.c	/^static size_t match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)$/;"	f	file:	signature:(const char *date, struct tm *tm, int *offset, int *tm_gmt)
match_hunk	src/apply.c	/^static bool match_hunk($/;"	f	file:	signature:( patch_image *image, patch_image *preimage, size_t linenum)
match_int_arg	examples/common.c	/^int match_int_arg($/;"	f	signature:( int *out, struct args_info *args, const char *opt, int allow_negative)
match_int_internal	examples/common.c	/^static int match_int_internal($/;"	f	file:	signature:( int *out, const char *str, int allow_negative, const char *opt)
match_last	deps/regex/regex_internal.h	/^  int match_last;$/;"	m	struct:__anon12	access:public
match_length	deps/zlib/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state	access:public
match_line	src/diff_driver.h	/^	git_diff_find_context_line match_line;$/;"	m	struct:__anon201	access:public
match_multi_number	src/date.c	/^static size_t match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)$/;"	f	file:	signature:(unsigned long num, char c, const char *date, char *end, struct tm *tm)
match_numeric_arg	examples/common.c	/^static const char *match_numeric_arg(struct args_info *args, const char *opt)$/;"	f	file:	signature:(struct args_info *args, const char *opt)
match_object_header_date	src/date.c	/^static int match_object_header_date(const char *date, git_time_t *timestamp, int *offset)$/;"	f	file:	signature:(const char *date, git_time_t *timestamp, int *offset)
match_start	deps/zlib/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state	access:public
match_str_arg	examples/common.c	/^int match_str_arg($/;"	f	signature:( const char **out, struct args_info *args, const char *opt)
match_string	src/date.c	/^static size_t match_string(const char *date, const char *str)$/;"	f	file:	signature:(const char *date, const char *str)
match_tz	src/date.c	/^static size_t match_tz(const char *date, int *offp)$/;"	f	file:	signature:(const char *date, int *offp)
match_uint16_arg	examples/common.c	/^int match_uint16_arg($/;"	f	signature:( uint16_t *out, struct args_info *args, const char *opt)
match_uint32_arg	examples/common.c	/^int match_uint32_arg($/;"	f	signature:( uint32_t *out, struct args_info *args, const char *opt)
match_with_parent	examples/log.c	/^static int match_with_parent(git_commit *commit, int i, git_diff_options *opts)$/;"	f	file:	signature:(git_commit *commit, int i, git_diff_options *opts)
matched_pathspec	tests/diff/diff_helpers.h	/^	const char *matched_pathspec;$/;"	m	struct:__anon370	access:public
matches	deps/zlib/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state	access:public
matches	src/pathspec.h	/^	git_array_t(void *) matches;$/;"	m	struct:git_pathspec_match_list	access:public
matches	tests/object/tag/list.c	/^static const struct pattern_match_t matches[] = {$/;"	v	typeref:struct:pattern_match_t	file:
matching	src/refspec.h	/^		matching :1;$/;"	m	struct:git_refspec	access:public
max	src/util.h	54;"	d
maxRetries	tests/resources/userdiff/after/file.php	/^        $this->maxRetries = $maxRetries + 1;$/;"	v
maxRetries	tests/resources/userdiff/after/file.php	/^    protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/before/file.php	/^        $this->maxRetries = $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/before/file.php	/^    protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/expected/driver/diff.php	/^     protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/expected/driver/diff.php	/^+        $this->maxRetries = $maxRetries + 1;$/;"	v
maxRetries	tests/resources/userdiff/expected/driver/diff.php	/^-        $this->maxRetries = $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/expected/nodriver/diff.php	/^     protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/expected/nodriver/diff.php	/^+        $this->maxRetries = $maxRetries + 1;$/;"	v
maxRetries	tests/resources/userdiff/expected/nodriver/diff.php	/^-        $this->maxRetries = $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/files/file.php	/^        $this->maxRetries = $maxRetries + 1;$/;"	v
maxRetries	tests/resources/userdiff/files/file.php	/^    protected $maxRetries;$/;"	v
max_candidates_tags	include/git2/describe.h	/^	unsigned int max_candidates_tags; \/**< default: 10 *\/$/;"	m	struct:git_describe_options	access:public
max_chain	deps/zlib/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:	access:public
max_chain_length	deps/zlib/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state	access:public
max_chain_length	src/xdiff/xhistogram.c	/^	unsigned int max_chain_length,$/;"	m	struct:histindex	file:	access:public
max_code	deps/zlib/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s	access:public
max_delta_cache_size	src/pack-objects.h	/^	size_t max_delta_cache_size;$/;"	m	struct:git_packbuilder	access:public
max_digits	src/diff_stats.c	/^	int max_digits;$/;"	m	struct:git_diff_stats	file:	access:public
max_filestat	src/diff_stats.c	/^	size_t max_filestat;$/;"	m	struct:git_diff_stats	file:	access:public
max_insert_length	deps/zlib/deflate.h	179;"	d
max_lazy	deps/zlib/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
max_lazy_match	deps/zlib/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state	access:public
max_length	deps/zlib/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
max_line	include/git2/blame.h	/^	size_t max_line;$/;"	m	struct:git_blame_options	access:public
max_mb_elem_len	deps/regex/regex_internal.h	/^  int max_mb_elem_len;$/;"	m	struct:__anon12	access:public
max_name	src/diff_stats.c	/^	size_t max_name;$/;"	m	struct:git_diff_stats	file:	access:public
max_parents	examples/log.c	/^	int min_parents, max_parents;$/;"	m	struct:log_options	file:	access:public
max_size	include/git2/diff.h	/^	git_off_t   max_size;         \/**< defaults to 512MB *\/$/;"	m	struct:__anon87	access:public
maxs	src/hashsig.c	/^	hashsig_heap maxs;$/;"	m	struct:git_hashsig	file:	access:public
maybe_abbrev	src/revparse.c	/^static int maybe_abbrev(git_object** out, git_repository *repo, const char *spec)$/;"	f	file:	signature:(git_object** out, git_repository *repo, const char *spec)
maybe_append_head	src/refdb_fs.c	/^static int maybe_append_head(refdb_fs_backend *backend, const git_reference *ref, const git_signature *who, const char *message)$/;"	f	file:	signature:(refdb_fs_backend *backend, const git_reference *ref, const git_signature *who, const char *message)
maybe_describe	src/revparse.c	/^static int maybe_describe(git_object**out, git_repository *repo, const char *spec)$/;"	f	file:	signature:(git_object**out, git_repository *repo, const char *spec)
maybe_modified	src/diff_generate.c	/^static int maybe_modified($/;"	f	file:	signature:( git_diff_generated *diff, diff_in_progress *info)
maybe_modified_submodule	src/diff_generate.c	/^static int maybe_modified_submodule($/;"	f	file:	signature:( git_delta_t *status, git_oid *found_oid, git_diff_generated *diff, diff_in_progress *info)
maybe_sha	src/revparse.c	/^static int maybe_sha(git_object** out, git_repository *repo, const char *spec)$/;"	f	file:	signature:(git_object** out, git_repository *repo, const char *spec)
maybe_sha_or_abbrev	src/revparse.c	/^static int maybe_sha_or_abbrev(git_object** out, git_repository *repo, const char *spec, size_t speclen)$/;"	f	file:	signature:(git_object** out, git_repository *repo, const char *spec, size_t speclen)
maybe_want	src/fetch.c	/^static int maybe_want(git_remote *remote, git_remote_head *head, git_odb *odb, git_refspec *tagspec, git_remote_autotag_option_t tagopt)$/;"	f	file:	signature:(git_remote *remote, git_remote_head *head, git_odb *odb, git_refspec *tagspec, git_remote_autotag_option_t tagopt)
mb_cur_max	deps/regex/regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_dfa_t	access:public
mb_cur_max	deps/regex/regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_string_t	access:public
mb_partial	deps/regex/regex_internal.h	/^  unsigned int mb_partial : 1;$/;"	m	struct:__anon7	access:public
mbchars	deps/regex/regex_internal.h	/^  wchar_t *mbchars;$/;"	m	struct:__anon6	access:public
mbcset	deps/regex/regex_internal.h	/^    re_charset_t *mbcset;	\/* for COMPLEX_BRACKET *\/$/;"	m	union:__anon7::__anon8	access:public
mbs	deps/regex/regex_internal.h	/^  unsigned char *mbs;$/;"	m	struct:re_string_t	access:public
mbs_allocated	deps/regex/regex_internal.h	/^  unsigned char mbs_allocated;$/;"	m	struct:re_string_t	access:public
mem_ctl	src/mwindow.c	/^static git_mwindow_ctl mem_ctl;$/;"	v	file:
memobject	src/odb_mempack.c	/^struct memobject {$/;"	s	file:
memobject::data	src/odb_mempack.c	/^	char data[GIT_FLEX_ARRAY];$/;"	m	struct:memobject	file:	access:public
memobject::len	src/odb_mempack.c	/^	size_t len;$/;"	m	struct:memobject	file:	access:public
memobject::oid	src/odb_mempack.c	/^	git_oid oid;$/;"	m	struct:memobject	file:	access:public
memobject::type	src/odb_mempack.c	/^	git_otype type;$/;"	m	struct:memobject	file:	access:public
memory_limit	src/pack.h	/^	size_t memory_limit;$/;"	m	struct:__anon295	access:public
memory_packer_db	src/odb_mempack.c	/^struct memory_packer_db {$/;"	s	file:
memory_packer_db::commits	src/odb_mempack.c	/^	git_array_t(struct memobject *) commits;$/;"	m	struct:memory_packer_db	file:	access:public
memory_packer_db::objects	src/odb_mempack.c	/^	git_oidmap *objects;$/;"	m	struct:memory_packer_db	file:	access:public
memory_packer_db::parent	src/odb_mempack.c	/^	git_odb_backend parent;$/;"	m	struct:memory_packer_db	file:	access:public
memory_used	src/pack.h	/^	size_t memory_used;$/;"	m	struct:__anon295	access:public
memsize	src/delta.c	/^	unsigned long memsize;$/;"	m	struct:git_delta_index	file:	access:public
merge	src/tsort.c	/^static void merge(void **dst, const struct tsort_run *stack, ssize_t stack_curr, struct tsort_store *store)$/;"	f	file:	signature:(void **dst, const struct tsort_run *stack, ssize_t stack_curr, struct tsort_store *store)
merge__dump_index_entries	tests/merge/merge_helpers.c	/^void merge__dump_index_entries(git_vector *index_entries)$/;"	f	signature:(git_vector *index_entries)
merge__dump_names	tests/merge/merge_helpers.c	/^void merge__dump_names(git_index *index)$/;"	f	signature:(git_index *index)
merge__dump_reuc	tests/merge/merge_helpers.c	/^void merge__dump_reuc(git_index *index)$/;"	f	signature:(git_index *index)
merge_ancestor_head	src/merge.c	/^static int merge_ancestor_head($/;"	f	file:	signature:( git_annotated_commit **ancestor_head, git_repository *repo, const git_annotated_commit *our_head, const git_annotated_commit **their_heads, size_t their_heads_len)
merge_annotated_commits	src/merge.c	/^static int merge_annotated_commits($/;"	f	file:	signature:( git_index **index_out, git_annotated_commit **base_out, git_repository *repo, git_annotated_commit *ours, git_annotated_commit *theirs, size_t recursion_level, const git_merge_options *opts)
merge_assignments	src/attr_file.c	/^static int merge_assignments(void **old_raw, void *new_raw)$/;"	f	file:	signature:(void **old_raw, void *new_raw)
merge_bases	src/merge.c	/^static int merge_bases(git_commit_list **out, git_revwalk **walk_out, git_repository *repo, const git_oid *one, const git_oid *two)$/;"	f	file:	signature:(git_commit_list **out, git_revwalk **walk_out, git_repository *repo, const git_oid *one, const git_oid *two)
merge_bases_many	src/merge.c	/^int merge_bases_many(git_commit_list **out, git_revwalk **walk_out, git_repository *repo, size_t length, const git_oid input_array[])$/;"	f	signature:(git_commit_list **out, git_revwalk **walk_out, git_repository *repo, size_t length, const git_oid input_array[])
merge_branch	tests/merge/driver.c	/^static void merge_branch(void)$/;"	f	file:	signature:(void)
merge_branch	tests/merge/workdir/dirty.c	/^static int merge_branch(void)$/;"	f	file:	signature:(void)
merge_branches	tests/merge/merge_helpers.c	/^int merge_branches(git_repository *repo,$/;"	f	signature:(git_repository *repo, const char *ours_branch, const char *theirs_branch, git_merge_options *merge_opts, git_checkout_options *checkout_opts)
merge_check_index	src/merge.c	/^static int merge_check_index(size_t *conflicts, git_repository *repo, git_index *index_new, git_vector *merged_paths)$/;"	f	file:	signature:(size_t *conflicts, git_repository *repo, git_index *index_new, git_vector *merged_paths)
merge_check_workdir	src/merge.c	/^static int merge_check_workdir(size_t *conflicts, git_repository *repo, git_index *index_new, git_vector *merged_paths)$/;"	f	file:	signature:(size_t *conflicts, git_repository *repo, git_index *index_new, git_vector *merged_paths)
merge_commits_from_branches	tests/merge/merge_helpers.c	/^int merge_commits_from_branches($/;"	f	signature:( git_index **index, git_repository *repo, const char *ours_name, const char *theirs_name, git_merge_options *opts)
merge_conflict_can_resolve_contents	src/merge.c	/^static bool merge_conflict_can_resolve_contents($/;"	f	file:	signature:( const git_merge_diff *conflict)
merge_conflict_invoke_driver	src/merge.c	/^static int merge_conflict_invoke_driver($/;"	f	file:	signature:( git_index_entry **out, const char *name, git_merge_driver *driver, git_merge_diff_list *diff_list, git_merge_driver_source *src)
merge_conflict_resolve	src/merge.c	/^static int merge_conflict_resolve($/;"	f	file:	signature:( int *out, git_merge_diff_list *diff_list, const git_merge_diff *conflict, const git_merge_options *merge_opts, const git_merge_file_options *file_opts)
merge_conflict_resolve_contents	src/merge.c	/^static int merge_conflict_resolve_contents($/;"	f	file:	signature:( int *resolved, git_merge_diff_list *diff_list, const git_merge_diff *conflict, const git_merge_options *merge_opts, const git_merge_file_options *file_opts)
merge_conflict_resolve_one_removed	src/merge.c	/^static int merge_conflict_resolve_one_removed($/;"	f	file:	signature:( int *resolved, git_merge_diff_list *diff_list, const git_merge_diff *conflict)
merge_conflict_resolve_one_renamed	src/merge.c	/^static int merge_conflict_resolve_one_renamed($/;"	f	file:	signature:( int *resolved, git_merge_diff_list *diff_list, const git_merge_diff *conflict)
merge_conflict_resolve_trivial	src/merge.c	/^static int merge_conflict_resolve_trivial($/;"	f	file:	signature:( int *resolved, git_merge_diff_list *diff_list, const git_merge_diff *conflict)
merge_delta_type_from_index_entries	src/merge.c	/^GIT_INLINE(int) merge_delta_type_from_index_entries($/;"	f	signature:( const git_index_entry *ancestor, const git_index_entry *other)
merge_diff_coalesce_rename	src/merge.c	/^GIT_INLINE(void) merge_diff_coalesce_rename($/;"	f	signature:( git_index_entry *source_entry, git_delta_t *source_status, git_index_entry *target_entry, git_delta_t *target_status)
merge_diff_detect_df_conflict	src/merge.c	/^GIT_INLINE(int) merge_diff_detect_df_conflict($/;"	f	signature:( struct merge_diff_df_data *df_data, git_merge_diff *conflict)
merge_diff_detect_type	src/merge.c	/^GIT_INLINE(int) merge_diff_detect_type($/;"	f	signature:( git_merge_diff *conflict)
merge_diff_df_data	src/merge.c	/^struct merge_diff_df_data {$/;"	s	file:
merge_diff_df_data::df_path	src/merge.c	/^	const char *df_path;$/;"	m	struct:merge_diff_df_data	file:	access:public
merge_diff_df_data::prev_conflict	src/merge.c	/^	git_merge_diff *prev_conflict;$/;"	m	struct:merge_diff_df_data	file:	access:public
merge_diff_df_data::prev_path	src/merge.c	/^	const char *prev_path;$/;"	m	struct:merge_diff_df_data	file:	access:public
merge_diff_empty	src/merge.c	/^static int merge_diff_empty(const git_vector *conflicts, size_t idx, void *p)$/;"	f	file:	signature:(const git_vector *conflicts, size_t idx, void *p)
merge_diff_find_data	src/merge.c	/^struct merge_diff_find_data {$/;"	s	file:
merge_diff_find_data::df_data	src/merge.c	/^	struct merge_diff_df_data df_data;$/;"	m	struct:merge_diff_find_data	typeref:struct:merge_diff_find_data::merge_diff_df_data	file:	access:public
merge_diff_find_data::diff_list	src/merge.c	/^	git_merge_diff_list *diff_list;$/;"	m	struct:merge_diff_find_data	file:	access:public
merge_diff_from_index_entries	src/merge.c	/^static git_merge_diff *merge_diff_from_index_entries($/;"	f	file:	signature:( git_merge_diff_list *diff_list, const git_index_entry **entries)
merge_diff_list_coalesce_renames	src/merge.c	/^static void merge_diff_list_coalesce_renames($/;"	f	file:	signature:( git_merge_diff_list *diff_list, struct merge_diff_similarity *similarity_ours, struct merge_diff_similarity *similarity_theirs, const git_merge_options *opts)
merge_diff_list_count_candidates	src/merge.c	/^static void merge_diff_list_count_candidates($/;"	f	file:	signature:( git_merge_diff_list *diff_list, size_t *src_count, size_t *tgt_count)
merge_diff_list_insert_conflict	src/merge.c	/^static int merge_diff_list_insert_conflict($/;"	f	file:	signature:( git_merge_diff_list *diff_list, struct merge_diff_df_data *merge_df_data, const git_index_entry *tree_items[3])
merge_diff_list_insert_unmodified	src/merge.c	/^static int merge_diff_list_insert_unmodified($/;"	f	file:	signature:( git_merge_diff_list *diff_list, const git_index_entry *tree_items[3])
merge_diff_mark_rename_conflict	src/merge.c	/^static void merge_diff_mark_rename_conflict($/;"	f	file:	signature:( git_merge_diff_list *diff_list, struct merge_diff_similarity *similarity_ours, bool ours_renamed, size_t ours_source_idx, struct merge_diff_similarity *similarity_theirs, bool theirs_renamed, size_t theirs_source_idx, git_merge_diff *target, const git_merge_options *opts)
merge_diff_mark_similarity	src/merge.c	/^static int merge_diff_mark_similarity($/;"	f	file:	signature:( git_repository *repo, git_merge_diff_list *diff_list, struct merge_diff_similarity *similarity_ours, struct merge_diff_similarity *similarity_theirs, int (*similarity_fn)(git_repository *, git_index_entry *, size_t, git_index_entry *, size_t, void **, const git_merge_options *), void **cache, const git_merge_options *opts)
merge_diff_path	src/merge.c	/^GIT_INLINE(const char *) merge_diff_path($/;"	f	signature:( const git_merge_diff *conflict)
merge_diff_similarity	src/merge.c	/^struct merge_diff_similarity {$/;"	s	file:
merge_diff_similarity::other_idx	src/merge.c	/^	size_t other_idx;$/;"	m	struct:merge_diff_similarity	file:	access:public
merge_diff_similarity::similarity	src/merge.c	/^	unsigned char similarity;$/;"	m	struct:merge_diff_similarity	file:	access:public
merge_differently_filtered_files	tests/merge/workdir/dirty.c	/^static int merge_differently_filtered_files(char *files[])$/;"	f	file:	signature:(char *files[])
merge_dirty_files	tests/merge/workdir/dirty.c	/^static int merge_dirty_files(char *dirty_files[])$/;"	f	file:	signature:(char *dirty_files[])
merge_driver_binary_apply	src/merge_driver.c	/^static int merge_driver_binary_apply($/;"	f	file:	signature:( git_merge_driver *self, const char **path_out, uint32_t *mode_out, git_buf *merged_out, const char *filter_name, const git_merge_driver_source *src)
merge_driver_entry_cmp	src/merge_driver.c	/^static int merge_driver_entry_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
merge_driver_entry_search	src/merge_driver.c	/^static int merge_driver_entry_search(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
merge_driver_lookup_with_wildcard	src/merge_driver.c	/^GIT_INLINE(git_merge_driver *) merge_driver_lookup_with_wildcard($/;"	f	signature:( const char *name)
merge_driver_name__binary	src/merge_driver.c	/^static const char *merge_driver_name__binary = "binary";$/;"	v	file:
merge_driver_name__text	src/merge_driver.c	/^static const char *merge_driver_name__text = "text";$/;"	v	file:
merge_driver_name__union	src/merge_driver.c	/^static const char *merge_driver_name__union = "union";$/;"	v	file:
merge_driver_name_for_path	src/merge_driver.c	/^static int merge_driver_name_for_path($/;"	f	file:	signature:( const char **out, git_repository *repo, const char *path, const char *default_driver)
merge_driver_registry	src/merge_driver.c	/^static struct merge_driver_registry merge_driver_registry;$/;"	v	typeref:struct:merge_driver_registry	file:
merge_driver_registry	src/merge_driver.c	/^struct merge_driver_registry {$/;"	s	file:
merge_driver_registry::drivers	src/merge_driver.c	/^	git_vector drivers;$/;"	m	struct:merge_driver_registry	file:	access:public
merge_driver_registry::lock	src/merge_driver.c	/^	git_rwlock lock;$/;"	m	struct:merge_driver_registry	file:	access:public
merge_driver_registry_find	src/merge_driver.c	/^static int merge_driver_registry_find(size_t *pos, const char *name)$/;"	f	file:	signature:(size_t *pos, const char *name)
merge_driver_registry_insert	src/merge_driver.c	/^static int merge_driver_registry_insert($/;"	f	file:	signature:( const char *name, git_merge_driver *driver)
merge_driver_registry_lookup	src/merge_driver.c	/^static git_merge_driver_entry *merge_driver_registry_lookup($/;"	f	file:	signature:( size_t *pos, const char *name)
merge_file__binary	src/merge_file.c	/^static int merge_file__binary($/;"	f	file:	signature:( git_merge_file_result *out, const git_merge_file_input *ours, const git_merge_file_input *theirs, const git_merge_file_options *given_opts)
merge_file__from_inputs	src/merge_file.c	/^static int merge_file__from_inputs($/;"	f	file:	signature:( git_merge_file_result *out, const git_merge_file_input *ancestor, const git_merge_file_input *ours, const git_merge_file_input *theirs, const git_merge_file_options *given_opts)
merge_file__is_binary	src/merge_file.c	/^static bool merge_file__is_binary(const git_merge_file_input *file)$/;"	f	file:	signature:(const git_merge_file_input *file)
merge_file__xdiff	src/merge_file.c	/^static int merge_file__xdiff($/;"	f	file:	signature:( git_merge_file_result *out, const git_merge_file_input *ancestor, const git_merge_file_input *ours, const git_merge_file_input *theirs, const git_merge_file_options *given_opts)
merge_file_normalize_opts	src/merge_file.c	/^static void merge_file_normalize_opts($/;"	f	file:	signature:( git_merge_file_options *out, const git_merge_file_options *given_opts)
merge_head	src/merge.c	/^	const git_annotated_commit *merge_head;$/;"	m	struct:merge_msg_entry	file:	access:public
merge_heads	src/merge.c	/^static int merge_heads($/;"	f	file:	signature:( git_annotated_commit **ancestor_head_out, git_annotated_commit **our_head_out, git_repository *repo, const git_annotated_commit **their_heads, size_t their_heads_len)
merge_index_and_tree	src/stash.c	/^static int merge_index_and_tree($/;"	f	file:	signature:( git_index **out, git_repository *repo, git_tree *ancestor_tree, git_index *ours_index, git_tree *theirs_tree)
merge_index_conflict_data	tests/merge/merge_helpers.h	/^struct merge_index_conflict_data {$/;"	s
merge_index_conflict_data::ancestor	tests/merge/merge_helpers.h	/^	struct merge_index_with_status ancestor;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status	access:public
merge_index_conflict_data::change_type	tests/merge/merge_helpers.h	/^	git_merge_diff_type_t change_type;$/;"	m	struct:merge_index_conflict_data	access:public
merge_index_conflict_data::ours	tests/merge/merge_helpers.h	/^	struct merge_index_with_status ours;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status	access:public
merge_index_conflict_data::theirs	tests/merge/merge_helpers.h	/^	struct merge_index_with_status theirs;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status	access:public
merge_index_entry	tests/merge/merge_helpers.h	/^struct merge_index_entry {$/;"	s
merge_index_entry::mode	tests/merge/merge_helpers.h	/^	uint16_t mode;$/;"	m	struct:merge_index_entry	access:public
merge_index_entry::oid_str	tests/merge/merge_helpers.h	/^	char oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_index_entry	access:public
merge_index_entry::path	tests/merge/merge_helpers.h	/^	char path[128];$/;"	m	struct:merge_index_entry	access:public
merge_index_entry::stage	tests/merge/merge_helpers.h	/^	int stage;$/;"	m	struct:merge_index_entry	access:public
merge_index_insert_reuc	src/merge.c	/^static int merge_index_insert_reuc($/;"	f	file:	signature:( git_index *index, size_t idx, const git_index_entry *entry)
merge_index_with_status	tests/merge/merge_helpers.h	/^struct merge_index_with_status {$/;"	s
merge_index_with_status::entry	tests/merge/merge_helpers.h	/^	struct merge_index_entry entry;$/;"	m	struct:merge_index_with_status	typeref:struct:merge_index_with_status::merge_index_entry	access:public
merge_index_with_status::status	tests/merge/merge_helpers.h	/^	unsigned int status;$/;"	m	struct:merge_index_with_status	access:public
merge_indexes	src/stash.c	/^static int merge_indexes($/;"	f	file:	signature:( git_index **out, git_repository *repo, git_tree *ancestor_tree, git_index *ours_index, git_index *theirs_index)
merge_msg_entries	src/merge.c	/^static int merge_msg_entries($/;"	f	file:	signature:( git_vector *v, const struct merge_msg_entry *entries, size_t len, int (*match)(const struct merge_msg_entry *entry, git_vector *entries))
merge_msg_entry	src/merge.c	/^struct merge_msg_entry {$/;"	s	file:
merge_msg_entry::merge_head	src/merge.c	/^	const git_annotated_commit *merge_head;$/;"	m	struct:merge_msg_entry	file:	access:public
merge_msg_entry::written	src/merge.c	/^	bool written;$/;"	m	struct:merge_msg_entry	file:	access:public
merge_msg_entry_written	src/merge.c	/^static int merge_msg_entry_written($/;"	f	file:	signature:( const struct merge_msg_entry *merge_msg_entry)
merge_msg_write_branches	src/merge.c	/^static int merge_msg_write_branches($/;"	f	file:	signature:( git_filebuf *file, git_vector *entries, char sep)
merge_msg_write_entries	src/merge.c	/^static int merge_msg_write_entries($/;"	f	file:	signature:( git_filebuf *file, git_vector *entries, const char *item_name, const char *item_plural_name, size_t ref_name_skip, const char *source, char sep)
merge_msg_write_remotes	src/merge.c	/^static int merge_msg_write_remotes($/;"	f	file:	signature:( git_filebuf *file, git_vector *entries, char sep)
merge_msg_write_tags	src/merge.c	/^static int merge_msg_write_tags($/;"	f	file:	signature:( git_filebuf *file, git_vector *entries, char sep)
merge_msg_write_tracking	src/merge.c	/^static int merge_msg_write_tracking($/;"	f	file:	signature:( git_filebuf *file, git_vector *entries, char sep)
merge_name_entry	tests/merge/merge_helpers.h	/^struct merge_name_entry {$/;"	s
merge_name_entry::ancestor_path	tests/merge/merge_helpers.h	/^	char ancestor_path[128];$/;"	m	struct:merge_name_entry	access:public
merge_name_entry::our_path	tests/merge/merge_helpers.h	/^	char our_path[128];$/;"	m	struct:merge_name_entry	access:public
merge_name_entry::their_path	tests/merge/merge_helpers.h	/^	char their_path[128];$/;"	m	struct:merge_name_entry	access:public
merge_normalize_checkout_opts	src/merge.c	/^static int merge_normalize_checkout_opts($/;"	f	file:	signature:( git_checkout_options *out, git_repository *repo, const git_checkout_options *given_checkout_opts, unsigned int checkout_strategy, git_annotated_commit *ancestor, const git_annotated_commit *our_head, const git_annotated_commit **their_heads, size_t their_heads_len)
merge_normalize_opts	src/merge.c	/^static int merge_normalize_opts($/;"	f	file:	signature:( git_repository *repo, git_merge_options *opts, const git_merge_options *given)
merge_options	include/git2/rebase.h	/^	git_merge_options merge_options;$/;"	m	struct:__anon67	access:public
merge_opts	include/git2/cherrypick.h	/^	git_merge_options merge_opts; \/**< Options for the merging *\/$/;"	m	struct:__anon115	access:public
merge_opts	include/git2/revert.h	/^	git_merge_options merge_opts; \/**< Options for the merging *\/$/;"	m	struct:__anon142	access:public
merge_preference	src/merge.c	/^static int merge_preference(git_merge_preference_t *out, git_repository *repo)$/;"	f	file:	signature:(git_merge_preference_t *out, git_repository *repo)
merge_reuc_entry	tests/merge/merge_helpers.h	/^struct merge_reuc_entry {$/;"	s
merge_reuc_entry::ancestor_mode	tests/merge/merge_helpers.h	/^	unsigned int ancestor_mode;$/;"	m	struct:merge_reuc_entry	access:public
merge_reuc_entry::ancestor_oid_str	tests/merge/merge_helpers.h	/^	char ancestor_oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_reuc_entry	access:public
merge_reuc_entry::our_mode	tests/merge/merge_helpers.h	/^	unsigned int our_mode;$/;"	m	struct:merge_reuc_entry	access:public
merge_reuc_entry::our_oid_str	tests/merge/merge_helpers.h	/^	char our_oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_reuc_entry	access:public
merge_reuc_entry::path	tests/merge/merge_helpers.h	/^	char path[128];$/;"	m	struct:merge_reuc_entry	access:public
merge_reuc_entry::their_mode	tests/merge/merge_helpers.h	/^	unsigned int their_mode;$/;"	m	struct:merge_reuc_entry	access:public
merge_reuc_entry::their_oid_str	tests/merge/merge_helpers.h	/^	char their_oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_reuc_entry	access:public
merge_simple_branch	tests/merge/workdir/simple.c	/^static void merge_simple_branch(int merge_file_favor, int addl_checkout_strategy)$/;"	f	file:	signature:(int merge_file_favor, int addl_checkout_strategy)
merge_staged_files	tests/merge/workdir/dirty.c	/^static int merge_staged_files(char *staged_files[])$/;"	f	file:	signature:(char *staged_files[])
merge_state_array	deps/regex/regexec.c	/^merge_state_array (const re_dfa_t *dfa, re_dfastate_t **dst,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_dfastate_t **dst, re_dfastate_t **src, int num)
merge_state_cleanup	src/merge.c	/^static int merge_state_cleanup(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
merge_state_with_log	deps/regex/regexec.c	/^merge_state_with_log (reg_errcode_t *err, re_match_context_t *mctx,$/;"	f	signature:(reg_errcode_t *err, re_match_context_t *mctx, re_dfastate_t *next_state)
merge_structs	tests/core/vector.c	/^static int merge_structs(void **old_raw, void *new)$/;"	f	file:	signature:(void **old_raw, void *new)
merge_test_index	tests/merge/merge_helpers.c	/^int merge_test_index(git_index *index, const struct merge_index_entry expected[], size_t expected_len)$/;"	f	signature:(git_index *index, const struct merge_index_entry expected[], size_t expected_len)
merge_test_merge_conflicts	tests/merge/merge_helpers.c	/^int merge_test_merge_conflicts(git_vector *conflicts, const struct merge_index_conflict_data expected[], size_t expected_len)$/;"	f	signature:(git_vector *conflicts, const struct merge_index_conflict_data expected[], size_t expected_len)
merge_test_names	tests/merge/merge_helpers.c	/^int merge_test_names(git_index *index, const struct merge_name_entry expected[], size_t expected_len)$/;"	f	signature:(git_index *index, const struct merge_name_entry expected[], size_t expected_len)
merge_test_reuc	tests/merge/merge_helpers.c	/^int merge_test_reuc(git_index *index, const struct merge_reuc_entry expected[], size_t expected_len)$/;"	f	signature:(git_index *index, const struct merge_reuc_entry expected[], size_t expected_len)
merge_test_workdir	tests/merge/merge_helpers.c	/^int merge_test_workdir(git_repository *repo, const struct merge_index_entry expected[], size_t expected_len)$/;"	f	signature:(git_repository *repo, const struct merge_index_entry expected[], size_t expected_len)
merge_their_label	src/merge.c	/^const char *merge_their_label(const char *branchname)$/;"	f	signature:(const char *branchname)
merge_tree_index_t	src/merge.c	/^} merge_tree_index_t;$/;"	t	typeref:enum:__anon200	file:
merge_trees_from_branches	tests/merge/merge_helpers.c	/^int merge_trees_from_branches($/;"	f	signature:( git_index **index, git_repository *repo, const char *ours_name, const char *theirs_name, git_merge_options *opts)
merge_trivial	tests/merge/trees/trivial.c	/^static int merge_trivial(git_index **index, const char *ours, const char *theirs)$/;"	f	file:	signature:(git_index **index, const char *ours, const char *theirs)
merge_trivial	tests/merge/workdir/trivial.c	/^static int merge_trivial(const char *ours, const char *theirs)$/;"	f	file:	signature:(const char *ours, const char *theirs)
merge_trivial_conflict_entrycount	tests/merge/trees/trivial.c	/^static int merge_trivial_conflict_entrycount(git_index *index)$/;"	f	file:	signature:(git_index *index)
merge_trivial_conflict_entrycount	tests/merge/workdir/trivial.c	/^static size_t merge_trivial_conflict_entrycount(void)$/;"	f	file:	signature:(void)
message	examples/tag.c	/^	const char *message;$/;"	m	struct:__anon38	file:	access:public
message	include/git2/errors.h	/^	char *message;$/;"	m	struct:__anon43	access:public
message	src/notes.h	/^	char *message;$/;"	m	struct:git_note	access:public
message	src/tag.h	/^	char *message;$/;"	m	struct:git_tag	access:public
message	src/transaction.c	/^	const char *message;$/;"	m	struct:__anon208	file:	access:public
message_cb_payload	src/transports/local.c	/^	void *message_cb_payload;$/;"	m	struct:__anon178	file:	access:public
message_cb_payload	src/transports/smart.h	/^	void *message_cb_payload;$/;"	m	struct:__anon193	access:public
message_encoding	src/commit.h	/^	char *message_encoding;$/;"	m	struct:git_commit	access:public
messages	tests/notes/notes.c	/^static char *messages[] = {$/;"	v	file:
method	deps/http-parser/http_parser.h	/^  unsigned char method;       \/* requests only *\/$/;"	m	struct:http_parser	access:public
method	deps/zlib/deflate.h	/^    Byte  method;        \/* can only be DEFLATED *\/$/;"	m	struct:internal_state	access:public
method	tests/clar_libgit2_trace.c	/^struct method {$/;"	s	file:
method::close	tests/clar_libgit2_trace.c	/^	void (*close)(void);$/;"	m	struct:method	file:	access:public
method::git_trace_cb	tests/clar_libgit2_trace.c	/^	void (*git_trace_cb)(git_trace_level_t level, const char *msg);$/;"	m	struct:method	file:	access:public
method::name	tests/clar_libgit2_trace.c	/^	const char *name;$/;"	m	struct:method	file:	access:public
method_strings	deps/http-parser/http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
metric	include/git2/diff.h	/^	git_diff_similarity_metric *metric;$/;"	m	struct:__anon96	access:public
metric	include/git2/merge.h	/^	git_diff_similarity_metric *metric;$/;"	m	struct:__anon132	access:public
min	src/util.h	51;"	d
min_hi	src/xdiff/xdiffi.c	/^	int min_lo, min_hi;$/;"	m	struct:s_xdpsplit	file:	access:public
min_length	include/git2/oid.h	/^GIT_EXTERN(git_oid_shorten *) git_oid_shorten_new(size_t min_length);$/;"	v
min_length	src/oid.c	/^	int min_length, full;$/;"	m	struct:git_oid_shorten	file:	access:public
min_line	include/git2/blame.h	/^	size_t min_line;$/;"	m	struct:git_blame_options	access:public
min_lo	src/xdiff/xdiffi.c	/^	int min_lo, min_hi;$/;"	m	struct:s_xdpsplit	file:	access:public
min_match_characters	include/git2/blame.h	/^	uint16_t min_match_characters;$/;"	m	struct:git_blame_options	access:public
min_parents	examples/log.c	/^	int min_parents, max_parents;$/;"	m	struct:log_options	file:	access:public
minimal_entry_size	src/index.c	64;"	d	file:
mins	src/hashsig.c	/^	hashsig_heap mins;$/;"	m	struct:git_hashsig	file:	access:public
mkdir	tests/clar.c	32;"	d	file:
mkdir_calls	include/git2/checkout.h	/^	size_t mkdir_calls;$/;"	m	struct:__anon139	access:public
mkdir_calls	src/fileops.h	/^	size_t mkdir_calls;$/;"	m	struct:git_futils_mkdir_perfdata	access:public
mkdir_canonicalize	src/fileops.c	/^GIT_INLINE(int) mkdir_canonicalize($/;"	f	signature:( git_buf *path, uint32_t flags)
mkdir_flags	src/fileops.c	/^	uint32_t mkdir_flags;$/;"	m	struct:__anon264	file:	access:public
mkdir_map	src/checkout.c	/^	git_strmap *mkdir_map;$/;"	m	struct:__anon215	file:	access:public
mkdir_parent	src/repository.c	/^static int mkdir_parent(git_buf *buf, uint32_t mode, bool skip2)$/;"	f	file:	signature:(git_buf *buf, uint32_t mode, bool skip2)
mkdir_validate_dir	src/fileops.c	/^GIT_INLINE(int) mkdir_validate_dir($/;"	f	signature:( const char *path, struct stat *st, mode_t mode, uint32_t flags, struct git_futils_mkdir_options *opts)
mkdir_validate_mode	src/fileops.c	/^GIT_INLINE(int) mkdir_validate_mode($/;"	f	signature:( const char *path, struct stat *st, bool terminal_path, mode_t mode, uint32_t flags, struct git_futils_mkdir_options *opts)
mkpath2file	src/checkout.c	/^static int mkpath2file($/;"	f	file:	signature:( checkout_data *data, const char *path, unsigned int mode)
mmap_calls	src/mwindow.h	/^	unsigned int mmap_calls;$/;"	m	struct:git_mwindow_ctl	access:public
mmbuffer_t	src/xdiff/xdiff.h	/^} mmbuffer_t;$/;"	t	typeref:struct:s_mmbuffer
mmfile_t	src/xdiff/xdiff.h	/^} mmfile_t;$/;"	t	typeref:struct:s_mmfile
mode	deps/zlib/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state	access:public
mode	include/git2/diff.h	/^	uint16_t    mode;$/;"	m	struct:__anon85	access:public
mode	include/git2/index.h	/^	uint32_t mode;$/;"	m	struct:git_index_entry	access:public
mode	include/git2/merge.h	/^	unsigned int mode;$/;"	m	struct:__anon126	access:public
mode	include/git2/merge.h	/^	unsigned int mode;$/;"	m	struct:__anon131	access:public
mode	include/git2/odb_backend.h	/^	unsigned int mode;$/;"	m	struct:git_odb_stream	access:public
mode	include/git2/repository.h	/^	uint32_t    mode;$/;"	m	struct:__anon119	access:public
mode	include/git2/sys/index.h	/^	uint32_t mode[3];$/;"	m	struct:git_index_reuc_entry	access:public
mode	src/filter.c	/^	git_filter_mode_t mode;$/;"	m	struct:git_filter_source	file:	access:public
mode	src/index.c	/^	uint32_t mode;$/;"	m	struct:entry_long	file:	access:public
mode	src/index.c	/^	uint32_t mode;$/;"	m	struct:entry_short	file:	access:public
mode	src/indexer.c	/^	unsigned int mode;$/;"	m	struct:git_indexer	file:	access:public
mode	src/repo_template.h	/^	mode_t mode;$/;"	m	struct:__anon151	access:public
mode	src/xdiff/xmerge.c	/^	int mode;$/;"	m	struct:s_xdmerge	file:	access:public
mode	tests/checkout/conflict.c	/^	uint16_t mode;$/;"	m	struct:checkout_index_entry	file:	access:public
mode	tests/filter/stream.c	/^	git_filter_mode_t mode;$/;"	m	struct:compress_stream	file:	access:public
mode	tests/merge/merge_helpers.h	/^	uint16_t mode;$/;"	m	struct:merge_index_entry	access:public
mode_t	src/win32/msvc-compat.h	/^typedef unsigned short mode_t;$/;"	t
mods	src/submodule.c	/^	git_config *mods;$/;"	m	struct:__anon305	file:	access:public
month_names	src/date.c	/^static const char *month_names[] = {$/;"	v	file:
more	deps/regex/regex_internal.h	/^  char more;$/;"	m	struct:re_backref_cache_entry	access:public
moreStuff	tests/resources/userdiff/after/file.php	/^	protected $moreStuff;$/;"	v
moreStuff	tests/resources/userdiff/expected/driver/diff.php	/^+	protected $moreStuff;$/;"	v
moreStuff	tests/resources/userdiff/expected/nodriver/diff.php	/^+	protected $moreStuff;$/;"	v
moreStuff	tests/resources/userdiff/files/file.php	/^	protected $moreStuff;$/;"	v
msg	deps/zlib/zlib.h	/^    z_const char *msg;  \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s	access:public
msg	src/push.h	/^	char *msg;$/;"	m	struct:push_status	access:public
msg	src/reflog.h	/^	char *msg;$/;"	m	struct:git_reflog_entry	access:public
msg	src/transports/smart.h	/^	char *msg;$/;"	m	struct:__anon191	access:public
msg	tests/online/push_util.h	/^	char *msg;$/;"	m	struct:__anon355	access:public
msg_entry_is_branch	src/merge.c	/^static int msg_entry_is_branch($/;"	f	file:	signature:( const struct merge_msg_entry *entry, git_vector *entries)
msg_entry_is_oid	src/merge.c	/^static int msg_entry_is_oid($/;"	f	file:	signature:( const struct merge_msg_entry *merge_msg_entry)
msg_entry_is_remote	src/merge.c	/^static int msg_entry_is_remote($/;"	f	file:	signature:( const struct merge_msg_entry *entry, git_vector *entries)
msg_entry_is_tag	src/merge.c	/^static int msg_entry_is_tag($/;"	f	file:	signature:( const struct merge_msg_entry *entry, git_vector *entries)
msg_entry_is_tracking	src/merge.c	/^static int msg_entry_is_tracking($/;"	f	file:	signature:( const struct merge_msg_entry *entry, git_vector *entries)
mtime	include/git2/index.h	/^	git_index_time mtime;$/;"	m	struct:git_index_entry	access:public
mtime	src/fileops.h	/^	struct timespec mtime;$/;"	m	struct:__anon349	typeref:struct:__anon349::timespec	access:public
mtime	src/index.c	/^	struct entry_time mtime;$/;"	m	struct:entry_long	typeref:struct:entry_long::entry_time	file:	access:public
mtime	src/index.c	/^	struct entry_time mtime;$/;"	m	struct:entry_short	typeref:struct:entry_short::entry_time	file:	access:public
mtime	src/pack.h	/^	git_time_t mtime;$/;"	m	struct:git_pack_file	access:public
mtime	tests/index/tests.c	/^   git_time_t mtime;$/;"	m	struct:test_entry	file:	access:public
multi_ack	src/transports/smart.h	/^		multi_ack: 1,$/;"	m	struct:transport_smart_caps	access:public
multi_ack_detailed	src/transports/smart.h	/^		multi_ack_detailed: 1,$/;"	m	struct:transport_smart_caps	access:public
multivar_cb	tests/config/write.c	/^static int multivar_cb(const git_config_entry *entry, void *data)$/;"	f	file:	signature:(const git_config_entry *entry, void *data)
multivar_iter	src/config.c	/^} multivar_iter;$/;"	t	typeref:struct:__anon339	file:
multivar_iter_free	src/config.c	/^void multivar_iter_free(git_config_iterator *_iter)$/;"	f	signature:(git_config_iterator *_iter)
multivar_iter_next	src/config.c	/^static int multivar_iter_next(git_config_entry **entry, git_config_iterator *_iter)$/;"	f	file:	signature:(git_config_entry **entry, git_config_iterator *_iter)
mutex	src/pack-objects.c	/^	git_mutex mutex;$/;"	m	struct:thread_params	file:	access:public
mv_read_cb	tests/config/multivar.c	/^static int mv_read_cb(const git_config_entry *entry, void *data)$/;"	f	file:	signature:(const git_config_entry *entry, void *data)
mw	src/pack.h	/^	git_mwindow *mw;$/;"	m	struct:git_packfile_stream	access:public
mwf	src/pack.h	/^	git_mwindow_file mwf;$/;"	m	struct:git_pack_file	access:public
mxcost	src/xdiff/xdiffi.h	/^	long mxcost;$/;"	m	struct:s_xdalgoenv	access:public
my_emit	src/blame_git.c	/^static int my_emit($/;"	f	file:	signature:( long start_a, long count_a, long start_b, long count_b, void *cb_data)
my_output	src/win32/w32_crtdbg_stacktrace.c	/^static void my_output(const char *buf)$/;"	f	file:	signature:(const char *buf)
my_struct	tests/core/vector.c	/^} my_struct;$/;"	t	typeref:struct:__anon358	file:
nPort	deps/winhttp/winhttp.h	/^    INTERNET_PORT nPort;$/;"	m	struct:__anon19	access:public
nScheme	deps/winhttp/winhttp.h	/^    INTERNET_SCHEME nScheme;$/;"	m	struct:__anon19	access:public
n_conflicts	tests/checkout/checkout_helpers.h	/^	int n_conflicts;$/;"	m	struct:__anon351	access:public
n_dirty	tests/checkout/checkout_helpers.h	/^	int n_dirty;$/;"	m	struct:__anon351	access:public
n_ignored	tests/checkout/checkout_helpers.h	/^	int n_ignored;$/;"	m	struct:__anon351	access:public
n_untracked	tests/checkout/checkout_helpers.h	/^	int n_untracked;$/;"	m	struct:__anon351	access:public
n_updates	tests/checkout/checkout_helpers.h	/^	int n_updates;$/;"	m	struct:__anon351	access:public
nak_pkt	src/transports/smart_pkt.c	/^static int nak_pkt(git_pkt **out)$/;"	f	file:	signature:(git_pkt **out)
name	deps/http-parser/http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:	access:public
name	deps/regex/regex_internal.h	/^    unsigned char *name;$/;"	m	union:__anon15::__anon16	access:public
name	deps/zlib/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
name	examples/network/git2.c	/^	char *name;$/;"	m	struct:__anon36	file:	access:public
name	include/git2/config.h	/^	const char *name; \/**< Name of the entry (normalised) *\/$/;"	m	struct:git_config_entry	access:public
name	include/git2/net.h	/^	char *name;$/;"	m	struct:git_remote_head	access:public
name	include/git2/types.h	/^	char *name; \/**< full name of the author *\/$/;"	m	struct:git_signature	access:public
name	src/attr.c	/^	git_attr_name name;$/;"	m	struct:__anon246	file:	access:public
name	src/attr_file.h	/^	char *name;$/;"	m	struct:__anon169	access:public
name	src/attr_file.h	/^	const char *name;$/;"	m	struct:__anon168	access:public
name	src/config.c	/^	char *name;$/;"	m	struct:__anon339	file:	access:public
name	src/config.c	/^	git_buf *name;$/;"	m	struct:rename_data	file:	access:public
name	src/config_file.c	/^	const char *name;$/;"	m	struct:write_data	file:	access:public
name	src/date.c	/^	const char *name;$/;"	m	struct:__anon300	file:	access:public
name	src/date.c	/^	const char *name;$/;"	m	struct:special	file:	access:public
name	src/describe.c	/^	struct commit_name *name;$/;"	m	struct:git_describe_result	typeref:struct:git_describe_result::commit_name	file:	access:public
name	src/describe.c	/^	struct commit_name *name;$/;"	m	struct:possible_tag	typeref:struct:possible_tag::commit_name	file:	access:public
name	src/diff_driver.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_diff_driver	file:	access:public
name	src/merge_driver.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:__anon274	file:	access:public
name	src/refdb_fs.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:packref	file:	access:public
name	src/refs.h	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_reference	access:public
name	src/remote.h	/^	char *name;$/;"	m	struct:git_remote	access:public
name	src/submodule.c	/^	char *name;$/;"	m	struct:__anon304	file:	access:public
name	src/submodule.h	/^	char *name;$/;"	m	struct:git_submodule	access:public
name	src/transaction.c	/^	const char *name;$/;"	m	struct:__anon208	file:	access:public
name	src/transports/auth.h	/^	const char *name;$/;"	m	struct:__anon196	access:public
name	src/tree-cache.h	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_tree_cache	access:public
name	src/tree.c	/^	char *name;$/;"	m	struct:__anon159	file:	access:public
name	src/userdiff.h	/^	const char *name;$/;"	m	struct:__anon161	access:public
name	tests/clar.c	/^	const char *name;$/;"	m	struct:clar_func	file:	access:public
name	tests/clar.c	/^	const char *name;$/;"	m	struct:clar_suite	file:	access:public
name	tests/clar_libgit2_trace.c	/^	const char *name;$/;"	m	struct:method	file:	access:public
name	tests/commit/parse.c	/^	const char *name;$/;"	m	struct:__anon378	file:	access:public
name	tests/core/dirent.c	/^	char *name; \/* filename		*\/$/;"	m	struct:name_data	file:	access:public
name	tests/online/push_util.h	/^	char *name;$/;"	m	struct:__anon352	access:public
name	tests/online/push_util.h	/^	const char *name;$/;"	m	struct:__anon354	access:public
name_checked	src/describe.c	/^	unsigned name_checked:1;$/;"	m	struct:commit_name	file:	access:public
name_collision	src/checkout.c	/^	int name_collision:1,$/;"	m	struct:__anon216	file:	access:public
name_data	tests/core/dirent.c	/^typedef struct name_data {$/;"	s	file:
name_data	tests/core/dirent.c	/^} name_data;$/;"	t	typeref:struct:name_data	file:
name_data::count	tests/core/dirent.c	/^	int count; \/* return count *\/$/;"	m	struct:name_data	file:	access:public
name_data::name	tests/core/dirent.c	/^	char *name; \/* filename		*\/$/;"	m	struct:name_data	file:	access:public
name_entry_eq	tests/merge/merge_helpers.c	/^static int name_entry_eq(const char *expected, const char *actual)$/;"	f	file:	signature:(const char *expected, const char *actual)
name_entry_eq_merge_name_entry	tests/merge/merge_helpers.c	/^static int name_entry_eq_merge_name_entry(const struct merge_name_entry *expected, const git_index_name_entry *actual)$/;"	f	file:	signature:(const struct merge_name_entry *expected, const git_index_name_entry *actual)
name_from_path	src/submodule.c	/^static int name_from_path(git_buf *out, git_config *cfg, const char *path)$/;"	f	file:	signature:(git_buf *out, git_config *cfg, const char *path)
name_hash	src/attr_file.h	/^	uint32_t name_hash;$/;"	m	struct:__anon168	access:public
name_hash	src/attr_file.h	/^	uint32_t name_hash;$/;"	m	struct:__anon169	access:public
name_hash	src/pack-objects.c	/^static unsigned name_hash(const char *name)$/;"	f	file:	signature:(const char *name)
name_max	deps/zlib/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
name_offset	src/remote.c	/^static const char *name_offset(size_t *len_out, const char *name)$/;"	f	file:	signature:(size_t *len_out, const char *name)
name_only_cmp	tests/core/sortedcache.c	/^static int name_only_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
namelen	src/tree-cache.h	/^	size_t namelen;$/;"	m	struct:git_tree_cache	access:public
names	src/describe.c	/^	git_oidmap *names;$/;"	m	struct:get_name_data	file:	access:public
names	src/index.h	/^	git_vector names;$/;"	m	struct:git_index	access:public
names	tests/core/dirent.c	/^	name_data *names; \/* name state data	*\/$/;"	m	struct:walk_data	file:	access:public
names	tests/diff/diff_helpers.h	/^	const char **names;$/;"	m	struct:__anon369	access:public
nanoseconds	include/git2/index.h	/^	uint32_t nanoseconds;$/;"	m	struct:__anon101	access:public
nanoseconds	src/index.c	/^	uint32_t nanoseconds;$/;"	m	struct:entry_time	file:	access:public
native	src/win32/thread.h	/^	} native;$/;"	m	struct:__anon287	typeref:union:__anon287::__anon288	access:public
nattrs	src/filter.c	/^	size_t nattrs, nmatches;$/;"	m	struct:__anon235	file:	access:public
nbackref	deps/regex/regex_internal.h	/^  int nbackref; \/* The number of backreference in this dfa.  *\/$/;"	m	struct:re_dfa_t	access:public
nbkref_ents	deps/regex/regex_internal.h	/^  int nbkref_ents;$/;"	m	struct:__anon12	access:public
ncha	src/xdiff/xprepare.c	/^	chastore_t ncha;$/;"	m	struct:s_xdlclassifier	file:	access:public
nchar_classes	deps/regex/regex_internal.h	/^  int nchar_classes;$/;"	m	struct:__anon6	access:public
ncode	deps/zlib/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state	access:public
ncoll_syms	deps/regex/regex_internal.h	/^  int ncoll_syms;$/;"	m	struct:__anon6	access:public
ndist	deps/zlib/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state	access:public
need_more	deps/zlib/deflate.c	/^    need_more,      \/* block not completed, need more input or more output *\/$/;"	e	enum:__anon27	file:
need_pack	src/remote.h	/^	unsigned int need_pack;$/;"	m	struct:git_remote	access:public
needs_next	src/path.h	/^	unsigned int needs_next;$/;"	m	struct:git_path_diriter	access:public
negotiate_context_free	src/transports/auth_negotiate.c	/^static void negotiate_context_free(git_http_auth_context *c)$/;"	f	file:	signature:(git_http_auth_context *c)
negotiate_err_set	src/transports/auth_negotiate.c	/^static void negotiate_err_set($/;"	f	file:	signature:( OM_uint32 status_major, OM_uint32 status_minor, const char *message)
negotiate_fetch	include/git2/sys/transport.h	/^	int (*negotiate_fetch)($/;"	m	struct:git_transport	access:public
negotiate_init_context	src/transports/auth_negotiate.c	/^static int negotiate_init_context($/;"	f	file:	signature:( http_auth_negotiate_context *ctx, const gitno_connection_data *connection_data)
negotiate_next_token	src/transports/auth_negotiate.c	/^static int negotiate_next_token($/;"	f	file:	signature:( git_buf *buf, git_http_auth_context *c, git_cred *cred)
negotiate_oid_krb5	src/transports/auth_negotiate.c	/^static gss_OID_desc negotiate_oid_krb5 =$/;"	v	file:
negotiate_oid_spnego	src/transports/auth_negotiate.c	/^static gss_OID_desc negotiate_oid_spnego =$/;"	v	file:
negotiate_oids	src/transports/auth_negotiate.c	/^static gss_OID negotiate_oids[] =$/;"	v	file:
negotiate_set_challenge	src/transports/auth_negotiate.c	/^static int negotiate_set_challenge($/;"	f	file:	signature:( git_http_auth_context *c, const char *challenge)
negotiation_cb	tests/network/remote/push.c	/^int negotiation_cb(const git_push_update **updates, size_t len, void *payload)$/;"	f	signature:(const git_push_update **updates, size_t len, void *payload)
nelem	deps/regex/regex_internal.h	/^  int nelem;$/;"	m	struct:__anon4	access:public
nequiv_classes	deps/regex/regex_internal.h	/^  int nequiv_classes;$/;"	m	struct:__anon6	access:public
net_set_error	src/socket_stream.c	/^static void net_set_error(const char *str)$/;"	f	file:	signature:(const char *str)
network_packetsize	src/transports/smart_protocol.c	/^static int network_packetsize(size_t received, void *payload)$/;"	f	file:	signature:(size_t received, void *payload)
network_packetsize_payload	src/transports/smart_protocol.c	/^struct network_packetsize_payload$/;"	s	file:
network_packetsize_payload::callback	src/transports/smart_protocol.c	/^	git_transfer_progress_cb callback;$/;"	m	struct:network_packetsize_payload	file:	access:public
network_packetsize_payload::last_fired_bytes	src/transports/smart_protocol.c	/^	size_t last_fired_bytes;$/;"	m	struct:network_packetsize_payload	file:	access:public
network_packetsize_payload::payload	src/transports/smart_protocol.c	/^	void *payload;$/;"	m	struct:network_packetsize_payload	file:	access:public
network_packetsize_payload::stats	src/transports/smart_protocol.c	/^	git_transfer_progress *stats;$/;"	m	struct:network_packetsize_payload	file:	access:public
new_backend	tests/odb/sorting.c	/^static git_odb_backend *new_backend(size_t position)$/;"	f	file:	signature:(size_t position)
new_binary_base85	tests/diff/binary.c	/^	git_buf new_binary_base85;$/;"	m	struct:diff_data	file:	access:public
new_binary_inflatedlen	tests/diff/binary.c	/^	size_t new_binary_inflatedlen;$/;"	m	struct:diff_data	file:	access:public
new_binary_type	tests/diff/binary.c	/^	git_diff_binary_t new_binary_type;$/;"	m	struct:diff_data	file:	access:public
new_cache_object	src/pack.c	/^static git_pack_cache_entry *new_cache_object(git_rawobj *source)$/;"	f	file:	signature:(git_rawobj *source)
new_entries	src/index.c	/^	git_vector *new_entries;$/;"	m	struct:read_tree_data	file:	access:public
new_file	include/git2/diff.h	/^	git_diff_binary_file new_file; \/**< The contents of the new file. *\/$/;"	m	struct:__anon90	access:public
new_file	include/git2/diff.h	/^	git_diff_file new_file;$/;"	m	struct:__anon86	access:public
new_hunk	src/blame.c	/^static git_blame_hunk* new_hunk($/;"	f	file:	signature:( size_t start, size_t lines, size_t orig_start, const char *path)
new_id	tests/diff/binary.c	/^	git_oid new_id;$/;"	m	struct:diff_data	file:	access:public
new_iter	src/diff_generate.c	/^	git_iterator *new_iter;$/;"	m	struct:__anon297	file:	access:public
new_lineno	include/git2/diff.h	/^	int    new_lineno;   \/**< Line number in new file or -1 for deleted line *\/$/;"	m	struct:__anon93	access:public
new_lineno	src/diff_xdiff.c	/^	int old_lineno, new_lineno;$/;"	m	struct:__anon224	file:	access:public
new_lines	include/git2/diff.h	/^	int    new_lines;     \/** Number of lines in new_file *\/$/;"	m	struct:__anon91	access:public
new_oid	tests/online/push_util.h	/^	git_oid new_oid;$/;"	m	struct:__anon352	access:public
new_path	src/patch_parse.c	/^	char *old_path, *new_path;$/;"	m	struct:__anon163	file:	access:public
new_path	tests/diff/binary.c	/^	char *new_path;$/;"	m	struct:diff_data	file:	access:public
new_prefix	include/git2/diff.h	/^	const char *new_prefix;       \/**< defaults to "b" *\/$/;"	m	struct:__anon87	access:public
new_prefix	src/diff_print.c	/^	const char *new_prefix;$/;"	m	struct:__anon236	file:	access:public
new_prefix	src/patch_parse.c	/^	char *old_prefix, *new_prefix;$/;"	m	struct:__anon163	file:	access:public
new_ptr	deps/zlib/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
new_ref	tests/refs/reflog/reflog.c	/^static const char *new_ref = "refs\/heads\/test-reflog";$/;"	v	file:
new_remote_name	src/remote.c	/^	const char *new_remote_name;$/;"	m	struct:update_data	file:	access:public
new_src	src/diff.h	/^	git_iterator_type_t new_src;$/;"	m	struct:git_diff	access:public
new_start	include/git2/diff.h	/^	int    new_start;     \/** Starting line number in new_file *\/$/;"	m	struct:__anon91	access:public
new_window	src/mwindow.c	/^static git_mwindow *new_window($/;"	f	file:	signature:( git_mwindow_file *mwf, git_file fd, git_off_t size, git_off_t offset)
newest_commit	include/git2/blame.h	/^	git_oid newest_commit;$/;"	m	struct:git_blame_options	access:public
newline_anchor	deps/regex/regex_internal.h	/^  unsigned char newline_anchor;$/;"	m	struct:re_string_t	access:public
newname	tests/status/renames.c	/^	const char *newname;$/;"	m	struct:status_entry	file:	access:public
next	deps/regex/regex_internal.h	/^  struct bin_tree_storage_t *next;$/;"	m	struct:bin_tree_storage_t	typeref:struct:bin_tree_storage_t::bin_tree_storage_t	access:public
next	deps/regex/regex_internal.h	/^  struct bin_tree_t *next;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
next	deps/zlib/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state	access:public
next	deps/zlib/zlib.h	/^    unsigned char *next;$/;"	m	struct:gzFile_s	access:public
next	include/git2/sys/config.h	/^	int (*next)(git_config_entry **entry, git_config_iterator *iter);$/;"	m	struct:git_config_iterator	access:public
next	include/git2/sys/refdb_backend.h	/^	int (*next)($/;"	m	struct:git_reference_iterator	access:public
next	src/blame.h	/^	struct git_blame__entry *next;$/;"	m	struct:git_blame__entry	typeref:struct:git_blame__entry::git_blame__entry	access:public
next	src/commit_list.h	/^	struct git_commit_list *next;$/;"	m	struct:git_commit_list	typeref:struct:git_commit_list::git_commit_list	access:public
next	src/config_file.c	/^	struct cvar_t *next;$/;"	m	struct:cvar_t	typeref:struct:cvar_t::cvar_t	file:	access:public
next	src/delta.c	/^	struct index_entry *next;$/;"	m	struct:index_entry	typeref:struct:index_entry::index_entry	file:	access:public
next	src/mwindow.h	/^	struct git_mwindow *next;$/;"	m	struct:git_mwindow	typeref:struct:git_mwindow::git_mwindow	access:public
next	src/pool.c	/^	git_pool_page *next;$/;"	m	struct:git_pool_page	file:	access:public
next	src/xdiff/xdiffi.h	/^	struct s_xdchange *next;$/;"	m	struct:s_xdchange	typeref:struct:s_xdchange::s_xdchange	access:public
next	src/xdiff/xhistogram.c	/^		struct record *next;$/;"	m	struct:histindex::record	typeref:struct:histindex::record::record	file:	access:public
next	src/xdiff/xmerge.c	/^	struct s_xdmerge *next;$/;"	m	struct:s_xdmerge	typeref:struct:s_xdmerge::s_xdmerge	file:	access:public
next	src/xdiff/xpatience.c	/^		struct entry *next, *previous;$/;"	m	struct:hashmap::entry	typeref:struct:hashmap::entry::entry	file:	access:public
next	src/xdiff/xprepare.c	/^	struct s_xdlclass *next;$/;"	m	struct:s_xdlclass	typeref:struct:s_xdlclass::s_xdlclass	file:	access:public
next	src/xdiff/xtypes.h	/^	struct s_chanode *next;$/;"	m	struct:s_chanode	typeref:struct:s_chanode::s_chanode	access:public
next	src/xdiff/xtypes.h	/^	struct s_xrecord *next;$/;"	m	struct:s_xrecord	typeref:struct:s_xrecord::s_xrecord	access:public
next	tests/clar.c	/^	struct clar_error *next;$/;"	m	struct:clar_error	typeref:struct:clar_error::clar_error	file:	access:public
next	tests/filter/stream.c	/^	git_writestream *next;$/;"	m	struct:compress_stream	file:	access:public
next_component	src/tree.c	/^static bool next_component(git_buf *out, const char *in)$/;"	f	file:	signature:(git_buf *out, const char *in)
next_head	src/remote.c	/^static int next_head(const git_remote *remote, git_vector *refs,$/;"	f	file:	signature:(const git_remote *remote, git_vector *refs, git_refspec **out_spec, git_remote_head **out_head, size_t *out_i, size_t *out_j, size_t *out_k)
next_hfs_char	src/path.c	/^static int32_t next_hfs_char(const char **in, size_t *len)$/;"	f	file:	signature:(const char **in, size_t *len)
next_idx	deps/regex/regex_internal.h	/^  int next_idx;$/;"	m	struct:__anon9	access:public
next_idx	src/iterator.c	/^	size_t next_idx;$/;"	m	struct:__anon268	file:	access:public
next_idx	src/iterator.c	/^	size_t next_idx;$/;"	m	struct:__anon271	file:	access:public
next_idx	src/iterator.c	/^	size_t next_idx;$/;"	m	struct:__anon273	file:	access:public
next_in	deps/zlib/zlib.h	/^    z_const Bytef *next_in;     \/* next input byte *\/$/;"	m	struct:z_stream_s	access:public
next_name	include/git2/sys/refdb_backend.h	/^	int (*next_name)($/;"	m	struct:git_reference_iterator	access:public
next_out	deps/zlib/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s	access:public
next_ptr	deps/zlib/zutil.c	/^local int next_ptr = 0;$/;"	v
next_ptrs	src/xdiff/xhistogram.c	/^	unsigned int *next_ptrs;$/;"	m	struct:histindex	file:	access:public
next_token	src/transports/auth.h	/^	int (*next_token)(git_buf *out, git_http_auth_context *ctx, git_cred *cred);$/;"	m	struct:git_http_auth_context	access:public
next_var	src/config_file.c	/^	cvar_t* next_var;$/;"	m	struct:git_config_file_iter	file:	access:public
nexts	deps/regex/regex_internal.h	/^  int *nexts;$/;"	m	struct:re_dfa_t	access:public
nfc	tests/core/iconv.c	/^static char *nfc = "\\xC3\\x85\\x73\\x74\\x72\\xC3\\xB6\\x6D";$/;"	v	file:
nfc	tests/status/renames.c	/^static char *nfc = "\\xC3\\x85\\x73\\x74\\x72\\xC3\\xB6\\x6D";$/;"	v	file:
nfc_file	src/path.c	/^static const char *nfc_file = "\\xC3\\x85\\x73\\x74\\x72\\xC3\\xB6\\x6D.XXXXXX";$/;"	v	file:
nfd	tests/core/iconv.c	/^static char *nfd = "\\x41\\xCC\\x8A\\x73\\x74\\x72\\x6F\\xCC\\x88\\x6D";$/;"	v	file:
nfd	tests/status/renames.c	/^static char *nfd = "\\x41\\xCC\\x8A\\x73\\x74\\x72\\x6F\\xCC\\x88\\x6D";$/;"	v	file:
nfd_file	src/path.c	/^static const char *nfd_file = "\\x41\\xCC\\x8A\\x73\\x74\\x72\\x6F\\xCC\\x88\\x6D.XXXXXX";$/;"	v	file:
nfile	src/patch_generate.h	/^	git_diff_file_content nfile;$/;"	m	struct:git_patch_generated	access:public
nfiles	include/git2/diff.h	/^	uint16_t      nfiles;	   \/**< number of files in this delta *\/$/;"	m	struct:__anon86	access:public
ng_pkt	src/transports/smart_pkt.c	/^static int ng_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
nice_length	deps/zlib/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:	access:public
nice_match	deps/zlib/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state	access:public
nitem	src/diff_generate.c	/^	const git_index_entry *nitem;$/;"	m	struct:__anon297	file:	access:public
nlasts	deps/regex/regex_internal.h	/^  int nlasts; \/* The number of LASTS.  *\/$/;"	m	struct:__anon11	access:public
nlen	deps/zlib/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state	access:public
nmatches	src/filter.c	/^	size_t nattrs, nmatches;$/;"	m	struct:__anon235	file:	access:public
nmbchars	deps/regex/regex_internal.h	/^  int nmbchars;$/;"	m	struct:__anon6	access:public
no_check_cert_flags	src/transports/winhttp.c	/^static const int no_check_cert_flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID |$/;"	v	file:
no_options	examples/init.c	/^	int no_options;$/;"	m	struct:opts	file:	access:public
no_sideband	src/transports/smart_protocol.c	/^static int no_sideband(transport_smart *t, struct git_odb_writepack *writepack, gitno_buffer *buf, git_transfer_progress *stats)$/;"	f	file:	signature:(transport_smart *t, struct git_odb_writepack *writepack, gitno_buffer *buf, git_transfer_progress *stats)
no_symlinks	src/index.h	/^	unsigned int no_symlinks:1;$/;"	m	struct:git_index	access:public
nodate	src/date.c	/^static int nodate(struct tm *tm)$/;"	f	file:	signature:(struct tm *tm)
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:__anon10	access:public
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:__anon11	access:public
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:re_backref_cache_entry	access:public
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:re_fail_stack_ent_t	access:public
node_count	src/oid.c	/^	size_t node_count, size;$/;"	m	struct:git_oid_shorten	file:	access:public
node_idx	deps/regex/regex_internal.h	/^  int node_idx;$/;"	m	struct:bin_tree_t	access:public
node_index	src/oid.c	/^typedef short node_index;$/;"	t	file:
nodes	deps/regex/regex_internal.h	/^  re_node_set nodes;$/;"	m	struct:re_dfastate_t	access:public
nodes	deps/regex/regex_internal.h	/^  re_token_t *nodes;$/;"	m	struct:re_dfa_t	access:public
nodes	src/oid.c	/^	trie_node *nodes;$/;"	m	struct:git_oid_shorten	file:	access:public
nodes_alloc	deps/regex/regex_internal.h	/^  size_t nodes_alloc;$/;"	m	struct:re_dfa_t	access:public
nodes_len	deps/regex/regex_internal.h	/^  size_t nodes_len;$/;"	m	struct:re_dfa_t	access:public
non_eps_nodes	deps/regex/regex_internal.h	/^  re_node_set non_eps_nodes;$/;"	m	struct:re_dfastate_t	access:public
non_existing_tag_ref_name	tests/refs/read.c	/^static const char *non_existing_tag_ref_name = "refs\/tags\/i-do-not-exist";$/;"	v	file:
non_match	deps/regex/regex_internal.h	/^  unsigned int non_match : 1;$/;"	m	struct:__anon6	access:public
nonexistent	src/attr_file.h	/^	unsigned int nonexistent:1;$/;"	m	struct:__anon170	access:public
nonprintable	src/buf_text.h	/^	unsigned int printable, nonprintable; \/* These are just approximations! *\/$/;"	m	struct:__anon342	access:public
normal_url_char	deps/http-parser/http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
normalize_apply_options	src/stash.c	/^static void normalize_apply_options($/;"	f	file:	signature:( git_stash_apply_options *opts, const git_stash_apply_options *given_apply_opts)
normalize_checkout_options_for_apply	src/rebase.c	/^static void normalize_checkout_options_for_apply($/;"	f	file:	signature:( git_checkout_options *checkout_opts, git_rebase *rebase, git_commit *current_commit)
normalize_find_opts	src/diff_tform.c	/^static int normalize_find_opts($/;"	f	file:	signature:( git_diff *diff, git_diff_find_options *opts, const git_diff_find_options *given)
normalize_format_options	src/describe.c	/^static int normalize_format_options($/;"	f	file:	signature:( git_describe_format_options *dst, const git_describe_format_options *src)
normalize_namespace	src/notes.c	/^static int normalize_namespace(char **out, git_repository *repo, const char *notes_ref)$/;"	f	file:	signature:(char **out, git_repository *repo, const char *notes_ref)
normalize_options	src/blame.c	/^static int normalize_options($/;"	f	file:	signature:( git_blame_options *out, const git_blame_options *in, git_repository *repo)
normalize_options	src/describe.c	/^static int normalize_options($/;"	f	file:	signature:( git_describe_options *dst, const git_describe_options *src)
not	examples/rev-parse.c	/^	int not;$/;"	m	struct:parse_state	file:	access:public
not_a_local_branch	src/branch.c	/^static int not_a_local_branch(const char *reference_name)$/;"	f	file:	signature:(const char *reference_name)
note	include/git2/notes.h	/^GIT_EXTERN(const char *) git_note_message(const git_note *note);$/;"	v
note	include/git2/notes.h	/^GIT_EXTERN(const git_oid *) git_note_id(const git_note *note);$/;"	v
note	include/git2/notes.h	/^GIT_EXTERN(const git_signature *) git_note_author(const git_note *note);$/;"	v
note	include/git2/notes.h	/^GIT_EXTERN(const git_signature *) git_note_committer(const git_note *note);$/;"	v
note	include/git2/notes.h	/^GIT_EXTERN(void) git_note_free(git_note *note);$/;"	v
note_cancel_cb	tests/notes/notes.c	/^static int note_cancel_cb($/;"	f	file:	signature:( const git_oid *blob_id, const git_oid *annotated_obj_id, void *payload)
note_error_notfound	src/notes.c	/^static int note_error_notfound(void)$/;"	f	file:	signature:(void)
note_get_default_ref	src/notes.c	/^static int note_get_default_ref(char **out, git_repository *repo)$/;"	f	file:	signature:(char **out, git_repository *repo)
note_list_cb	tests/notes/notes.c	/^static int note_list_cb($/;"	f	file:	signature:( const git_oid *blob_id, const git_oid *annotated_obj_id, void *payload)
note_lookup	src/notes.c	/^static int note_lookup($/;"	f	file:	signature:( git_note **out, git_repository *repo, git_commit *commit, git_tree *tree, const char *target)
note_new	src/notes.c	/^static int note_new($/;"	f	file:	signature:( git_note **out, git_oid *note_oid, git_commit *commit, git_blob *blob)
note_remove	src/notes.c	/^static int note_remove(git_repository *repo,$/;"	f	file:	signature:(git_repository *repo, const git_signature *author, const git_signature *committer, const char *notes_ref, git_tree *tree, const char *target, git_commit **parents)
note_sha	tests/notes/notes.c	/^	const char *note_sha;$/;"	m	struct:__anon372	file:	access:public
note_write	src/notes.c	/^static int note_write(git_oid *out,$/;"	f	file:	signature:(git_oid *out, git_repository *repo, const git_signature *author, const git_signature *committer, const char *notes_ref, const char *note, git_tree *commit_tree, const char *target, git_commit **parents, int allow_note_overwrite)
notes_ref_lookup	src/rebase.c	/^static int notes_ref_lookup(git_buf *out, git_rebase *rebase)$/;"	f	file:	signature:(git_buf *out, git_rebase *rebase)
notify_cb	include/git2/checkout.h	/^	git_checkout_notify_cb notify_cb;$/;"	m	struct:git_checkout_options	access:public
notify_cb	include/git2/diff.h	/^	git_diff_notify_cb   notify_cb;$/;"	m	struct:__anon87	access:public
notify_cb__basic	tests/diff/racediffiter.c	/^static int notify_cb__basic($/;"	f	file:	signature:( const git_diff *diff_so_far, const git_diff_delta *delta_to_add, const char *matched_pathspec, void *payload)
notify_cb__racy_rmdir	tests/diff/racediffiter.c	/^static int notify_cb__racy_rmdir($/;"	f	file:	signature:( const git_diff *diff_so_far, const git_diff_delta *delta_to_add, const char *matched_pathspec, void *payload)
notify_counter	tests/checkout/typechange.c	/^static int notify_counter($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload)
notify_counts	tests/checkout/typechange.c	/^} notify_counts;$/;"	t	typeref:struct:__anon350	file:
notify_data	tests/checkout/index.c	/^struct notify_data {$/;"	s	file:
notify_data::file	tests/checkout/index.c	/^	const char *file;$/;"	m	struct:notify_data	file:	access:public
notify_data::sha	tests/checkout/index.c	/^	const char *sha;$/;"	m	struct:notify_data	file:	access:public
notify_expected	tests/diff/diff_helpers.h	/^} notify_expected;$/;"	t	typeref:struct:__anon370
notify_flags	include/git2/checkout.h	/^	unsigned int notify_flags; \/**< see `git_checkout_notify_t` above *\/$/;"	m	struct:git_checkout_options	access:public
notify_payload	include/git2/checkout.h	/^	void *notify_payload;$/;"	m	struct:git_checkout_options	access:public
now_in_ms	tests/perf/helper__perf__timer.c	/^static uint32_t now_in_ms(void)$/;"	f	file:	signature:(void)
npaths	examples/status.c	/^	int npaths;$/;"	m	struct:opts	file:	access:public
nr	src/xdiff/xpatience.c	/^	int nr, alloc;$/;"	m	struct:hashmap	file:	access:public
nr_alloc	src/pack-objects.h	/^	size_t nr_alloc;$/;"	m	struct:git_packbuilder	access:public
nr_deltified	src/pack-objects.h	/^		nr_deltified,$/;"	m	struct:git_packbuilder	access:public
nr_frames	src/win32/w32_stack.h	/^	unsigned int nr_frames;$/;"	m	struct:__anon284	access:public
nr_objects	src/indexer.c	/^	size_t nr_objects;$/;"	m	struct:git_indexer	file:	access:public
nr_objects	src/pack-objects.h	/^	uint32_t nr_objects,$/;"	m	struct:git_packbuilder	access:public
nr_remaining	src/pack-objects.h	/^		nr_remaining;$/;"	m	struct:git_packbuilder	access:public
nr_threads	src/pack-objects.h	/^	unsigned int nr_threads; \/* nr of threads to use *\/$/;"	m	struct:git_packbuilder	access:public
nr_written	src/pack-objects.h	/^		nr_written,$/;"	m	struct:git_packbuilder	access:public
nranges	deps/regex/regex_internal.h	/^  int nranges;$/;"	m	struct:__anon6	access:public
nread	deps/http-parser/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser	access:public
nrec	src/xdiff/xdiffi.h	/^	long nrec;$/;"	m	struct:s_diffdata	access:public
nrec	src/xdiff/xtypes.h	/^	long nrec;$/;"	m	struct:s_xdfile	access:public
nreff	src/xdiff/xtypes.h	/^	long nreff;$/;"	m	struct:s_xdfile	access:public
nsize	src/xdiff/xtypes.h	/^	long isize, nsize;$/;"	m	struct:s_chastore	access:public
nsub_tops	deps/regex/regex_internal.h	/^  int nsub_tops;$/;"	m	struct:__anon12	access:public
nth_packed_object_offset	src/pack.c	/^static git_off_t nth_packed_object_offset(const struct git_pack_file *p, uint32_t n)$/;"	f	file:	signature:(const struct git_pack_file *p, uint32_t n)
nul	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon342	access:public
num	deps/regex/regex_internal.h	/^  int num;$/;"	m	struct:re_fail_stack_t	access:public
num	deps/regex/regex_internal.h	/^  int num;$/;"	m	struct:re_state_table_entry	access:public
num_bad_objects	src/pack.h	/^	uint32_t num_bad_objects;$/;"	m	struct:git_pack_file	access:public
num_lines	examples/tag.c	/^	int num_lines;$/;"	m	struct:__anon38	file:	access:public
num_lines	include/git2/diff.h	/^	int    num_lines;    \/**< Number of newline characters in content *\/$/;"	m	struct:__anon93	access:public
num_lines	src/blame.h	/^	int num_lines;$/;"	m	struct:git_blame	access:public
num_lines	src/blame.h	/^	size_t num_lines;$/;"	m	struct:git_blame__entry	access:public
num_modified_deltas	tests/diff/diff_helpers.c	/^static size_t num_modified_deltas(git_diff *diff)$/;"	f	file:	signature:(git_diff *diff)
num_objects	src/pack.h	/^	uint32_t num_objects;$/;"	m	struct:git_pack_file	access:public
num_regs	deps/regex/regex.h	/^  unsigned num_regs;$/;"	m	struct:re_registers	access:public
number_name	src/date.c	/^static const char *number_name[] = {$/;"	v	file:
obj	include/git2/object.h	/^GIT_EXTERN(const git_oid *) git_object_id(const git_object *obj);$/;"	v
obj	include/git2/object.h	/^GIT_EXTERN(git_otype) git_object_type(const git_object *obj);$/;"	v
obj	include/git2/object.h	/^GIT_EXTERN(git_repository *) git_object_owner(const git_object *obj);$/;"	v
obj	tests/checkout/icase.c	/^static git_object *obj;$/;"	v	file:
obj_hdr	src/odb_loose.c	/^} obj_hdr;$/;"	t	typeref:struct:__anon343	file:
objbuf	src/indexer.c	/^	char objbuf[8*1024];$/;"	m	struct:git_indexer	file:	access:public
object	include/git2/object.h	/^GIT_EXTERN(void) git_object_free(git_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(const git_oid *) git_odb_object_id(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(const void *) git_odb_object_data(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(git_otype) git_odb_object_type(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(size_t) git_odb_object_size(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(void) git_odb_object_free(git_odb_object *object);$/;"	v
object	src/blob.h	/^	git_object object;$/;"	m	struct:git_blob	access:public
object	src/commit.h	/^	git_object object;$/;"	m	struct:git_commit	access:public
object	src/pack-objects.c	/^	git_pobject *object;$/;"	m	struct:unpacked	file:	access:public
object	src/tag.h	/^	git_object object;$/;"	m	struct:git_tag	access:public
object	src/tree.h	/^	git_object object;$/;"	m	struct:git_tree	access:public
object_data	tests/object/raw/write.c	/^typedef struct object_data {$/;"	s	file:
object_data	tests/object/raw/write.c	/^} object_data;$/;"	t	typeref:struct:object_data	file:
object_data	tests/odb/loose_data.h	/^typedef struct object_data {$/;"	s
object_data	tests/odb/loose_data.h	/^} object_data;$/;"	t	typeref:struct:object_data
object_data::blen	tests/odb/loose_data.h	/^    size_t        blen;    \/* length of data in object store            *\/$/;"	m	struct:object_data	access:public
object_data::bytes	tests/odb/loose_data.h	/^    unsigned char *bytes;  \/* (compressed) bytes stored in object store *\/$/;"	m	struct:object_data	access:public
object_data::data	tests/odb/loose_data.h	/^    unsigned char *data;   \/* (uncompressed) object data                *\/$/;"	m	struct:object_data	access:public
object_data::dir	tests/object/raw/write.c	/^    char *dir;    \/* object store (fan-out) directory name     *\/$/;"	m	struct:object_data	file:	access:public
object_data::dir	tests/odb/loose_data.h	/^    char          *dir;    \/* object store (fan-out) directory name     *\/$/;"	m	struct:object_data	access:public
object_data::dlen	tests/odb/loose_data.h	/^    size_t        dlen;    \/* length of (uncompressed) object data      *\/$/;"	m	struct:object_data	access:public
object_data::file	tests/object/raw/write.c	/^    char *file;   \/* object store filename                     *\/$/;"	m	struct:object_data	file:	access:public
object_data::file	tests/odb/loose_data.h	/^    char          *file;   \/* object store filename                     *\/$/;"	m	struct:object_data	access:public
object_data::id	tests/object/raw/write.c	/^    char *id;     \/* object id (sha1)                          *\/$/;"	m	struct:object_data	file:	access:public
object_data::id	tests/odb/loose_data.h	/^    char          *id;     \/* object id (sha1)                          *\/$/;"	m	struct:object_data	access:public
object_data::type	tests/odb/loose_data.h	/^    char          *type;   \/* object type                               *\/$/;"	m	struct:object_data	access:public
object_database	examples/general.c	/^static void object_database(git_repository *repo, git_oid *oid)$/;"	f	file:	signature:(git_repository *repo, git_oid *oid)
object_dir_mode	src/odb_loose.c	/^	mode_t object_dir_mode;$/;"	m	struct:loose_backend	file:	access:public
object_file_mode	src/odb_loose.c	/^	mode_t object_file_mode;$/;"	m	struct:loose_backend	file:	access:public
object_file_name	src/odb_loose.c	/^static int object_file_name($/;"	f	file:	signature:( git_buf *name, const loose_backend *be, const git_oid *id)
object_from_reference	src/revparse.c	/^static int object_from_reference(git_object **object, git_reference *reference)$/;"	f	file:	signature:(git_object **object, git_reference *reference)
object_ix	src/pack-objects.h	/^	git_oidmap *object_ix;$/;"	m	struct:git_packbuilder	access:public
object_list	src/pack-objects.h	/^	git_pobject *object_list;$/;"	m	struct:git_packbuilder	access:public
object_mkdir	src/odb_loose.c	/^static int object_mkdir(const git_buf *name, const loose_backend *be)$/;"	f	file:	signature:(const git_buf *name, const loose_backend *be)
object_pool	src/pack-objects.h	/^	git_pool object_pool;$/;"	m	struct:git_packbuilder	access:public
object_zlib_level	src/odb_loose.c	/^	int object_zlib_level; \/** loose object zlib compression level. *\/$/;"	m	struct:loose_backend	file:	access:public
objects	src/indexer.c	/^	git_vector objects;$/;"	m	struct:git_indexer	file:	access:public
objects	src/odb_mempack.c	/^	git_oidmap *objects;$/;"	m	struct:memory_packer_db	file:	access:public
objects	src/repository.h	/^	git_cache objects;$/;"	m	struct:git_repository	access:public
objects_cmp	src/indexer.c	/^static int objects_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
objects_dir	src/odb_loose.c	/^	char objects_dir[GIT_FLEX_ARRAY];$/;"	m	struct:loose_backend	file:	access:public
objects_dirlen	src/odb_loose.c	/^	size_t objects_dirlen;$/;"	m	struct:loose_backend	file:	access:public
odb	include/git2/odb.h	/^GIT_EXTERN(size_t) git_odb_num_backends(git_odb *odb);$/;"	v
odb	include/git2/sys/odb_backend.h	/^	git_odb *odb;$/;"	m	struct:git_odb_backend	access:public
odb	src/indexer.c	/^	git_odb *odb;$/;"	m	struct:git_indexer	file:	access:public
odb	src/pack-objects.h	/^	git_odb *odb; \/* associated object database *\/$/;"	m	struct:git_packbuilder	access:public
odb	src/revwalk.h	/^	git_odb *odb;$/;"	m	struct:git_revwalk	access:public
odb	tests/odb/freshen.c	/^static git_odb *odb;$/;"	v	file:
odb	tests/odb/streamwrite.c	/^static git_odb *odb;$/;"	v	file:
odb_cache	src/odb.c	/^static git_cache *odb_cache(git_odb *odb)$/;"	f	file:	signature:(git_odb *odb)
odb_dir	tests/object/raw/write.c	/^static const char *odb_dir = "test-objects";$/;"	v	file:
odb_exists_1	src/odb.c	/^static int odb_exists_1($/;"	f	file:	signature:( git_odb *db, const git_oid *id, bool only_refreshed)
odb_exists_prefix_1	src/odb.c	/^static int odb_exists_prefix_1(git_oid *out, git_odb *db,$/;"	f	file:	signature:(git_oid *out, git_odb *db, const git_oid *key, size_t len, bool only_refreshed)
odb_free	src/odb.c	/^static void odb_free(git_odb *db)$/;"	f	file:	signature:(git_odb *db)
odb_freshen	src/odb.c	/^static int odb_freshen(git_odb *db, const git_oid *id)$/;"	f	file:	signature:(git_odb *db, const git_oid *id)
odb_freshen_1	src/odb.c	/^static int odb_freshen_1($/;"	f	file:	signature:( git_odb *db, const git_oid *id, bool only_refreshed)
odb_hardcoded_type	src/odb.c	/^static git_otype odb_hardcoded_type(const git_oid *id)$/;"	f	file:	signature:(const git_oid *id)
odb_obj	src/diff_tform.c	/^	git_odb_object *odb_obj;$/;"	m	struct:__anon156	file:	access:public
odb_obj	src/tree.h	/^	git_odb_object *odb_obj;$/;"	m	struct:git_tree	access:public
odb_object	src/blob.h	/^	git_odb_object *odb_object;$/;"	m	struct:git_blob	access:public
odb_object__alloc	src/odb.c	/^static git_odb_object *odb_object__alloc(const git_oid *oid, git_rawobj *source)$/;"	f	file:	signature:(const git_oid *oid, git_rawobj *source)
odb_otype_fast	src/odb.c	/^static int odb_otype_fast(git_otype *type_p, git_odb *db, const git_oid *id)$/;"	f	file:	signature:(git_otype *type_p, git_odb *db, const git_oid *id)
odb_read_1	src/odb.c	/^static int odb_read_1(git_odb_object **out, git_odb *db, const git_oid *id,$/;"	f	file:	signature:(git_odb_object **out, git_odb *db, const git_oid *id, bool only_refreshed)
odb_read_hardcoded	src/odb.c	/^static int odb_read_hardcoded(git_rawobj *raw, const git_oid *id)$/;"	f	file:	signature:(git_rawobj *raw, const git_oid *id)
odb_read_header_1	src/odb.c	/^static int odb_read_header_1($/;"	f	file:	signature:( size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id, bool only_refreshed)
odd	tests/core/dirent.c	/^static walk_data odd = {$/;"	v	file:
odd_names	tests/core/dirent.c	/^static name_data odd_names[] = {$/;"	v	file:
off	deps/http-parser/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon1	access:public
off	src/indexer.c	/^	git_off_t off;$/;"	m	struct:git_indexer	file:	access:public
offset	deps/zlib/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state	access:public
offset	include/git2/types.h	/^	int offset; \/**< timezone offset, in minutes *\/$/;"	m	struct:git_time	access:public
offset	src/date.c	/^	int offset;$/;"	m	struct:__anon300	file:	access:public
offset	src/indexer.c	/^	uint32_t offset;$/;"	m	struct:entry	file:	access:public
offset	src/mwindow.h	/^	git_off_t offset;$/;"	m	struct:git_mwindow	access:public
offset	src/netops.h	/^	size_t offset;$/;"	m	struct:gitno_buffer	access:public
offset	src/pack-objects.h	/^	git_off_t offset;$/;"	m	struct:git_pobject	access:public
offset	src/pack.h	/^	git_off_t offset;$/;"	m	struct:git_pack_entry	access:public
offset	src/pack.h	/^	git_off_t offset;$/;"	m	struct:pack_chain_elem	access:public
offset	src/sortedcache.c	/^	size_t offset;$/;"	m	struct:sortedcache_magic_key	file:	access:public
offset	tests/commit/parse.c	/^	int offset;$/;"	m	struct:__anon378	file:	access:public
offset_long	src/indexer.c	/^	uint64_t offset_long;$/;"	m	struct:entry	file:	access:public
offsets	deps/regex/regex_internal.h	/^  int *offsets;$/;"	m	struct:re_string_t	access:public
offsets_needed	deps/regex/regex_internal.h	/^  unsigned char offsets_needed;$/;"	m	struct:re_string_t	access:public
ofile	src/patch_generate.h	/^	git_diff_file_content ofile;$/;"	m	struct:git_patch_generated	access:public
ofs_delta	src/transports/smart.h	/^		ofs_delta:1,$/;"	m	struct:transport_smart_caps	access:public
oid	include/git2/net.h	/^	git_oid oid;$/;"	m	struct:git_remote_head	access:public
oid	include/git2/oid.h	/^GIT_EXTERN(char *) git_oid_tostr_s(const git_oid *oid);$/;"	v
oid	include/git2/sys/index.h	/^	git_oid oid[3];$/;"	m	struct:git_index_reuc_entry	access:public
oid	src/attr_file.h	/^		git_oid oid;$/;"	m	union:__anon170::__anon171	access:public
oid	src/cache.h	/^	git_oid    oid;$/;"	m	struct:__anon229	access:public
oid	src/commit_list.h	/^	git_oid oid;$/;"	m	struct:git_commit_list_node	access:public
oid	src/fetchhead.h	/^	git_oid oid;$/;"	m	struct:git_fetchhead_ref	access:public
oid	src/filter.c	/^	git_oid         oid;  \/* zero if unknown (which is likely) *\/$/;"	m	struct:git_filter_source	file:	access:public
oid	src/index.c	/^	git_oid oid;$/;"	m	struct:entry_long	file:	access:public
oid	src/index.c	/^	git_oid oid;$/;"	m	struct:entry_short	file:	access:public
oid	src/indexer.c	/^	git_oid oid;$/;"	m	struct:entry	file:	access:public
oid	src/odb_mempack.c	/^	git_oid oid;$/;"	m	struct:memobject	file:	access:public
oid	src/refdb_fs.c	/^	git_oid oid;$/;"	m	struct:packref	file:	access:public
oid	src/refs.h	/^		git_oid oid;$/;"	m	union:git_reference::__anon258	access:public
oid	src/transports/auth_negotiate.c	/^	gss_OID oid;$/;"	m	struct:__anon194	file:	access:public
oid	src/transports/smart.h	/^	git_oid oid;$/;"	m	struct:__anon186	access:public
oid	src/tree-cache.h	/^	git_oid oid;$/;"	m	struct:git_tree_cache	access:public
oid	src/tree.h	/^	const git_oid *oid;$/;"	m	struct:git_tree_entry	access:public
oid	tests/core/oidmap.c	/^	git_oid oid;$/;"	m	struct:__anon357	file:	access:public
oid	tests/online/push_util.h	/^	const git_oid *oid;$/;"	m	struct:__anon354	access:public
oid_calculations	include/git2/sys/diff.h	/^	size_t oid_calculations; \/**< Number of ID calculations *\/$/;"	m	struct:__anon60	access:public
oid_cur	src/reflog.h	/^	git_oid oid_cur;$/;"	m	struct:git_reflog_entry	access:public
oid_error_invalid	src/oid.c	/^static int oid_error_invalid(const char *msg)$/;"	f	file:	signature:(const char *msg)
oid_fmt	src/global.h	/^	char oid_fmt[GIT_OID_HEXSZ+1];$/;"	m	struct:__anon225	access:public
oid_old	src/reflog.h	/^	git_oid oid_old;$/;"	m	struct:git_reflog_entry	access:public
oid_parsing	examples/general.c	/^static void oid_parsing(git_oid *oid)$/;"	f	file:	signature:(git_oid *oid)
oid_str	tests/checkout/conflict.c	/^	char oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:checkout_index_entry	file:	access:public
oid_str	tests/merge/merge_helpers.h	/^	char oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_index_entry	access:public
oid_str	tests/merge/workdir/setup.c	/^	const char **oid_str;$/;"	m	struct:annotated_commit_cb_data	file:	access:public
oidmap_item	tests/core/oidmap.c	/^} oidmap_item;$/;"	t	typeref:struct:__anon357	file:
oidmap_value_bykey	src/describe.c	/^static void *oidmap_value_bykey(git_oidmap *map, const git_oid *key)$/;"	f	file:	signature:(git_oidmap *map, const git_oid *key)
oids	src/pack.h	/^	git_oid **oids;$/;"	m	struct:git_pack_file	access:public
oids	tests/stash/foreach.c	/^	char **oids;$/;"	m	struct:callback_data	file:	access:public
oitem	src/diff_generate.c	/^	const git_index_entry *oitem;$/;"	m	struct:__anon297	file:	access:public
ok	src/push.h	/^	bool ok;$/;"	m	struct:push_status	access:public
ok_pkt	src/transports/smart_pkt.c	/^static int ok_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
old_binary_base85	tests/diff/binary.c	/^	git_buf old_binary_base85;$/;"	m	struct:diff_data	file:	access:public
old_binary_inflatedlen	tests/diff/binary.c	/^	size_t old_binary_inflatedlen;$/;"	m	struct:diff_data	file:	access:public
old_binary_type	tests/diff/binary.c	/^	git_diff_binary_t old_binary_type;$/;"	m	struct:diff_data	file:	access:public
old_entries	src/index.c	/^	git_vector *old_entries;$/;"	m	struct:read_tree_data	file:	access:public
old_file	include/git2/diff.h	/^	git_diff_binary_file old_file; \/**< The contents of the old file. *\/$/;"	m	struct:__anon90	access:public
old_file	include/git2/diff.h	/^	git_diff_file old_file;$/;"	m	struct:__anon86	access:public
old_id	tests/diff/binary.c	/^	git_oid old_id;$/;"	m	struct:diff_data	file:	access:public
old_iter	src/diff_generate.c	/^	git_iterator *old_iter;$/;"	m	struct:__anon297	file:	access:public
old_len	src/config.c	/^	size_t old_len;$/;"	m	struct:rename_data	file:	access:public
old_lineno	include/git2/diff.h	/^	int    old_lineno;   \/**< Line number in old file or -1 for added line *\/$/;"	m	struct:__anon93	access:public
old_lineno	src/diff_xdiff.c	/^	int old_lineno, new_lineno;$/;"	m	struct:__anon224	file:	access:public
old_lines	include/git2/diff.h	/^	int    old_lines;     \/** Number of lines in old_file *\/$/;"	m	struct:__anon91	access:public
old_oid	tests/online/push_util.h	/^	git_oid old_oid;$/;"	m	struct:__anon352	access:public
old_path	src/patch_parse.c	/^	char *old_path, *new_path;$/;"	m	struct:__anon163	file:	access:public
old_path	tests/diff/binary.c	/^	char *old_path;$/;"	m	struct:diff_data	file:	access:public
old_prefix	include/git2/diff.h	/^	const char *old_prefix;       \/**< defaults to "a" *\/$/;"	m	struct:__anon87	access:public
old_prefix	src/diff_print.c	/^	const char *old_prefix;$/;"	m	struct:__anon236	file:	access:public
old_prefix	src/patch_parse.c	/^	char *old_prefix, *new_prefix;$/;"	m	struct:__anon163	file:	access:public
old_remote_name	src/remote.c	/^	const char *old_remote_name;$/;"	m	struct:update_data	file:	access:public
old_src	src/diff.h	/^	git_iterator_type_t old_src;$/;"	m	struct:git_diff	access:public
old_start	include/git2/diff.h	/^	int    old_start;     \/** Starting line number in old_file *\/$/;"	m	struct:__anon91	access:public
oldest_commit	include/git2/blame.h	/^	git_oid oldest_commit;$/;"	m	struct:git_blame_options	access:public
oldname	tests/status/renames.c	/^	const char *oldname;$/;"	m	struct:status_entry	file:	access:public
on_body	deps/http-parser/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings	access:public
on_body_fill_buffer	src/transports/http.c	/^static int on_body_fill_buffer(http_parser *parser, const char *str, size_t len)$/;"	f	file:	signature:(http_parser *parser, const char *str, size_t len)
on_disk	src/index.h	/^	unsigned int on_disk:1;$/;"	m	struct:git_index	access:public
on_dup_entry	src/tree.c	/^static int on_dup_entry(void **old, void *new)$/;"	f	file:	signature:(void **old, void *new)
on_header_field	deps/http-parser/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings	access:public
on_header_field	src/transports/http.c	/^static int on_header_field(http_parser *parser, const char *str, size_t len)$/;"	f	file:	signature:(http_parser *parser, const char *str, size_t len)
on_header_ready	src/transports/http.c	/^static int on_header_ready(http_subtransport *t)$/;"	f	file:	signature:(http_subtransport *t)
on_header_value	deps/http-parser/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings	access:public
on_header_value	src/transports/http.c	/^static int on_header_value(http_parser *parser, const char *str, size_t len)$/;"	f	file:	signature:(http_parser *parser, const char *str, size_t len)
on_headers_complete	deps/http-parser/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings	access:public
on_headers_complete	src/transports/http.c	/^static int on_headers_complete(http_parser *parser)$/;"	f	file:	signature:(http_parser *parser)
on_message_begin	deps/http-parser/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings	access:public
on_message_complete	deps/http-parser/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings	access:public
on_message_complete	src/transports/http.c	/^static int on_message_complete(http_parser *parser)$/;"	f	file:	signature:(http_parser *parser)
on_url	deps/http-parser/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings	access:public
one	tests/odb/loose_data.h	/^static object_data one = {$/;"	v
one_blob_and_one_tree	tests/object/tree/duplicateentries.c	/^static void one_blob_and_one_tree(git_treebuilder *bld)$/;"	f	file:	signature:(git_treebuilder *bld)
one_bytes	tests/odb/loose_data.h	/^static unsigned char one_bytes[] = {$/;"	v
one_data	tests/object/raw/data.h	/^static unsigned char one_data[] = {$/;"	v
one_data	tests/odb/loose_data.h	/^static unsigned char one_data[] = {$/;"	v
one_entry	tests/core/dirent.c	/^static int one_entry(void *state, git_buf *path)$/;"	f	file:	signature:(void *state, git_buf *path)
one_id	tests/object/raw/data.h	/^static char *one_id = "8b137891791fe96927ad78e64b0aad7bded08bdc";$/;"	v
one_obj	tests/object/raw/data.h	/^static git_rawobj one_obj = {$/;"	v
one_to_two	src/checkout.c	/^		one_to_two:1,$/;"	m	struct:__anon216	file:	access:public
only_follow_first_parent	include/git2/describe.h	/^	int only_follow_first_parent;$/;"	m	struct:git_describe_options	access:public
onto_id	src/rebase.c	/^	git_oid onto_id;$/;"	m	struct:git_rebase	file:	access:public
onto_name	src/rebase.c	/^	char *onto_name;$/;"	m	struct:git_rebase	file:	access:public
oom	src/common.h	/^	unsigned int oom : 1;$/;"	m	struct:__anon257	access:public
op	deps/zlib/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon31	access:public
opaque	deps/zlib/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s	access:public
open	examples/network/index-pack.c	12;"	d	file:
open	include/git2/sys/config.h	/^	int (*open)(struct git_config_backend *, git_config_level_t level);$/;"	m	struct:git_config_backend	access:public
open	src/checkout.c	/^	int open;$/;"	m	struct:checkout_stream	file:	access:public
open_algorithm_provider	src/hash/hash_win32.h	/^	hash_win32_cng_open_algorithm_provider_fn open_algorithm_provider;$/;"	m	struct:hash_cng_prov	access:public
open_gitmodules	src/submodule.c	/^static git_config_backend *open_gitmodules($/;"	f	file:	signature:( git_repository *repo, int okay_to_create)
open_windows	src/mwindow.h	/^	unsigned int open_windows;$/;"	m	struct:git_mwindow_ctl	access:public
opendir	src/win32/dir.h	36;"	d
opened_pack	src/indexer.c	/^		opened_pack :1,$/;"	m	struct:git_indexer	file:	access:public
openssl_certificate	src/openssl_stream.c	/^int openssl_certificate(git_cert **out, git_stream *stream)$/;"	f	signature:(git_cert **out, git_stream *stream)
openssl_close	src/openssl_stream.c	/^int openssl_close(git_stream *stream)$/;"	f	signature:(git_stream *stream)
openssl_connect	src/openssl_stream.c	/^int openssl_connect(git_stream *stream)$/;"	f	signature:(git_stream *stream)
openssl_free	src/openssl_stream.c	/^void openssl_free(git_stream *stream)$/;"	f	signature:(git_stream *stream)
openssl_locking_function	src/openssl_stream.c	/^static void openssl_locking_function($/;"	f	file:	signature:( int mode, int n, const char *file, int line)
openssl_locks	src/openssl_stream.c	/^static git_mutex *openssl_locks;$/;"	v	file:
openssl_read	src/openssl_stream.c	/^ssize_t openssl_read(git_stream *stream, void *data, size_t len)$/;"	f	signature:(git_stream *stream, void *data, size_t len)
openssl_set_proxy	src/openssl_stream.c	/^static int openssl_set_proxy(git_stream *stream, const git_proxy_options *proxy_opts)$/;"	f	file:	signature:(git_stream *stream, const git_proxy_options *proxy_opts)
openssl_stream	src/openssl_stream.c	/^} openssl_stream;$/;"	t	typeref:struct:__anon276	file:
openssl_write	src/openssl_stream.c	/^ssize_t openssl_write(git_stream *stream, const char *data, size_t len, int flags)$/;"	f	signature:(git_stream *stream, const char *data, size_t len, int flags)
opportunistic_updates	src/remote.c	/^static int opportunistic_updates(const git_remote *remote, const git_remote_callbacks *callbacks,$/;"	f	file:	signature:(const git_remote *remote, const git_remote_callbacks *callbacks, git_vector *refs, const char *msg)
opr	deps/regex/regex_internal.h	/^  } opr;$/;"	m	struct:__anon15	typeref:union:__anon15::__anon16	access:public
opr	deps/regex/regex_internal.h	/^  } opr;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon8	access:public
opt	src/hashsig.c	/^	git_hashsig_option_t opt;$/;"	m	struct:git_hashsig	file:	access:public
opt_len	deps/zlib/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state	access:public
opt_subexp	deps/regex/regex_internal.h	/^  unsigned int opt_subexp : 1;$/;"	m	struct:__anon7	access:public
optimize_subexps	deps/regex/regcomp.c	/^optimize_subexps (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
optimize_utf8	deps/regex/regcomp.c	/^optimize_utf8 (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
optional_str_arg	examples/common.c	/^int optional_str_arg($/;"	f	signature:( const char **out, struct args_info *args, const char *opt, const char *def)
options	examples/add.c	/^	enum print_options options;$/;"	m	struct:print_payload	typeref:enum:print_payload::print_options	file:	access:public
options	src/blame.h	/^	git_blame_options options;$/;"	m	struct:git_blame	access:public
options	src/rebase.c	/^	git_rebase_options options;$/;"	m	struct:git_rebase	file:	access:public
options_cmp	tests/core/structinit.c	/^static void options_cmp(void *one, void *two, size_t size, const char *name)$/;"	f	file:	signature:(void *one, void *two, size_t size, const char *name)
opts	examples/blame.c	/^struct opts {$/;"	s	file:
opts	examples/cat-file.c	/^struct opts {$/;"	s	file:
opts	examples/diff.c	/^struct opts {$/;"	s	file:
opts	examples/init.c	/^struct opts {$/;"	s	file:
opts	examples/remote.c	/^struct opts {$/;"	s	file:
opts	examples/status.c	/^struct opts {$/;"	s	file:
opts	examples/tag.c	/^	tag_options *opts;$/;"	m	struct:__anon39	file:	access:public
opts	src/checkout.c	/^	git_checkout_options opts;$/;"	m	struct:__anon215	file:	access:public
opts	src/describe.c	/^	git_describe_options *opts;$/;"	m	struct:get_name_data	file:	access:public
opts	src/diff.h	/^	git_diff_options opts;$/;"	m	struct:git_diff	access:public
opts	src/patch_parse.h	/^	git_patch_options opts;$/;"	m	struct:__anon327	access:public
opts	src/status.h	/^	git_status_options opts;$/;"	m	struct:git_status_list	access:public
opts	tests/diff/blob.c	/^static git_diff_options opts;$/;"	v	file:
opts	tests/diff/tree.c	/^static git_diff_options opts;$/;"	v	file:
opts::C	examples/blame.c	/^	int C;$/;"	m	struct:opts	file:	access:public
opts::F	examples/blame.c	/^	int F;$/;"	m	struct:opts	file:	access:public
opts::M	examples/blame.c	/^	int M;$/;"	m	struct:opts	file:	access:public
opts::action	examples/cat-file.c	/^	int action;$/;"	m	struct:opts	file:	access:public
opts::argc	examples/remote.c	/^	int argc;$/;"	m	struct:opts	file:	access:public
opts::argv	examples/remote.c	/^	char **argv;$/;"	m	struct:opts	file:	access:public
opts::bare	examples/init.c	/^	int bare;$/;"	m	struct:opts	file:	access:public
opts::cache	examples/diff.c	/^	int cache;$/;"	m	struct:opts	file:	access:public
opts::cmd	examples/remote.c	/^	enum subcmd cmd;$/;"	m	struct:opts	typeref:enum:opts::subcmd	file:	access:public
opts::color	examples/diff.c	/^	int color;$/;"	m	struct:opts	file:	access:public
opts::commitspec	examples/blame.c	/^	char *commitspec;$/;"	m	struct:opts	file:	access:public
opts::diffopts	examples/diff.c	/^	git_diff_options diffopts;$/;"	m	struct:opts	file:	access:public
opts::dir	examples/cat-file.c	/^	const char *dir;$/;"	m	struct:opts	file:	access:public
opts::dir	examples/diff.c	/^	const char *dir;$/;"	m	struct:opts	file:	access:public
opts::dir	examples/init.c	/^	const char *dir;$/;"	m	struct:opts	file:	access:public
opts::end_line	examples/blame.c	/^	int end_line;$/;"	m	struct:opts	file:	access:public
opts::findopts	examples/diff.c	/^	git_diff_find_options findopts;$/;"	m	struct:opts	file:	access:public
opts::format	examples/diff.c	/^	git_diff_format_t format;$/;"	m	struct:opts	file:	access:public
opts::format	examples/status.c	/^	int format;$/;"	m	struct:opts	file:	access:public
opts::gitdir	examples/init.c	/^	const char *gitdir;$/;"	m	struct:opts	file:	access:public
opts::initial_commit	examples/init.c	/^	int initial_commit;$/;"	m	struct:opts	file:	access:public
opts::no_options	examples/init.c	/^	int no_options;$/;"	m	struct:opts	file:	access:public
opts::npaths	examples/status.c	/^	int npaths;$/;"	m	struct:opts	file:	access:public
opts::output	examples/diff.c	/^	int output;$/;"	m	struct:opts	file:	access:public
opts::path	examples/blame.c	/^	char *path;$/;"	m	struct:opts	file:	access:public
opts::pathspec	examples/status.c	/^	char *pathspec[MAX_PATHSPEC];$/;"	m	struct:opts	file:	access:public
opts::quiet	examples/init.c	/^	int quiet;$/;"	m	struct:opts	file:	access:public
opts::repeat	examples/status.c	/^	int repeat;$/;"	m	struct:opts	file:	access:public
opts::repodir	examples/status.c	/^	char *repodir;$/;"	m	struct:opts	file:	access:public
opts::rev	examples/cat-file.c	/^	const char *rev;$/;"	m	struct:opts	file:	access:public
opts::shared	examples/init.c	/^	uint32_t shared;$/;"	m	struct:opts	file:	access:public
opts::showbranch	examples/status.c	/^	int showbranch;$/;"	m	struct:opts	file:	access:public
opts::showsubmod	examples/status.c	/^	int showsubmod;$/;"	m	struct:opts	file:	access:public
opts::start_line	examples/blame.c	/^	int start_line;$/;"	m	struct:opts	file:	access:public
opts::statusopt	examples/status.c	/^	git_status_options statusopt;$/;"	m	struct:opts	file:	access:public
opts::template	examples/init.c	/^	const char *template;$/;"	m	struct:opts	file:	access:public
opts::treeish1	examples/diff.c	/^	const char *treeish1;$/;"	m	struct:opts	file:	access:public
opts::treeish2	examples/diff.c	/^	const char *treeish2;$/;"	m	struct:opts	file:	access:public
opts::verbose	examples/cat-file.c	/^	int verbose;$/;"	m	struct:opts	file:	access:public
opts::zterm	examples/status.c	/^	int zterm;$/;"	m	struct:opts	file:	access:public
opts_add_commit	examples/describe.c	/^static void opts_add_commit(describe_options *opts, const char *commit)$/;"	f	file:	signature:(describe_options *opts, const char *commit)
opts_flags	src/diff_file.h	/^	uint32_t opts_flags;$/;"	m	struct:__anon277	access:public
opts_free_baseline	src/checkout.c	/^	bool opts_free_baseline;$/;"	m	struct:__anon215	file:	access:public
opts_max_size	src/diff_file.h	/^	git_off_t opts_max_size;$/;"	m	struct:__anon277	access:public
org_indices	deps/regex/regex_internal.h	/^  int *org_indices;$/;"	m	struct:re_dfa_t	access:public
org_ptr	deps/zlib/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
orig_commit_id	include/git2/blame.h	/^	git_oid orig_commit_id;$/;"	m	struct:git_blame_hunk	access:public
orig_head_id	src/rebase.c	/^	git_oid orig_head_id;$/;"	m	struct:git_rebase	file:	access:public
orig_head_name	src/rebase.c	/^	char *orig_head_name;$/;"	m	struct:git_rebase	file:	access:public
orig_path	include/git2/blame.h	/^	const char *orig_path;$/;"	m	struct:git_blame_hunk	access:public
orig_signature	include/git2/blame.h	/^	git_signature *orig_signature;$/;"	m	struct:git_blame_hunk	access:public
orig_start_line_number	include/git2/blame.h	/^	size_t orig_start_line_number;$/;"	m	struct:git_blame_hunk	access:public
origin	include/git2/diff.h	/^	char   origin;       \/**< A git_diff_line_t value *\/$/;"	m	struct:__anon93	access:public
origin_decref	src/blame_git.c	/^static void origin_decref(git_blame__origin *o)$/;"	f	file:	signature:(git_blame__origin *o)
origin_incref	src/blame_git.c	/^static git_blame__origin *origin_incref(git_blame__origin *o)$/;"	f	file:	signature:(git_blame__origin *o)
origin_url	include/git2/repository.h	/^	const char *origin_url;$/;"	m	struct:__anon119	access:public
os	deps/zlib/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s	access:public
os	include/git2/oid.h	/^GIT_EXTERN(void) git_oid_shorten_free(git_oid_shorten *os);$/;"	v
os	tests/generate.py	/^import re, fnmatch, os, codecs, pickle$/;"	i
other_commit_id	tests/refs/races.c	/^static const char *other_commit_id = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
other_flags	src/diff_driver.c	/^	uint32_t other_flags;$/;"	m	struct:git_diff_driver	file:	access:public
other_idx	src/merge.c	/^	size_t other_idx;$/;"	m	struct:merge_diff_similarity	file:	access:public
other_refname	tests/refs/races.c	/^static const char *other_refname = "refs\/heads\/foo";$/;"	v	file:
otype_from_mode	src/tree.c	/^static git_otype otype_from_mode(git_filemode_t filemode)$/;"	f	file:	signature:(git_filemode_t filemode)
our_entry	src/merge.h	/^	git_index_entry our_entry;$/;"	m	struct:__anon325	access:public
our_label	include/git2/checkout.h	/^	const char *our_label; \/**< the name of the "our" side of conflicts *\/$/;"	m	struct:git_checkout_options	access:public
our_label	include/git2/merge.h	/^	const char *our_label;$/;"	m	struct:__anon130	access:public
our_mode	tests/merge/merge_helpers.h	/^	unsigned int our_mode;$/;"	m	struct:merge_reuc_entry	access:public
our_oid_str	tests/merge/merge_helpers.h	/^	char our_oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_reuc_entry	access:public
our_path	tests/merge/merge_helpers.h	/^	char our_path[128];$/;"	m	struct:merge_name_entry	access:public
our_status	src/merge.h	/^	git_delta_t our_status;$/;"	m	struct:__anon325	access:public
ours	include/git2/sys/index.h	/^	char *ours;$/;"	m	struct:git_index_name_entry	access:public
ours	src/checkout.c	/^	const git_index_entry *ours;$/;"	m	struct:__anon216	file:	access:public
ours	src/merge_driver.h	/^	const git_index_entry *ours;$/;"	m	struct:git_merge_driver_source	access:public
ours	tests/checkout/conflict.c	/^	char ours[64];$/;"	m	struct:checkout_name_entry	file:	access:public
ours	tests/merge/merge_helpers.h	/^	struct merge_index_with_status ours;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status	access:public
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_global(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_programdata(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_system(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_xdg(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_new(git_config **out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_open_default(git_config **out);$/;"	v
out	include/git2/index.h	/^GIT_EXTERN(int) git_index_new(git_index **out);$/;"	v
out	include/git2/odb.h	/^GIT_EXTERN(int) git_odb_new(git_odb **out);$/;"	v
out	include/git2/sys/repository.h	/^GIT_EXTERN(int) git_repository_new(git_repository **out);$/;"	v
out	include/git2/transport.h	/^GIT_EXTERN(int) git_cred_default_new(git_cred **out);$/;"	v
out_degree	src/commit_list.h	/^	unsigned short out_degree;$/;"	m	struct:git_commit_list_node	access:public
out_func	deps/zlib/zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
out_of_order_pack	tests/pack/indexer.c	/^static const unsigned char out_of_order_pack[] = {$/;"	v	file:
out_of_order_pack_len	tests/pack/indexer.c	/^static const unsigned int out_of_order_pack_len = 112;$/;"	v	file:
outf	src/xdiff/xdiff.h	/^	int (*outf)(void *, mmbuffer_t *, int);$/;"	m	struct:s_xdemitcb	access:public
output	examples/diff.c	/^	int output;$/;"	m	struct:opts	file:	access:public
output	src/diff_xdiff.h	/^	git_patch_generated_output output;$/;"	m	struct:__anon251	access:public
output	src/filter.c	/^	git_buf *output;$/;"	m	struct:proxy_stream	file:	access:public
overwrite_filemode	tests/diff/drivers.c	/^static void overwrite_filemode(const char *expected, git_buf *actual)$/;"	f	file:	signature:(const char *expected, git_buf *actual)
own_cache	src/odb.h	/^	git_cache own_cache;$/;"	m	struct:git_odb	access:public
owner	src/transports/git.c	/^	git_transport *owner;$/;"	m	struct:__anon198	file:	access:public
owner	src/transports/http.c	/^	transport_smart *owner;$/;"	m	struct:__anon176	file:	access:public
owner	src/transports/local.c	/^	git_remote *owner;$/;"	m	struct:__anon178	file:	access:public
owner	src/transports/smart.h	/^	git_remote *owner;$/;"	m	struct:__anon193	access:public
owner	src/transports/ssh.c	/^	transport_smart *owner;$/;"	m	struct:__anon183	file:	access:public
owner	src/transports/winhttp.c	/^	transport_smart *owner;$/;"	m	struct:__anon181	file:	access:public
owner	src/util.h	/^	void *owner;$/;"	m	struct:__anon199	access:public
p	src/pack.h	/^	struct git_pack_file *p;$/;"	m	struct:git_pack_entry	typeref:struct:git_pack_entry::git_pack_file	access:public
p	src/pack.h	/^	struct git_pack_file *p;$/;"	m	struct:git_packfile_stream	typeref:struct:git_packfile_stream::git_pack_file	access:public
p_access	src/unix/posix.h	58;"	d
p_access	src/win32/posix_w32.c	/^int p_access(const char* path, mode_t mode)$/;"	f	signature:(const char* path, mode_t mode)
p_chdir	src/unix/posix.h	55;"	d
p_chdir	src/win32/posix_w32.c	/^int p_chdir(const char* path)$/;"	f	signature:(const char* path)
p_chmod	src/unix/posix.h	56;"	d
p_chmod	src/win32/posix_w32.c	/^int p_chmod(const char* path, mode_t mode)$/;"	f	signature:(const char* path, mode_t mode)
p_close	src/posix.h	103;"	d
p_creat	src/posix.c	/^int p_creat(const char *path, mode_t mode)$/;"	f	signature:(const char *path, mode_t mode)
p_creat	src/win32/posix_w32.c	/^int p_creat(const char *path, mode_t mode)$/;"	f	signature:(const char *path, mode_t mode)
p_fnmatch	src/fnmatch.c	/^p_fnmatch(const char *pattern, const char *string, int flags)$/;"	f	signature:(const char *pattern, const char *string, int flags)
p_fnmatchx	src/fnmatch.c	/^p_fnmatchx(const char *pattern, const char *string, int flags, size_t recurs)$/;"	f	file:	signature:(const char *pattern, const char *string, int flags, size_t recurs)
p_freeaddrinfo	src/posix.c	/^void p_freeaddrinfo(struct addrinfo *info)$/;"	f	signature:(struct addrinfo *info)
p_freeaddrinfo	src/posix.h	157;"	d
p_fstat	src/unix/posix.h	20;"	d
p_fstat	src/win32/posix_w32.c	/^int p_fstat(int fd, struct stat *buf)$/;"	f	signature:(int fd, struct stat *buf)
p_fsync	src/unix/posix.h	43;"	d
p_fsync	src/win32/posix_w32.c	/^int p_fsync(int fd)$/;"	f	signature:(int fd)
p_ftruncate	src/unix/posix.h	59;"	d
p_ftruncate	src/win32/posix_w32.c	/^int p_ftruncate(int fd, git_off_t size)$/;"	f	signature:(int fd, git_off_t size)
p_futimes	src/unix/posix.h	/^GIT_INLINE(int) p_futimes(int f, const struct p_timeval t[2])$/;"	f	signature:(int f, const struct p_timeval t[2])
p_futimes	src/unix/posix.h	80;"	d
p_futimes	src/win32/posix_w32.c	/^int p_futimes(int fd, const struct p_timeval times[2])$/;"	f	signature:(int fd, const struct p_timeval times[2])
p_gai_strerror	src/posix.c	/^const char *p_gai_strerror(int ret)$/;"	f	signature:(int ret)
p_gai_strerror	src/posix.h	158;"	d
p_getaddrinfo	src/posix.c	/^int p_getaddrinfo($/;"	f	signature:( const char *host, const char *port, struct addrinfo *hints, struct addrinfo **info)
p_getaddrinfo	src/posix.h	156;"	d
p_getcwd	src/posix.c	/^int p_getcwd(char *buffer_out, size_t size)$/;"	f	signature:(char *buffer_out, size_t size)
p_getcwd	src/win32/posix_w32.c	/^int p_getcwd(char *buffer_out, size_t size)$/;"	f	signature:(char *buffer_out, size_t size)
p_gmtime_r	src/unix/posix.h	65;"	d
p_gmtime_r	src/win32/posix_w32.c	/^p_gmtime_r (const time_t *timer, struct tm *result)$/;"	f	signature:(const time_t *timer, struct tm *result)
p_inet_pton	src/unix/posix.h	48;"	d
p_inet_pton	src/win32/posix_w32.c	/^int p_inet_pton(int af, const char *src, void *dst)$/;"	f	signature:(int af, const char *src, void *dst)
p_link	src/unix/posix.h	40;"	d
p_link	src/win32/posix_w32.c	/^int p_link(const char *old, const char *new)$/;"	f	signature:(const char *old, const char *new)
p_localtime_r	src/unix/posix.h	64;"	d
p_localtime_r	src/win32/posix_w32.c	/^p_localtime_r (const time_t *timer, struct tm *result)$/;"	f	signature:(const time_t *timer, struct tm *result)
p_lseek	src/unix/posix.h	19;"	d
p_lseek	src/win32/posix.h	19;"	d
p_lstat	src/unix/posix.h	21;"	d
p_lstat	src/win32/posix_w32.c	/^int p_lstat(const char *filename, struct stat *buf)$/;"	f	signature:(const char *filename, struct stat *buf)
p_lstat_posixly	src/unix/posix.h	62;"	d
p_lstat_posixly	src/win32/posix_w32.c	/^int p_lstat_posixly(const char *filename, struct stat *buf)$/;"	f	signature:(const char *filename, struct stat *buf)
p_mkdir	src/unix/posix.h	42;"	d
p_mkdir	src/win32/posix_w32.c	/^int p_mkdir(const char *path, mode_t mode)$/;"	f	signature:(const char *path, mode_t mode)
p_mkstemp	src/unix/posix.h	54;"	d
p_mkstemp	src/win32/posix_w32.c	/^int p_mkstemp(char *tmp_path)$/;"	f	signature:(char *tmp_path)
p_mmap	src/posix.c	/^int p_mmap(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)$/;"	f	signature:(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)
p_mmap	src/unix/map.c	/^int p_mmap(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)$/;"	f	signature:(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)
p_mmap	src/win32/map.c	/^int p_mmap(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)$/;"	f	signature:(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)
p_munmap	src/posix.c	/^int p_munmap(git_map *map)$/;"	f	signature:(git_map *map)
p_munmap	src/unix/map.c	/^int p_munmap(git_map *map)$/;"	f	signature:(git_map *map)
p_munmap	src/win32/map.c	/^int p_munmap(git_map *map)$/;"	f	signature:(git_map *map)
p_open	src/posix.c	/^int p_open(const char *path, volatile int flags, ...)$/;"	f	signature:(const char *path, volatile int flags, ...)
p_open	src/win32/posix_w32.c	/^int p_open(const char *path, int flags, ...)$/;"	f	signature:(const char *path, int flags, ...)
p_read	src/posix.c	/^ssize_t p_read(git_file fd, void *buf, size_t cnt)$/;"	f	signature:(git_file fd, void *buf, size_t cnt)
p_readdir_r	src/posix.h	/^GIT_INLINE(int) p_readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result)$/;"	f	signature:(DIR *dirp, struct dirent *entry, struct dirent **result)
p_readdir_r	src/posix.h	133;"	d
p_readlink	src/unix/posix.h	38;"	d
p_readlink	src/win32/posix_w32.c	/^int p_readlink(const char *path, char *buf, size_t bufsiz)$/;"	f	signature:(const char *path, char *buf, size_t bufsiz)
p_realpath	src/unix/realpath.c	/^char *p_realpath(const char *pathname, char *resolved)$/;"	f	signature:(const char *pathname, char *resolved)
p_realpath	src/win32/posix_w32.c	/^char *p_realpath(const char *orig_path, char *buffer)$/;"	f	signature:(const char *orig_path, char *buffer)
p_recv	src/unix/posix.h	46;"	d
p_recv	src/win32/posix_w32.c	/^int p_recv(GIT_SOCKET socket, void *buffer, size_t length, int flags)$/;"	f	signature:(GIT_SOCKET socket, void *buffer, size_t length, int flags)
p_regcomp	src/unix/posix.h	/^GIT_INLINE(int) p_regcomp(regex_t *preg, const char *pattern, int cflags)$/;"	f	signature:(regex_t *preg, const char *pattern, int cflags)
p_regcomp	src/unix/posix.h	90;"	d
p_regcomp	src/win32/posix.h	61;"	d
p_rename	src/posix.c	/^int p_rename(const char *from, const char *to)$/;"	f	signature:(const char *from, const char *to)
p_rename	src/win32/posix_w32.c	/^int p_rename(const char *from, const char *to)$/;"	f	signature:(const char *from, const char *to)
p_rmdir	src/unix/posix.h	57;"	d
p_rmdir	src/win32/posix_w32.c	/^int p_rmdir(const char* path)$/;"	f	signature:(const char* path)
p_send	src/unix/posix.h	47;"	d
p_send	src/win32/posix_w32.c	/^int p_send(GIT_SOCKET socket, const void *buffer, size_t length, int flags)$/;"	f	signature:(GIT_SOCKET socket, const void *buffer, size_t length, int flags)
p_snprintf	src/unix/posix.h	53;"	d
p_snprintf	src/win32/posix_w32.c	/^int p_snprintf(char *buffer, size_t count, const char *format, ...)$/;"	f	signature:(char *buffer, size_t count, const char *format, ...)
p_snprintf	tests/clar.c	58;"	d	file:
p_snprintf	tests/clar.c	60;"	d	file:
p_snprintf	tests/clar.c	79;"	d	file:
p_stat	src/unix/posix.h	22;"	d
p_stat	src/win32/posix_w32.c	/^int p_stat(const char* path, struct stat* buf)$/;"	f	signature:(const char* path, struct stat* buf)
p_stat	src/win32/win32-compat.h	/^struct p_stat {$/;"	s
p_stat::st_atim	src/win32/win32-compat.h	/^	struct timespec st_atim;$/;"	m	struct:p_stat	typeref:struct:p_stat::timespec	access:public
p_stat::st_ctim	src/win32/win32-compat.h	/^	struct timespec st_ctim;$/;"	m	struct:p_stat	typeref:struct:p_stat::timespec	access:public
p_stat::st_dev	src/win32/win32-compat.h	/^	_dev_t st_dev;$/;"	m	struct:p_stat	access:public
p_stat::st_gid	src/win32/win32-compat.h	/^	short st_gid;$/;"	m	struct:p_stat	access:public
p_stat::st_ino	src/win32/win32-compat.h	/^	_ino_t st_ino;$/;"	m	struct:p_stat	access:public
p_stat::st_mode	src/win32/win32-compat.h	/^	mode_t st_mode;$/;"	m	struct:p_stat	access:public
p_stat::st_mtim	src/win32/win32-compat.h	/^	struct timespec st_mtim;$/;"	m	struct:p_stat	typeref:struct:p_stat::timespec	access:public
p_stat::st_nlink	src/win32/win32-compat.h	/^	short st_nlink;$/;"	m	struct:p_stat	access:public
p_stat::st_rdev	src/win32/win32-compat.h	/^	_dev_t st_rdev;$/;"	m	struct:p_stat	access:public
p_stat::st_size	src/win32/win32-compat.h	/^	__int64 st_size;$/;"	m	struct:p_stat	access:public
p_stat::st_uid	src/win32/win32-compat.h	/^	short st_uid;$/;"	m	struct:p_stat	access:public
p_strcasecmp	src/unix/posix.h	50;"	d
p_strncasecmp	src/unix/posix.h	51;"	d
p_strnlen	src/strnlen.h	/^GIT_INLINE(size_t) p_strnlen(const char *s, size_t maxlen) {$/;"	f	signature:(const char *s, size_t maxlen)
p_strnlen	src/strnlen.h	21;"	d
p_symlink	src/unix/posix.h	39;"	d
p_symlink	src/win32/posix_w32.c	/^int p_symlink(const char *old, const char *new)$/;"	f	signature:(const char *old, const char *new)
p_timespec	src/win32/win32-compat.h	/^struct p_timespec {$/;"	s
p_timespec::tv_nsec	src/win32/win32-compat.h	/^	long tv_nsec;$/;"	m	struct:p_timespec	access:public
p_timespec::tv_sec	src/win32/win32-compat.h	/^	time_t tv_sec;$/;"	m	struct:p_timespec	access:public
p_timeval	src/unix/posix.h	67;"	d
p_timeval	src/win32/win32-compat.h	/^struct p_timeval {$/;"	s
p_timeval::tv_sec	src/win32/win32-compat.h	/^	time_t tv_sec;$/;"	m	struct:p_timeval	access:public
p_timeval::tv_usec	src/win32/win32-compat.h	/^	suseconds_t tv_usec;$/;"	m	struct:p_timeval	access:public
p_umask	src/posix.h	104;"	d
p_unlink	src/unix/posix.h	41;"	d
p_unlink	src/win32/posix_w32.c	/^int p_unlink(const char *path)$/;"	f	signature:(const char *path)
p_utimes	src/unix/posix.h	36;"	d
p_utimes	src/win32/posix_w32.c	/^int p_utimes(const char *filename, const struct p_timeval times[2])$/;"	f	signature:(const char *filename, const struct p_timeval times[2])
p_vsnprintf	src/unix/posix.h	52;"	d
p_vsnprintf	src/win32/posix_w32.c	/^int p_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr)$/;"	f	signature:(char *buffer, size_t count, const char *format, va_list argptr)
p_write	src/posix.c	/^int p_write(git_file fd, const void *buf, size_t cnt)$/;"	f	signature:(git_file fd, const void *buf, size_t cnt)
pack	src/indexer.c	/^	struct git_pack_file *pack;$/;"	m	struct:git_indexer	typeref:struct:git_indexer::git_pack_file	file:	access:public
pack_backend	src/odb_pack.c	/^struct pack_backend {$/;"	s	file:
pack_backend::last_found	src/odb_pack.c	/^	struct git_pack_file *last_found;$/;"	m	struct:pack_backend	typeref:struct:pack_backend::git_pack_file	file:	access:public
pack_backend::pack_folder	src/odb_pack.c	/^	char *pack_folder;$/;"	m	struct:pack_backend	file:	access:public
pack_backend::packs	src/odb_pack.c	/^	git_vector packs;$/;"	m	struct:pack_backend	file:	access:public
pack_backend::parent	src/odb_pack.c	/^	git_odb_backend parent;$/;"	m	struct:pack_backend	file:	access:public
pack_backend__alloc	src/odb_pack.c	/^static int pack_backend__alloc(struct pack_backend **out, size_t initial_size)$/;"	f	file:	signature:(struct pack_backend **out, size_t initial_size)
pack_backend__exists	src/odb_pack.c	/^static int pack_backend__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(git_odb_backend *backend, const git_oid *oid)
pack_backend__exists_prefix	src/odb_pack.c	/^static int pack_backend__exists_prefix($/;"	f	file:	signature:( git_oid *out, git_odb_backend *backend, const git_oid *short_id, size_t len)
pack_backend__foreach	src/odb_pack.c	/^static int pack_backend__foreach(git_odb_backend *_backend, git_odb_foreach_cb cb, void *data)$/;"	f	file:	signature:(git_odb_backend *_backend, git_odb_foreach_cb cb, void *data)
pack_backend__free	src/odb_pack.c	/^static void pack_backend__free(git_odb_backend *_backend)$/;"	f	file:	signature:(git_odb_backend *_backend)
pack_backend__freshen	src/odb_pack.c	/^static int pack_backend__freshen($/;"	f	file:	signature:( git_odb_backend *backend, const git_oid *oid)
pack_backend__read	src/odb_pack.c	/^static int pack_backend__read($/;"	f	file:	signature:( void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)
pack_backend__read_header	src/odb_pack.c	/^static int pack_backend__read_header($/;"	f	file:	signature:( size_t *len_p, git_otype *type_p, struct git_odb_backend *backend, const git_oid *oid)
pack_backend__read_prefix	src/odb_pack.c	/^static int pack_backend__read_prefix($/;"	f	file:	signature:( git_oid *out_oid, void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *short_oid, size_t len)
pack_backend__refresh	src/odb_pack.c	/^static int pack_backend__refresh(git_odb_backend *backend_)$/;"	f	file:	signature:(git_odb_backend *backend_)
pack_backend__writepack	src/odb_pack.c	/^static int pack_backend__writepack(struct git_odb_writepack **out,$/;"	f	file:	signature:(struct git_odb_writepack **out, git_odb_backend *_backend, git_odb *odb, git_transfer_progress_cb progress_cb, void *progress_payload)
pack_backend__writepack_append	src/odb_pack.c	/^static int pack_backend__writepack_append(struct git_odb_writepack *_writepack, const void *data, size_t size, git_transfer_progress *stats)$/;"	f	file:	signature:(struct git_odb_writepack *_writepack, const void *data, size_t size, git_transfer_progress *stats)
pack_backend__writepack_commit	src/odb_pack.c	/^static int pack_backend__writepack_commit(struct git_odb_writepack *_writepack, git_transfer_progress *stats)$/;"	f	file:	signature:(struct git_odb_writepack *_writepack, git_transfer_progress *stats)
pack_backend__writepack_free	src/odb_pack.c	/^static void pack_backend__writepack_free(struct git_odb_writepack *_writepack)$/;"	f	file:	signature:(struct git_odb_writepack *_writepack)
pack_chain_elem	src/pack.h	/^struct pack_chain_elem {$/;"	s
pack_chain_elem::base_key	src/pack.h	/^	git_off_t base_key;$/;"	m	struct:pack_chain_elem	access:public
pack_chain_elem::offset	src/pack.h	/^	git_off_t offset;$/;"	m	struct:pack_chain_elem	access:public
pack_chain_elem::size	src/pack.h	/^	size_t size;$/;"	m	struct:pack_chain_elem	access:public
pack_chain_elem::type	src/pack.h	/^	git_otype type;$/;"	m	struct:pack_chain_elem	access:public
pack_dependency_chain	src/pack.c	/^static int pack_dependency_chain(git_dependency_chain *chain_out,$/;"	f	file:	signature:(git_dependency_chain *chain_out, git_pack_cache_entry **cached_out, git_off_t *cached_off, struct pack_chain_elem *small_stack, size_t *stack_sz, struct git_pack_file *p, git_off_t obj_offset)
pack_entry_find	src/odb_pack.c	/^static int pack_entry_find(struct git_pack_entry *e, struct pack_backend *backend, const git_oid *oid)$/;"	f	file:	signature:(struct git_pack_entry *e, struct pack_backend *backend, const git_oid *oid)
pack_entry_find_inner	src/odb_pack.c	/^static int pack_entry_find_inner($/;"	f	file:	signature:( struct git_pack_entry *e, struct pack_backend *backend, const git_oid *oid, struct git_pack_file *last_found)
pack_entry_find_offset	src/pack.c	/^static int pack_entry_find_offset($/;"	f	file:	signature:( git_off_t *offset_out, git_oid *found_oid, struct git_pack_file *p, const git_oid *short_oid, size_t len)
pack_entry_find_prefix	src/odb_pack.c	/^static int pack_entry_find_prefix($/;"	f	file:	signature:( struct git_pack_entry *e, struct pack_backend *backend, const git_oid *short_oid, size_t len)
pack_folder	src/odb_pack.c	/^	char *pack_folder;$/;"	m	struct:pack_backend	file:	access:public
pack_index_check	src/pack.c	/^static int pack_index_check(const char *path, struct git_pack_file *p)$/;"	f	file:	signature:(const char *path, struct git_pack_file *p)
pack_index_free	src/pack.c	/^static void pack_index_free(struct git_pack_file *p)$/;"	f	file:	signature:(struct git_pack_file *p)
pack_index_open	src/pack.c	/^static int pack_index_open(struct git_pack_file *p)$/;"	f	file:	signature:(struct git_pack_file *p)
pack_keep	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file	access:public
pack_local	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file	access:public
pack_name	src/pack.h	/^	char pack_name[GIT_FLEX_ARRAY]; \/* more *\/$/;"	m	struct:git_pack_file	access:public
pack_oid	src/pack-objects.h	/^	git_oid pack_oid; \/* hash of written pack *\/$/;"	m	struct:git_packbuilder	access:public
pack_pkt	src/transports/smart_pkt.c	/^static int pack_pkt(git_pkt **out)$/;"	f	file:	signature:(git_pkt **out)
pack_progress	include/git2/remote.h	/^	git_packbuilder_progress pack_progress;$/;"	m	struct:git_remote_callbacks	access:public
pack_progress_calls	tests/online/push_util.h	/^	int pack_progress_calls;$/;"	m	struct:__anon353	access:public
pack_version_ok	src/pack.h	26;"	d
pack_window_open	src/pack.c	/^static unsigned char *pack_window_open($/;"	f	file:	signature:( struct git_pack_file *p, git_mwindow **w_cursor, git_off_t offset, unsigned int *left)
pack_write_context	src/pack-objects.c	/^struct pack_write_context {$/;"	s	file:
pack_write_context::indexer	src/pack-objects.c	/^	git_indexer *indexer;$/;"	m	struct:pack_write_context	file:	access:public
pack_write_context::stats	src/pack-objects.c	/^	git_transfer_progress *stats;$/;"	m	struct:pack_write_context	file:	access:public
pack_writepack	src/odb_pack.c	/^struct pack_writepack {$/;"	s	file:
pack_writepack::indexer	src/odb_pack.c	/^	git_indexer *indexer;$/;"	m	struct:pack_writepack	file:	access:public
pack_writepack::parent	src/odb_pack.c	/^	struct git_odb_writepack parent;$/;"	m	struct:pack_writepack	typeref:struct:pack_writepack::git_odb_writepack	file:	access:public
packall	tests/refs/pack.c	/^static void packall(void)$/;"	f	file:	signature:(void)
packbuilder_config	src/pack-objects.c	/^static int packbuilder_config(git_packbuilder *pb)$/;"	f	file:	signature:(git_packbuilder *pb)
packed_find_peel	src/refdb_fs.c	/^static int packed_find_peel(refdb_fs_backend *backend, struct packref *ref)$/;"	f	file:	signature:(refdb_fs_backend *backend, struct packref *ref)
packed_head_name	tests/refs/read.c	/^static const char *packed_head_name = "refs\/heads\/packed";$/;"	v	file:
packed_head_name	tests/refs/rename.c	/^static const char *packed_head_name = "refs\/heads\/packed";$/;"	v	file:
packed_loadloose	src/refdb_fs.c	/^static int packed_loadloose(refdb_fs_backend *backend)$/;"	f	file:	signature:(refdb_fs_backend *backend)
packed_lookup	src/refdb_fs.c	/^static int packed_lookup($/;"	f	file:	signature:( git_reference **out, refdb_fs_backend *backend, const char *ref_name)
packed_objects	tests/odb/pack_data.h	/^static const char *packed_objects[] = {$/;"	v
packed_objects_one	tests/odb/pack_data_one.h	/^static const char *packed_objects_one[] = {$/;"	v
packed_pos	src/refdb_fs.c	/^	size_t packed_pos;$/;"	m	struct:__anon204	file:	access:public
packed_reload	src/refdb_fs.c	/^static int packed_reload(refdb_fs_backend *backend)$/;"	f	file:	signature:(refdb_fs_backend *backend)
packed_remove_loose	src/refdb_fs.c	/^static int packed_remove_loose(refdb_fs_backend *backend)$/;"	f	file:	signature:(refdb_fs_backend *backend)
packed_test_head_name	tests/refs/delete.c	/^static const char *packed_test_head_name = "refs\/heads\/packed-test";$/;"	v	file:
packed_test_head_name	tests/refs/read.c	/^static const char *packed_test_head_name = "refs\/heads\/packed-test";$/;"	v	file:
packed_test_head_name	tests/refs/rename.c	/^static const char *packed_test_head_name = "refs\/heads\/packed-test";$/;"	v	file:
packed_write	src/refdb_fs.c	/^static int packed_write(refdb_fs_backend *backend)$/;"	f	file:	signature:(refdb_fs_backend *backend)
packed_write_ref	src/refdb_fs.c	/^static int packed_write_ref(struct packref *ref, git_filebuf *file)$/;"	f	file:	signature:(struct packref *ref, git_filebuf *file)
packetsize_cb	src/transports/smart.h	/^	packetsize_cb packetsize_cb;$/;"	m	struct:__anon193	access:public
packetsize_cb	src/transports/smart.h	/^typedef int (*packetsize_cb)(size_t received, void *payload);$/;"	t
packetsize_payload	src/transports/smart.h	/^	void *packetsize_payload;$/;"	m	struct:__anon193	access:public
packfile	src/refdb_fs.h	/^	git_strmap *packfile;$/;"	m	struct:__anon221	access:public
packfile_error	src/pack.c	/^static int packfile_error(const char *message)$/;"	f	file:	signature:(const char *message)
packfile_load__cb	src/odb_pack.c	/^static int packfile_load__cb(void *data, git_buf *path)$/;"	f	file:	signature:(void *data, git_buf *path)
packfile_open	src/pack.c	/^static int packfile_open(struct git_pack_file *p)$/;"	f	file:	signature:(struct git_pack_file *p)
packfile_sort__cb	src/odb_pack.c	/^static int packfile_sort__cb(const void *a_, const void *b_)$/;"	f	file:	signature:(const void *a_, const void *b_)
packfile_time	src/refdb_fs.h	/^	time_t packfile_time;$/;"	m	struct:__anon221	access:public
packfile_unpack_compressed	src/pack.c	/^static int packfile_unpack_compressed($/;"	f	file:	signature:( git_rawobj *obj, struct git_pack_file *p, git_mwindow **w_curs, git_off_t *curpos, size_t size, git_otype type)
packfile_unpack_header1	src/pack.c	/^static int packfile_unpack_header1($/;"	f	file:	signature:( unsigned long *usedp, size_t *sizep, git_otype *type, const unsigned char *buf, unsigned long len)
packref	src/refdb_fs.c	/^struct packref {$/;"	s	file:
packref::flags	src/refdb_fs.c	/^	char flags;$/;"	m	struct:packref	file:	access:public
packref::name	src/refdb_fs.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:packref	file:	access:public
packref::oid	src/refdb_fs.c	/^	git_oid oid;$/;"	m	struct:packref	file:	access:public
packref::peel	src/refdb_fs.c	/^	git_oid peel;$/;"	m	struct:packref	file:	access:public
packref_cmp	src/refdb_fs.c	/^static int packref_cmp(const void *a_, const void *b_)$/;"	f	file:	signature:(const void *a_, const void *b_)
packs	src/odb_pack.c	/^	git_vector packs;$/;"	m	struct:pack_backend	file:	access:public
page_size	src/pool.h	/^	uint32_t page_size;  \/* size of page in bytes *\/$/;"	m	struct:__anon306	access:public
page_size	src/pool.h	/^	uint32_t page_size;$/;"	m	struct:__anon307	access:public
pages	src/pool.h	/^	git_pool_page *pages; \/* allocated pages *\/$/;"	m	struct:__anon306	access:public
paint_down_to_common	src/merge.c	/^static int paint_down_to_common($/;"	f	file:	signature:( git_commit_list **out, git_revwalk *walk, git_commit_list_node *one, git_vector *twos)
paired	src/status.h	/^	git_vector paired;$/;"	m	struct:git_status_list	access:public
param	include/git2/sys/transport.h	/^	void* param;$/;"	m	struct:git_smart_subtransport_definition	access:public
param	src/transport.c	/^	void *param;$/;"	m	struct:transport_definition	file:	access:public
param	src/win32/thread.h	/^	void *param;$/;"	m	struct:__anon285	access:public
params	src/diff_xdiff.h	/^	xpparam_t    params;$/;"	m	struct:__anon251	access:public
parent	deps/regex/regex_internal.h	/^  struct bin_tree_t *parent;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
parent	include/git2/transport.h	/^	git_cert parent;$/;"	m	struct:__anon78	access:public
parent	include/git2/transport.h	/^	git_cert parent;$/;"	m	struct:__anon79	access:public
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:__anon81	access:public
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_custom	access:public
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_interactive	access:public
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_key	access:public
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_username	access:public
parent	src/blame_git.c	/^	git_blame__origin *parent;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
parent	src/blob.c	/^	git_writestream parent;$/;"	m	struct:__anon279	file:	access:public
parent	src/config.c	/^	git_config_iterator parent;$/;"	m	struct:__anon337	file:	access:public
parent	src/config.c	/^	git_config_iterator parent;$/;"	m	struct:__anon339	file:	access:public
parent	src/config_file.c	/^	git_config_backend parent;$/;"	m	struct:__anon153	file:	access:public
parent	src/config_file.c	/^	git_config_iterator parent;$/;"	m	struct:git_config_file_iter	file:	access:public
parent	src/curl_stream.c	/^	git_stream parent;$/;"	m	struct:__anon232	file:	access:public
parent	src/filter.c	/^	git_writestream parent;$/;"	m	struct:buf_stream	file:	access:public
parent	src/filter.c	/^	git_writestream parent;$/;"	m	struct:proxy_stream	file:	access:public
parent	src/odb_loose.c	/^	git_odb_backend parent;$/;"	m	struct:loose_backend	file:	access:public
parent	src/odb_mempack.c	/^	git_odb_backend parent;$/;"	m	struct:memory_packer_db	file:	access:public
parent	src/odb_pack.c	/^	git_odb_backend parent;$/;"	m	struct:pack_backend	file:	access:public
parent	src/odb_pack.c	/^	struct git_odb_writepack parent;$/;"	m	struct:pack_writepack	typeref:struct:pack_writepack::git_odb_writepack	file:	access:public
parent	src/openssl_stream.c	/^	git_stream parent;$/;"	m	struct:__anon276	file:	access:public
parent	src/refdb_fs.c	/^	git_refdb_backend parent;$/;"	m	struct:refdb_fs_backend	file:	access:public
parent	src/refdb_fs.c	/^	git_reference_iterator parent;$/;"	m	struct:__anon204	file:	access:public
parent	src/socket_stream.h	/^	git_stream parent;$/;"	m	struct:__anon330	access:public
parent	src/stransport_stream.c	/^	git_stream parent;$/;"	m	struct:__anon298	file:	access:public
parent	src/transports/auth_negotiate.c	/^	git_http_auth_context parent;$/;"	m	struct:__anon194	file:	access:public
parent	src/transports/git.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon198	file:	access:public
parent	src/transports/git.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon197	file:	access:public
parent	src/transports/http.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon176	file:	access:public
parent	src/transports/http.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon175	file:	access:public
parent	src/transports/local.c	/^	git_transport parent;$/;"	m	struct:__anon178	file:	access:public
parent	src/transports/smart.h	/^	git_transport parent;$/;"	m	struct:__anon193	access:public
parent	src/transports/ssh.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon183	file:	access:public
parent	src/transports/ssh.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon182	file:	access:public
parent	src/transports/winhttp.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon181	file:	access:public
parent	src/transports/winhttp.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon180	file:	access:public
parent	tests/filter/stream.c	/^	git_writestream parent;$/;"	m	struct:compress_stream	file:	access:public
parent	tests/odb/backend/nonrefreshing.c	/^	git_odb_backend parent;$/;"	m	struct:fake_backend	file:	access:public
parent_id_str	tests/commit/write.c	/^static const char *parent_id_str = "8496071c1b46c854b31185ea97743be6a8774479";$/;"	v	file:
parent_ids	src/commit.h	/^	git_array_t(git_oid) parent_ids;$/;"	m	struct:git_commit	access:public
parent_len	src/path.h	/^	size_t parent_len;$/;"	m	struct:git_path_diriter	access:public
parent_path	src/iterator.c	/^	const char *parent_path;$/;"	m	struct:__anon267	file:	access:public
parent_utf8_len	src/path.h	/^	size_t parent_utf8_len;$/;"	m	struct:git_path_diriter	access:public
parents	src/annotated_commit.h	/^	git_array_oid_t parents;$/;"	m	struct:git_annotated_commit	access:public
parents	src/commit.c	/^	const git_commit **parents;$/;"	m	struct:__anon213	file:	access:public
parents	src/commit.c	/^	const git_oid **parents;$/;"	m	struct:__anon212	file:	access:public
parents	src/commit_list.h	/^	struct git_commit_list_node **parents;$/;"	m	struct:git_commit_list_node	typeref:struct:git_commit_list_node::git_commit_list_node	access:public
parse	deps/regex/regcomp.c	/^parse (re_string_t *regexp, regex_t *preg, reg_syntax_t syntax,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, reg_syntax_t syntax, reg_errcode_t *err)
parse	src/object.c	/^	int  (*parse)(void *self, git_odb_object *obj);$/;"	m	struct:__anon340	file:	access:public
parse	tests/generate.py	/^    def parse(self, contents):$/;"	m	class:Module	access:public
parse_advance_chars	src/patch_parse.c	/^static void parse_advance_chars(git_patch_parse_ctx *ctx, size_t char_cnt)$/;"	f	file:	signature:(git_patch_parse_ctx *ctx, size_t char_cnt)
parse_advance_expected	src/patch_parse.c	/^static int parse_advance_expected($/;"	f	file:	signature:( git_patch_parse_ctx *ctx, const char *expected, size_t expected_len)
parse_advance_expected_str	src/patch_parse.c	77;"	d	file:
parse_advance_line	src/patch_parse.c	/^static void parse_advance_line(git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_patch_parse_ctx *ctx)
parse_advance_nl	src/patch_parse.c	/^static int parse_advance_nl(git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_patch_parse_ctx *ctx)
parse_advance_ws	src/patch_parse.c	/^static int parse_advance_ws(git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_patch_parse_ctx *ctx)
parse_authenticate_response	src/transports/http.c	/^static int parse_authenticate_response($/;"	f	file:	signature:( git_vector *www_authenticate, http_subtransport *t, int *allowed_types)
parse_bracket_element	deps/regex/regcomp.c	/^parse_bracket_element (bracket_elem_t *elem, re_string_t *regexp,$/;"	f	file:	signature:(bracket_elem_t *elem, re_string_t *regexp, re_token_t *token, int token_len, UNUSED re_dfa_t *dfa, reg_syntax_t syntax, int accept_hyphen)
parse_bracket_exp	deps/regex/regcomp.c	/^parse_bracket_exp (re_string_t *regexp, re_dfa_t *dfa, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, re_dfa_t *dfa, re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)
parse_bracket_symbol	deps/regex/regcomp.c	/^parse_bracket_symbol (bracket_elem_t *elem, re_string_t *regexp,$/;"	f	file:	signature:(bracket_elem_t *elem, re_string_t *regexp, re_token_t *token)
parse_branch	deps/regex/regcomp.c	/^parse_branch (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_buffer	src/transports/http.c	/^	gitno_buffer parse_buffer;$/;"	m	struct:__anon176	file:	access:public
parse_buffer_data	src/transports/http.c	/^	char parse_buffer_data[NETIO_BUFSIZE];$/;"	m	struct:__anon176	file:	access:public
parse_commit	tests/commit/parse.c	/^static int parse_commit(git_commit **out, const char *buffer)$/;"	f	file:	signature:(git_commit **out, const char *buffer)
parse_ctx_contains_s	src/patch_parse.c	44;"	d	file:
parse_data	src/config_file.c	/^struct parse_data {$/;"	s	file:
parse_data::cfg_file	src/config_file.c	/^	diskfile_backend *cfg_file;$/;"	m	struct:parse_data	file:	access:public
parse_data::depth	src/config_file.c	/^	int depth;$/;"	m	struct:parse_data	file:	access:public
parse_data::level	src/config_file.c	/^	git_config_level_t level;$/;"	m	struct:parse_data	file:	access:public
parse_data::reader_idx	src/config_file.c	/^	uint32_t reader_idx;$/;"	m	struct:parse_data	file:	access:public
parse_data::values	src/config_file.c	/^	git_strmap *values;$/;"	m	struct:parse_data	file:	access:public
parse_date_basic	src/date.c	/^static int parse_date_basic(const char *date, git_time_t *timestamp, int *offset)$/;"	f	file:	signature:(const char *date, git_time_t *timestamp, int *offset)
parse_dup_op	deps/regex/regcomp.c	/^parse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,$/;"	f	file:	signature:(bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa, re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)
parse_err	src/patch_parse.c	13;"	d	file:
parse_error	src/transports/http.c	/^	int parse_error;$/;"	m	struct:__anon176	file:	access:public
parse_expression	deps/regex/regcomp.c	/^parse_expression (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_finished	src/transports/http.c	/^	unsigned parse_finished : 1;$/;"	m	struct:__anon176	file:	access:public
parse_header	src/indexer.c	/^static int parse_header(struct git_pack_header *hdr, struct git_pack_file *pack)$/;"	f	file:	signature:(struct git_pack_header *hdr, struct git_pack_file *pack)
parse_header_copyfrom	src/patch_parse.c	/^static int parse_header_copyfrom($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_copyto	src/patch_parse.c	/^static int parse_header_copyto($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_dissimilarity	src/patch_parse.c	/^static int parse_header_dissimilarity($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git	src/patch_parse.c	/^static int parse_header_git($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_deletedfilemode	src/patch_parse.c	/^static int parse_header_git_deletedfilemode($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_index	src/patch_parse.c	/^static int parse_header_git_index($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_newfilemode	src/patch_parse.c	/^static int parse_header_git_newfilemode($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_newmode	src/patch_parse.c	/^static int parse_header_git_newmode($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_newpath	src/patch_parse.c	/^static int parse_header_git_newpath($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_oldmode	src/patch_parse.c	/^static int parse_header_git_oldmode($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_git_oldpath	src/patch_parse.c	/^static int parse_header_git_oldpath($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_mode	src/patch_parse.c	/^static int parse_header_mode(uint16_t *mode, git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(uint16_t *mode, git_patch_parse_ctx *ctx)
parse_header_name	src/transports/http.c	/^	git_buf parse_header_name;$/;"	m	struct:__anon176	file:	access:public
parse_header_oid	src/patch_parse.c	/^static int parse_header_oid($/;"	f	file:	signature:( git_oid *oid, uint16_t *oid_len, git_patch_parse_ctx *ctx)
parse_header_path	src/patch_parse.c	/^static int parse_header_path(char **out, git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(char **out, git_patch_parse_ctx *ctx)
parse_header_path_buf	src/patch_parse.c	/^static int parse_header_path_buf(git_buf *path, git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_buf *path, git_patch_parse_ctx *ctx)
parse_header_percent	src/patch_parse.c	/^static int parse_header_percent(uint16_t *out, git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(uint16_t *out, git_patch_parse_ctx *ctx)
parse_header_rename	src/patch_parse.c	/^static int parse_header_rename($/;"	f	file:	signature:( char **out, git_patch_parse_ctx *ctx)
parse_header_renamefrom	src/patch_parse.c	/^static int parse_header_renamefrom($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_renameto	src/patch_parse.c	/^static int parse_header_renameto($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_similarity	src/patch_parse.c	/^static int parse_header_similarity($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_header_value	src/transports/http.c	/^	git_buf parse_header_value;$/;"	m	struct:__anon176	file:	access:public
parse_hunk_body	src/patch_parse.c	/^static int parse_hunk_body($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_hunk *hunk, git_patch_parse_ctx *ctx)
parse_hunk_header	src/patch_parse.c	/^static int parse_hunk_header($/;"	f	file:	signature:( git_patch_hunk *hunk, git_patch_parse_ctx *ctx)
parse_ignore_file	src/ignore.c	/^static int parse_ignore_file($/;"	f	file:	signature:( git_repository *repo, git_attr_file *attrs, const char *data)
parse_index	src/index.c	/^static int parse_index(git_index *index, const char *buffer, size_t buffer_size)$/;"	f	file:	signature:(git_index *index, const char *buffer, size_t buffer_size)
parse_int	src/patch_parse.c	/^static int parse_int(int *out, git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(int *out, git_patch_parse_ctx *ctx)
parse_len	src/transports/smart_pkt.c	/^static int32_t parse_len(const char *line)$/;"	f	file:	signature:(const char *line)
parse_mode	src/tree.c	/^static int parse_mode(unsigned int *modep, const char *buffer, const char **buffer_out)$/;"	f	file:	signature:(unsigned int *modep, const char *buffer, const char **buffer_out)
parse_multiline_variable	src/config_file.c	/^static int parse_multiline_variable(struct reader *reader, git_buf *value, int in_quotes)$/;"	f	file:	signature:(struct reader *reader, git_buf *value, int in_quotes)
parse_name	src/config_file.c	/^static int parse_name($/;"	f	file:	signature:( char **name, const char **value, struct reader *reader, const char *line)
parse_number	src/patch_parse.c	/^static int parse_number(git_off_t *out, git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_off_t *out, git_patch_parse_ctx *ctx)
parse_obj_type	src/revparse.c	/^static git_otype parse_obj_type(const char *str)$/;"	f	file:	signature:(const char *str)
parse_optimized_patterns	src/attr_file.c	/^static bool parse_optimized_patterns($/;"	f	file:	signature:( git_attr_fnmatch *spec, git_pool *pool, const char *pattern)
parse_options	examples/describe.c	/^static void parse_options(describe_options *opts, int argc, char **argv)$/;"	f	file:	signature:(describe_options *opts, int argc, char **argv)
parse_options	examples/log.c	/^static int parse_options($/;"	f	file:	signature:( struct log_state *s, struct log_options *opt, int argc, char **argv)
parse_options	examples/tag.c	/^static void parse_options(tag_action *action, tag_options *opts, int argc, char **argv)$/;"	f	file:	signature:(tag_action *action, tag_options *opts, int argc, char **argv)
parse_opts	examples/add.c	/^static void parse_opts(int *options, int *count, int argc, char *argv[])$/;"	f	file:	signature:(int *options, int *count, int argc, char *argv[])
parse_opts	examples/blame.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:	signature:(struct opts *o, int argc, char *argv[])
parse_opts	examples/cat-file.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:	signature:(struct opts *o, int argc, char *argv[])
parse_opts	examples/diff.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:	signature:(struct opts *o, int argc, char *argv[])
parse_opts	examples/init.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:	signature:(struct opts *o, int argc, char *argv[])
parse_opts	examples/rev-parse.c	/^static void parse_opts(struct parse_state *ps, int argc, char *argv[])$/;"	f	file:	signature:(struct parse_state *ps, int argc, char *argv[])
parse_opts	examples/status.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:	signature:(struct opts *o, int argc, char *argv[])
parse_patch_binary	src/patch_parse.c	/^static int parse_patch_binary($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_patch_binary_nodata	src/patch_parse.c	/^static int parse_patch_binary_nodata($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_patch_binary_side	src/patch_parse.c	/^static int parse_patch_binary_side($/;"	f	file:	signature:( git_diff_binary_file *binary, git_patch_parse_ctx *ctx)
parse_patch_body	src/patch_parse.c	/^static int parse_patch_body($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_patch_header	src/patch_parse.c	/^static int parse_patch_header($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_patch_hunks	src/patch_parse.c	/^static int parse_patch_hunks($/;"	f	file:	signature:( git_patch_parsed *patch, git_patch_parse_ctx *ctx)
parse_refspec	src/push.c	/^static int parse_refspec(git_push *push, push_spec **spec, const char *str)$/;"	f	file:	signature:(git_push *push, push_spec **spec, const char *str)
parse_reg_exp	deps/regex/regcomp.c	/^parse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_report	src/transports/smart_protocol.c	/^static int parse_report(transport_smart *transport, git_push *push)$/;"	f	file:	signature:(transport_smart *transport, git_push *push)
parse_revision	examples/rev-parse.c	/^static int parse_revision(struct parse_state *ps)$/;"	f	file:	signature:(struct parse_state *ps)
parse_section_header	src/config_file.c	/^static int parse_section_header(struct reader *reader, char **section_out)$/;"	f	file:	signature:(struct reader *reader, char **section_out)
parse_section_header_ext	src/config_file.c	/^static int parse_section_header_ext(struct reader *reader, const char *line, const char *base_name, char **section_name)$/;"	f	file:	signature:(struct reader *reader, const char *line, const char *base_name, char **section_name)
parse_shared	examples/init.c	/^static uint32_t parse_shared(const char *shared)$/;"	f	file:	signature:(const char *shared)
parse_state	examples/rev-parse.c	/^struct parse_state {$/;"	s	file:
parse_state::not	examples/rev-parse.c	/^	int not;$/;"	m	struct:parse_state	file:	access:public
parse_state::repo	examples/rev-parse.c	/^	git_repository *repo;$/;"	m	struct:parse_state	file:	access:public
parse_state::repodir	examples/rev-parse.c	/^	const char *repodir;$/;"	m	struct:parse_state	file:	access:public
parse_state::spec	examples/rev-parse.c	/^	const char *spec;$/;"	m	struct:parse_state	file:	access:public
parse_sub_exp	deps/regex/regcomp.c	/^parse_sub_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_subcmd	examples/remote.c	/^static void parse_subcmd($/;"	f	file:	signature:( struct opts *opt, int argc, char **argv)
parse_test_case	tests/commit/parse.c	/^} parse_test_case;$/;"	t	typeref:struct:__anon377	file:
parse_unauthorized_response	src/transports/winhttp.c	/^static int parse_unauthorized_response($/;"	f	file:	signature:( HINTERNET request, int *allowed_types, int *auth_mechanism)
parse_url_char	deps/http-parser/http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:	signature:(enum state s, const char ch)
parse_variable	src/config_file.c	/^static int parse_variable(struct reader *reader, char **var_name, char **var_value)$/;"	f	file:	signature:(struct reader *reader, char **var_name, char **var_value)
parsed	src/commit_list.h	/^			 parsed:1,$/;"	m	struct:git_commit_list_node	access:public
parsed_header	src/indexer.c	/^	unsigned int parsed_header :1,$/;"	m	struct:git_indexer	file:	access:public
parser	src/transports/http.c	/^	http_parser parser;$/;"	m	struct:__anon176	file:	access:public
parser	tests/generate.py	/^    parser = OptionParser()$/;"	v	class:TestSuite
parser_context	src/transports/http.c	/^} parser_context;$/;"	t	typeref:struct:__anon177	file:
pass	src/netops.h	/^	char *pass;$/;"	m	struct:gitno_connection_data	access:public
pass	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
pass_blame	src/blame_git.c	/^static int pass_blame(git_blame *blame, git_blame__origin *origin, uint32_t opt)$/;"	f	file:	signature:(git_blame *blame, git_blame__origin *origin, uint32_t opt)
pass_blame_to_parent	src/blame_git.c	/^static int pass_blame_to_parent($/;"	f	file:	signature:( git_blame *blame, git_blame__origin *target, git_blame__origin *parent)
pass_whole_blame	src/blame_git.c	/^static void pass_whole_blame(git_blame *blame,$/;"	f	file:	signature:(git_blame *blame, git_blame__origin *origin, git_blame__origin *porigin)
passed_refspecs	src/remote.h	/^	int passed_refspecs;$/;"	m	struct:git_remote	access:public
passing_commit_cases	tests/commit/parse.c	/^static char *passing_commit_cases[] = {$/;"	v	file:
passing_header_cases	tests/commit/parse.c	/^static parse_test_case passing_header_cases[] = {$/;"	v	file:
passing_signature_cases	tests/commit/parse.c	/^passing_signature_test_case passing_signature_cases[] = {$/;"	v
passing_signature_test_case	tests/commit/parse.c	/^} passing_signature_test_case;$/;"	t	typeref:struct:__anon378	file:
passive_refspecs	src/remote.h	/^	git_vector passive_refspecs;$/;"	m	struct:git_remote	access:public
passphrase	include/git2/transport.h	/^	char *passphrase;$/;"	m	struct:git_cred_ssh_key	access:public
password	include/git2/cred_helpers.h	/^	const char *password;$/;"	m	struct:git_cred_userpass_payload	access:public
password	include/git2/transport.h	/^	char *password;$/;"	m	struct:__anon81	access:public
patch	include/git2/patch.h	/^GIT_EXTERN(const git_diff_delta *) git_patch_get_delta(const git_patch *patch);$/;"	v
patch	include/git2/patch.h	/^GIT_EXTERN(size_t) git_patch_num_hunks(const git_patch *patch);$/;"	v
patch	include/git2/patch.h	/^GIT_EXTERN(void) git_patch_free(git_patch *patch);$/;"	v
patch	src/diff_xdiff.c	/^	git_patch_generated *patch;$/;"	m	struct:__anon224	file:	access:public
patch	src/patch_generate.c	/^	git_patch_generated patch;$/;"	m	struct:__anon160	file:	access:public
patch_error_outofrange	src/patch.c	/^static int patch_error_outofrange(const char *thing)$/;"	f	file:	signature:(const char *thing)
patch_fn	src/diff.h	/^	int (*patch_fn)(git_patch **out, git_diff *diff, size_t idx);$/;"	m	struct:git_diff	access:public
patch_from_sources	src/patch_generate.c	/^static int patch_from_sources($/;"	f	file:	signature:( git_patch **out, git_diff_file_content_src *oldsrc, git_diff_file_content_src *newsrc, const git_diff_options *opts)
patch_generated_alloc_from_diff	src/patch_generate.c	/^static int patch_generated_alloc_from_diff($/;"	f	file:	signature:( git_patch_generated **out, git_diff *diff, size_t delta_index)
patch_generated_binary_cb	src/patch_generate.c	/^static int patch_generated_binary_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_binary *binary, void *payload)
patch_generated_create	src/patch_generate.c	/^static int patch_generated_create($/;"	f	file:	signature:( git_patch_generated *patch, git_patch_generated_output *output)
patch_generated_diffable	src/patch_generate.c	/^static bool patch_generated_diffable(git_patch_generated *patch)$/;"	f	file:	signature:(git_patch_generated *patch)
patch_generated_file_cb	src/patch_generate.c	/^static int patch_generated_file_cb($/;"	f	file:	signature:( const git_diff_delta *delta, float progress, void *payload)
patch_generated_free	src/patch_generate.c	/^static void patch_generated_free(git_patch *p)$/;"	f	file:	signature:(git_patch *p)
patch_generated_from_sources	src/patch_generate.c	/^static int patch_generated_from_sources($/;"	f	file:	signature:( patch_generated_with_delta *pd, git_xdiff_output *xo, git_diff_file_content_src *oldsrc, git_diff_file_content_src *newsrc, const git_diff_options *opts)
patch_generated_init	src/patch_generate.c	/^static int patch_generated_init($/;"	f	file:	signature:( git_patch_generated *patch, git_diff *diff, size_t delta_index)
patch_generated_init_common	src/patch_generate.c	/^static void patch_generated_init_common(git_patch_generated *patch)$/;"	f	file:	signature:(git_patch_generated *patch)
patch_generated_invoke_file_callback	src/patch_generate.c	/^static int patch_generated_invoke_file_callback($/;"	f	file:	signature:( git_patch_generated *patch, git_patch_generated_output *output)
patch_generated_line_cb	src/patch_generate.c	/^static int patch_generated_line_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk_, const git_diff_line *line_, void *payload)
patch_generated_load	src/patch_generate.c	/^static int patch_generated_load(git_patch_generated *patch, git_patch_generated_output *output)$/;"	f	file:	signature:(git_patch_generated *patch, git_patch_generated_output *output)
patch_generated_normalize_options	src/patch_generate.c	/^static int patch_generated_normalize_options($/;"	f	file:	signature:( git_diff_options *out, const git_diff_options *opts)
patch_generated_update_binary	src/patch_generate.c	/^static void patch_generated_update_binary(git_patch_generated *patch)$/;"	f	file:	signature:(git_patch_generated *patch)
patch_generated_with_delta	src/patch_generate.c	/^} patch_generated_with_delta;$/;"	t	typeref:struct:__anon160	file:
patch_generated_with_delta_alloc	src/patch_generate.c	/^static int patch_generated_with_delta_alloc($/;"	f	file:	signature:( patch_generated_with_delta **out, const char **old_path, const char **new_path)
patch_image	src/apply.c	/^} patch_image;$/;"	t	typeref:struct:__anon226	file:
patch_image_free	src/apply.c	/^static void patch_image_free(patch_image *image)$/;"	f	file:	signature:(patch_image *image)
patch_image_init_fromstr	src/apply.c	/^static int patch_image_init_fromstr($/;"	f	file:	signature:( patch_image *out, const char *in, size_t in_len)
patch_line_init	src/apply.c	/^static void patch_line_init($/;"	f	file:	signature:( git_diff_line *out, const char *in, size_t in_len, size_t in_offset)
patch_no	include/git2/diff.h	/^	size_t patch_no;$/;"	m	struct:__anon100	access:public
patch_parse_ctx_free	src/patch_parse.c	/^static void patch_parse_ctx_free(git_patch_parse_ctx *ctx)$/;"	f	file:	signature:(git_patch_parse_ctx *ctx)
patch_parsed__free	src/patch_parse.c	/^static void patch_parsed__free(git_patch *p)$/;"	f	file:	signature:(git_patch *p)
patch_print_from_patchfile	tests/patch/print.c	/^void patch_print_from_patchfile(const char *data, size_t len)$/;"	f	signature:(const char *data, size_t len)
patches	src/diff_parse.h	/^	git_vector patches;$/;"	m	struct:__anon233	access:public
path	deps/regex/regex_internal.h	/^  state_array_t *path;$/;"	m	struct:__anon11	access:public
path	deps/regex/regex_internal.h	/^  state_array_t path;$/;"	m	struct:__anon10	access:public
path	examples/blame.c	/^	char *path;$/;"	m	struct:opts	file:	access:public
path	examples/network/clone.c	/^	const char *path;$/;"	m	struct:progress_data	file:	access:public
path	include/git2/diff.h	/^	const char *path;$/;"	m	struct:__anon85	access:public
path	include/git2/index.h	/^	const char *path;$/;"	m	struct:git_index_entry	access:public
path	include/git2/merge.h	/^	const char *path;$/;"	m	struct:__anon126	access:public
path	include/git2/merge.h	/^	const char *path;$/;"	m	struct:__anon131	access:public
path	include/git2/sys/index.h	/^	char *path;$/;"	m	struct:git_index_reuc_entry	access:public
path	include/git2/tree.h	/^	const char *path;$/;"	m	struct:__anon123	access:public
path	src/attr_file.h	/^	char    *path;$/;"	m	struct:__anon172	access:public
path	src/attr_file.h	/^	const char *path; \/* points into fullpath *\/$/;"	m	struct:git_attr_file_entry	access:public
path	src/blame.h	/^	char *path;$/;"	m	struct:git_blame	access:public
path	src/blame.h	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:git_blame__origin	access:public
path	src/checkout.c	/^	const char *path;$/;"	m	struct:checkout_stream	file:	access:public
path	src/describe.c	/^	char *path;$/;"	m	struct:commit_name	file:	access:public
path	src/filter.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:git_filter_list	file:	access:public
path	src/filter.c	/^	const char     *path;$/;"	m	struct:git_filter_source	file:	access:public
path	src/index.c	/^	char path[1]; \/* arbitrary length *\/$/;"	m	struct:entry_long	file:	access:public
path	src/index.c	/^	char path[1]; \/* arbitrary length *\/$/;"	m	struct:entry_short	file:	access:public
path	src/index.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:entry_internal	file:	access:public
path	src/index.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:reuc_entry_internal	file:	access:public
path	src/index.c	/^	const char *path;$/;"	m	struct:entry_srch_key	file:	access:public
path	src/iterator.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon270	file:	access:public
path	src/iterator.c	/^	git_buf path;$/;"	m	struct:__anon268	file:	access:public
path	src/netops.h	/^	char *path;$/;"	m	struct:gitno_connection_data	access:public
path	src/path.h	/^	git_buf path;$/;"	m	struct:git_path_diriter	access:public
path	src/path.h	/^	git_win32_path path;$/;"	m	struct:git_path_diriter	access:public
path	src/refdb_fs.c	/^	char *path;$/;"	m	struct:refdb_fs_backend	file:	access:public
path	src/repo_template.h	/^	const char *path;$/;"	m	struct:__anon151	access:public
path	src/sortedcache.h	/^	char         path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon310	access:public
path	src/submodule.c	/^	const char *path;$/;"	m	struct:__anon304	file:	access:public
path	src/submodule.h	/^	char *path; \/* important: may just point to "name" string *\/$/;"	m	struct:git_submodule	access:public
path	src/transports/smart.h	/^	char *path;$/;"	m	struct:git_pkt_cmd	access:public
path	src/win32/findfile.c	/^	git_win32_path path;$/;"	m	struct:__anon289	file:	access:public
path	tests/attr/attr_expect.h	/^	const char *path;$/;"	m	struct:attr_expected	access:public
path	tests/checkout/conflict.c	/^	char path[128];$/;"	m	struct:checkout_index_entry	file:	access:public
path	tests/core/dirent.c	/^	git_buf path;$/;"	m	struct:walk_data	file:	access:public
path	tests/core/sortedcache.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon359	file:	access:public
path	tests/diff/diff_helpers.h	/^	const char *path;$/;"	m	struct:__anon370	access:public
path	tests/diff/racediffiter.c	/^	const char *path;$/;"	m	struct:__anon367	file:	access:public
path	tests/index/tests.c	/^   char path[128];$/;"	m	struct:test_entry	file:	access:public
path	tests/merge/merge_helpers.h	/^	char path[128];$/;"	m	struct:merge_index_entry	access:public
path	tests/merge/merge_helpers.h	/^	char path[128];$/;"	m	struct:merge_reuc_entry	access:public
path	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
path	tests/repo/config.c	/^static git_buf path = GIT_BUF_INIT;$/;"	v	file:
path	tests/threads/refdb.c	/^	const char *path;$/;"	m	struct:th_data	file:	access:public
path	tests/win32/longpath.c	/^static git_buf path = GIT_BUF_INIT;$/;"	v	file:
path__cwd	src/win32/path_w32.c	/^GIT_INLINE(int) path__cwd(wchar_t *path, int size)$/;"	f	signature:(wchar_t *path, int size)
path__is_absolute	src/win32/path_w32.c	23;"	d	file:
path__is_dirsep	src/win32/path_w32.c	21;"	d	file:
path__is_nt_namespace	src/win32/path_w32.c	26;"	d	file:
path__is_unc	src/win32/path_w32.c	30;"	d	file:
path__skip_prefix	src/win32/path_w32.c	/^static wchar_t *path__skip_prefix(wchar_t *path)$/;"	f	file:	signature:(wchar_t *path)
path__skip_server	src/win32/path_w32.c	/^static wchar_t *path__skip_server(wchar_t *path)$/;"	f	file:	signature:(wchar_t *path)
path_dirent_data	src/path.c	/^typedef char path_dirent_data[sizeof(struct dirent) + FILENAME_MAX + 1];$/;"	t	file:
path_dirent_data	src/path.c	/^typedef struct dirent path_dirent_data;$/;"	t	typeref:struct:dirent	file:
path_found_entry	src/path.c	/^static int path_found_entry(void *payload, git_buf *path)$/;"	f	file:	signature:(void *payload, git_buf *path)
path_gitlink	src/repository.h	/^	char *path_gitlink;$/;"	m	struct:git_repository	access:public
path_is_volume	src/win32/path_w32.c	/^static bool path_is_volume(wchar_t *target, size_t target_len)$/;"	f	file:	signature:(wchar_t *target, size_t target_len)
path_len	src/iterator.c	/^	size_t path_len;$/;"	m	struct:__anon270	file:	access:public
path_len	src/iterator.c	/^	size_t path_len;$/;"	m	struct:__anon271	file:	access:public
path_lock	src/filebuf.h	/^	char *path_lock;$/;"	m	struct:git_filebuf	access:public
path_original	src/filebuf.h	/^	char *path_original;$/;"	m	struct:git_filebuf	access:public
path_repository	src/repository.h	/^	char *path_repository;$/;"	m	struct:git_repository	access:public
path_unless_empty	src/repository.c	/^static const char *path_unless_empty(git_buf *buf)$/;"	f	file:	signature:(git_buf *buf)
path_utf8	src/path.h	/^	git_buf path_utf8;$/;"	m	struct:git_path_diriter	access:public
pathlen	src/index.c	/^	size_t pathlen;$/;"	m	struct:entry_internal	file:	access:public
pathlen	src/index.c	/^	size_t pathlen;$/;"	m	struct:entry_srch_key	file:	access:public
pathlen	src/index.c	/^	size_t pathlen;$/;"	m	struct:reuc_entry_internal	file:	access:public
pathlist	src/iterator.h	/^	git_strarray pathlist;$/;"	m	struct:__anon255	access:public
pathlist	src/iterator.h	/^	git_vector pathlist;$/;"	m	struct:git_iterator	access:public
pathlist_walk_idx	src/iterator.h	/^	size_t pathlist_walk_idx;$/;"	m	struct:git_iterator	access:public
paths	include/git2/checkout.h	/^	git_strarray paths;$/;"	m	struct:git_checkout_options	access:public
paths	src/blame.h	/^	git_vector paths;$/;"	m	struct:git_blame	access:public
paths	src/patch_generate.c	/^	char paths[GIT_FLEX_ARRAY];$/;"	m	struct:__anon160	file:	access:public
paths	tests/odb/alternates.c	/^static const char *paths[] = {$/;"	v	file:
paths	tests/submodule/status.c	/^	const char **paths;$/;"	m	struct:__anon362	file:	access:public
paths_cmp	src/blame.c	/^static int paths_cmp(const void *a, const void *b) { return git__strcmp((char*)a, (char*)b); }$/;"	f	file:	signature:(const void *a, const void *b)
paths_on_dup	src/blame_git.c	/^static int paths_on_dup(void **old, void *new)$/;"	f	file:	signature:(void **old, void *new)
pathspec	examples/status.c	/^	char *pathspec[MAX_PATHSPEC];$/;"	m	struct:opts	file:	access:public
pathspec	include/git2/diff.h	/^	git_strarray       pathspec;     \/**< defaults to include all paths *\/$/;"	m	struct:__anon87	access:public
pathspec	include/git2/status.h	/^	git_strarray      pathspec;$/;"	m	struct:__anon49	access:public
pathspec	src/diff_generate.c	/^	git_vector pathspec;$/;"	m	struct:__anon296	file:	access:public
pathspec	src/index.c	/^	const git_pathspec *pathspec;$/;"	m	struct:foreach_diff_data	file:	access:public
pathspec	src/pathspec.h	/^	git_pathspec *pathspec;$/;"	m	struct:git_pathspec_match_list	access:public
pathspec	src/pathspec.h	/^	git_vector pathspec;$/;"	m	struct:git_pathspec	access:public
pathspec_build_failure_array	src/pathspec.c	/^static int pathspec_build_failure_array($/;"	f	file:	signature:( git_pathspec_string_array_t *failures, git_vector *patterns, git_bitvec *used, git_pool *pool)
pathspec_free	src/pathspec.c	/^static void pathspec_free(git_pathspec *ps)$/;"	f	file:	signature:(git_pathspec *ps)
pathspec_mark_remaining	src/pathspec.c	/^static size_t pathspec_mark_remaining($/;"	f	file:	signature:( git_bitvec *used, git_vector *patterns, struct pathspec_match_context *ctxt, size_t start, const char *path0, const char *path1)
pathspec_match_alloc	src/pathspec.c	/^static git_pathspec_match_list *pathspec_match_alloc($/;"	f	file:	signature:( git_pathspec *ps, int datatype)
pathspec_match_context	src/pathspec.c	/^struct pathspec_match_context {$/;"	s	file:
pathspec_match_context::fnmatch_flags	src/pathspec.c	/^	int fnmatch_flags;$/;"	m	struct:pathspec_match_context	file:	access:public
pathspec_match_context::strcomp	src/pathspec.c	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:pathspec_match_context	file:	access:public
pathspec_match_context::strncomp	src/pathspec.c	/^	int (*strncomp)(const char *, const char *, size_t);$/;"	m	struct:pathspec_match_context	file:	access:public
pathspec_match_context_init	src/pathspec.c	/^static void pathspec_match_context_init($/;"	f	file:	signature:( struct pathspec_match_context *ctxt, bool disable_fnmatch, bool casefold)
pathspec_match_free	src/pathspec.c	/^static void pathspec_match_free(git_pathspec_match_list *m)$/;"	f	file:	signature:(git_pathspec_match_list *m)
pathspec_match_from_iterator	src/pathspec.c	/^static int pathspec_match_from_iterator($/;"	f	file:	signature:( git_pathspec_match_list **out, git_iterator *iter, uint32_t flags, git_pathspec *ps)
pathspec_match_iter_flags	src/pathspec.c	/^static git_iterator_flag_t pathspec_match_iter_flags(uint32_t flags)$/;"	f	file:	signature:(uint32_t flags)
pathspec_match_one	src/pathspec.c	/^static int pathspec_match_one($/;"	f	file:	signature:( const git_attr_fnmatch *match, struct pathspec_match_context *ctxt, const char *path)
patience_diff	src/xdiff/xpatience.c	/^static int patience_diff(mmfile_t *file1, mmfile_t *file2,$/;"	f	file:	signature:(mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env, int line1, int count1, int line2, int count2)
pattern	examples/tag.c	/^	const char *pattern;$/;"	m	struct:__anon38	file:	access:public
pattern	include/git2/describe.h	/^	const char *pattern;$/;"	m	struct:git_describe_options	access:public
pattern	src/attr_file.h	/^	char *pattern;$/;"	m	struct:__anon166	access:public
pattern	src/refspec.h	/^		pattern :1,$/;"	m	struct:git_refspec	access:public
pattern	src/tag.c	/^	const char *pattern;$/;"	m	struct:__anon249	file:	access:public
pattern	tests/object/tag/list.c	/^	const char* pattern;$/;"	m	struct:pattern_match_t	file:	access:public
pattern_match_t	tests/object/tag/list.c	/^struct pattern_match_t$/;"	s	file:
pattern_match_t::expected_matches	tests/object/tag/list.c	/^	const size_t expected_matches;$/;"	m	struct:pattern_match_t	file:	access:public
pattern_match_t::expected_results	tests/object/tag/list.c	/^	const char* expected_results[MAX_USED_TAGS];$/;"	m	struct:pattern_match_t	file:	access:public
pattern_match_t::pattern	tests/object/tag/list.c	/^	const char* pattern;$/;"	m	struct:pattern_match_t	file:	access:public
payload	include/git2/config.h	/^	void *payload; \/**< Opaque value for the free function. Do not read or write *\/$/;"	m	struct:git_config_entry	access:public
payload	include/git2/diff.h	/^	void                *payload;$/;"	m	struct:__anon87	access:public
payload	include/git2/diff.h	/^	void *payload;$/;"	m	struct:__anon95	access:public
payload	include/git2/proxy.h	/^	void *payload;$/;"	m	struct:__anon125	access:public
payload	include/git2/remote.h	/^	void *payload;$/;"	m	struct:git_remote_callbacks	access:public
payload	include/git2/transport.h	/^	void *payload;$/;"	m	struct:git_cred_ssh_custom	access:public
payload	include/git2/transport.h	/^	void *payload;$/;"	m	struct:git_cred_ssh_interactive	access:public
payload	src/diff_print.c	/^	void *payload;$/;"	m	struct:__anon236	file:	access:public
payload	src/filter.c	/^	void **payload;$/;"	m	struct:proxy_stream	file:	access:public
payload	src/filter.c	/^	void *payload;$/;"	m	struct:__anon234	file:	access:public
payload	src/index.c	/^	void *payload;$/;"	m	struct:foreach_diff_data	file:	access:public
payload	src/patch_generate.h	/^	void *payload;$/;"	m	struct:git_patch_generated_output	access:public
payload	src/transaction.c	/^	void *payload;$/;"	m	struct:__anon208	file:	access:public
payload	src/transports/smart_protocol.c	/^	void *payload;$/;"	m	struct:network_packetsize_payload	file:	access:public
payload	src/tsort.c	/^	void *payload;$/;"	m	struct:tsort_store	file:	access:public
payload	src/util.c	/^	void *payload;$/;"	m	struct:__anon261	file:	access:public
pb	include/git2/pack.h	/^GIT_EXTERN(const git_oid *) git_packbuilder_hash(git_packbuilder *pb);$/;"	v
pb	include/git2/pack.h	/^GIT_EXTERN(size_t) git_packbuilder_object_count(git_packbuilder *pb);$/;"	v
pb	include/git2/pack.h	/^GIT_EXTERN(size_t) git_packbuilder_written(git_packbuilder *pb);$/;"	v
pb	include/git2/pack.h	/^GIT_EXTERN(void) git_packbuilder_free(git_packbuilder *pb);$/;"	v
pb	src/pack-objects.c	/^	git_packbuilder *pb;$/;"	m	struct:thread_params	file:	access:public
pb	src/pack-objects.c	/^	git_packbuilder *pb;$/;"	m	struct:tree_walk_context	file:	access:public
pb	src/push.h	/^	git_packbuilder *pb;$/;"	m	struct:git_push	access:public
pb	src/transports/smart_protocol.c	/^	git_packbuilder *pb;$/;"	m	struct:push_packbuilder_payload	file:	access:public
pb_parallelism	include/git2/remote.h	/^	unsigned int pb_parallelism;$/;"	m	struct:__anon56	access:public
pb_parallelism	src/push.h	/^	unsigned pb_parallelism;$/;"	m	struct:git_push	access:public
peak_mapped	src/mwindow.h	/^	size_t peak_mapped;$/;"	m	struct:git_mwindow_ctl	access:public
peak_open_windows	src/mwindow.h	/^	unsigned int peak_open_windows;$/;"	m	struct:git_mwindow_ctl	access:public
peek_token	deps/regex/regcomp.c	/^peek_token (re_token_t *token, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:	signature:(re_token_t *token, re_string_t *input, reg_syntax_t syntax)
peek_token_bracket	deps/regex/regcomp.c	/^peek_token_bracket (re_token_t *token, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:	signature:(re_token_t *token, re_string_t *input, reg_syntax_t syntax)
peel	src/refdb_fs.c	/^	git_oid peel;$/;"	m	struct:packref	file:	access:public
peel	src/refs.h	/^	git_oid peel;$/;"	m	struct:git_reference	access:public
peel_error	src/object.c	/^static int peel_error(int error, const git_oid *oid, git_otype type)$/;"	f	file:	signature:(int error, const git_oid *oid, git_otype type)
peel_error	src/refs.c	/^static int peel_error(int error, git_reference *ref, const char* msg)$/;"	f	file:	signature:(int error, git_reference *ref, const char* msg)
peeled	src/describe.c	/^	git_oid peeled;$/;"	m	struct:commit_name	file:	access:public
peeling_mode	src/refdb_fs.c	/^	int peeling_mode;$/;"	m	struct:refdb_fs_backend	file:	access:public
pending	deps/zlib/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state	access:public
pending_buf	deps/zlib/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state	access:public
pending_buf_size	deps/zlib/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state	access:public
pending_number	src/date.c	/^static void pending_number(struct tm *tm, int *num)$/;"	f	file:	signature:(struct tm *tm, int *num)
pending_out	deps/zlib/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state	access:public
perf	src/diff.h	/^	git_diff_perfdata perf;$/;"	m	struct:git_diff	access:public
perf__do_merge	tests/perf/helper__perf__do_merge.c	/^void perf__do_merge(const char *fixture,$/;"	f	signature:(const char *fixture, const char *test_name, const char *id_a, const char *id_b)
perf__timer	tests/perf/helper__perf__timer.h	/^struct perf__timer$/;"	s
perf__timer::sum	tests/perf/helper__perf__timer.h	/^	LARGE_INTEGER sum;$/;"	m	struct:perf__timer	access:public
perf__timer::sum	tests/perf/helper__perf__timer.h	/^	uint32_t sum;$/;"	m	struct:perf__timer	access:public
perf__timer::time_started	tests/perf/helper__perf__timer.h	/^	LARGE_INTEGER time_started;$/;"	m	struct:perf__timer	access:public
perf__timer::time_started	tests/perf/helper__perf__timer.h	/^	uint32_t time_started;$/;"	m	struct:perf__timer	access:public
perf__timer__report	tests/perf/helper__perf__timer.c	/^void perf__timer__report(perf_timer *t, const char *fmt, ...)$/;"	f	signature:(perf_timer *t, const char *fmt, ...)
perf__timer__start	tests/perf/helper__perf__timer.c	/^void perf__timer__start(perf_timer *t)$/;"	f	signature:(perf_timer *t)
perf__timer__stop	tests/perf/helper__perf__timer.c	/^void perf__timer__stop(perf_timer *t)$/;"	f	signature:(perf_timer *t)
perf_timer	tests/perf/helper__perf__timer.h	/^typedef struct perf__timer perf_timer;$/;"	t	typeref:struct:perf__timer
perfdata	src/checkout.c	/^	git_checkout_perfdata perfdata;$/;"	m	struct:__anon215	file:	access:public
perfdata	src/fileops.h	/^	struct git_futils_mkdir_perfdata perfdata;$/;"	m	struct:git_futils_mkdir_options	typeref:struct:git_futils_mkdir_options::git_futils_mkdir_perfdata	access:public
perfdata_cb	include/git2/checkout.h	/^	git_checkout_perfdata_cb perfdata_cb;$/;"	m	struct:git_checkout_options	access:public
perfdata_cb	tests/checkout/tree.c	/^void perfdata_cb(const git_checkout_perfdata *in, void *payload)$/;"	f	signature:(const git_checkout_perfdata *in, void *payload)
perfdata_payload	include/git2/checkout.h	/^	void *perfdata_payload;$/;"	m	struct:git_checkout_options	access:public
pfn_trace_cb	tests/clar.c	/^	cl_trace_cb *pfn_trace_cb;$/;"	m	struct:__anon364	file:	access:public
pfx	src/checkout.c	/^	char *pfx;$/;"	m	struct:__anon215	file:	access:public
pfxcomp	src/diff.h	/^	int (*pfxcomp)(const char *str, const char *pfx);$/;"	m	struct:git_diff	access:public
pick_dir_mode	src/repository.c	/^static mode_t pick_dir_mode(git_repository_init_options *opts)$/;"	f	file:	signature:(git_repository_init_options *opts)
pickle	tests/generate.py	/^import re, fnmatch, os, codecs, pickle$/;"	i
pkt_done_str	src/transports/smart_pkt.c	/^static const char pkt_done_str[] = "0009done\\n";$/;"	v	file:
pkt_flush_str	src/transports/smart_pkt.c	/^static const char pkt_flush_str[] = "0000";$/;"	v	file:
pkt_have_prefix	src/transports/smart_pkt.c	/^static const char pkt_have_prefix[] = "0032have ";$/;"	v	file:
pkt_want_prefix	src/transports/smart_pkt.c	/^static const char pkt_want_prefix[] = "0032want ";$/;"	v	file:
plaintext_free	src/transports/cred.c	/^static void plaintext_free(struct git_cred *cred)$/;"	f	file:	signature:(struct git_cred *cred)
plno	src/blame_git.c	/^	long plno;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
pool	src/apply.c	/^	git_pool pool;$/;"	m	struct:__anon226	file:	access:public
pool	src/attr_file.h	/^	git_pool pool;$/;"	m	struct:__anon170	access:public
pool	src/attrcache.h	/^	git_pool  pool;$/;"	m	struct:__anon309	access:public
pool	src/checkout.c	/^	git_pool pool;$/;"	m	struct:__anon215	file:	access:public
pool	src/diff.h	/^	git_pool pool;$/;"	m	struct:git_diff	access:public
pool	src/fileops.h	/^	git_pool *pool;$/;"	m	struct:git_futils_mkdir_options	access:public
pool	src/merge.h	/^	git_pool pool;$/;"	m	struct:__anon324	access:public
pool	src/pathspec.h	/^	git_pool pool;$/;"	m	struct:git_pathspec	access:public
pool	src/pathspec.h	/^	git_pool pool;$/;"	m	struct:git_pathspec_match_list	access:public
pool	src/refdb_fs.c	/^	git_pool pool;$/;"	m	struct:__anon204	file:	access:public
pool	src/sortedcache.h	/^	git_pool     pool;$/;"	m	struct:__anon310	access:public
pool	src/transaction.c	/^	git_pool pool;$/;"	m	struct:git_transaction	file:	access:public
pool_alloc	src/pool.c	/^static void *pool_alloc(git_pool *pool, uint32_t size) {$/;"	f	file:	signature:(git_pool *pool, uint32_t size)
pool_alloc	src/pool.c	/^static void *pool_alloc(git_pool *pool, uint32_t size)$/;"	f	file:	signature:(git_pool *pool, uint32_t size)
pool_alloc_page	src/pool.c	/^static void *pool_alloc_page(git_pool *pool, uint32_t size)$/;"	f	file:	signature:(git_pool *pool, uint32_t size)
pop_fail_stack	deps/regex/regexec.c	/^pop_fail_stack (struct re_fail_stack_t *fs, int *pidx, int nregs,$/;"	f	file:	signature:(struct re_fail_stack_t *fs, int *pidx, int nregs, regmatch_t *regs, re_node_set *eps_via_nodes)
populate_fetchhead	tests/fetchhead/nonetwork.c	/^static void populate_fetchhead(git_vector *out, git_repository *repo)$/;"	f	file:	signature:(git_vector *out, git_repository *repo)
port	deps/http-parser/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url	access:public
port	src/netops.h	/^	char *port;$/;"	m	struct:gitno_connection_data	access:public
port	src/socket_stream.h	/^	char *port;$/;"	m	struct:__anon330	access:public
port	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
pos	deps/zlib/zlib.h	/^    z_off64_t pos;$/;"	m	struct:gzFile_s	access:public
pos	examples/common.h	/^	int    pos;$/;"	m	struct:args_info	access:public
position	tests/odb/sorting.c	/^	size_t position;$/;"	m	struct:__anon363	file:	access:public
possible_tag	src/describe.c	/^struct possible_tag {$/;"	s	file:
possible_tag::depth	src/describe.c	/^	int depth;$/;"	m	struct:possible_tag	file:	access:public
possible_tag::flag_within	src/describe.c	/^	unsigned flag_within;$/;"	m	struct:possible_tag	file:	access:public
possible_tag::found_order	src/describe.c	/^	int found_order;$/;"	m	struct:possible_tag	file:	access:public
possible_tag::name	src/describe.c	/^	struct commit_name *name;$/;"	m	struct:possible_tag	typeref:struct:possible_tag::commit_name	file:	access:public
possible_tag_dup	src/describe.c	/^static int possible_tag_dup(struct possible_tag **out, struct possible_tag *in)$/;"	f	file:	signature:(struct possible_tag **out, struct possible_tag *in)
post_body	src/transports/winhttp.c	/^	HANDLE post_body;$/;"	m	struct:__anon180	file:	access:public
post_body_len	src/transports/winhttp.c	/^	DWORD post_body_len;$/;"	m	struct:__anon180	file:	access:public
post_verb	src/transports/http.c	/^static const char *post_verb = "POST";$/;"	v	file:
post_verb	src/transports/winhttp.c	/^static const wchar_t *post_verb = L"POST";$/;"	v	file:
postorder	deps/regex/regcomp.c	/^postorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),$/;"	f	file:	signature:(bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)), void *extra)
pqdownheap	deps/zlib/trees.c	/^local void pqdownheap(s, tree, k)$/;"	f
pqremove	deps/zlib/trees.c	432;"	d	file:
pqueue_down	src/pqueue.c	/^static void pqueue_down(git_pqueue *pq, size_t el)$/;"	f	file:	signature:(git_pqueue *pq, size_t el)
pqueue_up	src/pqueue.c	/^static void pqueue_up(git_pqueue *pq, size_t el)$/;"	f	file:	signature:(git_pqueue *pq, size_t el)
pragma_nocache	src/transports/winhttp.c	/^static const wchar_t *pragma_nocache = L"Pragma: no-cache";$/;"	v	file:
prefix	src/pathspec.h	/^	char *prefix;$/;"	m	struct:git_pathspec	access:public
prefix	src/transport.c	/^	char *prefix;$/;"	m	struct:transport_definition	file:	access:public
prefix_git	src/transports/git.c	/^static const char prefix_git[] = "git:\/\/";$/;"	v	file:
prefix_http	src/netops.c	/^static const char *prefix_http = "http:\/\/";$/;"	v	file:
prefix_https	src/netops.c	/^static const char *prefix_https = "https:\/\/";$/;"	v	file:
prefix_https	src/transports/winhttp.c	/^static const char *prefix_https = "https:\/\/";$/;"	v	file:
prefix_len	src/patch.h	/^	uint32_t prefix_len;$/;"	m	struct:__anon243	access:public
prefixcomp	src/iterator.h	/^	int (*prefixcomp)(const char *str, const char *prefix);$/;"	m	struct:git_iterator	access:public
preg	src/config_file.c	/^	const regex_t *preg;$/;"	m	struct:write_data	file:	access:public
preg_replaced	src/config_file.c	/^		preg_replaced : 1;$/;"	m	struct:write_data	file:	access:public
preload_attr_file	src/attr.c	/^static int preload_attr_file($/;"	f	file:	signature:( git_repository *repo, git_attr_session *attr_session, git_attr_file_source source, const char *base, const char *file)
preorder	deps/regex/regcomp.c	/^preorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),$/;"	f	file:	signature:(bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)), void *extra)
prepare_pack	src/pack-objects.c	/^static int prepare_pack(git_packbuilder *pb)$/;"	f	file:	signature:(git_packbuilder *pb)
prepare_walk	src/revwalk.c	/^static int prepare_walk(git_revwalk *walk)$/;"	f	file:	signature:(git_revwalk *walk)
prepare_worktree_commit_message	src/stash.c	/^static int prepare_worktree_commit_message($/;"	f	file:	signature:( git_buf* msg, const char *user_message)
prev	deps/zlib/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state	access:public
prev	src/blame.h	/^	struct git_blame__entry *prev;$/;"	m	struct:git_blame__entry	typeref:struct:git_blame__entry::git_blame__entry	access:public
prev_conflict	src/merge.c	/^	git_merge_diff *prev_conflict;$/;"	m	struct:merge_diff_df_data	file:	access:public
prev_length	deps/zlib/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state	access:public
prev_match	deps/zlib/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state	access:public
prev_path	src/merge.c	/^	const char *prev_path;$/;"	m	struct:merge_diff_df_data	file:	access:public
previous	src/blame.h	/^	struct git_blame__origin *previous;$/;"	m	struct:git_blame__origin	typeref:struct:git_blame__origin::git_blame__origin	access:public
previous	src/xdiff/xpatience.c	/^		struct entry *next, *previous;$/;"	m	struct:hashmap::entry	typeref:struct:hashmap::entry::	file:	access:public
print_cb	src/diff_print.c	/^	git_diff_line_cb print_cb;$/;"	m	struct:__anon236	file:	access:public
print_cb	tests/diff/binary.c	/^static int print_cb($/;"	f	file:	signature:( const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
print_commit	examples/log.c	/^static void print_commit(git_commit *commit)$/;"	f	file:	signature:(git_commit *commit)
print_commit	examples/tag.c	/^static void print_commit(git_commit *commit, const char *name,$/;"	f	file:	signature:(git_commit *commit, const char *name, const tag_state *state)
print_list_lines	examples/tag.c	/^static void print_list_lines(const char *message, const tag_state *state)$/;"	f	file:	signature:(const char *message, const tag_state *state)
print_long	examples/status.c	/^static void print_long(git_status_list *status)$/;"	f	file:	signature:(git_status_list *status)
print_matched_cb	examples/add.c	/^int print_matched_cb(const char *path, const char *matched_pathspec, void *payload)$/;"	f	signature:(const char *path, const char *matched_pathspec, void *payload)
print_name	examples/tag.c	/^static void print_name(const char *name)$/;"	f	file:	signature:(const char *name)
print_options	examples/add.c	/^enum print_options {$/;"	g	file:
print_payload	examples/add.c	/^struct print_payload {$/;"	s	file:
print_payload::options	examples/add.c	/^	enum print_options options;$/;"	m	struct:print_payload	typeref:enum:print_payload::print_options	file:	access:public
print_payload::repo	examples/add.c	/^	git_repository *repo;$/;"	m	struct:print_payload	file:	access:public
print_progress	examples/network/clone.c	/^static void print_progress(const progress_data *pd)$/;"	f	file:	signature:(const progress_data *pd)
print_short	examples/status.c	/^static void print_short(git_repository *repo, git_status_list *status)$/;"	f	file:	signature:(git_repository *repo, git_status_list *status)
print_signature	examples/cat-file.c	/^static void print_signature(const char *header, const git_signature *sig)$/;"	f	file:	signature:(const char *header, const git_signature *sig)
print_submod	examples/status.c	/^static int print_submod(git_submodule *sm, const char *name, void *payload)$/;"	f	file:	signature:(git_submodule *sm, const char *name, void *payload)
print_submodules	tests/submodule/submodule_helpers.c	/^static int print_submodules(git_submodule *sm, const char *name, void *p)$/;"	f	file:	signature:(git_submodule *sm, const char *name, void *p)
print_tag	examples/tag.c	/^static void print_tag(git_tag *tag, const tag_state *state)$/;"	f	file:	signature:(git_tag *tag, const tag_state *state)
print_time	examples/log.c	/^static void print_time(const git_time *intime, const char *prefix)$/;"	f	file:	signature:(const git_time *intime, const char *prefix)
print_usage	examples/add.c	/^void print_usage(void)$/;"	f	signature:(void)
print_usage	examples/describe.c	/^static void print_usage(void)$/;"	f	file:	signature:(void)
print_usage	examples/tag.c	/^static void print_usage(void)$/;"	f	file:	signature:(void)
printable	src/buf_text.h	/^	unsigned int printable, nonprintable; \/* These are just approximations! *\/$/;"	m	struct:__anon342	access:public
prio	src/describe.c	/^	unsigned prio:2; \/* annotated tag = 2, tag = 1, head = 0 *\/$/;"	m	struct:commit_name	file:	access:public
priority	src/filter.c	/^	int priority;$/;"	m	struct:__anon235	file:	access:public
priority	src/odb.c	/^	int priority;$/;"	m	struct:__anon244	file:	access:public
priv	src/xdiff/xdiff.h	/^	void *priv;$/;"	m	struct:s_xdemitcb	access:public
privatekey	include/git2/transport.h	/^	char *privatekey;$/;"	m	struct:git_cred_ssh_key	access:public
proc	src/win32/thread.h	/^	void *(*proc)(void *);$/;"	m	struct:__anon285	access:public
proceed_next_node	deps/regex/regexec.c	/^proceed_next_node (const re_match_context_t *mctx, int nregs, regmatch_t *regs,$/;"	f	file:	signature:(const re_match_context_t *mctx, int nregs, regmatch_t *regs, int *pidx, int node, re_node_set *eps_via_nodes, struct re_fail_stack_t *fs)
process_entry_path	src/notes.c	/^static int process_entry_path($/;"	f	file:	signature:( const char* entry_path, git_oid *annotated_object_id)
process_tree_to_tree_diffing	tests/diff/tree.c	/^void process_tree_to_tree_diffing($/;"	f	signature:( const char *old_commit, const char *new_commit)
progress	tests/checkout/tree.c	/^static void progress(const char *path, size_t cur, size_t tot, void *payload)$/;"	f	file:	signature:(const char *path, size_t cur, size_t tot, void *payload)
progress	tests/online/fetch.c	/^static int progress(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
progress_abort_diff	tests/diff/notify.c	/^static int progress_abort_diff($/;"	f	file:	signature:( const git_diff *diff_so_far, const char *old_path, const char *new_path, void *payload)
progress_cb	examples/network/fetch.c	/^static int progress_cb(const char *str, int len, void *data)$/;"	f	file:	signature:(const char *str, int len, void *data)
progress_cb	include/git2/checkout.h	/^	git_checkout_progress_cb progress_cb;$/;"	m	struct:git_checkout_options	access:public
progress_cb	include/git2/diff.h	/^	git_diff_progress_cb progress_cb;$/;"	m	struct:__anon87	access:public
progress_cb	include/git2/stash.h	/^	git_stash_apply_progress_cb progress_cb;$/;"	m	struct:git_stash_apply_options	access:public
progress_cb	src/indexer.c	/^	git_transfer_progress_cb progress_cb;$/;"	m	struct:git_indexer	file:	access:public
progress_cb	src/pack-objects.h	/^	git_packbuilder_progress progress_cb;$/;"	m	struct:git_packbuilder	access:public
progress_cb	src/transports/local.c	/^	git_transfer_progress_cb progress_cb;$/;"	m	struct:foreach_data	file:	access:public
progress_cb	src/transports/local.c	/^	git_transport_message_cb progress_cb;$/;"	m	struct:__anon178	file:	access:public
progress_cb	src/transports/smart.h	/^	git_transport_message_cb progress_cb;$/;"	m	struct:__anon193	access:public
progress_cb	tests/stash/apply.c	/^int progress_cb($/;"	f	signature:( git_stash_apply_progress_t progress, void *payload)
progress_cb_payload	src/pack-objects.h	/^	void *progress_cb_payload;$/;"	m	struct:git_packbuilder	access:public
progress_cond	src/pack-objects.h	/^	git_cond progress_cond;$/;"	m	struct:git_packbuilder	access:public
progress_data	examples/network/clone.c	/^typedef struct progress_data {$/;"	s	file:
progress_data	examples/network/clone.c	/^} progress_data;$/;"	t	typeref:struct:progress_data	file:
progress_data::completed_steps	examples/network/clone.c	/^	size_t completed_steps;$/;"	m	struct:progress_data	file:	access:public
progress_data::fetch_progress	examples/network/clone.c	/^	git_transfer_progress fetch_progress;$/;"	m	struct:progress_data	file:	access:public
progress_data::path	examples/network/clone.c	/^	const char *path;$/;"	m	struct:progress_data	file:	access:public
progress_data::total_steps	examples/network/clone.c	/^	size_t total_steps;$/;"	m	struct:progress_data	file:	access:public
progress_mutex	src/pack-objects.h	/^	git_mutex progress_mutex;$/;"	m	struct:git_packbuilder	access:public
progress_payload	include/git2/checkout.h	/^	void *progress_payload;$/;"	m	struct:git_checkout_options	access:public
progress_payload	include/git2/stash.h	/^	void *progress_payload;$/;"	m	struct:git_stash_apply_options	access:public
progress_payload	src/indexer.c	/^	void *progress_payload;$/;"	m	struct:git_indexer	file:	access:public
progress_payload	src/transports/local.c	/^	void *progress_payload;$/;"	m	struct:foreach_data	file:	access:public
prompt_callback	include/git2/transport.h	/^	git_cred_ssh_interactive_callback prompt_callback;$/;"	m	struct:git_cred_ssh_interactive	access:public
prov	src/hash/hash_win32.h	/^	git_hash_prov *prov;$/;"	m	struct:git_hash_ctx	access:public
prov	src/hash/hash_win32.h	/^	} prov;$/;"	m	struct:git_hash_prov	typeref:union:git_hash_prov::__anon222	access:public
proxy	src/curl_stream.c	/^	git_proxy_options proxy;$/;"	m	struct:__anon232	file:	access:public
proxy	src/transports/smart.h	/^	git_proxy_options proxy;$/;"	m	struct:__anon193	access:public
proxy_connection_data	src/transports/winhttp.c	/^	gitno_connection_data proxy_connection_data;$/;"	m	struct:__anon181	file:	access:public
proxy_cred	src/curl_stream.c	/^	git_cred *proxy_cred;$/;"	m	struct:__anon232	file:	access:public
proxy_cred	src/transports/winhttp.c	/^	git_cred *proxy_cred;$/;"	m	struct:__anon181	file:	access:public
proxy_creds	tests/online/clone.c	/^static int proxy_creds(git_cred **out, const char *url, const char *username, unsigned int allowed, void *payload)$/;"	f	file:	signature:(git_cred **out, const char *url, const char *username, unsigned int allowed, void *payload)
proxy_opts	include/git2/remote.h	/^	git_proxy_options proxy_opts;$/;"	m	struct:__anon55	access:public
proxy_opts	include/git2/remote.h	/^	git_proxy_options proxy_opts;$/;"	m	struct:__anon56	access:public
proxy_stream	src/filter.c	/^struct proxy_stream {$/;"	s	file:
proxy_stream::filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::input	src/filter.c	/^	git_buf input;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::output	src/filter.c	/^	git_buf *output;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::parent	src/filter.c	/^	git_writestream parent;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::payload	src/filter.c	/^	void **payload;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::source	src/filter.c	/^	const git_filter_source *source;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::target	src/filter.c	/^	git_writestream *target;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream::temp_buf	src/filter.c	/^	git_buf temp_buf;$/;"	m	struct:proxy_stream	file:	access:public
proxy_stream_close	src/filter.c	/^static int proxy_stream_close(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
proxy_stream_free	src/filter.c	/^static void proxy_stream_free(git_writestream *s)$/;"	f	file:	signature:(git_writestream *s)
proxy_stream_init	src/filter.c	/^static int proxy_stream_init($/;"	f	file:	signature:( git_writestream **out, git_filter *filter, git_buf *temp_buf, void **payload, const git_filter_source *source, git_writestream *target)
proxy_stream_write	src/filter.c	/^static int proxy_stream_write($/;"	f	file:	signature:( git_writestream *s, const char *buffer, size_t len)
proxy_support	include/git2/sys/stream.h	/^	int proxy_support;$/;"	m	struct:git_stream	access:public
prune	include/git2/remote.h	/^	git_fetch_prune_t prune;$/;"	m	struct:__anon55	access:public
prune_candidates	src/remote.c	/^static int prune_candidates(git_vector *candidates, git_remote *remote)$/;"	f	file:	signature:(git_vector *candidates, git_remote *remote)
prune_impossible_nodes	deps/regex/regexec.c	/^prune_impossible_nodes (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
prune_refs	src/remote.h	/^	int prune_refs;$/;"	m	struct:git_remote	access:public
ps	include/git2/pathspec.h	/^GIT_EXTERN(void) git_pathspec_free(git_pathspec *ps);$/;"	v
ptr	include/git2/buffer.h	/^	char   *ptr;$/;"	m	struct:__anon114	access:public
ptr	include/git2/merge.h	/^	const char *ptr;$/;"	m	struct:__anon126	access:public
ptr	include/git2/merge.h	/^	const char *ptr;$/;"	m	struct:__anon131	access:public
ptr	script/user_model.c	/^	char *ptr;$/;"	m	struct:git_buf	file:	access:public
ptr	src/delta.c	/^	const unsigned char *ptr;$/;"	m	struct:index_entry	file:	access:public
ptr	src/xdiff/xdiff.h	/^	char *ptr;$/;"	m	struct:s_mmbuffer	access:public
ptr	src/xdiff/xdiff.h	/^	char *ptr;$/;"	m	struct:s_mmfile	access:public
ptr	src/xdiff/xhistogram.c	/^		unsigned int ptr, cnt;$/;"	m	struct:histindex::record	file:	access:public
ptr	src/xdiff/xtypes.h	/^	char const *ptr;$/;"	m	struct:s_xrecord	access:public
ptr	tests/clar.c	/^	void (*ptr)(void);$/;"	m	struct:clar_func	file:	access:public
ptr_shift	src/xdiff/xhistogram.c	/^		     ptr_shift;$/;"	m	struct:histindex	file:	access:public
ptr_table	deps/zlib/zutil.c	/^} ptr_table;$/;"	t	typeref:struct:ptr_table_s	file:
ptr_table_s	deps/zlib/zutil.c	/^typedef struct ptr_table_s {$/;"	s	file:
ptr_table_s::new_ptr	deps/zlib/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
ptr_table_s::org_ptr	deps/zlib/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
ptrdiff_t	deps/zlib/zutil.h	/^       typedef int ptrdiff_t;$/;"	t
ptrdiff_t	deps/zlib/zutil.h	/^   typedef long ptrdiff_t;  \/* guess -- will be caught if guess is wrong *\/$/;"	t
ptrs_equal_cmp	src/blame.c	/^static int ptrs_equal_cmp(const void *a, const void *b) { return a<b ? -1 : a>b ? 1 : 0; }$/;"	f	file:	signature:(const void *a, const void *b)
publickey	include/git2/transport.h	/^	char *publickey;$/;"	m	struct:git_cred_ssh_custom	access:public
publickey	include/git2/transport.h	/^	char *publickey;$/;"	m	struct:git_cred_ssh_key	access:public
publickey_len	include/git2/transport.h	/^	size_t publickey_len;$/;"	m	struct:git_cred_ssh_custom	access:public
push	include/git2/sys/transport.h	/^	int(*push)(git_transport *transport, git_push *push, const git_remote_callbacks *callbacks);$/;"	m	struct:git_transport	access:public
push	src/refspec.h	/^		push : 1,$/;"	m	struct:git_refspec	access:public
push	src/remote.h	/^	git_push *push;$/;"	m	struct:git_remote	access:public
push_array	tests/network/remote/local.c	/^static git_strarray push_array = {$/;"	v	file:
push_attr_file	src/attr.c	/^static int push_attr_file($/;"	f	file:	signature:( git_repository *repo, git_attr_session *attr_session, git_vector *list, git_attr_file_source source, const char *base, const char *filename)
push_commit	examples/rev-list.c	/^static int push_commit(git_revwalk *walk, const git_oid *oid, int hide)$/;"	f	file:	signature:(git_revwalk *walk, const git_oid *oid, int hide)
push_commit	src/revwalk.c	/^static int push_commit(git_revwalk *walk, const git_oid *oid, int uninteresting, int from_glob)$/;"	f	file:	signature:(git_revwalk *walk, const git_oid *oid, int uninteresting, int from_glob)
push_fail_stack	deps/regex/regexec.c	/^push_fail_stack (struct re_fail_stack_t *fs, int str_idx, int dest_node,$/;"	f	file:	signature:(struct re_fail_stack_t *fs, int str_idx, int dest_node, int nregs, regmatch_t *regs, re_node_set *eps_via_nodes)
push_glob	src/revwalk.c	/^static int push_glob(git_revwalk *walk, const char *glob, int hide)$/;"	f	file:	signature:(git_revwalk *walk, const char *glob, int hide)
push_ignore_file	src/ignore.c	/^static int push_ignore_file($/;"	f	file:	signature:( git_ignores *ignores, git_vector *which_list, const char *base, const char *filename)
push_leaf	src/oid.c	/^static trie_node *push_leaf(git_oid_shorten *os, node_index idx, int push_at, const char *oid)$/;"	f	file:	signature:(git_oid_shorten *os, node_index idx, int push_at, const char *oid)
push_negotiation	include/git2/remote.h	/^	git_push_negotiation push_negotiation;$/;"	m	struct:git_remote_callbacks	access:public
push_one_attr	src/attr.c	/^static int push_one_attr(void *ref, const char *path)$/;"	f	file:	signature:(void *ref, const char *path)
push_one_ignore	src/ignore.c	/^static int push_one_ignore(void *payload, const char *path)$/;"	f	file:	signature:(void *payload, const char *path)
push_pack_progress_cb	tests/online/push.c	/^static int push_pack_progress_cb($/;"	f	file:	signature:( int stage, unsigned int current, unsigned int total, void* payload)
push_packbuilder_payload	src/transports/smart_protocol.c	/^struct push_packbuilder_payload$/;"	s	file:
push_packbuilder_payload::cb	src/transports/smart_protocol.c	/^	git_push_transfer_progress cb;$/;"	m	struct:push_packbuilder_payload	file:	access:public
push_packbuilder_payload::cb_payload	src/transports/smart_protocol.c	/^	void *cb_payload;$/;"	m	struct:push_packbuilder_payload	file:	access:public
push_packbuilder_payload::last_bytes	src/transports/smart_protocol.c	/^	size_t last_bytes;$/;"	m	struct:push_packbuilder_payload	file:	access:public
push_packbuilder_payload::last_progress_report_time	src/transports/smart_protocol.c	/^	double last_progress_report_time;$/;"	m	struct:push_packbuilder_payload	file:	access:public
push_packbuilder_payload::pb	src/transports/smart_protocol.c	/^	git_packbuilder *pb;$/;"	m	struct:push_packbuilder_payload	file:	access:public
push_packbuilder_payload::stream	src/transports/smart_protocol.c	/^	git_smart_subtransport_stream *stream;$/;"	m	struct:push_packbuilder_payload	file:	access:public
push_range	examples/rev-list.c	/^static int push_range(git_repository *repo, git_revwalk *walk, const char *range, int hide)$/;"	f	file:	signature:(git_repository *repo, git_revwalk *walk, const char *range, int hide)
push_ref	src/revwalk.c	/^static int push_ref(git_revwalk *walk, const char *refname, int hide, int from_glob)$/;"	f	file:	signature:(git_revwalk *walk, const char *refname, int hide, int from_glob)
push_refspec_strings	tests/network/remote/local.c	/^static char *push_refspec_strings[] = {$/;"	v	file:
push_refspecs	tests/network/remote/remotes.c	/^static const char *push_refspecs[] = {$/;"	v	file:
push_rev	examples/log.c	/^static void push_rev(struct log_state *s, git_object *obj, int hide)$/;"	f	file:	signature:(struct log_state *s, git_object *obj, int hide)
push_spec	examples/rev-list.c	/^static int push_spec(git_repository *repo, git_revwalk *walk, const char *spec, int hide)$/;"	f	file:	signature:(git_repository *repo, git_revwalk *walk, const char *spec, int hide)
push_spec	src/push.h	/^typedef struct push_spec {$/;"	s
push_spec	src/push.h	/^} push_spec;$/;"	t	typeref:struct:push_spec
push_spec::loid	src/push.h	/^	git_oid loid;$/;"	m	struct:push_spec	access:public
push_spec::refspec	src/push.h	/^	struct git_refspec refspec;$/;"	m	struct:push_spec	typeref:struct:push_spec::git_refspec	access:public
push_spec::roid	src/push.h	/^	git_oid roid;$/;"	m	struct:push_spec	access:public
push_spec_rref_cmp	src/push.c	/^static int push_spec_rref_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
push_status	src/push.h	/^typedef struct push_status {$/;"	s
push_status	src/push.h	/^} push_status;$/;"	t	typeref:struct:push_status
push_status	tests/online/push_util.h	/^} push_status;$/;"	t	typeref:struct:__anon355
push_status::msg	src/push.h	/^	char *msg;$/;"	m	struct:push_status	access:public
push_status::ok	src/push.h	/^	bool ok;$/;"	m	struct:push_status	access:public
push_status::ref	src/push.h	/^	char *ref;$/;"	m	struct:push_status	access:public
push_status_free	tests/online/push_util.c	/^void push_status_free(push_status *s)$/;"	f	signature:(push_status *s)
push_status_ref_cmp	src/push.c	/^static int push_status_ref_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
push_three_states	tests/stash/drop.c	/^static void push_three_states(void)$/;"	f	file:	signature:(void)
push_transfer_progress	include/git2/remote.h	/^	git_push_transfer_progress push_transfer_progress;$/;"	m	struct:git_remote_callbacks	access:public
push_transfer_progress_cb	tests/online/push.c	/^static int push_transfer_progress_cb($/;"	f	file:	signature:( unsigned int current, unsigned int total, size_t bytes, void* payload)
push_update_reference	include/git2/remote.h	/^	int (*push_update_reference)(const char *refname, const char *status, void *data);$/;"	m	struct:git_remote_callbacks	access:public
pushurl	src/remote.h	/^	char *pushurl;$/;"	m	struct:git_remote	access:public
putShortMSB	deps/zlib/deflate.c	/^local void putShortMSB (s, b)$/;"	f
put_be32	src/hash/hash_generic.c	77;"	d	file:
put_be32	src/hash/hash_generic.c	86;"	d	file:
put_byte	deps/zlib/deflate.h	278;"	d
put_short	deps/zlib/trees.c	176;"	d	file:
put_uuid_string	src/transports/winhttp.c	/^static int put_uuid_string(LPWSTR buffer, size_t buffer_len_cch)$/;"	f	file:	signature:(LPWSTR buffer, size_t buffer_len_cch)
queue_difference	src/merge.c	/^static int queue_difference(const git_index_entry **entries, void *data)$/;"	f	file:	signature:(const git_index_entry **entries, void *data)
queue_differences	src/push.c	/^static int queue_differences($/;"	f	file:	signature:( git_tree *base, git_tree *delta, git_packbuilder *pb)
queue_objects	src/push.c	/^static int queue_objects(git_push *push)$/;"	f	file:	signature:(git_push *push)
quick_diff_blob_to_str	tests/diff/blob.c	/^static void quick_diff_blob_to_str($/;"	f	file:	signature:( const git_blob *blob, const char *blob_path, const char *str, size_t len, const char *str_path)
quiet	examples/init.c	/^	int quiet;$/;"	m	struct:opts	file:	access:public
quiet	include/git2/rebase.h	/^	int quiet;$/;"	m	struct:__anon67	access:public
quiet	src/rebase.c	/^		quiet : 1,$/;"	m	struct:git_rebase	file:	access:public
quot	include/git2/inttypes.h	/^   intmax_t quot;$/;"	m	struct:__anon45	access:public
quotes_for_value	src/config_file.c	/^static const char *quotes_for_value(const char *value)$/;"	f	file:	signature:(const char *value)
racy_payload	tests/diff/racediffiter.c	/^} racy_payload;$/;"	t	typeref:struct:__anon368	file:
range_ends	deps/regex/regex_internal.h	/^  uint32_t *range_ends;$/;"	m	struct:__anon6	access:public
range_ends	deps/regex/regex_internal.h	/^  wchar_t *range_ends;$/;"	m	struct:__anon6	access:public
range_starts	deps/regex/regex_internal.h	/^  uint32_t *range_starts;$/;"	m	struct:__anon6	access:public
range_starts	deps/regex/regex_internal.h	/^  wchar_t *range_starts;$/;"	m	struct:__anon6	access:public
rangematch	src/fnmatch.c	/^rangematch(const char *pattern, char test, int flags, char **newp)$/;"	f	file:	signature:(const char *pattern, char test, int flags, char **newp)
raw	src/pack.h	/^	git_rawobj raw;$/;"	m	struct:git_pack_cache_entry	access:public
raw_data	src/win32/w32_crtdbg_stacktrace.c	/^	git_win32__stack__raw_data raw_data;$/;"	m	struct:__anon292	file:	access:public
raw_header	src/commit.h	/^	char *raw_header;$/;"	m	struct:git_commit	access:public
raw_len	deps/regex/regex_internal.h	/^  int raw_len;$/;"	m	struct:re_string_t	access:public
raw_mbs	deps/regex/regex_internal.h	/^  const unsigned char *raw_mbs;$/;"	m	struct:re_string_t	access:public
raw_mbs_idx	deps/regex/regex_internal.h	/^  int raw_mbs_idx;$/;"	m	struct:re_string_t	access:public
raw_message	src/commit.h	/^	char *raw_message;$/;"	m	struct:git_commit	access:public
raw_stop	deps/regex/regex_internal.h	/^  int raw_stop;$/;"	m	struct:re_string_t	access:public
rc	src/attr_file.h	/^	git_refcount rc;		\/* for macros *\/$/;"	m	struct:__anon169	access:public
rc	src/attr_file.h	/^	git_refcount rc;$/;"	m	struct:__anon170	access:public
rc	src/config.c	/^	git_refcount rc;$/;"	m	struct:__anon336	file:	access:public
rc	src/config.h	/^	git_refcount rc;$/;"	m	struct:git_config	access:public
rc	src/diff.h	/^	git_refcount     rc;$/;"	m	struct:git_diff	access:public
rc	src/index.h	/^	git_refcount rc;$/;"	m	struct:git_index	access:public
rc	src/odb.h	/^	git_refcount rc;$/;"	m	struct:git_odb	access:public
rc	src/patch.h	/^	git_refcount rc;$/;"	m	struct:git_patch	access:public
rc	src/patch_parse.h	/^	git_refcount rc;$/;"	m	struct:__anon327	access:public
rc	src/pathspec.h	/^	git_refcount rc;$/;"	m	struct:git_pathspec	access:public
rc	src/refdb.h	/^	git_refcount rc;$/;"	m	struct:git_refdb	access:public
rc	src/sortedcache.h	/^	git_refcount rc;$/;"	m	struct:__anon310	access:public
rc	src/submodule.h	/^	git_refcount rc;$/;"	m	struct:git_submodule	access:public
rcha	src/xdiff/xhistogram.c	/^	chastore_t rcha;$/;"	m	struct:histindex	file:	access:public
rcha	src/xdiff/xtypes.h	/^	chastore_t rcha;$/;"	m	struct:s_xdfile	access:public
rchash	src/xdiff/xprepare.c	/^	xdlclass_t **rchash;$/;"	m	struct:s_xdlclassifier	file:	access:public
rchg	src/xdiff/xdiffi.h	/^	char *rchg;$/;"	m	struct:s_diffdata	access:public
rchg	src/xdiff/xtypes.h	/^	char *rchg;$/;"	m	struct:s_xdfile	access:public
rcrecs	src/xdiff/xprepare.c	/^	xdlclass_t **rcrecs;$/;"	m	struct:s_xdlclassifier	file:	access:public
re	src/diff_driver.c	/^	regex_t re;$/;"	m	struct:__anon239	file:	access:public
re	tests/generate.py	/^import re, fnmatch, os, codecs, pickle$/;"	i
re_acquire_state	deps/regex/regex_internal.c	/^re_acquire_state (reg_errcode_t *err, const re_dfa_t *dfa,$/;"	f	file:	signature:(reg_errcode_t *err, const re_dfa_t *dfa, const re_node_set *nodes)
re_acquire_state_context	deps/regex/regex_internal.c	/^re_acquire_state_context (reg_errcode_t *err, const re_dfa_t *dfa,$/;"	f	file:	signature:(reg_errcode_t *err, const re_dfa_t *dfa, const re_node_set *nodes, unsigned int context)
re_backref_cache_entry	deps/regex/regex_internal.h	/^struct re_backref_cache_entry$/;"	s
re_backref_cache_entry::eps_reachable_subexps_map	deps/regex/regex_internal.h	/^  unsigned short int eps_reachable_subexps_map;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::more	deps/regex/regex_internal.h	/^  char more;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::str_idx	deps/regex/regex_internal.h	/^  int str_idx;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::subexp_from	deps/regex/regex_internal.h	/^  int subexp_from;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::subexp_to	deps/regex/regex_internal.h	/^  int subexp_to;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::unused	deps/regex/regex_internal.h	/^  char unused;$/;"	m	struct:re_backref_cache_entry	access:public
re_bitset_ptr_t	deps/regex/regex_internal.h	/^typedef bitset_word_t *re_bitset_ptr_t;$/;"	t
re_charset_t	deps/regex/regex_internal.h	/^} re_charset_t;$/;"	t	typeref:struct:__anon6
re_comp	deps/regex/regcomp.c	/^re_comp (s)$/;"	f
re_comp_buf	deps/regex/regcomp.c	/^static struct re_pattern_buffer re_comp_buf;$/;"	v	typeref:struct:re_pattern_buffer	file:
re_compile_fastmap	deps/regex/regex.c	48;"	d	file:
re_compile_fastmap_iter	deps/regex/regcomp.c	/^re_compile_fastmap_iter (regex_t *bufp, const re_dfastate_t *init_state,$/;"	f	file:	signature:(regex_t *bufp, const re_dfastate_t *init_state, char *fastmap)
re_compile_internal	deps/regex/regcomp.c	/^re_compile_internal (regex_t *preg, const char * pattern, size_t length,$/;"	f	file:	signature:(regex_t *preg, const char * pattern, size_t length, reg_syntax_t syntax)
re_compile_pattern	deps/regex/regcomp.c	/^re_compile_pattern (const char *pattern,$/;"	f	signature:(const char *pattern, size_t length, struct re_pattern_buffer *bufp)
re_compile_pattern	deps/regex/regex.c	43;"	d	file:
re_const_bitset_ptr_t	deps/regex/regex_internal.h	/^typedef const bitset_word_t *re_const_bitset_ptr_t;$/;"	t
re_context_type	deps/regex/regex_internal.h	/^} re_context_type;$/;"	t	typeref:enum:__anon3
re_copy_regs	deps/regex/regexec.c	/^re_copy_regs (struct re_registers *regs,$/;"	f	file:	signature:(struct re_registers *regs, regmatch_t *pmatch, unsigned int nregs, int regs_allocated)
re_dfa_add_node	deps/regex/regex_internal.c	/^re_dfa_add_node (re_dfa_t *dfa, re_token_t token)$/;"	f	file:	signature:(re_dfa_t *dfa, re_token_t token)
re_dfa_t	deps/regex/regex_internal.h	/^struct re_dfa_t$/;"	s
re_dfa_t	deps/regex/regex_internal.h	/^struct re_dfa_t;$/;"	x
re_dfa_t	deps/regex/regex_internal.h	/^typedef struct re_dfa_t re_dfa_t;$/;"	t	typeref:struct:re_dfa_t
re_dfa_t::completed_bkref_map	deps/regex/regex_internal.h	/^  bitset_word_t completed_bkref_map;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::eclosures	deps/regex/regex_internal.h	/^  re_node_set *eclosures;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::edests	deps/regex/regex_internal.h	/^  re_node_set *edests;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::has_mb_node	deps/regex/regex_internal.h	/^  unsigned int has_mb_node : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::has_plural_match	deps/regex/regex_internal.h	/^  unsigned int has_plural_match : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_node	deps/regex/regex_internal.h	/^  int init_node;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state_begbuf	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_begbuf;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state_nl	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_nl;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state_word	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_word;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::inveclosures	deps/regex/regex_internal.h	/^  re_node_set *inveclosures;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::is_utf8	deps/regex/regex_internal.h	/^  unsigned int is_utf8 : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::map_notascii	deps/regex/regex_internal.h	/^  unsigned int map_notascii : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::mb_cur_max	deps/regex/regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nbackref	deps/regex/regex_internal.h	/^  int nbackref; \/* The number of backreference in this dfa.  *\/$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nexts	deps/regex/regex_internal.h	/^  int *nexts;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nodes	deps/regex/regex_internal.h	/^  re_token_t *nodes;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nodes_alloc	deps/regex/regex_internal.h	/^  size_t nodes_alloc;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nodes_len	deps/regex/regex_internal.h	/^  size_t nodes_len;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::org_indices	deps/regex/regex_internal.h	/^  int *org_indices;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::re_str	deps/regex/regex_internal.h	/^  char* re_str;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::sb_char	deps/regex/regex_internal.h	/^  re_bitset_ptr_t sb_char;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::state_hash_mask	deps/regex/regex_internal.h	/^  unsigned int state_hash_mask;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::state_table	deps/regex/regex_internal.h	/^  struct re_state_table_entry *state_table;$/;"	m	struct:re_dfa_t	typeref:struct:re_dfa_t::re_state_table_entry	access:public
re_dfa_t::str_tree	deps/regex/regex_internal.h	/^  bin_tree_t *str_tree;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::str_tree_storage	deps/regex/regex_internal.h	/^  bin_tree_storage_t *str_tree_storage;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::str_tree_storage_idx	deps/regex/regex_internal.h	/^  int str_tree_storage_idx;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::subexp_map	deps/regex/regex_internal.h	/^  int *subexp_map;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::syntax	deps/regex/regex_internal.h	/^  reg_syntax_t syntax;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::used_bkref_map	deps/regex/regex_internal.h	/^  bitset_word_t used_bkref_map;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::word_char	deps/regex/regex_internal.h	/^  bitset_t word_char;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::word_ops_used	deps/regex/regex_internal.h	/^  unsigned int word_ops_used : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfastate_t	deps/regex/regex_internal.h	/^struct re_dfastate_t$/;"	s
re_dfastate_t	deps/regex/regex_internal.h	/^typedef struct re_dfastate_t re_dfastate_t;$/;"	t	typeref:struct:re_dfastate_t
re_dfastate_t::accept_mb	deps/regex/regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::context	deps/regex/regex_internal.h	/^  unsigned int context : 4;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::entrance_nodes	deps/regex/regex_internal.h	/^  re_node_set *entrance_nodes;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::halt	deps/regex/regex_internal.h	/^  unsigned int halt : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::has_backref	deps/regex/regex_internal.h	/^  unsigned int has_backref : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::has_constraint	deps/regex/regex_internal.h	/^  unsigned int has_constraint : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::hash	deps/regex/regex_internal.h	/^  unsigned int hash;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::inveclosure	deps/regex/regex_internal.h	/^  re_node_set inveclosure;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::nodes	deps/regex/regex_internal.h	/^  re_node_set nodes;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::non_eps_nodes	deps/regex/regex_internal.h	/^  re_node_set non_eps_nodes;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::trtable	deps/regex/regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::re_dfastate_t	access:public
re_dfastate_t::word_trtable	deps/regex/regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::	access:public
re_fail_stack_ent_t	deps/regex/regex_internal.h	/^struct re_fail_stack_ent_t$/;"	s
re_fail_stack_ent_t::eps_via_nodes	deps/regex/regex_internal.h	/^  re_node_set eps_via_nodes;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_ent_t::idx	deps/regex/regex_internal.h	/^  int idx;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_ent_t::node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_ent_t::regs	deps/regex/regex_internal.h	/^  regmatch_t *regs;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_t	deps/regex/regex_internal.h	/^struct re_fail_stack_t$/;"	s
re_fail_stack_t::alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:re_fail_stack_t	access:public
re_fail_stack_t::num	deps/regex/regex_internal.h	/^  int num;$/;"	m	struct:re_fail_stack_t	access:public
re_fail_stack_t::stack	deps/regex/regex_internal.h	/^  struct re_fail_stack_ent_t *stack;$/;"	m	struct:re_fail_stack_t	typeref:struct:re_fail_stack_t::re_fail_stack_ent_t	access:public
re_free	deps/regex/regex_internal.h	486;"	d
re_malloc	deps/regex/regex_internal.h	483;"	d
re_match	deps/regex/regex.c	39;"	d	file:
re_match	deps/regex/regexec.c	/^re_match (struct re_pattern_buffer *bufp,$/;"	f	signature:(struct re_pattern_buffer *bufp, const char *string, int length, int start, struct re_registers *regs)
re_match_2	deps/regex/regex.c	37;"	d	file:
re_match_context_t	deps/regex/regex_internal.h	/^} re_match_context_t;$/;"	t	typeref:struct:__anon12
re_max_failures	deps/regex/regex.c	/^int re_max_failures = 2000;$/;"	v
re_node_set	deps/regex/regex_internal.h	/^} re_node_set;$/;"	t	typeref:struct:__anon4
re_node_set_add_intersect	deps/regex/regex_internal.c	/^re_node_set_add_intersect (re_node_set *dest, const re_node_set *src1,$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src1, const re_node_set *src2)
re_node_set_alloc	deps/regex/regex_internal.c	/^re_node_set_alloc (re_node_set *set, int size)$/;"	f	file:	signature:(re_node_set *set, int size)
re_node_set_compare	deps/regex/regex_internal.c	/^re_node_set_compare (const re_node_set *set1, const re_node_set *set2)$/;"	f	signature:(const re_node_set *set1, const re_node_set *set2)
re_node_set_contains	deps/regex/regex_internal.c	/^re_node_set_contains (const re_node_set *set, int elem)$/;"	f	signature:(const re_node_set *set, int elem)
re_node_set_empty	deps/regex/regex_internal.h	715;"	d
re_node_set_free	deps/regex/regex_internal.h	716;"	d
re_node_set_init_1	deps/regex/regex_internal.c	/^re_node_set_init_1 (re_node_set *set, int elem)$/;"	f	file:	signature:(re_node_set *set, int elem)
re_node_set_init_2	deps/regex/regex_internal.c	/^re_node_set_init_2 (re_node_set *set, int elem1, int elem2)$/;"	f	file:	signature:(re_node_set *set, int elem1, int elem2)
re_node_set_init_copy	deps/regex/regex_internal.c	/^re_node_set_init_copy (re_node_set *dest, const re_node_set *src)$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src)
re_node_set_init_empty	deps/regex/regex_internal.h	712;"	d
re_node_set_init_union	deps/regex/regex_internal.c	/^re_node_set_init_union (re_node_set *dest, const re_node_set *src1,$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src1, const re_node_set *src2)
re_node_set_insert	deps/regex/regex_internal.c	/^re_node_set_insert (re_node_set *set, int elem)$/;"	f	file:	signature:(re_node_set *set, int elem)
re_node_set_insert_last	deps/regex/regex_internal.c	/^re_node_set_insert_last (re_node_set *set, int elem)$/;"	f	file:	signature:(re_node_set *set, int elem)
re_node_set_merge	deps/regex/regex_internal.c	/^re_node_set_merge (re_node_set *dest, const re_node_set *src)$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src)
re_node_set_remove	deps/regex/regex_internal.h	713;"	d
re_node_set_remove_at	deps/regex/regex_internal.c	/^re_node_set_remove_at (re_node_set *set, int idx)$/;"	f	file:	signature:(re_node_set *set, int idx)
re_nsub	deps/regex/regex.h	/^  size_t re_nsub;$/;"	m	struct:re_pattern_buffer	access:public
re_pattern_buffer	deps/regex/regex.h	/^struct re_pattern_buffer$/;"	s
re_pattern_buffer::re_nsub	deps/regex/regex.h	/^  size_t re_nsub;$/;"	m	struct:re_pattern_buffer	access:public
re_realloc	deps/regex/regex_internal.h	485;"	d
re_registers	deps/regex/regex.h	/^struct re_registers$/;"	s
re_registers::end	deps/regex/regex.h	/^  regoff_t *end;$/;"	m	struct:re_registers	access:public
re_registers::num_regs	deps/regex/regex.h	/^  unsigned num_regs;$/;"	m	struct:re_registers	access:public
re_registers::start	deps/regex/regex.h	/^  regoff_t *start;$/;"	m	struct:re_registers	access:public
re_search	deps/regex/regex.c	41;"	d	file:
re_search_2	deps/regex/regex.c	46;"	d	file:
re_search_2_stub	deps/regex/regexec.c	/^re_search_2_stub (struct re_pattern_buffer *bufp,$/;"	f	file:	signature:(struct re_pattern_buffer *bufp, const char *string1, int length1, const char *string2, int length2, int start, int range, struct re_registers *regs, int stop, int ret_len)
re_search_internal	deps/regex/regexec.c	/^re_search_internal (const regex_t *preg,$/;"	f	file:	signature:(const regex_t *preg, const char *string, int length, int start, int range, int stop, size_t nmatch, regmatch_t pmatch[], int eflags)
re_search_stub	deps/regex/regexec.c	/^re_search_stub (struct re_pattern_buffer *bufp,$/;"	f	file:	signature:(struct re_pattern_buffer *bufp, const char *string, int length, int start, int range, int stop, struct re_registers *regs, int ret_len)
re_set_fastmap	deps/regex/regcomp.c	/^re_set_fastmap (char *fastmap, int icase, int ch)$/;"	f	signature:(char *fastmap, int icase, int ch)
re_set_registers	deps/regex/regex.c	35;"	d	file:
re_set_registers	deps/regex/regexec.c	/^re_set_registers (struct re_pattern_buffer *bufp,$/;"	f	signature:(struct re_pattern_buffer *bufp, struct re_registers *regs, unsigned num_regs, regoff_t *starts, regoff_t *ends)
re_set_syntax	deps/regex/regex.c	45;"	d	file:
re_sift_context_t	deps/regex/regex_internal.h	/^} re_sift_context_t;$/;"	t	typeref:struct:__anon13
re_state_table_entry	deps/regex/regex_internal.h	/^struct re_state_table_entry$/;"	s
re_state_table_entry::alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:re_state_table_entry	access:public
re_state_table_entry::array	deps/regex/regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:re_state_table_entry	access:public
re_state_table_entry::num	deps/regex/regex_internal.h	/^  int num;$/;"	m	struct:re_state_table_entry	access:public
re_str	deps/regex/regex_internal.h	/^  char* re_str;$/;"	m	struct:re_dfa_t	access:public
re_string_allocate	deps/regex/regex_internal.c	/^re_string_allocate (re_string_t *pstr, const char *str, int len, int init_len,$/;"	f	file:	signature:(re_string_t *pstr, const char *str, int len, int init_len, RE_TRANSLATE_TYPE trans, int icase, const re_dfa_t *dfa)
re_string_byte_at	deps/regex/regex_internal.h	460;"	d
re_string_char_size_at	deps/regex/regex_internal.h	/^re_string_char_size_at (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_string_construct	deps/regex/regex_internal.c	/^re_string_construct (re_string_t *pstr, const char *str, int len,$/;"	f	file:	signature:(re_string_t *pstr, const char *str, int len, RE_TRANSLATE_TYPE trans, int icase, const re_dfa_t *dfa)
re_string_construct_common	deps/regex/regex_internal.c	/^re_string_construct_common (const char *str, int len, re_string_t *pstr,$/;"	f	file:	signature:(const char *str, int len, re_string_t *pstr, RE_TRANSLATE_TYPE trans, int icase, const re_dfa_t *dfa)
re_string_context_at	deps/regex/regex_internal.c	/^re_string_context_at (const re_string_t *input, int idx, int eflags)$/;"	f	file:	signature:(const re_string_t *input, int idx, int eflags)
re_string_cur_idx	deps/regex/regex_internal.h	457;"	d
re_string_destruct	deps/regex/regex_internal.c	/^re_string_destruct (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
re_string_elem_size_at	deps/regex/regex_internal.h	/^re_string_elem_size_at (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_string_eoi	deps/regex/regex_internal.h	456;"	d
re_string_fetch_byte	deps/regex/regex_internal.h	449;"	d
re_string_fetch_byte_case	deps/regex/regex_internal.c	/^re_string_fetch_byte_case (re_string_t *pstr)$/;"	f	signature:(re_string_t *pstr)
re_string_first_byte	deps/regex/regex_internal.h	451;"	d
re_string_get_buffer	deps/regex/regex_internal.h	458;"	d
re_string_is_single_byte_char	deps/regex/regex_internal.h	453;"	d
re_string_length	deps/regex/regex_internal.h	459;"	d
re_string_peek_byte	deps/regex/regex_internal.h	447;"	d
re_string_peek_byte_case	deps/regex/regex_internal.c	/^re_string_peek_byte_case (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_string_realloc_buffers	deps/regex/regex_internal.c	/^re_string_realloc_buffers (re_string_t *pstr, int new_buf_len)$/;"	f	file:	signature:(re_string_t *pstr, int new_buf_len)
re_string_reconstruct	deps/regex/regex_internal.c	/^re_string_reconstruct (re_string_t *pstr, int idx, int eflags)$/;"	f	file:	signature:(re_string_t *pstr, int idx, int eflags)
re_string_set_index	deps/regex/regex_internal.h	462;"	d
re_string_skip_bytes	deps/regex/regex_internal.h	461;"	d
re_string_skip_chars	deps/regex/regex_internal.c	/^re_string_skip_chars (re_string_t *pstr, int new_raw_idx, wint_t *last_wc)$/;"	f	file:	signature:(re_string_t *pstr, int new_raw_idx, wint_t *last_wc)
re_string_t	deps/regex/regex_internal.h	/^struct re_string_t$/;"	s
re_string_t	deps/regex/regex_internal.h	/^typedef struct re_string_t re_string_t;$/;"	t	typeref:struct:re_string_t
re_string_t::bufs_len	deps/regex/regex_internal.h	/^  int bufs_len;$/;"	m	struct:re_string_t	access:public
re_string_t::cur_idx	deps/regex/regex_internal.h	/^  int cur_idx;$/;"	m	struct:re_string_t	access:public
re_string_t::cur_state	deps/regex/regex_internal.h	/^  mbstate_t cur_state;$/;"	m	struct:re_string_t	access:public
re_string_t::icase	deps/regex/regex_internal.h	/^  unsigned char icase;$/;"	m	struct:re_string_t	access:public
re_string_t::is_utf8	deps/regex/regex_internal.h	/^  unsigned char is_utf8;$/;"	m	struct:re_string_t	access:public
re_string_t::len	deps/regex/regex_internal.h	/^  int len;$/;"	m	struct:re_string_t	access:public
re_string_t::map_notascii	deps/regex/regex_internal.h	/^  unsigned char map_notascii;$/;"	m	struct:re_string_t	access:public
re_string_t::mb_cur_max	deps/regex/regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_string_t	access:public
re_string_t::mbs	deps/regex/regex_internal.h	/^  unsigned char *mbs;$/;"	m	struct:re_string_t	access:public
re_string_t::mbs_allocated	deps/regex/regex_internal.h	/^  unsigned char mbs_allocated;$/;"	m	struct:re_string_t	access:public
re_string_t::newline_anchor	deps/regex/regex_internal.h	/^  unsigned char newline_anchor;$/;"	m	struct:re_string_t	access:public
re_string_t::offsets	deps/regex/regex_internal.h	/^  int *offsets;$/;"	m	struct:re_string_t	access:public
re_string_t::offsets_needed	deps/regex/regex_internal.h	/^  unsigned char offsets_needed;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_len	deps/regex/regex_internal.h	/^  int raw_len;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_mbs	deps/regex/regex_internal.h	/^  const unsigned char *raw_mbs;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_mbs_idx	deps/regex/regex_internal.h	/^  int raw_mbs_idx;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_stop	deps/regex/regex_internal.h	/^  int raw_stop;$/;"	m	struct:re_string_t	access:public
re_string_t::stop	deps/regex/regex_internal.h	/^  int stop;$/;"	m	struct:re_string_t	access:public
re_string_t::tip_context	deps/regex/regex_internal.h	/^  unsigned int tip_context;$/;"	m	struct:re_string_t	access:public
re_string_t::trans	deps/regex/regex_internal.h	/^  RE_TRANSLATE_TYPE trans;$/;"	m	struct:re_string_t	access:public
re_string_t::valid_len	deps/regex/regex_internal.h	/^  int valid_len;$/;"	m	struct:re_string_t	access:public
re_string_t::valid_raw_len	deps/regex/regex_internal.h	/^  int valid_raw_len;$/;"	m	struct:re_string_t	access:public
re_string_t::wcs	deps/regex/regex_internal.h	/^  wint_t *wcs;$/;"	m	struct:re_string_t	access:public
re_string_t::word_char	deps/regex/regex_internal.h	/^  re_const_bitset_ptr_t word_char;$/;"	m	struct:re_string_t	access:public
re_string_t::word_ops_used	deps/regex/regex_internal.h	/^  unsigned char word_ops_used;$/;"	m	struct:re_string_t	access:public
re_string_translate_buffer	deps/regex/regex_internal.c	/^re_string_translate_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
re_string_wchar_at	deps/regex/regex_internal.h	/^re_string_wchar_at (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_sub_match_last_t	deps/regex/regex_internal.h	/^} re_sub_match_last_t;$/;"	t	typeref:struct:__anon10
re_sub_match_top_t	deps/regex/regex_internal.h	/^} re_sub_match_top_t;$/;"	t	typeref:struct:__anon11
re_syntax_options	deps/regex/regex.h	/^extern reg_syntax_t re_syntax_options;$/;"	x
re_token_t	deps/regex/regex_internal.h	/^} re_token_t;$/;"	t	typeref:struct:__anon7
re_token_type_t	deps/regex/regex_internal.h	/^} re_token_type_t;$/;"	t	typeref:enum:__anon5
read	examples/network/index-pack.c	13;"	d	file:
read	include/git2/odb_backend.h	/^	int (*read)(git_odb_stream *stream, char *buffer, size_t len);$/;"	m	struct:git_odb_stream	access:public
read	include/git2/sys/odb_backend.h	/^	int (* read)($/;"	m	struct:git_odb_backend	access:public
read	include/git2/sys/stream.h	/^	ssize_t (*read)(struct git_stream *, void *, size_t);$/;"	m	struct:git_stream	access:public
read	include/git2/sys/transport.h	/^	int (*read)($/;"	m	struct:git_smart_subtransport_stream	access:public
read_buf	deps/zlib/deflate.c	/^local int read_buf(strm, buf, size)$/;"	f
read_calls	tests/odb/backend/nonrefreshing.c	/^	int read_calls;$/;"	m	struct:fake_backend	file:	access:public
read_cb	src/stransport_stream.c	/^static OSStatus read_cb(SSLConnectionRef conn, void *data, size_t *len)$/;"	f	file:	signature:(SSLConnectionRef conn, void *data, size_t *len)
read_conflict_name	src/index.c	2242;"	d	file:
read_conflict_name	src/index.c	2280;"	d	file:
read_conflict_names	src/index.c	/^static int read_conflict_names(git_index *index, const char *buffer, size_t size)$/;"	f	file:	signature:(git_index *index, const char *buffer, size_t size)
read_entry	src/index.c	/^static size_t read_entry($/;"	f	file:	signature:( git_index_entry **out, git_index *index, const void *buffer, size_t buffer_size, const char **last)
read_extension	src/index.c	/^static size_t read_extension(git_index *index, const char *buffer, size_t buffer_size)$/;"	f	file:	signature:(git_index *index, const char *buffer, size_t buffer_size)
read_filemode	tests/checkout/tree.c	/^mode_t read_filemode(const char *path)$/;"	f	signature:(const char *path)
read_flags	include/git2/sys/transport.h	/^	int (*read_flags)(git_transport *transport, int *flags);$/;"	m	struct:git_transport	access:public
read_gitfile	src/repository.c	/^static int read_gitfile(git_buf *path_out, const char *file_path)$/;"	f	file:	signature:(git_buf *path_out, const char *file_path)
read_header	include/git2/sys/odb_backend.h	/^	int (* read_header)($/;"	m	struct:git_odb_backend	access:public
read_header	src/index.c	/^static int read_header(struct index_header *dest, const void *buffer)$/;"	f	file:	signature:(struct index_header *dest, const void *buffer)
read_header_calls	tests/odb/backend/nonrefreshing.c	/^	int read_header_calls;$/;"	m	struct:fake_backend	file:	access:public
read_header_loose	src/odb_loose.c	/^static int read_header_loose(git_rawobj *out, git_buf *loc)$/;"	f	file:	signature:(git_rawobj *out, git_buf *loc)
read_key_file	tests/online/clone.c	/^static char *read_key_file(const char *path)$/;"	f	file:	signature:(const char *path)
read_loose	src/odb_loose.c	/^static int read_loose(git_rawobj *out, git_buf *loc)$/;"	f	file:	signature:(git_rawobj *out, git_buf *loc)
read_name_missing	tests/fetchhead/nonetwork.c	/^static int read_name_missing(const char *ref_name, const char *remote_url,$/;"	f	file:	signature:(const char *ref_name, const char *remote_url, const git_oid *oid, unsigned int is_merge, void *payload)
read_noop	tests/fetchhead/nonetwork.c	/^static int read_noop(const char *ref_name, const char *remote_url,$/;"	f	file:	signature:(const char *ref_name, const char *remote_url, const git_oid *oid, unsigned int is_merge, void *payload)
read_object_stream	src/indexer.c	/^static int read_object_stream(git_indexer *idx, git_packfile_stream *stream)$/;"	f	file:	signature:(git_indexer *idx, git_packfile_stream *stream)
read_old_style_cb	tests/fetchhead/nonetwork.c	/^static int read_old_style_cb(const char *name, const char *url,$/;"	f	file:	signature:(const char *name, const char *url, const git_oid *oid, unsigned int is_merge, void *payload)
read_on_variable	src/config_file.c	/^static int read_on_variable($/;"	f	file:	signature:( struct reader **reader, const char *current_section, char *var_name, char *var_value, const char *line, size_t line_len, void *data)
read_prefix	include/git2/sys/odb_backend.h	/^	int (* read_prefix)($/;"	m	struct:git_odb_backend	access:public
read_prefix_1	src/odb.c	/^static int read_prefix_1(git_odb_object **out, git_odb *db,$/;"	f	file:	signature:(git_odb_object **out, git_odb *db, const git_oid *key, size_t len, bool only_refreshed)
read_prefix_calls	tests/odb/backend/nonrefreshing.c	/^	int read_prefix_calls;$/;"	m	struct:fake_backend	file:	access:public
read_ptr	src/config_file.c	/^	char *read_ptr;$/;"	m	struct:reader	file:	access:public
read_reuc	src/index.c	/^static int read_reuc(git_index *index, const char *buffer, size_t size)$/;"	f	file:	signature:(git_index *index, const char *buffer, size_t size)
read_tree_cb	src/index.c	/^static int read_tree_cb($/;"	f	file:	signature:( const char *root, const git_tree_entry *tentry, void *payload)
read_tree_data	src/index.c	/^typedef struct read_tree_data {$/;"	s	file:
read_tree_data	src/index.c	/^} read_tree_data;$/;"	t	typeref:struct:read_tree_data	file:
read_tree_data::entry_cmp	src/index.c	/^	git_vector_cmp entry_cmp;$/;"	m	struct:read_tree_data	file:	access:public
read_tree_data::index	src/index.c	/^	git_index *index;$/;"	m	struct:read_tree_data	file:	access:public
read_tree_data::new_entries	src/index.c	/^	git_vector *new_entries;$/;"	m	struct:read_tree_data	file:	access:public
read_tree_data::old_entries	src/index.c	/^	git_vector *old_entries;$/;"	m	struct:read_tree_data	file:	access:public
read_tree_data::tree	src/index.c	/^	git_tree_cache *tree;$/;"	m	struct:read_tree_data	file:	access:public
read_tree_internal	src/tree-cache.c	/^static int read_tree_internal(git_tree_cache **out,$/;"	f	file:	signature:(git_tree_cache **out, const char **buffer_in, const char *buffer_end, git_pool *pool)
read_tree_recursive	src/tree-cache.c	/^static int read_tree_recursive(git_tree_cache *cache, const git_tree *tree, git_pool *pool)$/;"	f	file:	signature:(git_tree_cache *cache, const git_tree *tree, git_pool *pool)
read_type_missing	tests/fetchhead/nonetwork.c	/^static int read_type_missing(const char *ref_name, const char *remote_url,$/;"	f	file:	signature:(const char *ref_name, const char *remote_url, const git_oid *oid, unsigned int is_merge, void *payload)
readdir	src/win32/dir.h	37;"	d
readdir_r	src/win32/dir.h	38;"	d
reader	src/config_file.c	/^struct reader {$/;"	s	file:
reader::buffer	src/config_file.c	/^	git_buf buffer;$/;"	m	struct:reader	file:	access:public
reader::checksum	src/config_file.c	/^	git_oid checksum;$/;"	m	struct:reader	file:	access:public
reader::eof	src/config_file.c	/^	int eof;$/;"	m	struct:reader	file:	access:public
reader::file_path	src/config_file.c	/^	char *file_path;$/;"	m	struct:reader	file:	access:public
reader::line_number	src/config_file.c	/^	int line_number;$/;"	m	struct:reader	file:	access:public
reader::read_ptr	src/config_file.c	/^	char *read_ptr;$/;"	m	struct:reader	file:	access:public
reader_consume_line	src/config_file.c	/^static void reader_consume_line(struct reader *reader)$/;"	f	file:	signature:(struct reader *reader)
reader_getchar	src/config_file.c	/^static int reader_getchar(struct reader *reader, int flags)$/;"	f	file:	signature:(struct reader *reader, int flags)
reader_getchar_raw	src/config_file.c	/^static int reader_getchar_raw(struct reader *reader)$/;"	f	file:	signature:(struct reader *reader)
reader_idx	src/config_file.c	/^	uint32_t reader_idx;$/;"	m	struct:parse_data	file:	access:public
reader_peek	src/config_file.c	/^static int reader_peek(struct reader *reader, int flags)$/;"	f	file:	signature:(struct reader *reader, int flags)
reader_readline	src/config_file.c	/^static char *reader_readline(struct reader *reader, bool skip_whitespace)$/;"	f	file:	signature:(struct reader *reader, bool skip_whitespace)
readers	src/config_file.c	/^	git_array_t(struct reader) readers;$/;"	m	struct:__anon154	file:	access:public
readers	src/index.h	/^	git_atomic readers; \/* number of active iterators *\/$/;"	m	struct:git_index	access:public
readonly	include/git2/sys/config.h	/^	int readonly;$/;"	m	struct:git_config_backend	access:public
readstream	include/git2/sys/odb_backend.h	/^	int (* readstream)($/;"	m	struct:git_odb_backend	access:public
rebase	include/git2/rebase.h	/^GIT_EXTERN(int) git_rebase_abort(git_rebase *rebase);$/;"	v
rebase	include/git2/rebase.h	/^GIT_EXTERN(size_t) git_rebase_operation_current(git_rebase *rebase);$/;"	v
rebase	include/git2/rebase.h	/^GIT_EXTERN(size_t) git_rebase_operation_entrycount(git_rebase *rebase);$/;"	v
rebase	include/git2/rebase.h	/^GIT_EXTERN(void) git_rebase_free(git_rebase *rebase);$/;"	v
rebase_alloc	src/rebase.c	/^static int rebase_alloc(git_rebase **out, const git_rebase_options *rebase_opts)$/;"	f	file:	signature:(git_rebase **out, const git_rebase_options *rebase_opts)
rebase_check_versions	src/rebase.c	/^static int rebase_check_versions(const git_rebase_options *given_opts)$/;"	f	file:	signature:(const git_rebase_options *given_opts)
rebase_checkout_progress_cb	tests/rebase/merge.c	/^void rebase_checkout_progress_cb($/;"	f	signature:( const char *path, size_t completed_steps, size_t total_steps, void *payload)
rebase_cleanup	src/rebase.c	/^static int rebase_cleanup(git_rebase *rebase)$/;"	f	file:	signature:(git_rebase *rebase)
rebase_commit__create	src/rebase.c	/^static int rebase_commit__create($/;"	f	file:	signature:( git_commit **out, git_rebase *rebase, git_index *index, git_commit *parent_commit, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message)
rebase_commit_inmemory	src/rebase.c	/^static int rebase_commit_inmemory($/;"	f	file:	signature:( git_oid *commit_id, git_rebase *rebase, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message)
rebase_commit_merge	src/rebase.c	/^static int rebase_commit_merge($/;"	f	file:	signature:( git_oid *commit_id, git_rebase *rebase, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message)
rebase_copy_note	src/rebase.c	/^static int rebase_copy_note($/;"	f	file:	signature:( git_rebase *rebase, const char *notes_ref, git_oid *from, git_oid *to, const git_signature *committer)
rebase_copy_notes	src/rebase.c	/^static int rebase_copy_notes($/;"	f	file:	signature:( git_rebase *rebase, const git_signature *committer)
rebase_ensure_not_dirty	src/rebase.c	/^static int rebase_ensure_not_dirty($/;"	f	file:	signature:( git_repository *repo, bool check_index, bool check_workdir, int fail_with)
rebase_ensure_not_in_progress	src/rebase.c	/^static int rebase_ensure_not_in_progress(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
rebase_init_inmemory	src/rebase.c	/^static int rebase_init_inmemory($/;"	f	file:	signature:( git_rebase *rebase, git_repository *repo, const git_annotated_commit *branch, const git_annotated_commit *upstream, const git_annotated_commit *onto)
rebase_init_merge	src/rebase.c	/^static int rebase_init_merge($/;"	f	file:	signature:( git_rebase *rebase, git_repository *repo, const git_annotated_commit *branch, const git_annotated_commit *upstream, const git_annotated_commit *onto)
rebase_init_operations	src/rebase.c	/^static int rebase_init_operations($/;"	f	file:	signature:( git_rebase *rebase, git_repository *repo, const git_annotated_commit *branch, const git_annotated_commit *upstream, const git_annotated_commit *onto)
rebase_is_blocked	tests/rebase/setup.c	/^static int rebase_is_blocked(void)$/;"	f	file:	signature:(void)
rebase_movenext	src/rebase.c	/^GIT_INLINE(int) rebase_movenext(git_rebase *rebase)$/;"	f	signature:(git_rebase *rebase)
rebase_next_inmemory	src/rebase.c	/^static int rebase_next_inmemory($/;"	f	file:	signature:( git_rebase_operation **out, git_rebase *rebase)
rebase_next_merge	src/rebase.c	/^static int rebase_next_merge($/;"	f	file:	signature:( git_rebase_operation **out, git_rebase *rebase)
rebase_onto_name	src/rebase.c	/^static const char *rebase_onto_name(const git_annotated_commit *onto)$/;"	f	file:	signature:(const git_annotated_commit *onto)
rebase_open_merge	src/rebase.c	/^static int rebase_open_merge(git_rebase *rebase)$/;"	f	file:	signature:(git_rebase *rebase)
rebase_operation_alloc	src/rebase.c	/^static git_rebase_operation *rebase_operation_alloc($/;"	f	file:	signature:( git_rebase *rebase, git_rebase_operation_t type, git_oid *id, const char *exec)
rebase_readfile	src/rebase.c	/^GIT_INLINE(int) rebase_readfile($/;"	f	signature:( git_buf *out, git_buf *state_path, const char *filename)
rebase_readint	src/rebase.c	/^GIT_INLINE(int) rebase_readint($/;"	f	signature:( size_t *out, git_buf *asc_out, git_buf *state_path, const char *filename)
rebase_readoid	src/rebase.c	/^GIT_INLINE(int) rebase_readoid($/;"	f	signature:( git_oid *out, git_buf *str_out, git_buf *state_path, const char *filename)
rebase_setupfile	src/rebase.c	/^static int rebase_setupfile(git_rebase *rebase, const char *filename, int flags, const char *fmt, ...)$/;"	f	file:	signature:(git_rebase *rebase, const char *filename, int flags, const char *fmt, ...)
rebase_setupfiles	src/rebase.c	/^static int rebase_setupfiles(git_rebase *rebase)$/;"	f	file:	signature:(git_rebase *rebase)
rebase_setupfiles_merge	src/rebase.c	/^static int rebase_setupfiles_merge(git_rebase *rebase)$/;"	f	file:	signature:(git_rebase *rebase)
rebase_state_type	src/rebase.c	/^static int rebase_state_type($/;"	f	file:	signature:( git_rebase_type_t *type_out, char **path_out, git_repository *repo)
receive_pack_ls_service_url	src/transports/http.c	/^static const char *receive_pack_ls_service_url = "\/info\/refs?service=git-receive-pack";$/;"	v	file:
receive_pack_ls_service_url	src/transports/winhttp.c	/^static const char *receive_pack_ls_service_url = "\/info\/refs?service=git-receive-pack";$/;"	v	file:
receive_pack_service	src/transports/http.c	/^static const char *receive_pack_service = "receive-pack";$/;"	v	file:
receive_pack_service	src/transports/winhttp.c	/^static const char *receive_pack_service = "receive-pack";$/;"	v	file:
receive_pack_service_url	src/transports/http.c	/^static const char *receive_pack_service_url = "\/git-receive-pack";$/;"	v	file:
receive_pack_service_url	src/transports/winhttp.c	/^static const char *receive_pack_service_url = "\/git-receive-pack";$/;"	v	file:
received_bytes	include/git2/odb_backend.h	/^	git_off_t received_bytes;$/;"	m	struct:git_odb_stream	access:public
received_bytes	include/git2/types.h	/^	size_t received_bytes;$/;"	m	struct:git_transfer_progress	access:public
received_objects	include/git2/types.h	/^	unsigned int received_objects;$/;"	m	struct:git_transfer_progress	access:public
received_response	src/transports/http.c	/^		received_response : 1,$/;"	m	struct:__anon175	file:	access:public
received_response	src/transports/winhttp.c	/^		received_response : 1,$/;"	m	struct:__anon180	file:	access:public
record	src/xdiff/xhistogram.c	/^	struct record {$/;"	s	struct:histindex	file:	access:public
record_callbacks_data	tests/online/push_util.h	/^} record_callbacks_data;$/;"	t	typeref:struct:__anon353
record_callbacks_data_clear	tests/online/push_util.c	/^void record_callbacks_data_clear(record_callbacks_data *data)$/;"	f	signature:(record_callbacks_data *data)
record_push_status_cb	tests/online/push.c	/^static int record_push_status_cb(const char *ref, const char *msg, void *payload)$/;"	f	file:	signature:(const char *ref, const char *msg, void *payload)
record_ref_cb	tests/online/push_util.c	/^int record_ref_cb(git_remote_head *head, void *payload)$/;"	f	signature:(git_remote_head *head, void *payload)
record_update_tips_cb	tests/online/push_util.c	/^int record_update_tips_cb(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f	signature:(const char *refname, const git_oid *a, const git_oid *b, void *data)
records	src/xdiff/xhistogram.c	/^	} **records, \/* an occurrence *\/$/;"	m	struct:histindex	typeref:struct:histindex::record	file:	access:public
records_size	src/xdiff/xhistogram.c	/^		     records_size,$/;"	m	struct:histindex	file:	access:public
recs	src/xdiff/xtypes.h	/^	xrecord_t **recs;$/;"	m	struct:s_xdfile	access:public
recursing	src/pack-objects.h	/^	    recursing:1,$/;"	m	struct:git_pobject	access:public
recursion_limit	include/git2/merge.h	/^	unsigned int recursion_limit;$/;"	m	struct:__anon132	access:public
recv	src/netops.h	/^	int (*recv)(struct gitno_buffer *buffer);$/;"	m	struct:gitno_buffer	access:public
recv_pkt	src/transports/smart_protocol.c	/^static int recv_pkt(git_pkt **out, gitno_buffer *buf)$/;"	f	file:	signature:(git_pkt **out, gitno_buffer *buf)
recv_stream	src/netops.c	/^static int recv_stream(gitno_buffer *buf)$/;"	f	file:	signature:(gitno_buffer *buf)
redirect_count	src/transports/http.c	/^		redirect_count : 3;$/;"	m	struct:__anon175	file:	access:public
redirect_url	src/transports/http.c	/^	char *redirect_url;$/;"	m	struct:__anon175	file:	access:public
ref	include/git2/refs.h	/^GIT_EXTERN(const char *) git_reference_name(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const char *) git_reference_shorthand(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const char *) git_reference_symbolic_target(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const git_oid *) git_reference_target(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const git_oid *) git_reference_target_peel(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(git_ref_t) git_reference_type(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(git_repository *) git_reference_owner(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_delete(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_branch(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_note(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_remote(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_tag(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(void) git_reference_free(git_reference *ref);$/;"	v
ref	src/push.h	/^	char *ref;$/;"	m	struct:push_status	access:public
ref	src/transports/smart.h	/^	char *ref;$/;"	m	struct:__anon190	access:public
ref	src/transports/smart.h	/^	char *ref;$/;"	m	struct:__anon191	access:public
ref	tests/online/push_util.h	/^	char *ref;$/;"	m	struct:__anon355	access:public
ref	tests/refs/branches/name.c	/^static git_reference *ref;$/;"	v	file:
ref_branch_name	tests/refs/overwrite.c	/^static const char *ref_branch_name = "refs\/heads\/branch";$/;"	v	file:
ref_error_notfound	src/refdb_fs.c	/^static int ref_error_notfound(const char *name)$/;"	f	file:	signature:(const char *name)
ref_is_available	src/refdb_fs.c	/^static bool ref_is_available($/;"	f	file:	signature:( const char *old_ref, const char *new_ref, const char *this_ref)
ref_list	tests/refs/listall.c	/^static git_strarray ref_list;$/;"	v	file:
ref_master_name	tests/refs/overwrite.c	/^static const char *ref_master_name = "refs\/heads\/master";$/;"	v	file:
ref_master_name	tests/refs/rename.c	/^static const char *ref_master_name = "refs\/heads\/master";$/;"	v	file:
ref_master_name	tests/refs/setter.c	/^static const char *ref_master_name = "refs\/heads\/master";$/;"	v	file:
ref_name	src/annotated_commit.h	/^	const char *ref_name;$/;"	m	struct:git_annotated_commit	access:public
ref_name	src/fetchhead.h	/^	char *ref_name;$/;"	m	struct:git_fetchhead_ref	access:public
ref_name	src/reflog.h	/^	char *ref_name;$/;"	m	struct:git_reflog	access:public
ref_name	tests/refs/overwrite.c	/^static const char *ref_name = "refs\/heads\/other";$/;"	v	file:
ref_name	tests/refs/setter.c	/^static const char *ref_name = "refs\/heads\/other";$/;"	v	file:
ref_name_cmp	src/transports/smart.c	/^static int ref_name_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
ref_one_name	tests/refs/rename.c	/^static const char *ref_one_name = "refs\/heads\/one\/branch";$/;"	v	file:
ref_one_name_new	tests/refs/rename.c	/^static const char *ref_one_name_new = "refs\/heads\/two\/branch";$/;"	v	file:
ref_pkt	src/transports/smart_pkt.c	/^static int ref_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
ref_test_name	tests/refs/overwrite.c	/^static const char *ref_test_name = "refs\/heads\/test";$/;"	v	file:
ref_test_name	tests/refs/setter.c	/^static const char *ref_test_name = "refs\/heads\/test";$/;"	v	file:
ref_to_update	src/remote.c	/^static int ref_to_update(int *update, git_buf *remote_name, git_remote *remote, git_refspec *spec, const char *ref_name)$/;"	f	file:	signature:(int *update, git_buf *remote_name, git_remote *remote, git_refspec *spec, const char *ref_name)
ref_two_name	tests/refs/rename.c	/^static const char *ref_two_name = "refs\/heads\/two";$/;"	v	file:
ref_two_name_new	tests/refs/rename.c	/^static const char *ref_two_name_new = "refs\/heads\/two\/two";$/;"	v	file:
ref_type	src/transaction.c	/^	git_ref_t ref_type;$/;"	m	struct:__anon208	file:	access:public
refcache	src/refdb_fs.c	/^	git_sortedcache *refcache;$/;"	m	struct:refdb_fs_backend	file:	access:public
refcmp_cb	tests/refs/iterator.c	/^static int refcmp_cb(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
refcnt	src/blame.h	/^	int refcnt;$/;"	m	struct:git_blame__origin	access:public
refcount	src/cache.h	/^	git_atomic refcount;$/;"	m	struct:__anon229	access:public
refcount	src/config_file.c	/^	git_atomic refcount;$/;"	m	struct:__anon152	file:	access:public
refcount	src/pack.h	/^	git_atomic refcount;$/;"	m	struct:git_pack_cache_entry	access:public
refcount	src/pack.h	/^	git_atomic refcount;$/;"	m	struct:git_pack_file	access:public
refcount	src/util.h	/^	git_atomic refcount;$/;"	m	struct:__anon199	access:public
refcounted_strmap	src/config_file.c	/^} refcounted_strmap;$/;"	t	typeref:struct:__anon152	file:
refcounted_strmap_alloc	src/config_file.c	/^static int refcounted_strmap_alloc(refcounted_strmap **out)$/;"	f	file:	signature:(refcounted_strmap **out)
refcounted_strmap_free	src/config_file.c	/^static void refcounted_strmap_free(refcounted_strmap *map)$/;"	f	file:	signature:(refcounted_strmap *map)
refcounted_strmap_take	src/config_file.c	/^static refcounted_strmap *refcounted_strmap_take(diskfile_header *h)$/;"	f	file:	signature:(diskfile_header *h)
refdb	include/git2/refdb.h	/^GIT_EXTERN(int) git_refdb_compress(git_refdb *refdb);$/;"	v
refdb	include/git2/refdb.h	/^GIT_EXTERN(void) git_refdb_free(git_refdb *refdb);$/;"	v
refdb_free_backend	src/refdb.c	/^static void refdb_free_backend(git_refdb *db)$/;"	f	file:	signature:(git_refdb *db)
refdb_fs_backend	src/refdb_fs.c	/^typedef struct refdb_fs_backend {$/;"	s	file:
refdb_fs_backend	src/refdb_fs.c	/^} refdb_fs_backend;$/;"	t	typeref:struct:refdb_fs_backend	file:
refdb_fs_backend::direach_flags	src/refdb_fs.c	/^	uint32_t direach_flags;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend::iterator_flags	src/refdb_fs.c	/^	git_iterator_flag_t iterator_flags;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend::parent	src/refdb_fs.c	/^	git_refdb_backend parent;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend::path	src/refdb_fs.c	/^	char *path;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend::peeling_mode	src/refdb_fs.c	/^	int peeling_mode;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend::refcache	src/refdb_fs.c	/^	git_sortedcache *refcache;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend::repo	src/refdb_fs.c	/^	git_repository *repo;$/;"	m	struct:refdb_fs_backend	file:	access:public
refdb_fs_backend__compress	src/refdb_fs.c	/^static int refdb_fs_backend__compress(git_refdb_backend *_backend)$/;"	f	file:	signature:(git_refdb_backend *_backend)
refdb_fs_backend__delete	src/refdb_fs.c	/^static int refdb_fs_backend__delete($/;"	f	file:	signature:( git_refdb_backend *_backend, const char *ref_name, const git_oid *old_id, const char *old_target)
refdb_fs_backend__delete_tail	src/refdb_fs.c	/^static int refdb_fs_backend__delete_tail($/;"	f	file:	signature:( git_refdb_backend *_backend, git_filebuf *file, const char *ref_name, const git_oid *old_id, const char *old_target)
refdb_fs_backend__exists	src/refdb_fs.c	/^static int refdb_fs_backend__exists($/;"	f	file:	signature:( int *exists, git_refdb_backend *_backend, const char *ref_name)
refdb_fs_backend__free	src/refdb_fs.c	/^static void refdb_fs_backend__free(git_refdb_backend *_backend)$/;"	f	file:	signature:(git_refdb_backend *_backend)
refdb_fs_backend__iterator	src/refdb_fs.c	/^static int refdb_fs_backend__iterator($/;"	f	file:	signature:( git_reference_iterator **out, git_refdb_backend *_backend, const char *glob)
refdb_fs_backend__iterator_free	src/refdb_fs.c	/^static void refdb_fs_backend__iterator_free(git_reference_iterator *_iter)$/;"	f	file:	signature:(git_reference_iterator *_iter)
refdb_fs_backend__iterator_next	src/refdb_fs.c	/^static int refdb_fs_backend__iterator_next($/;"	f	file:	signature:( git_reference **out, git_reference_iterator *_iter)
refdb_fs_backend__iterator_next_name	src/refdb_fs.c	/^static int refdb_fs_backend__iterator_next_name($/;"	f	file:	signature:( const char **out, git_reference_iterator *_iter)
refdb_fs_backend__lock	src/refdb_fs.c	/^static int refdb_fs_backend__lock(void **out, git_refdb_backend *_backend, const char *refname)$/;"	f	file:	signature:(void **out, git_refdb_backend *_backend, const char *refname)
refdb_fs_backend__lookup	src/refdb_fs.c	/^static int refdb_fs_backend__lookup($/;"	f	file:	signature:( git_reference **out, git_refdb_backend *_backend, const char *ref_name)
refdb_fs_backend__rename	src/refdb_fs.c	/^static int refdb_fs_backend__rename($/;"	f	file:	signature:( git_reference **out, git_refdb_backend *_backend, const char *old_name, const char *new_name, int force, const git_signature *who, const char *message)
refdb_fs_backend__unlock	src/refdb_fs.c	/^static int refdb_fs_backend__unlock(git_refdb_backend *backend, void *payload, int success, int update_reflog,$/;"	f	file:	signature:(git_refdb_backend *backend, void *payload, int success, int update_reflog, const git_reference *ref, const git_signature *sig, const char *message)
refdb_fs_backend__write	src/refdb_fs.c	/^static int refdb_fs_backend__write($/;"	f	file:	signature:( git_refdb_backend *_backend, const git_reference *ref, int force, const git_signature *who, const char *message, const git_oid *old_id, const char *old_target)
refdb_fs_backend__write_tail	src/refdb_fs.c	/^static int refdb_fs_backend__write_tail($/;"	f	file:	signature:( git_refdb_backend *_backend, const git_reference *ref, git_filebuf *file, int update_reflog, const git_signature *who, const char *message, const git_oid *old_id, const char *old_target)
refdb_fs_iter	src/refdb_fs.c	/^} refdb_fs_iter;$/;"	t	typeref:struct:__anon204	file:
refdb_reflog_fs__delete	src/refdb_fs.c	/^static int refdb_reflog_fs__delete(git_refdb_backend *_backend, const char *name)$/;"	f	file:	signature:(git_refdb_backend *_backend, const char *name)
refdb_reflog_fs__ensure_log	src/refdb_fs.c	/^static int refdb_reflog_fs__ensure_log(git_refdb_backend *_backend, const char *name)$/;"	f	file:	signature:(git_refdb_backend *_backend, const char *name)
refdb_reflog_fs__has_log	src/refdb_fs.c	/^static int refdb_reflog_fs__has_log(git_refdb_backend *_backend, const char *name)$/;"	f	file:	signature:(git_refdb_backend *_backend, const char *name)
refdb_reflog_fs__read	src/refdb_fs.c	/^static int refdb_reflog_fs__read(git_reflog **out, git_refdb_backend *_backend, const char *name)$/;"	f	file:	signature:(git_reflog **out, git_refdb_backend *_backend, const char *name)
refdb_reflog_fs__rename	src/refdb_fs.c	/^static int refdb_reflog_fs__rename(git_refdb_backend *_backend, const char *old_name, const char *new_name)$/;"	f	file:	signature:(git_refdb_backend *_backend, const char *old_name, const char *new_name)
refdb_reflog_fs__write	src/refdb_fs.c	/^static int refdb_reflog_fs__write(git_refdb_backend *_backend, git_reflog *reflog)$/;"	f	file:	signature:(git_refdb_backend *_backend, git_reflog *reflog)
reference__create	src/refs.c	/^static int reference__create($/;"	f	file:	signature:( git_reference **ref_out, git_repository *repo, const char *name, const git_oid *oid, const char *symbolic, int force, const git_signature *signature, const char *log_message, const git_oid *old_id, const char *old_target)
reference__rename	src/refs.c	/^static int reference__rename(git_reference **out, git_reference *ref, const char *new_name, int force,$/;"	f	file:	signature:(git_reference **out, git_reference *ref, const char *new_name, int force, const git_signature *signature, const char *message)
reference_is_packed	tests/refs/ref_helpers.c	/^int reference_is_packed(git_reference *ref)$/;"	f	signature:(git_reference *ref)
reference_listing	examples/general.c	/^static void reference_listing(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
reference_normalize_for_repo	src/refs.c	/^static int reference_normalize_for_repo($/;"	f	file:	signature:( git_refname_t out, git_repository *repo, const char *name)
reference_path_available	src/refdb_fs.c	/^static int reference_path_available($/;"	f	file:	signature:( refdb_fs_backend *backend, const char *new_ref, const char* old_ref, int force)
reflog	include/git2/reflog.h	/^GIT_EXTERN(int) git_reflog_write(git_reflog *reflog);$/;"	v
reflog	include/git2/reflog.h	/^GIT_EXTERN(size_t) git_reflog_entrycount(git_reflog *reflog);$/;"	v
reflog	include/git2/reflog.h	/^GIT_EXTERN(void) git_reflog_free(git_reflog *reflog);$/;"	v
reflog	src/transaction.c	/^	git_reflog *reflog;$/;"	m	struct:__anon208	file:	access:public
reflog_alloc	src/refdb_fs.c	/^static int reflog_alloc(git_reflog **reflog, const char *name)$/;"	f	file:	signature:(git_reflog **reflog, const char *name)
reflog_append	src/refdb_fs.c	/^static int reflog_append(refdb_fs_backend *backend, const git_reference *ref, const git_oid *old, const git_oid *new, const git_signature *who, const char *message)$/;"	f	file:	signature:(refdb_fs_backend *backend, const git_reference *ref, const git_oid *old, const git_oid *new, const git_signature *who, const char *message)
reflog_check	tests/reset/reset_helpers.c	/^void reflog_check(git_repository *repo, const char *refname,$/;"	f	signature:(git_repository *repo, const char *refname, size_t exp_count, const char *exp_email, const char *exp_msg)
reflog_delete	include/git2/sys/refdb_backend.h	/^	int (*reflog_delete)(git_refdb_backend *backend, const char *name);$/;"	m	struct:git_refdb_backend	access:public
reflog_inverse_index	src/reflog.h	/^GIT_INLINE(size_t) reflog_inverse_index(size_t idx, size_t total)$/;"	f	signature:(size_t idx, size_t total)
reflog_parse	src/refdb_fs.c	/^static int reflog_parse(git_reflog *log, const char *buf, size_t buf_size)$/;"	f	file:	signature:(git_reflog *log, const char *buf, size_t buf_size)
reflog_read	include/git2/sys/refdb_backend.h	/^	int (*reflog_read)(git_reflog **out, git_refdb_backend *backend, const char *name);$/;"	m	struct:git_refdb_backend	access:public
reflog_rename	include/git2/sys/refdb_backend.h	/^	int (*reflog_rename)(git_refdb_backend *_backend, const char *old_name, const char *new_name);$/;"	m	struct:git_refdb_backend	access:public
reflog_write	include/git2/sys/refdb_backend.h	/^	int (*reflog_write)(git_refdb_backend *backend, git_reflog *reflog);$/;"	m	struct:git_refdb_backend	access:public
refname	tests/refs/races.c	/^static const char *refname = "refs\/heads\/master";$/;"	v	file:
refnames	tests/refs/iterator.c	/^static const char *refnames[] = {$/;"	v	file:
refresh	include/git2/sys/odb_backend.h	/^	int (* refresh)(git_odb_backend *);$/;"	m	struct:git_odb_backend	access:public
refresh	tests/generate.py	/^    def refresh(self, path):$/;"	m	class:Module	access:public
refs	src/remote.h	/^	git_vector refs;$/;"	m	struct:git_remote	access:public
refs	src/transports/local.c	/^	git_vector refs;$/;"	m	struct:__anon178	file:	access:public
refs	src/transports/smart.h	/^	git_vector refs;$/;"	m	struct:__anon193	access:public
refs_foreach_cancel_cb	tests/refs/iterator.c	/^static int refs_foreach_cancel_cb(git_reference *reference, void *payload)$/;"	f	file:	signature:(git_reference *reference, void *payload)
refs_foreach_cb	tests/refs/iterator.c	/^static int refs_foreach_cb(git_reference *reference, void *payload)$/;"	f	file:	signature:(git_reference *reference, void *payload)
refs_foreach_name_cancel_cb	tests/refs/iterator.c	/^static int refs_foreach_name_cancel_cb(const char *name, void *payload)$/;"	f	file:	signature:(const char *name, void *payload)
refs_foreach_name_cb	tests/refs/iterator.c	/^static int refs_foreach_name_cb(const char *name, void *payload)$/;"	f	file:	signature:(const char *name, void *payload)
refspec	include/git2/refspec.h	/^GIT_EXTERN(const char *) git_refspec_dst(const git_refspec *refspec);$/;"	v
refspec	include/git2/refspec.h	/^GIT_EXTERN(const char *) git_refspec_src(const git_refspec *refspec);$/;"	v
refspec	include/git2/refspec.h	/^GIT_EXTERN(const char *) git_refspec_string(const git_refspec *refspec);$/;"	v
refspec	include/git2/refspec.h	/^GIT_EXTERN(int) git_refspec_force(const git_refspec *refspec);$/;"	v
refspec	src/push.h	/^	struct git_refspec refspec;$/;"	m	struct:push_spec	typeref:struct:push_spec::git_refspec	access:public
refspec	tests/online/remotes.c	/^static const char *refspec = "refs\/heads\/first-merge:refs\/remotes\/origin\/first-merge";$/;"	v	file:
refspec_cb	src/remote.c	/^static int refspec_cb(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
refspec_cb_data	src/remote.c	/^struct refspec_cb_data {$/;"	s	file:
refspec_cb_data::fetch	src/remote.c	/^	int fetch;$/;"	m	struct:refspec_cb_data	file:	access:public
refspec_cb_data::remote	src/remote.c	/^	git_remote *remote;$/;"	m	struct:refspec_cb_data	file:	access:public
refspec_transform	src/refspec.c	/^static int refspec_transform($/;"	f	file:	signature:( git_buf *out, const char *from, const char *to, const char *name)
refspecs	src/remote.h	/^	git_vector refspecs;$/;"	m	struct:git_remote	access:public
refute__submodule_exists	tests/submodule/submodule_helpers.c	/^void refute__submodule_exists($/;"	f	signature:( git_repository *repo, const char *name, int expected_error, const char *msg, const char *file, int line)
refute_is_ignored	tests/status/ignore.c	33;"	d	file:
refute_submodule_exists	tests/submodule/submodule_helpers.h	22;"	d
reg_errcode_t	deps/regex/regex.h	/^} reg_errcode_t;$/;"	t	typeref:enum:__anon17
reg_syntax_t	deps/regex/regex.h	/^typedef unsigned long int reg_syntax_t;$/;"	t
regcomp	deps/regex/regcomp.c	/^regcomp (regex_t *__restrict preg,$/;"	f	signature:(regex_t *__restrict preg, const char *__restrict pattern, int cflags)
regcomp	deps/regex/regex.c	32;"	d	file:
regerror	deps/regex/regex.c	33;"	d	file:
regex	src/config.c	/^	regex_t regex;$/;"	m	struct:__anon337	file:	access:public
regex	src/config.c	/^	regex_t regex;$/;"	m	struct:__anon339	file:	access:public
regex_t	deps/regex/regex.h	/^typedef struct re_pattern_buffer regex_t;$/;"	t	typeref:struct:re_pattern_buffer
regexec	deps/regex/regex.c	31;"	d	file:
regexec	deps/regex/regexec.c	/^regexec ($/;"	f	signature:( const regex_t *__restrict preg, const char *__restrict string, size_t nmatch, regmatch_t pmatch[], int eflags)
regfree	deps/regex/regcomp.c	/^regfree (regex_t *preg)$/;"	f	signature:(regex_t *preg)
regfree	deps/regex/regex.c	30;"	d	file:
region	src/xdiff/xhistogram.c	/^struct region {$/;"	s	file:
region::begin1	src/xdiff/xhistogram.c	/^	unsigned int begin1, end1;$/;"	m	struct:region	file:	access:public
region::begin2	src/xdiff/xhistogram.c	/^	unsigned int begin2, end2;$/;"	m	struct:region	file:	access:public
region::end1	src/xdiff/xhistogram.c	/^	unsigned int begin1, end1;$/;"	m	struct:region	file:	access:public
region::end2	src/xdiff/xhistogram.c	/^	unsigned int begin2, end2;$/;"	m	struct:region	file:	access:public
register_custom_filters	tests/filter/custom.c	/^static void register_custom_filters(void)$/;"	f	file:	signature:(void)
register_state	deps/regex/regex_internal.c	/^register_state (const re_dfa_t *dfa, re_dfastate_t *newstate,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_dfastate_t *newstate, unsigned int hash)
regmatch_t	deps/regex/regex.h	/^} regmatch_t;$/;"	t	typeref:struct:__anon18
regoff_t	deps/regex/regex.h	/^typedef int regoff_t;$/;"	t
regs	deps/regex/regex_internal.h	/^  regmatch_t *regs;$/;"	m	struct:re_fail_stack_ent_t	access:public
rehash	src/pack-objects.c	/^static void rehash(git_packbuilder *pb)$/;"	f	file:	signature:(git_packbuilder *pb)
reinit	tests/core/init.c	/^static void *reinit(void *unused)$/;"	f	file:	signature:(void *unused)
release_attr_files	src/attr.c	/^static void release_attr_files(git_vector *files)$/;"	f	file:	signature:(git_vector *files)
release_map	src/config_file.c	/^static void release_map(git_config_entry *entry)$/;"	f	file:	signature:(git_config_entry *entry)
reload_submodules	src/checkout.c	/^	bool reload_submodules;$/;"	m	struct:__anon215	file:	access:public
rem	include/git2/inttypes.h	/^   intmax_t rem;$/;"	m	struct:__anon45	access:public
remain	src/patch_parse.h	/^	const char *remain;$/;"	m	struct:__anon327	access:public
remain_len	src/patch_parse.h	/^	size_t remain_len;$/;"	m	struct:__anon327	access:public
remaining	src/pack-objects.c	/^	size_t remaining;$/;"	m	struct:thread_params	file:	access:public
remote	examples/network/fetch.c	/^	git_remote *remote;$/;"	m	struct:dl_data	file:	access:public
remote	include/git2/remote.h	/^GIT_EXTERN(const char *) git_remote_name(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(const char *) git_remote_pushurl(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(const char *) git_remote_url(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(const git_transfer_progress *) git_remote_stats(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(git_remote_autotag_option_t) git_remote_autotag(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(git_repository *) git_remote_owner(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(int) git_remote_connected(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(int) git_remote_prune_refs(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(size_t) git_remote_refspec_count(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_disconnect(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_free(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_stop(git_remote *remote);$/;"	v
remote	src/push.h	/^	git_remote *remote;$/;"	m	struct:git_push	access:public
remote	src/remote.c	/^	git_remote *remote;$/;"	m	struct:refspec_cb_data	file:	access:public
remote	tests/network/remote/local.c	/^static git_remote *remote;$/;"	v	file:
remote_cb	include/git2/clone.h	/^	git_remote_create_cb remote_cb;$/;"	m	struct:git_clone_options	access:public
remote_cb_payload	include/git2/clone.h	/^	void *remote_cb_payload;$/;"	m	struct:git_clone_options	access:public
remote_head_cmp	src/remote.c	/^static int remote_head_cmp(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
remote_head_for_fetchspec_src	src/remote.c	/^static int remote_head_for_fetchspec_src(git_remote_head **out, git_vector *update_heads, const char *fetchspec_src)$/;"	f	file:	signature:(git_remote_head **out, git_vector *update_heads, const char *fetchspec_src)
remote_head_for_ref	src/remote.c	/^static int remote_head_for_ref(git_remote_head **out, git_remote *remote, git_refspec *spec, git_vector *update_heads, git_reference *ref)$/;"	f	file:	signature:(git_remote_head **out, git_remote *remote, git_refspec *spec, git_vector *update_heads, git_reference *ref)
remote_list_cb	src/remote.c	/^static int remote_list_cb(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
remote_mirror_cb	tests/network/fetchlocal.c	/^static int remote_mirror_cb(git_remote **out, git_repository *repo,$/;"	f	file:	signature:(git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
remote_mirror_cb	tests/online/clone.c	/^static int remote_mirror_cb(git_remote **out, git_repository *repo,$/;"	f	file:	signature:(git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
remote_single_branch	tests/online/remotes.c	/^static int remote_single_branch(git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)$/;"	f	file:	signature:(git_remote **out, git_repository *repo, const char *name, const char *url, void *payload)
remote_tracking_branch_name	tests/refs/branches/remote.c	/^static const char *remote_tracking_branch_name = "refs\/remotes\/test\/master";$/;"	v	file:
remote_url	src/annotated_commit.h	/^	const char *remote_url;$/;"	m	struct:git_annotated_commit	access:public
remote_url	src/fetchhead.h	/^	char *remote_url;$/;"	m	struct:git_fetchhead_ref	access:public
remove	src/transaction.c	/^		remove :1;$/;"	m	struct:__anon208	file:	access:public
remove_branch_config_related_entries	src/remote.c	/^static int remove_branch_config_related_entries($/;"	f	file:	signature:( git_repository *repo, const char *remote_name)
remove_conflicts	src/checkout.c	/^	git_vector remove_conflicts;$/;"	m	struct:__anon215	file:	access:public
remove_data	tests/clar_libgit2.c	/^} remove_data;$/;"	t	typeref:struct:__anon375	file:
remove_file_cb	tests/status/worktree.c	/^static int remove_file_cb(void *data, git_buf *file)$/;"	f	file:	signature:(void *data, git_buf *file)
remove_note_in_tree_eexists_cb	src/notes.c	/^static int remove_note_in_tree_eexists_cb($/;"	f	file:	signature:( git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int current_error)
remove_note_in_tree_enotfound_cb	src/notes.c	/^static int remove_note_in_tree_enotfound_cb($/;"	f	file:	signature:( git_tree **out, git_repository *repo, git_tree *parent, git_oid *note_oid, const char *annotated_object_sha, int fanout, int current_error)
remove_object_files	tests/object/raw/write.c	/^static void remove_object_files(object_data *d)$/;"	f	file:	signature:(object_data *d)
remove_ones	tests/core/vector.c	/^static int remove_ones(const git_vector *v, size_t idx, void *p)$/;"	f	file:	signature:(const git_vector *v, size_t idx, void *p)
remove_placeholders_recurs	tests/clar_libgit2.c	/^static int remove_placeholders_recurs(void *_data, git_buf *path)$/;"	f	file:	signature:(void *_data, git_buf *path)
remove_redundant	src/merge.c	/^static int remove_redundant(git_revwalk *walk, git_vector *commits)$/;"	f	file:	signature:(git_revwalk *walk, git_vector *commits)
remove_refs	src/remote.c	/^static int remove_refs(git_repository *repo, const git_refspec *spec)$/;"	f	file:	signature:(git_repository *repo, const git_refspec *spec)
remove_remote_tracking	src/remote.c	/^static int remove_remote_tracking(git_repository *repo, const char *remote_name)$/;"	f	file:	signature:(git_repository *repo, const char *remote_name)
removes	src/checkout.c	/^	git_vector removes;$/;"	m	struct:__anon215	file:	access:public
rename	include/git2/sys/refdb_backend.h	/^	int (*rename)($/;"	m	struct:git_refdb_backend	access:public
rename_and_edit_file	tests/status/renames.c	43;"	d	file:
rename_config_entries_cb	src/config.c	/^static int rename_config_entries_cb($/;"	f	file:	signature:( const git_config_entry *entry, void *payload)
rename_data	src/config.c	/^struct rename_data {$/;"	s	file:
rename_data::config	src/config.c	/^	git_config *config;$/;"	m	struct:rename_data	file:	access:public
rename_data::name	src/config.c	/^	git_buf *name;$/;"	m	struct:rename_data	file:	access:public
rename_data::old_len	src/config.c	/^	size_t old_len;$/;"	m	struct:rename_data	file:	access:public
rename_expected	tests/diff/rename.c	/^struct rename_expected$/;"	s	file:
rename_expected::idx	tests/diff/rename.c	/^	size_t idx;$/;"	m	struct:rename_expected	file:	access:public
rename_expected::len	tests/diff/rename.c	/^	size_t len;$/;"	m	struct:rename_expected	file:	access:public
rename_expected::sources	tests/diff/rename.c	/^	const char **sources;$/;"	m	struct:rename_expected	file:	access:public
rename_expected::status	tests/diff/rename.c	/^	unsigned int *status;$/;"	m	struct:rename_expected	file:	access:public
rename_expected::targets	tests/diff/rename.c	/^	const char **targets;$/;"	m	struct:rename_expected	file:	access:public
rename_fetch_refspecs	src/remote.c	/^static int rename_fetch_refspecs(git_vector *problems, git_remote *remote, const char *new_name)$/;"	f	file:	signature:(git_vector *problems, git_remote *remote, const char *new_name)
rename_file	tests/status/renames.c	42;"	d	file:
rename_from_rewrite_threshold	include/git2/diff.h	/^	uint16_t rename_from_rewrite_threshold;$/;"	m	struct:__anon96	access:public
rename_limit	include/git2/diff.h	/^	size_t rename_limit;$/;"	m	struct:__anon96	access:public
rename_new_path	src/patch_parse.c	/^	char *rename_old_path, *rename_new_path;$/;"	m	struct:__anon163	file:	access:public
rename_old_path	src/patch_parse.c	/^	char *rename_old_path, *rename_new_path;$/;"	m	struct:__anon163	file:	access:public
rename_one_remote_reference	src/remote.c	/^static int rename_one_remote_reference($/;"	f	file:	signature:( git_reference *reference_in, const char *old_remote_name, const char *new_remote_name)
rename_remote_config_section	src/remote.c	/^static int rename_remote_config_section($/;"	f	file:	signature:( git_repository *repo, const char *old_name, const char *new_name)
rename_remote_references	src/remote.c	/^static int rename_remote_references($/;"	f	file:	signature:( git_repository *repo, const char *old_name, const char *new_name)
rename_threshold	include/git2/diff.h	/^	uint16_t rename_threshold;$/;"	m	struct:__anon96	access:public
rename_threshold	include/git2/merge.h	/^	unsigned int rename_threshold;$/;"	m	struct:__anon132	access:public
renames	src/diff_stats.c	/^	size_t renames;$/;"	m	struct:git_diff_stats	file:	access:public
render	tests/generate.py	/^        def render(self):$/;"	m	class:Module.CallbacksTemplate	access:public
render	tests/generate.py	/^        def render(self):$/;"	m	class:Module.DeclarationTemplate	access:public
render	tests/generate.py	/^        def render(self):$/;"	m	class:Module.InfoTemplate	access:public
repeat	examples/status.c	/^	int repeat;$/;"	m	struct:opts	file:	access:public
replace_char	tests/index/tests.c	/^static void replace_char(char *str, char in, char out)$/;"	f	file:	signature:(char *str, char in, char out)
replace_file_with_mode	tests/index/filemodes.c	/^static void replace_file_with_mode($/;"	f	file:	signature:( const char *filename, const char *backup, unsigned int create_mode)
replace_name	src/describe.c	/^static int replace_name($/;"	f	file:	signature:( git_tag **tag, git_repository *repo, struct commit_name *e, unsigned int prio, const git_oid *sha1)
replicate10	tests/config/include.c	111;"	d	file:
repo	examples/add.c	/^	git_repository *repo;$/;"	m	struct:print_payload	file:	access:public
repo	examples/log.c	/^	git_repository *repo;$/;"	m	struct:log_state	file:	access:public
repo	examples/rev-parse.c	/^	git_repository *repo;$/;"	m	struct:parse_state	file:	access:public
repo	examples/tag.c	/^	git_repository *repo;$/;"	m	struct:__anon39	file:	access:public
repo	include/git2/attr.h	/^	git_repository *repo);$/;"	v
repo	include/git2/ignore.h	/^	git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^	git_repository* repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(const char *) git_repository_get_namespace(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(const char *) git_repository_path(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(const char *) git_repository_workdir(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_head_detached(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_head_unborn(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_is_bare(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_is_empty(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_is_shallow(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_message_remove(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_state(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_state_cleanup(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(void) git_repository_free(git_repository *repo);$/;"	v
repo	include/git2/sys/repository.h	/^GIT_EXTERN(int) git_repository_set_bare(git_repository *repo);$/;"	v
repo	include/git2/sys/repository.h	/^GIT_EXTERN(void) git_repository__cleanup(git_repository *repo);$/;"	v
repo	src/attr.c	/^	git_repository *repo;$/;"	m	struct:__anon247	file:	access:public
repo	src/blob.c	/^	git_repository *repo;$/;"	m	struct:__anon279	file:	access:public
repo	src/checkout.c	/^	git_repository *repo;$/;"	m	struct:__anon215	file:	access:public
repo	src/commit.c	/^	git_repository *repo;$/;"	m	struct:__anon213	file:	access:public
repo	src/describe.c	/^	git_repository *repo;$/;"	m	struct:get_name_data	file:	access:public
repo	src/describe.c	/^	git_repository *repo;$/;"	m	struct:git_describe_result	file:	access:public
repo	src/diff.h	/^	git_repository   *repo;$/;"	m	struct:git_diff	access:public
repo	src/diff_file.h	/^	git_repository *repo;$/;"	m	struct:__anon277	access:public
repo	src/diff_generate.c	/^	git_repository *repo;$/;"	m	struct:__anon297	file:	access:public
repo	src/diff_tform.c	/^	git_repository *repo;$/;"	m	struct:__anon156	file:	access:public
repo	src/filter.c	/^	git_repository *repo;$/;"	m	struct:git_filter_source	file:	access:public
repo	src/ignore.h	/^	git_repository *repo;$/;"	m	struct:__anon331	access:public
repo	src/iterator.h	/^	git_repository *repo;$/;"	m	struct:git_iterator	access:public
repo	src/merge.h	/^	git_repository *repo;$/;"	m	struct:__anon324	access:public
repo	src/merge_driver.h	/^	git_repository *repo;$/;"	m	struct:git_merge_driver_source	access:public
repo	src/object.h	/^	git_repository *repo;$/;"	m	struct:git_object	access:public
repo	src/pack-objects.h	/^	git_repository *repo; \/* associated repository *\/$/;"	m	struct:git_packbuilder	access:public
repo	src/patch.h	/^	git_repository *repo; \/* may be null *\/$/;"	m	struct:git_patch	access:public
repo	src/push.h	/^	git_repository *repo;$/;"	m	struct:git_push	access:public
repo	src/rebase.c	/^	git_repository *repo;$/;"	m	struct:git_rebase	file:	access:public
repo	src/refdb.h	/^	git_repository *repo;$/;"	m	struct:git_refdb	access:public
repo	src/refdb_fs.c	/^	git_repository *repo;$/;"	m	struct:refdb_fs_backend	file:	access:public
repo	src/remote.h	/^	git_repository *repo;$/;"	m	struct:git_remote	access:public
repo	src/revwalk.h	/^	git_repository *repo;$/;"	m	struct:git_revwalk	access:public
repo	src/submodule.c	/^	git_repository *repo;$/;"	m	struct:__anon305	file:	access:public
repo	src/submodule.h	/^	git_repository *repo;$/;"	m	struct:git_submodule	access:public
repo	src/tag.c	/^	git_repository *repo;$/;"	m	struct:__anon248	file:	access:public
repo	src/transaction.c	/^	git_repository *repo;$/;"	m	struct:git_transaction	file:	access:public
repo	src/transports/local.c	/^	git_repository *repo;$/;"	m	struct:__anon178	file:	access:public
repo	src/tree.h	/^	git_repository *repo;$/;"	m	struct:git_treebuilder	access:public
repo	tests/apply/fromdiff.c	/^static git_repository *repo = NULL;$/;"	v	file:
repo	tests/apply/fromfile.c	/^static git_repository *repo = NULL;$/;"	v	file:
repo	tests/checkout/icase.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/checkout/nasty.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/cherrypick/bare.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/cherrypick/workdir.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/describe/t6120.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/diff/binary.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/diff/format_email.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/conflicts.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/names.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/nsec.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/reuc.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/stage.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/driver.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/files.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/automerge.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/commits.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/modeconflict.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/recursive.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/renames.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/treediff.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/trivial.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/whitespace.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/analysis.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/dirty.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/recursive.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/renames.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/setup.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/simple.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/submodules.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/trivial.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/network/remote/local.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/blob/fromstream.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/blob/write.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/commit/commitstagedfile.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/tag/peel.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/tree/attributes.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/tree/frompath.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/odb/alternates.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/odb/freshen.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/odb/streamwrite.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/rebase/abort.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/rebase/inmemory.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/rebase/iterator.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/rebase/merge.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/rebase/setup.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/create.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/delete.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/ishead.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/iterator.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/lookup.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/move.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/name.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/upstream.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/upstreamname.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/foreachglob.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/iterator.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/listall.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/unicode.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/repo/head.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/repo/headtree.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/repo/setters.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/reset/hard.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/reset/mixed.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/reset/soft.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/revert/bare.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/revert/workdir.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/apply.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/drop.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/foreach.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/save.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/submodules.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/win32/forbidden.c	/^static git_repository *repo;$/;"	v	file:
repo_contains_no_reference	src/repository.c	/^static int repo_contains_no_reference(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
repo_index	tests/cherrypick/workdir.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/conflicts.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/names.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/nsec.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/reuc.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/stage.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/driver.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/files.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/analysis.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/dirty.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/setup.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/simple.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/trivial.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/revert/workdir.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/stash/apply.c	/^static git_index *repo_index;$/;"	v	file:
repo_init_config	src/repository.c	/^static int repo_init_config($/;"	f	file:	signature:( const char *repo_dir, const char *work_dir, uint32_t flags, uint32_t mode)
repo_init_create_head	src/repository.c	/^static int repo_init_create_head(const char *git_dir, const char *ref_name)$/;"	f	file:	signature:(const char *git_dir, const char *ref_name)
repo_init_create_origin	src/repository.c	/^static int repo_init_create_origin(git_repository *repo, const char *url)$/;"	f	file:	signature:(git_repository *repo, const char *url)
repo_init_directories	src/repository.c	/^static int repo_init_directories($/;"	f	file:	signature:( git_buf *repo_path, git_buf *wd_path, const char *given_repo, git_repository_init_options *opts)
repo_init_fs_configs	src/repository.c	/^static int repo_init_fs_configs($/;"	f	file:	signature:( git_config *cfg, const char *cfg_path, const char *repo_dir, const char *work_dir, bool update_ignorecase)
repo_init_structure	src/repository.c	/^static int repo_init_structure($/;"	f	file:	signature:( const char *repo_dir, const char *work_dir, git_repository_init_options *opts)
repo_local_config	src/repository.c	/^static int repo_local_config($/;"	f	file:	signature:( git_config **out, git_buf *config_dir, git_repository *repo, const char *repo_dir)
repo_mode	tests/repo/init.c	/^enum repo_mode {$/;"	g	file:
repo_name	tests/checkout/nasty.c	/^static const char *repo_name = "nasty";$/;"	v	file:
repo_name	tests/win32/forbidden.c	/^static const char *repo_name = "win32-forbidden";$/;"	v	file:
repo_reinit_submodule_fs	src/repository.c	/^static int repo_reinit_submodule_fs(git_submodule *sm, const char *n, void *p)$/;"	f	file:	signature:(git_submodule *sm, const char *n, void *p)
repo_template	src/repo_template.h	/^static repo_template_item repo_template[] = {$/;"	v
repo_template_item	src/repo_template.h	/^} repo_template_item;$/;"	t	typeref:struct:__anon151
repo_write_gitlink	src/repository.c	/^static int repo_write_gitlink($/;"	f	file:	signature:( const char *in_dir, const char *to_repo, bool use_relative_path)
repo_write_template	src/repository.c	/^static int repo_write_template($/;"	f	file:	signature:( const char *git_dir, bool allow_overwrite, const char *file, mode_t mode, bool hidden, const char *content)
repodir	examples/log.c	/^	const char *repodir;$/;"	m	struct:log_state	file:	access:public
repodir	examples/rev-parse.c	/^	const char *repodir;$/;"	m	struct:parse_state	file:	access:public
repodir	examples/status.c	/^	char *repodir;$/;"	m	struct:opts	file:	access:public
report_delta_progress	src/pack-objects.c	/^static int report_delta_progress($/;"	f	file:	signature:( git_packbuilder *pb, uint32_t count, bool force)
report_errors_only	tests/clar.c	/^	int report_errors_only;$/;"	m	struct:__anon364	file:	access:public
report_hook	src/win32/w32_crtdbg_stacktrace.c	/^static int __cdecl report_hook(int nRptType, char *szMsg, int *retVal)$/;"	f	file:	signature:(int nRptType, char *szMsg, int *retVal)
report_progress	src/checkout.c	/^static void report_progress($/;"	f	file:	signature:( checkout_data *data, const char *path)
report_status	src/push.h	/^	bool report_status;$/;"	m	struct:git_push	access:public
report_status	src/transports/smart.h	/^		report_status:1,$/;"	m	struct:transport_smart_caps	access:public
report_suite_names	tests/clar.c	/^	int report_suite_names;$/;"	m	struct:__anon364	file:	access:public
repository	src/blame.h	/^	git_repository *repository;$/;"	m	struct:git_blame	access:public
repository_alloc	src/repository.c	/^static git_repository *repository_alloc(void)$/;"	f	file:	signature:(void)
repository_cb	include/git2/clone.h	/^	git_repository_create_cb repository_cb;$/;"	m	struct:git_clone_options	access:public
repository_cb_payload	include/git2/clone.h	/^	void *repository_cb_payload;$/;"	m	struct:git_clone_options	access:public
request	src/transports/winhttp.c	/^	HINTERNET request;$/;"	m	struct:__anon180	file:	access:public
request_creds	src/transports/ssh.c	/^static int request_creds(git_cred **out, ssh_subtransport *t, const char *user, int auth_methods)$/;"	f	file:	signature:(git_cred **out, ssh_subtransport *t, const char *user, int auth_methods)
request_uri	src/transports/winhttp.c	/^	wchar_t *request_uri;$/;"	m	struct:__anon180	file:	access:public
res	tests/resources/userdiff/after/file.php	/^            $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/before/file.php	/^            $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/expected/driver/diff.php	/^             $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/expected/nodriver/diff.php	/^             $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/files/file.php	/^            $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res_oid	src/odb_loose.c	/^	unsigned char res_oid[GIT_OID_HEXSZ];	\/* hex formatted oid of$/;"	m	struct:__anon345	file:	access:public
reserved	deps/zlib/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s	access:public
reserved_names	src/repository.h	/^	git_array_t(git_buf) reserved_names;$/;"	m	struct:git_repository	access:public
reserved_names_add8dot3	src/repository.c	/^static int reserved_names_add8dot3(git_repository *repo, const char *path)$/;"	f	file:	signature:(git_repository *repo, const char *path)
reset	src/iterator.h	/^	int (*reset)(git_iterator *);$/;"	m	struct:__anon256	access:public
reset	src/reset.c	/^static int reset($/;"	f	file:	signature:( git_repository *repo, git_object *target, const char *to, git_reset_t reset_type, const git_checkout_options *checkout_opts)
reset_index_and_workdir	src/stash.c	/^static int reset_index_and_workdir($/;"	f	file:	signature:( git_repository *repo, git_commit *commit, bool remove_untracked, bool remove_ignored)
reset_index_to_treeish	tests/checkout/checkout_helpers.c	/^void reset_index_to_treeish(git_object *treeish)$/;"	f	signature:(git_object *treeish)
resize	src/tsort.c	/^static int resize(struct tsort_store *store, size_t new_size)$/;"	f	file:	signature:(struct tsort_store *store, size_t new_size)
resize_trie	src/oid.c	/^static int resize_trie(git_oid_shorten *self, size_t new_size)$/;"	f	file:	signature:(git_oid_shorten *self, size_t new_size)
resize_vector	src/vector.c	/^GIT_INLINE(int) resize_vector(git_vector *v, size_t new_size)$/;"	f	signature:(git_vector *v, size_t new_size)
resolve_commit_oid_to_tree	tests/diff/diff_helpers.c	/^git_tree *resolve_commit_oid_to_tree($/;"	f	signature:( git_repository *repo, const char *partial_oid)
resolve_deltas	src/indexer.c	/^static int resolve_deltas(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:	signature:(git_indexer *idx, git_transfer_progress *stats)
resolve_symlink	src/filebuf.c	/^static int resolve_symlink(git_buf *out, const char *path)$/;"	f	file:	signature:(git_buf *out, const char *path)
resolved	src/merge.h	/^	git_vector resolved;$/;"	m	struct:__anon324	access:public
result	include/git2/describe.h	/^GIT_EXTERN(void) git_describe_result_free(git_describe_result *result);$/;"	v
result	include/git2/merge.h	/^GIT_EXTERN(void) git_merge_file_result_free(git_merge_file_result *result);$/;"	v
result	src/describe.c	/^	git_describe_result *result;$/;"	m	struct:get_name_data	file:	access:public
result	src/win32/thread.h	/^	void *result;$/;"	m	struct:__anon285	access:public
result_bytes	tests/revwalk/basic.c	/^static const int result_bytes = 24;$/;"	v	file:
result_contents	tests/merge/workdir/dirty.c	/^static char *result_contents[4][6] = {$/;"	v	file:
ret	examples/network/fetch.c	/^	int ret;$/;"	m	struct:dl_data	file:	access:public
retrieve_base_commit_and_message	src/stash.c	/^static int retrieve_base_commit_and_message($/;"	f	file:	signature:( git_commit **b_commit, git_buf *stash_message, git_repository *repo)
retrieve_branch_reference	src/branch.c	/^static int retrieve_branch_reference($/;"	f	file:	signature:( git_reference **branch_reference_out, git_repository *repo, const char *branch_name, int is_remote)
retrieve_head	src/stash.c	/^static int retrieve_head(git_reference **out, git_repository *repo)$/;"	f	file:	signature:(git_reference **out, git_repository *repo)
retrieve_known_commit	tests/refs/branches/create.c	/^static void retrieve_known_commit(git_commit **commit, git_repository *repo)$/;"	f	file:	signature:(git_commit **commit, git_repository *repo)
retrieve_note_tree_and_commit	src/notes.c	/^static int retrieve_note_tree_and_commit($/;"	f	file:	signature:( git_tree **tree_out, git_commit **commit_out, char **notes_ref_out, git_repository *repo, const char *notes_ref)
retrieve_object	src/pack-objects.c	/^static int retrieve_object(git_walk_object **out, git_packbuilder *pb, const git_oid *id)$/;"	f	file:	signature:(git_walk_object **out, git_packbuilder *pb, const git_oid *id)
retrieve_oid_from_reflog	src/revparse.c	/^static int retrieve_oid_from_reflog(git_oid *oid, git_reference *ref, size_t identifier)$/;"	f	file:	signature:(git_oid *oid, git_reference *ref, size_t identifier)
retrieve_peeled_tag_or_object_oid	src/describe.c	/^static int retrieve_peeled_tag_or_object_oid($/;"	f	file:	signature:( git_oid *peeled_out, git_oid *ref_target_out, git_repository *repo, const char *refname)
retrieve_previously_checked_out_branch_or_revision	src/revparse.c	/^static int retrieve_previously_checked_out_branch_or_revision(git_object **out, git_reference **base_ref, git_repository *repo, const char *identifier, size_t position)$/;"	f	file:	signature:(git_object **out, git_reference **base_ref, git_repository *repo, const char *identifier, size_t position)
retrieve_reflog_path	src/refdb_fs.c	/^GIT_INLINE(int) retrieve_reflog_path(git_buf *path, git_repository *repo, const char *name)$/;"	f	signature:(git_buf *path, git_repository *repo, const char *name)
retrieve_remote_tracking_reference	src/revparse.c	/^static int retrieve_remote_tracking_reference(git_reference **base_ref, const char *identifier, git_repository *repo)$/;"	f	file:	signature:(git_reference **base_ref, const char *identifier, git_repository *repo)
retrieve_revobject_from_reflog	src/revparse.c	/^static int retrieve_revobject_from_reflog(git_object **out, git_reference **base_ref, git_repository *repo, const char *identifier, size_t position)$/;"	f	file:	signature:(git_object **out, git_reference **base_ref, git_repository *repo, const char *identifier, size_t position)
retrieve_stash_commit	src/stash.c	/^static int retrieve_stash_commit($/;"	f	file:	signature:( git_commit **commit, git_repository *repo, size_t index)
retrieve_stash_trees	src/stash.c	/^static int retrieve_stash_trees($/;"	f	file:	signature:( git_tree **out_stash_tree, git_tree **out_base_tree, git_tree **out_index_tree, git_tree **out_index_parent_tree, git_tree **out_untracked_tree, git_commit *stash_commit)
retrieve_tag_from_oid	tests/object/tag/peel.c	/^static void retrieve_tag_from_oid(git_tag **tag_out, git_repository *repo, const char *sha)$/;"	f	file:	signature:(git_tag **tag_out, git_repository *repo, const char *sha)
retrieve_tag_reference	src/tag.c	/^static int retrieve_tag_reference($/;"	f	file:	signature:( git_reference **tag_reference_out, git_buf *ref_name_out, git_repository *repo, const char *tag_name)
retrieve_tag_reference_oid	src/tag.c	/^static int retrieve_tag_reference_oid($/;"	f	file:	signature:( git_oid *oid, git_buf *ref_name_out, git_repository *repo, const char *tag_name)
retrieve_target_from_oid	tests/refs/branches/create.c	/^static void retrieve_target_from_oid(git_commit **out, git_repository *repo, const char *sha)$/;"	f	file:	signature:(git_commit **out, git_repository *repo, const char *sha)
retrieve_top_stash_id	tests/stash/drop.c	/^void retrieve_top_stash_id(git_oid *out)$/;"	f	signature:(git_oid *out)
retrieve_upstream_configuration	src/branch.c	/^static int retrieve_upstream_configuration($/;"	f	file:	signature:( git_buf *out, const git_config *config, const char *canonical_branch_name, const char *format)
return_normally	tests/threads/basic.c	/^static void *return_normally(void *param)$/;"	f	file:	signature:(void *param)
return_to_orig_head	src/rebase.c	/^static int return_to_orig_head(git_rebase *rebase)$/;"	f	file:	signature:(git_rebase *rebase)
reuc	src/index.h	/^	git_vector reuc;$/;"	m	struct:git_index	access:public
reuc_cmp	src/index.c	/^static int reuc_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
reuc_entry_alloc	src/index.c	/^static git_index_reuc_entry *reuc_entry_alloc(const char *path)$/;"	f	file:	signature:(const char *path)
reuc_entry_exists	tests/index/reuc.c	/^static int reuc_entry_exists(void)$/;"	f	file:	signature:(void)
reuc_entry_internal	src/index.c	/^struct reuc_entry_internal {$/;"	s	file:
reuc_entry_internal::entry	src/index.c	/^	git_index_reuc_entry entry;$/;"	m	struct:reuc_entry_internal	file:	access:public
reuc_entry_internal::path	src/index.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:reuc_entry_internal	file:	access:public
reuc_entry_internal::pathlen	src/index.c	/^	size_t pathlen;$/;"	m	struct:reuc_entry_internal	file:	access:public
reuc_icmp	src/index.c	/^static int reuc_icmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
reuc_isrch	src/index.c	/^static int reuc_isrch(const void *key, const void *array_member)$/;"	f	file:	signature:(const void *key, const void *array_member)
reuc_search	src/index.h	/^	git_vector_cmp reuc_search;$/;"	m	struct:git_index	access:public
reuc_srch	src/index.c	/^static int reuc_srch(const void *key, const void *array_member)$/;"	f	file:	signature:(const void *key, const void *array_member)
rev	examples/cat-file.c	/^	const char *rev;$/;"	m	struct:opts	file:	access:public
reverse_elements	src/tsort.c	/^static void reverse_elements(void **dst, ssize_t start, ssize_t end)$/;"	f	file:	signature:(void **dst, ssize_t start, ssize_t end)
reverse_filter_apply	tests/filter/custom_helpers.c	/^int reverse_filter_apply($/;"	f	signature:( git_filter *self, void **payload, git_buf *to, const git_buf *from, const git_filter_source *source)
reverse_filter_free	tests/filter/custom_helpers.c	/^static void reverse_filter_free(git_filter *f)$/;"	f	file:	signature:(git_filter *f)
reversed	tests/filter/wildcard.c	/^static unsigned char reversed[] = {$/;"	v	file:
revert_normalize_opts	src/revert.c	/^static int revert_normalize_opts($/;"	f	file:	signature:( git_repository *repo, git_revert_options *opts, const git_revert_options *given, const char *their_label)
revert_seterr	src/revert.c	/^static int revert_seterr(git_commit *commit, const char *fmt)$/;"	f	file:	signature:(git_commit *commit, const char *fmt)
revert_state_cleanup	src/revert.c	/^static int revert_state_cleanup(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
revisions	examples/log.c	/^	int revisions;$/;"	m	struct:log_state	file:	access:public
revparse__ext	src/revparse.c	/^int revparse__ext($/;"	f	signature:( git_object **object_out, git_reference **reference_out, size_t *identifier_len_out, git_repository *repo, const char *spec)
revparse_lookup_object	src/revparse.c	/^static int revparse_lookup_object($/;"	f	file:	signature:( git_object **object_out, git_reference **reference_out, git_repository *repo, const char *spec)
revwalk	src/push.c	/^static int revwalk(git_vector *commits, git_push *push)$/;"	f	file:	signature:(git_vector *commits, git_push *push)
revwalk_basic_setup_walk	tests/revwalk/basic.c	/^static void revwalk_basic_setup_walk(const char *fixture)$/;"	f	file:	signature:(const char *fixture)
revwalk_enqueue_timesort	src/revwalk.c	/^static int revwalk_enqueue_timesort(git_revwalk *walk, git_commit_list_node *commit)$/;"	f	file:	signature:(git_revwalk *walk, git_commit_list_node *commit)
revwalk_enqueue_unsorted	src/revwalk.c	/^static int revwalk_enqueue_unsorted(git_revwalk *walk, git_commit_list_node *commit)$/;"	f	file:	signature:(git_revwalk *walk, git_commit_list_node *commit)
revwalk_next_reverse	src/revwalk.c	/^static int revwalk_next_reverse(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:	signature:(git_commit_list_node **object_out, git_revwalk *walk)
revwalk_next_timesort	src/revwalk.c	/^static int revwalk_next_timesort(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:	signature:(git_commit_list_node **object_out, git_revwalk *walk)
revwalk_next_toposort	src/revwalk.c	/^static int revwalk_next_toposort(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:	signature:(git_commit_list_node **object_out, git_revwalk *walk)
revwalk_next_unsorted	src/revwalk.c	/^static int revwalk_next_unsorted(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:	signature:(git_commit_list_node **object_out, git_revwalk *walk)
revwalk_parseopts	examples/rev-list.c	/^static int revwalk_parseopts(git_repository *repo, git_revwalk *walk, int nopts, char **opts)$/;"	f	file:	signature:(git_repository *repo, git_revwalk *walk, int nopts, char **opts)
revwalking	examples/general.c	/^static void revwalking(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
rewinddir	src/win32/dir.h	39;"	d
rewrite_gitmodules	tests/submodule/submodule_helpers.c	/^void rewrite_gitmodules(const char *workdir)$/;"	f	signature:(const char *workdir)
rewrite_notes_ref	include/git2/rebase.h	/^	const char *rewrite_notes_ref;$/;"	m	struct:__anon67	access:public
rhash	src/xdiff/xtypes.h	/^	xrecord_t **rhash;$/;"	m	struct:s_xdfile	access:public
right	deps/regex/regex_internal.h	/^  struct bin_tree_t *right;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
rindex	src/xdiff/xdiffi.h	/^	long *rindex;$/;"	m	struct:s_diffdata	access:public
rindex	src/xdiff/xtypes.h	/^	long *rindex;$/;"	m	struct:s_xdfile	access:public
rm_eo	deps/regex/regex.h	/^  regoff_t rm_eo;  \/* Byte offset from string's start to substring's end.  *\/$/;"	m	struct:__anon18	access:public
rm_so	deps/regex/regex.h	/^  regoff_t rm_so;  \/* Byte offset from string's start to substring's start.  *\/$/;"	m	struct:__anon18	access:public
rm_submodule	tests/submodule/status.c	/^static void rm_submodule(const char *name)$/;"	f	file:	signature:(const char *name)
rm_submodule_from_index	tests/submodule/status.c	/^static void rm_submodule_from_index(const char *name)$/;"	f	file:	signature:(const char *name)
roid	src/push.h	/^	git_oid roid;$/;"	m	struct:push_spec	access:public
root	src/iterator.c	/^	char *root;$/;"	m	struct:__anon272	file:	access:public
root	src/iterator.c	/^	git_tree *root;$/;"	m	struct:__anon269	file:	access:public
root_commit_message	tests/commit/write.c	/^static const char *root_commit_message = "This is a root commit\\n\\$/;"	v	file:
root_len	src/iterator.c	/^	size_t root_len;$/;"	m	struct:__anon272	file:	access:public
root_reflog_message	tests/commit/write.c	/^static const char *root_reflog_message = "commit (initial): This is a root commit \\$/;"	v	file:
roundtrip_with_read_index	tests/index/read_index.c	/^static bool roundtrip_with_read_index(const char *tree_idstr)$/;"	f	file:	signature:(const char *tree_idstr)
row_cmp	src/win32/w32_crtdbg_stacktrace.c	/^static int row_cmp(const void *v1, const void *v2)$/;"	f	file:	signature:(const void *v1, const void *v2)
rpc	include/git2/sys/transport.h	/^	unsigned rpc;$/;"	m	struct:git_smart_subtransport_definition	access:public
rpc	src/transports/smart.h	/^	unsigned rpc : 1,$/;"	m	struct:__anon193	access:public
rules	src/attr_file.h	/^	git_vector rules;			\/* vector of <rule*> or <fnmatch*> *\/$/;"	m	struct:__anon170	access:public
run	examples/test/test-rev-list.sh	/^run () {$/;"	f
run_command	examples/network/git2.c	/^static int run_command(git_cb fn, int argc, char **argv)$/;"	f	file:	signature:(git_cb fn, int argc, char **argv)
run_in_parallel	tests/threads/thread_helpers.c	/^void run_in_parallel($/;"	f	signature:( int repeats, int threads, void *(*func)(void *), void (*before_test)(void), void (*after_test)(void))
run_index_diffs	tests/threads/diff.c	/^static void *run_index_diffs(void *arg)$/;"	f	file:	signature:(void *arg)
run_index_diffs_with_modifier	tests/threads/diff.c	/^static void *run_index_diffs_with_modifier(void *arg)$/;"	f	file:	signature:(void *arg)
run_test_cases	tests/attr/lookup.c	/^static void run_test_cases(git_attr_file *file, struct attr_expected *cases, int force_dir)$/;"	f	file:	signature:(git_attr_file *file, struct attr_expected *cases, int force_dir)
run_workdir_iterator	tests/threads/iterator.c	/^static void *run_workdir_iterator(void *arg)$/;"	f	file:	signature:(void *arg)
s	src/socket_stream.h	/^	GIT_SOCKET s;$/;"	m	struct:__anon330	access:public
s	src/transports/http.c	/^	http_stream *s;$/;"	m	struct:__anon177	file:	access:public
s40	tests/object/message.c	16;"	d	file:
s_bdiffparam	src/xdiff/xdiff.h	/^typedef struct s_bdiffparam {$/;"	s
s_bdiffparam::bsize	src/xdiff/xdiff.h	/^	long bsize;$/;"	m	struct:s_bdiffparam	access:public
s_body_identity	deps/http-parser/http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	deps/http-parser/http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chanode	src/xdiff/xtypes.h	/^typedef struct s_chanode {$/;"	s
s_chanode::icurr	src/xdiff/xtypes.h	/^	long icurr;$/;"	m	struct:s_chanode	access:public
s_chanode::next	src/xdiff/xtypes.h	/^	struct s_chanode *next;$/;"	m	struct:s_chanode	typeref:struct:s_chanode::s_chanode	access:public
s_chastore	src/xdiff/xtypes.h	/^typedef struct s_chastore {$/;"	s
s_chastore::ancur	src/xdiff/xtypes.h	/^	chanode_t *ancur;$/;"	m	struct:s_chastore	access:public
s_chastore::head	src/xdiff/xtypes.h	/^	chanode_t *head, *tail;$/;"	m	struct:s_chastore	access:public
s_chastore::isize	src/xdiff/xtypes.h	/^	long isize, nsize;$/;"	m	struct:s_chastore	access:public
s_chastore::nsize	src/xdiff/xtypes.h	/^	long isize, nsize;$/;"	m	struct:s_chastore	access:public
s_chastore::scurr	src/xdiff/xtypes.h	/^	long scurr;$/;"	m	struct:s_chastore	access:public
s_chastore::sncur	src/xdiff/xtypes.h	/^	chanode_t *sncur;$/;"	m	struct:s_chastore	access:public
s_chastore::tail	src/xdiff/xtypes.h	/^	chanode_t *head, *tail;$/;"	m	struct:s_chastore	access:public
s_chunk_data	deps/http-parser/http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	deps/http-parser/http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	deps/http-parser/http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	deps/http-parser/http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	deps/http-parser/http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	deps/http-parser/http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	deps/http-parser/http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	deps/http-parser/http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_diffdata	src/xdiff/xdiffi.h	/^typedef struct s_diffdata {$/;"	s
s_diffdata::ha	src/xdiff/xdiffi.h	/^	unsigned long const *ha;$/;"	m	struct:s_diffdata	access:public
s_diffdata::nrec	src/xdiff/xdiffi.h	/^	long nrec;$/;"	m	struct:s_diffdata	access:public
s_diffdata::rchg	src/xdiff/xdiffi.h	/^	char *rchg;$/;"	m	struct:s_diffdata	access:public
s_diffdata::rindex	src/xdiff/xdiffi.h	/^	long *rindex;$/;"	m	struct:s_diffdata	access:public
s_header_almost_done	deps/http-parser/http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	deps/http-parser/http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	deps/http-parser/http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	deps/http-parser/http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_lws	deps/http-parser/http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	deps/http-parser/http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	deps/http-parser/http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	deps/http-parser/http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	deps/http-parser/http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	deps/http-parser/http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	deps/http-parser/http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	deps/http-parser/http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	deps/http-parser/http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	deps/http-parser/http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	deps/http-parser/http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	deps/http-parser/http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	deps/http-parser/http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	deps/http-parser/http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_lno	src/blame.h	/^	size_t s_lno;$/;"	m	struct:git_blame__entry	access:public
s_message_done	deps/http-parser/http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_methods	tests/clar_libgit2_trace.c	/^static struct method s_methods[] = {$/;"	v	typeref:struct:method	file:
s_mmbuffer	src/xdiff/xdiff.h	/^typedef struct s_mmbuffer {$/;"	s
s_mmbuffer::ptr	src/xdiff/xdiff.h	/^	char *ptr;$/;"	m	struct:s_mmbuffer	access:public
s_mmbuffer::size	src/xdiff/xdiff.h	/^	size_t size;$/;"	m	struct:s_mmbuffer	access:public
s_mmfile	src/xdiff/xdiff.h	/^typedef struct s_mmfile {$/;"	s
s_mmfile::ptr	src/xdiff/xdiff.h	/^	char *ptr;$/;"	m	struct:s_mmfile	access:public
s_mmfile::size	src/xdiff/xdiff.h	/^	size_t size;$/;"	m	struct:s_mmfile	access:public
s_reg_t	deps/regex/regex.h	/^typedef long int s_reg_t;$/;"	t
s_req_first_http_major	deps/http-parser/http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	deps/http-parser/http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	deps/http-parser/http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	deps/http-parser/http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	deps/http-parser/http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	deps/http-parser/http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	deps/http-parser/http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	deps/http-parser/http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	deps/http-parser/http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	deps/http-parser/http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	deps/http-parser/http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	deps/http-parser/http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	deps/http-parser/http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	deps/http-parser/http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	deps/http-parser/http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	deps/http-parser/http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	deps/http-parser/http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	deps/http-parser/http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	deps/http-parser/http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	deps/http-parser/http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	deps/http-parser/http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	deps/http-parser/http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	deps/http-parser/http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	deps/http-parser/http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	deps/http-parser/http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	deps/http-parser/http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	deps/http-parser/http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	deps/http-parser/http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	deps/http-parser/http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	deps/http-parser/http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	deps/http-parser/http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	deps/http-parser/http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	deps/http-parser/http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	deps/http-parser/http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	deps/http-parser/http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	deps/http-parser/http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_start_req	deps/http-parser/http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	deps/http-parser/http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	deps/http-parser/http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
s_timer_run	tests/clar_libgit2_trace.c	/^static cl_perf_timer s_timer_run = CL_PERF_TIMER_INIT;$/;"	v	file:
s_timer_test	tests/clar_libgit2_trace.c	/^static cl_perf_timer s_timer_test = CL_PERF_TIMER_INIT;$/;"	v	file:
s_trace_level	tests/clar_libgit2_trace.c	/^static int s_trace_level = GIT_TRACE_NONE;$/;"	v	file:
s_trace_loaded	tests/clar_libgit2_trace.c	/^static int s_trace_loaded = 0;$/;"	v	file:
s_trace_method	tests/clar_libgit2_trace.c	/^static struct method *s_trace_method = NULL;$/;"	v	typeref:struct:method	file:
s_xdalgoenv	src/xdiff/xdiffi.h	/^typedef struct s_xdalgoenv {$/;"	s
s_xdalgoenv::heur_min	src/xdiff/xdiffi.h	/^	long heur_min;$/;"	m	struct:s_xdalgoenv	access:public
s_xdalgoenv::mxcost	src/xdiff/xdiffi.h	/^	long mxcost;$/;"	m	struct:s_xdalgoenv	access:public
s_xdalgoenv::snake_cnt	src/xdiff/xdiffi.h	/^	long snake_cnt;$/;"	m	struct:s_xdalgoenv	access:public
s_xdchange	src/xdiff/xdiffi.h	/^typedef struct s_xdchange {$/;"	s
s_xdchange::chg1	src/xdiff/xdiffi.h	/^	long chg1, chg2;$/;"	m	struct:s_xdchange	access:public
s_xdchange::chg2	src/xdiff/xdiffi.h	/^	long chg1, chg2;$/;"	m	struct:s_xdchange	access:public
s_xdchange::i1	src/xdiff/xdiffi.h	/^	long i1, i2;$/;"	m	struct:s_xdchange	access:public
s_xdchange::i2	src/xdiff/xdiffi.h	/^	long i1, i2;$/;"	m	struct:s_xdchange	access:public
s_xdchange::ignore	src/xdiff/xdiffi.h	/^	int ignore;$/;"	m	struct:s_xdchange	access:public
s_xdchange::next	src/xdiff/xdiffi.h	/^	struct s_xdchange *next;$/;"	m	struct:s_xdchange	typeref:struct:s_xdchange::s_xdchange	access:public
s_xdemitcb	src/xdiff/xdiff.h	/^typedef struct s_xdemitcb {$/;"	s
s_xdemitcb::outf	src/xdiff/xdiff.h	/^	int (*outf)(void *, mmbuffer_t *, int);$/;"	m	struct:s_xdemitcb	access:public
s_xdemitcb::priv	src/xdiff/xdiff.h	/^	void *priv;$/;"	m	struct:s_xdemitcb	access:public
s_xdemitconf	src/xdiff/xdiff.h	/^typedef struct s_xdemitconf {$/;"	s
s_xdemitconf::ctxlen	src/xdiff/xdiff.h	/^	long ctxlen;$/;"	m	struct:s_xdemitconf	access:public
s_xdemitconf::find_func	src/xdiff/xdiff.h	/^	find_func_t find_func;$/;"	m	struct:s_xdemitconf	access:public
s_xdemitconf::find_func_priv	src/xdiff/xdiff.h	/^	void *find_func_priv;$/;"	m	struct:s_xdemitconf	access:public
s_xdemitconf::flags	src/xdiff/xdiff.h	/^	unsigned long flags;$/;"	m	struct:s_xdemitconf	access:public
s_xdemitconf::hunk_func	src/xdiff/xdiff.h	/^	xdl_emit_hunk_consume_func_t hunk_func;$/;"	m	struct:s_xdemitconf	access:public
s_xdemitconf::interhunkctxlen	src/xdiff/xdiff.h	/^	long interhunkctxlen;$/;"	m	struct:s_xdemitconf	access:public
s_xdfenv	src/xdiff/xtypes.h	/^typedef struct s_xdfenv {$/;"	s
s_xdfenv::xdf1	src/xdiff/xtypes.h	/^	xdfile_t xdf1, xdf2;$/;"	m	struct:s_xdfenv	access:public
s_xdfenv::xdf2	src/xdiff/xtypes.h	/^	xdfile_t xdf1, xdf2;$/;"	m	struct:s_xdfenv	access:public
s_xdfile	src/xdiff/xtypes.h	/^typedef struct s_xdfile {$/;"	s
s_xdfile::dend	src/xdiff/xtypes.h	/^	long dstart, dend;$/;"	m	struct:s_xdfile	access:public
s_xdfile::dstart	src/xdiff/xtypes.h	/^	long dstart, dend;$/;"	m	struct:s_xdfile	access:public
s_xdfile::ha	src/xdiff/xtypes.h	/^	unsigned long *ha;$/;"	m	struct:s_xdfile	access:public
s_xdfile::hbits	src/xdiff/xtypes.h	/^	unsigned int hbits;$/;"	m	struct:s_xdfile	access:public
s_xdfile::nrec	src/xdiff/xtypes.h	/^	long nrec;$/;"	m	struct:s_xdfile	access:public
s_xdfile::nreff	src/xdiff/xtypes.h	/^	long nreff;$/;"	m	struct:s_xdfile	access:public
s_xdfile::rcha	src/xdiff/xtypes.h	/^	chastore_t rcha;$/;"	m	struct:s_xdfile	access:public
s_xdfile::rchg	src/xdiff/xtypes.h	/^	char *rchg;$/;"	m	struct:s_xdfile	access:public
s_xdfile::recs	src/xdiff/xtypes.h	/^	xrecord_t **recs;$/;"	m	struct:s_xdfile	access:public
s_xdfile::rhash	src/xdiff/xtypes.h	/^	xrecord_t **rhash;$/;"	m	struct:s_xdfile	access:public
s_xdfile::rindex	src/xdiff/xtypes.h	/^	long *rindex;$/;"	m	struct:s_xdfile	access:public
s_xdlclass	src/xdiff/xprepare.c	/^typedef struct s_xdlclass {$/;"	s	file:
s_xdlclass::ha	src/xdiff/xprepare.c	/^	unsigned long ha;$/;"	m	struct:s_xdlclass	file:	access:public
s_xdlclass::idx	src/xdiff/xprepare.c	/^	long idx;$/;"	m	struct:s_xdlclass	file:	access:public
s_xdlclass::len1	src/xdiff/xprepare.c	/^	long len1, len2;$/;"	m	struct:s_xdlclass	file:	access:public
s_xdlclass::len2	src/xdiff/xprepare.c	/^	long len1, len2;$/;"	m	struct:s_xdlclass	file:	access:public
s_xdlclass::line	src/xdiff/xprepare.c	/^	char const *line;$/;"	m	struct:s_xdlclass	file:	access:public
s_xdlclass::next	src/xdiff/xprepare.c	/^	struct s_xdlclass *next;$/;"	m	struct:s_xdlclass	typeref:struct:s_xdlclass::s_xdlclass	file:	access:public
s_xdlclass::size	src/xdiff/xprepare.c	/^	long size;$/;"	m	struct:s_xdlclass	file:	access:public
s_xdlclassifier	src/xdiff/xprepare.c	/^typedef struct s_xdlclassifier {$/;"	s	file:
s_xdlclassifier::alloc	src/xdiff/xprepare.c	/^	long alloc;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::count	src/xdiff/xprepare.c	/^	long count;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::flags	src/xdiff/xprepare.c	/^	long flags;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::hbits	src/xdiff/xprepare.c	/^	unsigned int hbits;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::hsize	src/xdiff/xprepare.c	/^	long hsize;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::ncha	src/xdiff/xprepare.c	/^	chastore_t ncha;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::rchash	src/xdiff/xprepare.c	/^	xdlclass_t **rchash;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdlclassifier::rcrecs	src/xdiff/xprepare.c	/^	xdlclass_t **rcrecs;$/;"	m	struct:s_xdlclassifier	file:	access:public
s_xdmerge	src/xdiff/xmerge.c	/^typedef struct s_xdmerge {$/;"	s	file:
s_xdmerge::chg0	src/xdiff/xmerge.c	/^	long chg0;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::chg1	src/xdiff/xmerge.c	/^	long chg1, chg2;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::chg2	src/xdiff/xmerge.c	/^	long chg1, chg2;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::i0	src/xdiff/xmerge.c	/^	long i0;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::i1	src/xdiff/xmerge.c	/^	long i1, i2;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::i2	src/xdiff/xmerge.c	/^	long i1, i2;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::mode	src/xdiff/xmerge.c	/^	int mode;$/;"	m	struct:s_xdmerge	file:	access:public
s_xdmerge::next	src/xdiff/xmerge.c	/^	struct s_xdmerge *next;$/;"	m	struct:s_xdmerge	typeref:struct:s_xdmerge::s_xdmerge	file:	access:public
s_xdpsplit	src/xdiff/xdiffi.c	/^typedef struct s_xdpsplit {$/;"	s	file:
s_xdpsplit::i1	src/xdiff/xdiffi.c	/^	long i1, i2;$/;"	m	struct:s_xdpsplit	file:	access:public
s_xdpsplit::i2	src/xdiff/xdiffi.c	/^	long i1, i2;$/;"	m	struct:s_xdpsplit	file:	access:public
s_xdpsplit::min_hi	src/xdiff/xdiffi.c	/^	int min_lo, min_hi;$/;"	m	struct:s_xdpsplit	file:	access:public
s_xdpsplit::min_lo	src/xdiff/xdiffi.c	/^	int min_lo, min_hi;$/;"	m	struct:s_xdpsplit	file:	access:public
s_xmparam	src/xdiff/xdiff.h	/^typedef struct s_xmparam {$/;"	s
s_xmparam::ancestor	src/xdiff/xdiff.h	/^	const char *ancestor;	\/* label for orig *\/$/;"	m	struct:s_xmparam	access:public
s_xmparam::favor	src/xdiff/xdiff.h	/^	int favor;$/;"	m	struct:s_xmparam	access:public
s_xmparam::file1	src/xdiff/xdiff.h	/^	const char *file1;	\/* label for mf1 *\/$/;"	m	struct:s_xmparam	access:public
s_xmparam::file2	src/xdiff/xdiff.h	/^	const char *file2;	\/* label for mf2 *\/$/;"	m	struct:s_xmparam	access:public
s_xmparam::level	src/xdiff/xdiff.h	/^	int level;$/;"	m	struct:s_xmparam	access:public
s_xmparam::marker_size	src/xdiff/xdiff.h	/^	int marker_size;$/;"	m	struct:s_xmparam	access:public
s_xmparam::style	src/xdiff/xdiff.h	/^	int style;$/;"	m	struct:s_xmparam	access:public
s_xmparam::xpp	src/xdiff/xdiff.h	/^	xpparam_t xpp;$/;"	m	struct:s_xmparam	access:public
s_xpparam	src/xdiff/xdiff.h	/^typedef struct s_xpparam {$/;"	s
s_xpparam::flags	src/xdiff/xdiff.h	/^	unsigned long flags;$/;"	m	struct:s_xpparam	access:public
s_xrecord	src/xdiff/xtypes.h	/^typedef struct s_xrecord {$/;"	s
s_xrecord::ha	src/xdiff/xtypes.h	/^	unsigned long ha;$/;"	m	struct:s_xrecord	access:public
s_xrecord::next	src/xdiff/xtypes.h	/^	struct s_xrecord *next;$/;"	m	struct:s_xrecord	typeref:struct:s_xrecord::s_xrecord	access:public
s_xrecord::ptr	src/xdiff/xtypes.h	/^	char const *ptr;$/;"	m	struct:s_xrecord	access:public
s_xrecord::size	src/xdiff/xtypes.h	/^	long size;$/;"	m	struct:s_xrecord	access:public
safe_crlf	src/crlf.c	/^	int safe_crlf;$/;"	m	struct:crlf_attrs	file:	access:public
same_suspect	src/blame_git.c	/^static bool same_suspect(git_blame__origin *a, git_blame__origin *b)$/;"	f	file:	signature:(git_blame__origin *a, git_blame__origin *b)
sane	deps/zlib/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state	access:public
save_cache	tests/generate.py	/^    def save_cache(self):$/;"	m	class:TestSuite	access:public
save_entry	src/indexer.c	/^static int save_entry(git_indexer *idx, struct entry *entry, struct git_pack_entry *pentry, git_off_t entry_start)$/;"	f	file:	signature:(git_indexer *idx, struct entry *entry, struct git_pack_entry *pentry, git_off_t entry_start)
sb_char	deps/regex/regex_internal.h	/^  re_bitset_ptr_t sb_char;$/;"	m	struct:re_dfa_t	access:public
sbcset	deps/regex/regex_internal.h	/^    re_bitset_ptr_t sbcset;	\/* for SIMPLE_BRACKET *\/$/;"	m	union:__anon7::__anon8	access:public
scanA	src/xdiff/xhistogram.c	/^static int scanA(struct histindex *index, unsigned int line1, unsigned int count1)$/;"	f	file:	signature:(struct histindex *index, unsigned int line1, unsigned int count1)
scan_tree	deps/zlib/trees.c	/^local void scan_tree (s, tree, max_code)$/;"	f
scanned	src/blame.h	/^	bool scanned;$/;"	m	struct:git_blame__entry	access:public
score	src/blame.h	/^	unsigned score;$/;"	m	struct:git_blame__entry	access:public
scurr	src/xdiff/xtypes.h	/^	long scurr;$/;"	m	struct:s_chastore	access:public
search_cur_bkref_entry	deps/regex/regexec.c	/^search_cur_bkref_entry (const re_match_context_t *mctx, int str_idx)$/;"	f	file:	signature:(const re_match_context_t *mctx, int str_idx)
search_duplicated_node	deps/regex/regcomp.c	/^search_duplicated_node (const re_dfa_t *dfa, int org_node,$/;"	f	file:	signature:(const re_dfa_t *dfa, int org_node, unsigned int constraint)
second_tree	tests/object/tree/write.c	/^static const char *second_tree = "f60079018b664e4e79329a7ef9559c8d9e0378d1";$/;"	v	file:
seconds	include/git2/index.h	/^	int32_t seconds;$/;"	m	struct:__anon101	access:public
seconds	src/index.c	/^	uint32_t seconds;$/;"	m	struct:entry_time	file:	access:public
section	src/config_file.c	/^	const char *section;$/;"	m	struct:write_data	file:	access:public
seed_packbuilder	tests/pack/packbuilder.c	/^static void seed_packbuilder(void)$/;"	f	file:	signature:(void)
seek_back_trailer	src/indexer.c	/^static void seek_back_trailer(git_indexer *idx)$/;"	f	file:	signature:(git_indexer *idx)
seek_forward	src/index.c	2454;"	d	file:
seek_forward	src/index.c	2550;"	d	file:
seek_forward	src/refdb_fs.c	1485;"	d	file:
seek_forward	src/refdb_fs.c	1540;"	d	file:
seen	src/commit_list.h	/^	unsigned int seen:1,$/;"	m	struct:git_commit_list_node	access:public
seen	src/pack-objects.h	/^		seen:1;$/;"	m	struct:__anon320	access:public
seen_paths	tests/stash/apply.c	/^struct seen_paths {$/;"	s	file:
seen_paths::how	tests/stash/apply.c	/^	bool how;$/;"	m	struct:seen_paths	file:	access:public
seen_paths::what	tests/stash/apply.c	/^	bool what;$/;"	m	struct:seen_paths	file:	access:public
seen_paths::when	tests/stash/apply.c	/^	bool when;$/;"	m	struct:seen_paths	file:	access:public
seen_paths::who	tests/stash/apply.c	/^	bool who;$/;"	m	struct:seen_paths	file:	access:public
send_all_trees	deps/zlib/trees.c	/^local void send_all_trees(s, lcodes, dcodes, blcodes)$/;"	f
send_bits	deps/zlib/trees.c	/^local void send_bits(s, value, length)$/;"	f
send_bits	deps/zlib/trees.c	213;"	d	file:
send_code	deps/zlib/trees.c	163;"	d	file:
send_code	deps/zlib/trees.c	167;"	d	file:
send_command	src/transports/git.c	/^static int send_command(git_proto_stream *s)$/;"	f	file:	signature:(git_proto_stream *s)
send_command	src/transports/ssh.c	/^static int send_command(ssh_stream *s)$/;"	f	file:	signature:(ssh_stream *s)
send_request	src/transports/winhttp.c	/^static int send_request(winhttp_stream *s, size_t len, int ignore_length)$/;"	f	file:	signature:(winhttp_stream *s, size_t len, int ignore_length)
send_tree	deps/zlib/trees.c	/^local void send_tree (s, tree, max_code)$/;"	f
sent_command	src/transports/git.c	/^	unsigned sent_command : 1;$/;"	m	struct:__anon197	file:	access:public
sent_command	src/transports/ssh.c	/^	unsigned sent_command : 1;$/;"	m	struct:__anon182	file:	access:public
sent_request	src/transports/http.c	/^	unsigned sent_request : 1,$/;"	m	struct:__anon175	file:	access:public
sent_request	src/transports/winhttp.c	/^	unsigned sent_request : 1,$/;"	m	struct:__anon180	file:	access:public
serialize_reflog_entry	src/refdb_fs.c	/^static int serialize_reflog_entry($/;"	f	file:	signature:( git_buf *buf, const git_oid *oid_old, const git_oid *oid_new, const git_signature *committer, const char *msg)
service	src/transports/http.c	/^	const char *service;$/;"	m	struct:__anon175	file:	access:public
service	src/transports/winhttp.c	/^	const char *service;$/;"	m	struct:__anon180	file:	access:public
service_url	src/transports/http.c	/^	const char *service_url;$/;"	m	struct:__anon175	file:	access:public
service_url	src/transports/winhttp.c	/^	const char *service_url;$/;"	m	struct:__anon180	file:	access:public
session	src/transports/ssh.c	/^	LIBSSH2_SESSION *session;$/;"	m	struct:__anon182	file:	access:public
session	src/transports/winhttp.c	/^	HINTERNET session;$/;"	m	struct:__anon181	file:	access:public
session_key	src/attr_file.h	/^	int session_key;$/;"	m	struct:__anon170	access:public
set	include/git2/sys/config.h	/^	int (*set)(struct git_config_backend *, const char *key, const char *value);$/;"	m	struct:git_config_backend	access:public
setW	src/hash/hash_generic.c	56;"	d	file:
setW	src/hash/hash_generic.c	58;"	d	file:
setW	src/hash/hash_generic.c	60;"	d	file:
set_callbacks	include/git2/sys/transport.h	/^	int (*set_callbacks)($/;"	m	struct:git_transport	access:public
set_challenge	src/transports/auth.h	/^	int (*set_challenge)(git_http_auth_context *ctx, const char *challenge);$/;"	m	struct:git_http_auth_context	access:public
set_config	src/repository.c	/^static void set_config(git_repository *repo, git_config *config)$/;"	f	file:	signature:(git_repository *repo, git_config *config)
set_config_int	tests/diff/tree.c	/^static void set_config_int(git_repository *repo, const char *name, int value)$/;"	f	file:	signature:(git_repository *repo, const char *name, int value)
set_core_autocrlf_to	tests/merge/workdir/dirty.c	/^static void set_core_autocrlf_to(git_repository *repo, bool value)$/;"	f	file:	signature:(git_repository *repo, bool value)
set_core_autocrlf_to	tests/merge/workdir/simple.c	/^static void set_core_autocrlf_to(git_repository *repo, bool value)$/;"	f	file:	signature:(git_repository *repo, bool value)
set_core_autocrlf_to	tests/rebase/merge.c	/^static void set_core_autocrlf_to(git_repository *repo, bool value)$/;"	f	file:	signature:(git_repository *repo, bool value)
set_custom_headers	include/git2/sys/transport.h	/^	int (*set_custom_headers)($/;"	m	struct:git_transport	access:public
set_error	src/errors.c	/^static void set_error(int error_class, char *string)$/;"	f	file:	signature:(int error_class, char *string)
set_error	tests/threads/basic.c	/^static void *set_error(void *dummy)$/;"	f	file:	signature:(void *dummy)
set_error_from_buffer	src/errors.c	/^static void set_error_from_buffer(int error_class)$/;"	f	file:	signature:(int error_class)
set_gitattributes_to	tests/merge/driver.c	/^static void set_gitattributes_to(const char *driver)$/;"	f	file:	signature:(const char *driver)
set_global_search_path_from_env	tests/core/env.c	/^static void set_global_search_path_from_env(void)$/;"	f	file:	signature:(void)
set_index	src/repository.c	/^static void set_index(git_repository *repo, git_index *index)$/;"	f	file:	signature:(git_repository *repo, git_index *index)
set_method	tests/clar_libgit2_trace.c	/^static int set_method(const char *name)$/;"	f	file:	signature:(const char *name)
set_multivar	include/git2/sys/config.h	/^	int (*set_multivar)(git_config_backend *cfg, const char *name, const char *regexp, const char *value);$/;"	m	struct:git_config_backend	access:public
set_odb	src/repository.c	/^static void set_odb(git_repository *repo, git_odb *odb)$/;"	f	file:	signature:(git_repository *repo, git_odb *odb)
set_parse_error	src/config_file.c	/^static void set_parse_error(struct reader *reader, int col, const char *error_str)$/;"	f	file:	signature:(struct reader *reader, int col, const char *error_str)
set_proxy	include/git2/sys/stream.h	/^	int (*set_proxy)(struct git_stream *, const git_proxy_options *proxy_opts);$/;"	m	struct:git_stream	access:public
set_refdb	src/repository.c	/^static void set_refdb(git_repository *repo, git_refdb *refdb)$/;"	f	file:	signature:(git_repository *repo, git_refdb *refdb)
set_regs	deps/regex/regexec.c	/^set_regs (const regex_t *preg, const re_match_context_t *mctx, size_t nmatch,$/;"	f	file:	signature:(const regex_t *preg, const re_match_context_t *mctx, size_t nmatch, regmatch_t *pmatch, int fl_backtrack)
set_some_bits	tests/core/bitvec.c	/^static void set_some_bits(git_bitvec *bv, size_t length)$/;"	f	file:	signature:(git_bitvec *bv, size_t length)
set_sorting	examples/log.c	/^static void set_sorting(struct log_state *s, unsigned int sort_mode)$/;"	f	file:	signature:(struct log_state *s, unsigned int sort_mode)
set_stream_input	src/odb_loose.c	/^static void set_stream_input(z_stream *s, void *in, size_t len)$/;"	f	file:	signature:(z_stream *s, void *in, size_t len)
set_stream_output	src/odb_loose.c	/^static void set_stream_output(z_stream *s, void *out, size_t len)$/;"	f	file:	signature:(z_stream *s, void *out, size_t len)
set_system_search_path_from_env	tests/core/env.c	/^static void set_system_search_path_from_env(void)$/;"	f	file:	signature:(void)
set_transport_callbacks	src/remote.c	/^int set_transport_callbacks(git_transport *t, const git_remote_callbacks *cbs)$/;"	f	signature:(git_transport *t, const git_remote_callbacks *cbs)
set_transport_custom_headers	src/remote.c	/^static int set_transport_custom_headers(git_transport *t, const git_strarray *custom_headers)$/;"	f	file:	signature:(git_transport *t, const git_strarray *custom_headers)
set_url	src/remote.c	/^static int set_url(git_repository *repo, const char *remote, const char *pattern, const char *url)$/;"	f	file:	signature:(git_repository *repo, const char *remote, const char *pattern, const char *url)
setenv_and_check	tests/core/env.c	/^static void setenv_and_check(const char *name, const char *value)$/;"	f	file:	signature:(const char *name, const char *value)
seterr_curl	src/curl_stream.c	/^static int seterr_curl(curl_stream *s)$/;"	f	file:	signature:(curl_stream *s)
settings	src/transports/http.c	/^	http_parser_settings settings;$/;"	m	struct:__anon176	file:	access:public
setup	tests/core/dirent.c	/^static void setup(walk_data *d)$/;"	f	file:	signature:(walk_data *d)
setup_fixture_submod2	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submod2(void)$/;"	f	signature:(void)
setup_fixture_submod3	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submod3(void)$/;"	f	signature:(void)
setup_fixture_submodule_simple	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submodule_simple(void)$/;"	f	signature:(void)
setup_fixture_submodule_with_path	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submodule_with_path(void)$/;"	f	signature:(void)
setup_fixture_submodules	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submodules(void)$/;"	f	signature:(void)
setup_fixture_super	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_super(void)$/;"	f	signature:(void)
setup_namespace	src/refdb_fs.c	/^static int setup_namespace(git_buf *path, git_repository *repo)$/;"	f	file:	signature:(git_buf *path, git_repository *repo)
setup_prefix_query	tests/odb/mixed.c	/^static void setup_prefix_query($/;"	f	file:	signature:( git_odb_expand_id **out_ids, size_t *out_num)
setup_race	tests/index/racy.c	/^static void setup_race(void)$/;"	f	file:	signature:(void)
setup_repository_and_backend	tests/odb/backend/nonrefreshing.c	/^static void setup_repository_and_backend(git_error_code error_code)$/;"	f	file:	signature:(git_error_code error_code)
setup_simple_state	tests/repo/state.c	/^static void setup_simple_state(const char *filename)$/;"	f	file:	signature:(const char *filename)
setup_stash	tests/stash/stash_helpers.c	/^void setup_stash(git_repository *repo, git_signature *signature)$/;"	f	signature:(git_repository *repo, git_signature *signature)
setup_tracking_config	src/clone.c	/^static int setup_tracking_config($/;"	f	file:	signature:( git_repository *repo, const char *branch_name, const char *remote_name, const char *merge_target)
setup_trees	tests/threads/diff.c	/^static void setup_trees(void)$/;"	f	file:	signature:(void)
setup_uptodate_files	tests/index/racy.c	/^static void setup_uptodate_files(void)$/;"	f	file:	signature:(void)
sha	tests/checkout/index.c	/^	const char *sha;$/;"	m	struct:notify_data	file:	access:public
sha	tests/object/cache.c	/^	const char *sha;$/;"	m	struct:__anon373	file:	access:public
sha1	src/describe.c	/^	git_oid sha1;$/;"	m	struct:commit_name	file:	access:public
sha1	src/pack.h	/^	git_oid sha1;$/;"	m	struct:git_pack_entry	access:public
sha1_entry_pos	src/sha1_lookup.c	/^int sha1_entry_pos(const void *table,$/;"	f	signature:(const void *table, size_t elem_size, size_t key_offset, unsigned lo, unsigned hi, unsigned nr, const unsigned char *key)
sha1_position	src/sha1_lookup.c	/^int sha1_position(const void *table,$/;"	f	signature:(const void *table, size_t stride, unsigned lo, unsigned hi, const unsigned char *key)
shared	examples/init.c	/^	uint32_t shared;$/;"	m	struct:opts	file:	access:public
shell_out	tests/clar/fs.h	/^shell_out(char * const argv[])$/;"	f	signature:(char * const argv[])
shift_hunks_by	src/blame.c	/^static void shift_hunks_by(git_vector *v, size_t start_line, int shift_by)$/;"	f	file:	signature:(git_vector *v, size_t start_line, int shift_by)
short_entry_size	src/index.c	61;"	d	file:
short_oid	src/odb_loose.c	/^	unsigned char short_oid[GIT_OID_HEXSZ]; \/* hex formatted oid to match *\/$/;"	m	struct:__anon345	file:	access:public
short_oid_len	src/odb_loose.c	/^	size_t short_oid_len;$/;"	m	struct:__anon345	file:	access:public
short_tag_id	tests/object/tag/read.c	/^static const char *short_tag_id = "5da7760512a953e3c7c4e47e4392c7a4338fb729";$/;"	v	file:
short_tagged_commit	tests/object/tag/read.c	/^static const char *short_tagged_commit = "4a5ed60bafcf4638b7c8356bd4ce1916bfede93c";$/;"	v	file:
should_checkout	src/clone.c	/^static bool should_checkout($/;"	f	file:	signature:( git_repository *repo, bool is_bare, const git_checkout_options *opts)
should_expect_nsecs	tests/index/nsec.c	/^static bool should_expect_nsecs(void)$/;"	f	file:	signature:(void)
should_generate	tests/generate.py	/^    def should_generate(self, path):$/;"	m	class:TestSuite	access:public
should_remove_existing	src/checkout.c	/^static bool should_remove_existing(checkout_data *data)$/;"	f	file:	signature:(checkout_data *data)
should_run	tests/core/link.c	/^static bool should_run(void)$/;"	f	file:	signature:(void)
should_write	src/index.h	/^	unsigned int should_write:1;$/;"	m	struct:__anon275	access:public
should_write_reflog	src/refdb_fs.c	/^static int should_write_reflog(int *write, git_repository *repo, const char *name)$/;"	f	file:	signature:(int *write, git_repository *repo, const char *name)
show	include/git2/status.h	/^	git_status_show_t show;$/;"	m	struct:__anon49	access:public
show_blob	examples/cat-file.c	/^static void show_blob(const git_blob *blob)$/;"	f	file:	signature:(const git_blob *blob)
show_branch	examples/status.c	/^static void show_branch(git_repository *repo, int format)$/;"	f	file:	signature:(git_repository *repo, int format)
show_commit	examples/cat-file.c	/^static void show_commit(const git_commit *commit)$/;"	f	file:	signature:(const git_commit *commit)
show_commit_oid_as_fallback	include/git2/describe.h	/^	int show_commit_oid_as_fallback;$/;"	m	struct:git_describe_options	access:public
show_diff	examples/log.c	/^	int show_diff;$/;"	m	struct:log_options	file:	access:public
show_ref	examples/for-each-ref.c	/^static int show_ref(git_reference *ref, void *data)$/;"	f	file:	signature:(git_reference *ref, void *data)
show_suffix	src/describe.c	/^static int show_suffix($/;"	f	file:	signature:( git_buf *buf, int depth, git_repository *repo, const git_oid* id, size_t abbrev_size)
show_tag	examples/cat-file.c	/^static void show_tag(const git_tag *tag)$/;"	f	file:	signature:(const git_tag *tag)
show_tree	examples/cat-file.c	/^static void show_tree(const git_tree *tree)$/;"	f	file:	signature:(const git_tree *tree)
showbranch	examples/status.c	/^	int showbranch;$/;"	m	struct:opts	file:	access:public
showsubmod	examples/status.c	/^	int showsubmod;$/;"	m	struct:opts	file:	access:public
shutdown	include/git2/sys/filter.h	/^	git_filter_shutdown_fn shutdown;$/;"	m	struct:git_filter	access:public
shutdown	include/git2/sys/merge.h	/^	git_merge_driver_shutdown_fn shutdown;$/;"	m	struct:git_merge_driver	access:public
shutdown	tests/merge/driver.c	/^	int shutdown;$/;"	m	struct:test_merge_driver	file:	access:public
shutdown_common	src/global.c	/^static void shutdown_common(void)$/;"	f	file:	signature:(void)
shutdown_ssl	src/openssl_stream.c	/^static void shutdown_ssl(void)$/;"	f	file:	signature:(void)
shutdown_ssl_locking	src/openssl_stream.c	/^static void shutdown_ssl_locking(void)$/;"	f	file:	signature:(void)
side_band	src/transports/smart.h	/^		side_band:1,$/;"	m	struct:transport_smart_caps	access:public
side_band_64k	src/transports/smart.h	/^		side_band_64k:1,$/;"	m	struct:transport_smart_caps	access:public
sideband_cb	tests/network/fetchlocal.c	/^static int sideband_cb(const char *str, int len, void *payload)$/;"	f	file:	signature:(const char *str, int len, void *payload)
sideband_error_pkt	src/transports/smart_pkt.c	/^static int sideband_error_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
sideband_progress	examples/network/clone.c	/^static int sideband_progress(const char *str, int len, void *payload)$/;"	f	file:	signature:(const char *str, int len, void *payload)
sideband_progress	include/git2/remote.h	/^	git_transport_message_cb sideband_progress;$/;"	m	struct:git_remote_callbacks	access:public
sideband_progress_pkt	src/transports/smart_pkt.c	/^static int sideband_progress_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
sift_ctx_init	deps/regex/regexec.c	/^sift_ctx_init (re_sift_context_t *sctx, re_dfastate_t **sifted_sts,$/;"	f	file:	signature:(re_sift_context_t *sctx, re_dfastate_t **sifted_sts, re_dfastate_t **limited_sts, int last_node, int last_str_idx)
sift_states_backward	deps/regex/regexec.c	/^sift_states_backward (const re_match_context_t *mctx, re_sift_context_t *sctx)$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx)
sift_states_bkref	deps/regex/regexec.c	/^sift_states_bkref (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int str_idx, const re_node_set *candidates)
sift_states_iter_mb	deps/regex/regexec.c	/^sift_states_iter_mb (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int node_idx, int str_idx, int max_str_idx)
sifted_states	deps/regex/regex_internal.h	/^  re_dfastate_t **sifted_states;$/;"	m	struct:__anon13	access:public
sig	include/git2/signature.h	/^GIT_EXTERN(void) git_signature_free(git_signature *sig);$/;"	v
sig	include/git2/sys/hashsig.h	/^GIT_EXTERN(void) git_hashsig_free(git_hashsig *sig);$/;"	v
sig	src/transaction.c	/^	git_signature *sig;$/;"	m	struct:__anon208	file:	access:public
sign_callback	include/git2/transport.h	/^	git_cred_sign_callback sign_callback;$/;"	m	struct:git_cred_ssh_custom	access:public
signature	src/index.c	/^	char signature[4];$/;"	m	struct:index_extension	file:	access:public
signature	src/index.c	/^	uint32_t signature;$/;"	m	struct:index_header	file:	access:public
signature	tests/rebase/inmemory.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/rebase/iterator.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/rebase/merge.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/rebase/setup.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/apply.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/drop.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/foreach.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/save.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/submodules.c	/^static git_signature *signature;$/;"	v	file:
signature_error	src/signature.c	/^static int signature_error(const char *msg)$/;"	f	file:	signature:(const char *msg)
signature_matches	examples/log.c	/^static int signature_matches(const git_signature *sig, const char *filter) {$/;"	f	file:	signature:(const git_signature *sig, const char *filter)
silly_tag	tests/object/tag/read.c	/^static const char *silly_tag = "object c054ccaefbf2da31c3b19178f9e3ef20a3867924\\n\\$/;"	v	file:
similar_trees	src/iterator.c	/^	git_vector similar_trees;$/;"	m	struct:__anon268	file:	access:public
similarity	include/git2/diff.h	/^	int (*similarity)(int *score, void *siga, void *sigb, void *payload);$/;"	m	struct:__anon95	access:public
similarity	include/git2/diff.h	/^	uint16_t      similarity;  \/**< for RENAMED and COPIED, value 0-100 *\/$/;"	m	struct:__anon86	access:public
similarity	src/diff_tform.c	/^	uint16_t similarity;$/;"	m	struct:__anon157	file:	access:public
similarity	src/merge.c	/^	unsigned char similarity;$/;"	m	struct:merge_diff_similarity	file:	access:public
similarity_get_file	src/diff_tform.c	/^GIT_INLINE(git_diff_file *) similarity_get_file(git_diff *diff, size_t idx)$/;"	f	signature:(git_diff *diff, size_t idx)
similarity_info	src/diff_tform.c	/^} similarity_info;$/;"	t	typeref:struct:__anon156	file:
similarity_init	src/diff_tform.c	/^static int similarity_init($/;"	f	file:	signature:( similarity_info *info, git_diff *diff, size_t file_idx)
similarity_measure	src/diff_tform.c	/^static int similarity_measure($/;"	f	file:	signature:( int *score, git_diff *diff, const git_diff_find_options *opts, void **cache, size_t a_idx, size_t b_idx)
similarity_sig	src/diff_tform.c	/^static int similarity_sig($/;"	f	file:	signature:( similarity_info *info, const git_diff_find_options *opts, void **cache)
similarity_unload	src/diff_tform.c	/^static void similarity_unload(similarity_info *info)$/;"	f	file:	signature:(similarity_info *info)
size	include/git2/buffer.h	/^	size_t asize, size;$/;"	m	struct:__anon114	access:public
size	include/git2/diff.h	/^	git_off_t   size;$/;"	m	struct:__anon85	access:public
size	include/git2/merge.h	/^	size_t size;$/;"	m	struct:__anon126	access:public
size	script/user_model.c	/^	size_t asize, size;$/;"	m	struct:git_buf	file:	access:public
size	src/cache.h	/^	size_t     size;$/;"	m	struct:__anon229	access:public
size	src/fileops.h	/^	git_off_t  size;$/;"	m	struct:__anon349	access:public
size	src/hash/hash_generic.h	/^	unsigned long long size;$/;"	m	struct:git_hash_ctx	access:public
size	src/hashsig.c	/^	int size, asize;$/;"	m	struct:__anon334	file:	access:public
size	src/mwindow.h	/^	git_off_t size;$/;"	m	struct:git_mwindow_file	access:public
size	src/object.c	/^	size_t		size;	\/* size in bytes of the object structure *\/$/;"	m	struct:__anon340	file:	access:public
size	src/odb.c	/^	size_t size, written;$/;"	m	struct:__anon245	file:	access:public
size	src/odb_loose.c	/^	size_t	size; \/* object size *\/$/;"	m	struct:__anon343	file:	access:public
size	src/oid.c	/^	size_t node_count, size;$/;"	m	struct:git_oid_shorten	file:	access:public
size	src/pack-objects.h	/^	size_t size;$/;"	m	struct:git_pobject	access:public
size	src/pack.h	/^	size_t size;$/;"	m	struct:pack_chain_elem	access:public
size	src/pool.c	/^	uint32_t size;$/;"	m	struct:git_pool_page	file:	access:public
size	src/xdiff/xdiff.h	/^	size_t size;$/;"	m	struct:s_mmbuffer	access:public
size	src/xdiff/xdiff.h	/^	size_t size;$/;"	m	struct:s_mmfile	access:public
size	src/xdiff/xprepare.c	/^	long size;$/;"	m	struct:s_xdlclass	file:	access:public
size	src/xdiff/xtypes.h	/^	long size;$/;"	m	struct:s_xrecord	access:public
size_t	deps/http-parser/http_parser.h	/^typedef SIZE_T size_t;$/;"	t
size_t	include/git2/common.h	/^typedef size_t size_t;$/;"	t
skip	examples/log.c	/^	int skip, limit;$/;"	m	struct:log_options	file:	access:public
skip	tests/object/tree/walk.c	/^	const char *skip;$/;"	m	struct:treewalk_skip_data	file:	access:public
skip_alpha	src/date.c	/^static int skip_alpha(const char *date)$/;"	f	file:	signature:(const char *date)
skip_bom	src/config_file.c	/^static int skip_bom(struct reader *reader)$/;"	f	file:	signature:(struct reader *reader)
skip_tree	src/iterator.c	/^	bool skip_tree;$/;"	m	struct:__anon273	file:	access:public
sleep	examples/status.c	18;"	d	file:
sm	tests/stash/submodules.c	/^static git_submodule *sm;$/;"	v	file:
sm_lookup_cb	tests/submodule/lookup.c	/^static int sm_lookup_cb(git_submodule *sm, const char *name, void *payload)$/;"	f	file:	signature:(git_submodule *sm, const char *name, void *payload)
sm_lookup_data	tests/submodule/lookup.c	/^} sm_lookup_data;$/;"	t	typeref:struct:__anon361	file:
smaller	deps/zlib/trees.c	443;"	d	file:
smaller_value	tests/core/sortedcache.c	/^	char smaller_value;$/;"	m	struct:__anon359	file:	access:public
snake_cnt	src/xdiff/xdiffi.h	/^	long snake_cnt;$/;"	m	struct:s_xdalgoenv	access:public
snapshot	include/git2/sys/config.h	/^	int (*snapshot)(struct git_config_backend **, struct git_config_backend *);$/;"	m	struct:git_config_backend	access:public
snapshot_from	src/config_file.c	/^	diskfile_backend *snapshot_from;$/;"	m	struct:__anon155	file:	access:public
sncur	src/xdiff/xtypes.h	/^	chanode_t *sncur;$/;"	m	struct:s_chastore	access:public
snprintf	examples/blame.c	18;"	d	file:
socket	src/curl_stream.c	/^	curl_socket_t socket;$/;"	m	struct:__anon232	file:	access:public
socket	src/netops.h	/^	GIT_SOCKET socket;$/;"	m	struct:gitno_socket	access:public
socket_close	src/socket_stream.c	/^int socket_close(git_stream *stream)$/;"	f	signature:(git_stream *stream)
socket_connect	src/socket_stream.c	/^int socket_connect(git_stream *stream)$/;"	f	signature:(git_stream *stream)
socket_free	src/socket_stream.c	/^void socket_free(git_stream *stream)$/;"	f	signature:(git_stream *stream)
socket_read	src/socket_stream.c	/^ssize_t socket_read(git_stream *stream, void *data, size_t len)$/;"	f	signature:(git_stream *stream, void *data, size_t len)
socket_write	src/socket_stream.c	/^ssize_t socket_write(git_stream *stream, const char *data, size_t len, int flags)$/;"	f	signature:(git_stream *stream, const char *data, size_t len, int flags)
some	tests/odb/loose_data.h	/^static object_data some = {$/;"	v
some_bytes	tests/odb/loose_data.h	/^static unsigned char some_bytes[] = {$/;"	v
some_data	tests/object/raw/data.h	/^static unsigned char some_data[] = {$/;"	v
some_data	tests/odb/loose_data.h	/^static unsigned char some_data[] = {$/;"	v
some_id	tests/object/raw/data.h	/^static char *some_id = "fd8430bc864cfcd5f10e5590f8a447e01b942bfe";$/;"	v
some_obj	tests/object/raw/data.h	/^static git_rawobj some_obj = {$/;"	v
sort_by_hash_and_name	src/attr_file.c	/^static int sort_by_hash_and_name(const void *a_raw, const void *b_raw)$/;"	f	file:	signature:(const void *a_raw, const void *b_raw)
sort_in_topological_order	src/revwalk.c	/^static int sort_in_topological_order(git_commit_list **out, git_revwalk *walk, git_commit_list *list)$/;"	f	file:	signature:(git_commit_list **out, git_revwalk *walk, git_commit_list *list)
sortedcache_clear	src/sortedcache.c	/^static void sortedcache_clear(git_sortedcache *sc)$/;"	f	file:	signature:(git_sortedcache *sc)
sortedcache_copy_item	src/sortedcache.c	/^static int sortedcache_copy_item(void *payload, void *tgt_item, void *src_item)$/;"	f	file:	signature:(void *payload, void *tgt_item, void *src_item)
sortedcache_free	src/sortedcache.c	/^static void sortedcache_free(git_sortedcache *sc)$/;"	f	file:	signature:(git_sortedcache *sc)
sortedcache_magic_cmp	src/sortedcache.c	/^static int sortedcache_magic_cmp(const void *key, const void *value)$/;"	f	file:	signature:(const void *key, const void *value)
sortedcache_magic_key	src/sortedcache.c	/^struct sortedcache_magic_key {$/;"	s	file:
sortedcache_magic_key::key	src/sortedcache.c	/^	const char *key;$/;"	m	struct:sortedcache_magic_key	file:	access:public
sortedcache_magic_key::offset	src/sortedcache.c	/^	size_t offset;$/;"	m	struct:sortedcache_magic_key	file:	access:public
sortedcache_test_reload	tests/core/sortedcache.c	/^static void sortedcache_test_reload(git_sortedcache *sc)$/;"	f	file:	signature:(git_sortedcache *sc)
sortedcache_test_struct	tests/core/sortedcache.c	/^} sortedcache_test_struct;$/;"	t	typeref:struct:__anon359	file:
sortedcache_test_struct_cmp	tests/core/sortedcache.c	/^static int sortedcache_test_struct_cmp(const void *a_, const void *b_)$/;"	f	file:	signature:(const void *a_, const void *b_)
sortedcache_test_struct_free	tests/core/sortedcache.c	/^static void sortedcache_test_struct_free(void *payload, void *item_)$/;"	f	file:	signature:(void *payload, void *item_)
sorting	examples/log.c	/^	int sorting;$/;"	m	struct:log_state	file:	access:public
sorting	src/revwalk.h	/^	unsigned int sorting;$/;"	m	struct:git_revwalk	access:public
source	src/attr_file.h	/^	git_attr_file_source source;$/;"	m	struct:__anon170	access:public
source	src/filter.c	/^	const git_filter_source *source;$/;"	m	struct:proxy_stream	file:	access:public
source	src/filter.c	/^	git_filter_source source;$/;"	m	struct:git_filter_list	file:	access:public
sources	tests/diff/rename.c	/^	const char **sources;$/;"	m	struct:rename_expected	file:	access:public
spec	examples/rev-parse.c	/^	const char *spec;$/;"	m	struct:parse_state	file:	access:public
spec	include/git2/refspec.h	/^GIT_EXTERN(git_direction) git_refspec_direction(const git_refspec *spec);$/;"	v
special	src/date.c	/^static const struct special {$/;"	s	file:
special	src/date.c	/^} special[] = {$/;"	v	typeref:struct:special	file:
special::fn	src/date.c	/^	void (*fn)(struct tm *, struct tm *, int *);$/;"	m	struct:special	file:	access:public
special::name	src/date.c	/^	const char *name;$/;"	m	struct:special	file:	access:public
specs	src/push.h	/^	git_vector specs;$/;"	m	struct:git_push	access:public
split_blame	src/blame_git.c	/^static void split_blame(git_blame *blame, git_blame__entry *split, git_blame__entry *e)$/;"	f	file:	signature:(git_blame *blame, git_blame__entry *split, git_blame__entry *e)
split_hunk_in_vector	src/blame.c	/^static git_blame_hunk *split_hunk_in_vector($/;"	f	file:	signature:( git_vector *vec, git_blame_hunk *hunk, size_t rel_line, bool return_new)
split_overlap	src/blame_git.c	/^static void split_overlap(git_blame__entry *split, git_blame__entry *e,$/;"	f	file:	signature:(git_blame__entry *split, git_blame__entry *e, size_t tlno, size_t plno, size_t same, git_blame__origin *parent)
src	include/git2/remote.h	/^	git_oid src;$/;"	m	struct:__anon52	access:public
src	include/git2/sys/filter.h	/^GIT_EXTERN(const char *) git_filter_source_path(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(const git_oid *) git_filter_source_id(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(git_filter_mode_t) git_filter_source_mode(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(git_repository *) git_filter_source_repo(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(uint16_t) git_filter_source_filemode(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(uint32_t) git_filter_source_flags(const git_filter_source *src);$/;"	v
src	include/git2/sys/merge.h	/^	const git_merge_driver_source *src);$/;"	v
src	src/diff_file.h	/^	git_iterator_type_t src;$/;"	m	struct:__anon277	access:public
src	src/diff_tform.c	/^	git_iterator_type_t src;$/;"	m	struct:__anon156	file:	access:public
src	src/refspec.h	/^	char *src;$/;"	m	struct:git_refspec	access:public
src_buf	src/delta.c	/^	const void *src_buf;$/;"	m	struct:git_delta_index	file:	access:public
src_refname	include/git2/remote.h	/^	char *src_refname;$/;"	m	struct:__anon52	access:public
src_size	src/delta.c	/^	size_t src_size;$/;"	m	struct:git_delta_index	file:	access:public
srwl	src/win32/thread.h	/^		GIT_SRWLOCK srwl;$/;"	m	union:__anon287::__anon288	access:public
ssh_agent_auth	src/transports/ssh.c	/^static int ssh_agent_auth(LIBSSH2_SESSION *session, git_cred_ssh_key *c) {$/;"	f	file:	signature:(LIBSSH2_SESSION *session, git_cred_ssh_key *c)
ssh_certificate_check	tests/online/clone.c	/^int ssh_certificate_check(git_cert *cert, int valid, const char *host, void *payload)$/;"	f	signature:(git_cert *cert, int valid, const char *host, void *payload)
ssh_custom_free	src/transports/cred.c	/^static void ssh_custom_free(struct git_cred *cred)$/;"	f	file:	signature:(struct git_cred *cred)
ssh_error	src/transports/ssh.c	/^static void ssh_error(LIBSSH2_SESSION *session, const char *errmsg)$/;"	f	file:	signature:(LIBSSH2_SESSION *session, const char *errmsg)
ssh_interactive_free	src/transports/cred.c	/^static void ssh_interactive_free(struct git_cred *cred)$/;"	f	file:	signature:(struct git_cred *cred)
ssh_key_free	src/transports/cred.c	/^static void ssh_key_free(struct git_cred *cred)$/;"	f	file:	signature:(struct git_cred *cred)
ssh_memory_cred_cb	tests/online/clone.c	/^static int ssh_memory_cred_cb(git_cred **cred, const char *url, const char *user_from_url,$/;"	f	file:	signature:(git_cred **cred, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
ssh_prefixes	src/transports/ssh.c	/^static const char *ssh_prefixes[] = { "ssh:\/\/", "ssh+git:\/\/", "git+ssh:\/\/" };$/;"	v	file:
ssh_receivepack	src/transports/ssh.c	/^static int ssh_receivepack($/;"	f	file:	signature:( ssh_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
ssh_receivepack_ls	src/transports/ssh.c	/^static int ssh_receivepack_ls($/;"	f	file:	signature:( ssh_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
ssh_stream	src/transports/ssh.c	/^} ssh_stream;$/;"	t	typeref:struct:__anon182	file:
ssh_stream_alloc	src/transports/ssh.c	/^static int ssh_stream_alloc($/;"	f	file:	signature:( ssh_subtransport *t, const char *url, const char *cmd, git_smart_subtransport_stream **stream)
ssh_stream_free	src/transports/ssh.c	/^static void ssh_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:	signature:(git_smart_subtransport_stream *stream)
ssh_stream_read	src/transports/ssh.c	/^static int ssh_stream_read($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, char *buffer, size_t buf_size, size_t *bytes_read)
ssh_stream_write	src/transports/ssh.c	/^static int ssh_stream_write($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
ssh_subtransport	src/transports/ssh.c	/^} ssh_subtransport;$/;"	t	typeref:struct:__anon183	file:
ssh_subtransport_definition	src/transport.c	/^static git_smart_subtransport_definition ssh_subtransport_definition = { git_smart_subtransport_ssh, 0, NULL };$/;"	v	file:
ssh_uploadpack	src/transports/ssh.c	/^static int ssh_uploadpack($/;"	f	file:	signature:( ssh_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
ssh_uploadpack_ls	src/transports/ssh.c	/^static int ssh_uploadpack_ls($/;"	f	file:	signature:( ssh_subtransport *t, const char *url, git_smart_subtransport_stream **stream)
ssize_t	deps/http-parser/http_parser.h	/^typedef SSIZE_T ssize_t;$/;"	t
ssize_t	examples/network/index-pack.c	16;"	d	file:
ssize_t	src/win32/msvc-compat.h	/^typedef SSIZE_T ssize_t;$/;"	t
ssl	src/netops.h	/^	SSL *ssl;$/;"	m	struct:gitno_ssl	access:public
ssl	src/netops.h	/^	gitno_ssl ssl;$/;"	m	struct:gitno_socket	access:public
ssl	src/openssl_stream.c	/^	SSL *ssl;$/;"	m	struct:__anon276	file:	access:public
ssl_set_error	src/openssl_stream.c	/^static int ssl_set_error(SSL *ssl, int error)$/;"	f	file:	signature:(SSL *ssl, int error)
ssl_teardown	src/openssl_stream.c	/^static int ssl_teardown(SSL *ssl)$/;"	f	file:	signature:(SSL *ssl)
sss	tests/object/message.c	17;"	d	file:
st	src/iterator.c	/^	struct stat st;$/;"	m	struct:__anon270	typeref:struct:__anon270::stat	file:	access:public
st_atim	src/common.h	66;"	d
st_atim	src/win32/win32-compat.h	/^	struct timespec st_atim;$/;"	m	struct:p_stat	typeref:struct:p_stat::timespec	access:public
st_atime	src/win32/win32-compat.h	42;"	d
st_atime_nsec	src/unix/posix.h	25;"	d
st_atime_nsec	src/unix/posix.h	29;"	d
st_atime_nsec	src/win32/win32-compat.h	45;"	d
st_ctim	src/common.h	67;"	d
st_ctim	src/win32/win32-compat.h	/^	struct timespec st_ctim;$/;"	m	struct:p_stat	typeref:struct:p_stat::timespec	access:public
st_ctime	src/win32/win32-compat.h	44;"	d
st_ctime_nsec	src/unix/posix.h	27;"	d
st_ctime_nsec	src/unix/posix.h	31;"	d
st_ctime_nsec	src/win32/win32-compat.h	47;"	d
st_dev	src/win32/win32-compat.h	/^	_dev_t st_dev;$/;"	m	struct:p_stat	access:public
st_gid	src/win32/win32-compat.h	/^	short st_gid;$/;"	m	struct:p_stat	access:public
st_ino	src/win32/win32-compat.h	/^	_ino_t st_ino;$/;"	m	struct:p_stat	access:public
st_mode	src/win32/win32-compat.h	/^	mode_t st_mode;$/;"	m	struct:p_stat	access:public
st_mtim	src/common.h	68;"	d
st_mtim	src/win32/win32-compat.h	/^	struct timespec st_mtim;$/;"	m	struct:p_stat	typeref:struct:p_stat::timespec	access:public
st_mtime	src/win32/win32-compat.h	43;"	d
st_mtime_nsec	src/unix/posix.h	26;"	d
st_mtime_nsec	src/unix/posix.h	30;"	d
st_mtime_nsec	src/win32/win32-compat.h	46;"	d
st_nlink	src/win32/win32-compat.h	/^	short st_nlink;$/;"	m	struct:p_stat	access:public
st_rdev	src/win32/win32-compat.h	/^	_dev_t st_rdev;$/;"	m	struct:p_stat	access:public
st_size	src/win32/win32-compat.h	/^	__int64 st_size;$/;"	m	struct:p_stat	access:public
st_uid	src/win32/win32-compat.h	/^	short st_uid;$/;"	m	struct:p_stat	access:public
stack	deps/regex/regex_internal.h	/^  struct re_fail_stack_ent_t *stack;$/;"	m	struct:re_fail_stack_t	typeref:struct:re_fail_stack_t::re_fail_stack_ent_t	access:public
stage	src/index.c	/^	int stage;$/;"	m	struct:entry_srch_key	file:	access:public
stage	tests/checkout/conflict.c	/^	int stage;$/;"	m	struct:checkout_index_entry	file:	access:public
stage	tests/merge/merge_helpers.h	/^	int stage;$/;"	m	struct:merge_index_entry	access:public
stage_and_commit	tests/status/worktree.c	/^static void stage_and_commit(git_repository *repo, const char *path)$/;"	f	file:	signature:(git_repository *repo, const char *path)
stage_content	tests/merge/workdir/dirty.c	/^static void stage_content(char *content[])$/;"	f	file:	signature:(char *content[])
stage_new_file	src/stash.c	/^static int stage_new_file(const git_index_entry **entries, void *data)$/;"	f	file:	signature:(const git_index_entry **entries, void *data)
stage_new_files	src/stash.c	/^static int stage_new_files($/;"	f	file:	signature:( git_index **out, git_tree *parent_tree, git_tree *tree)
stage_random_files	tests/merge/workdir/dirty.c	/^static void stage_random_files(char *files[])$/;"	f	file:	signature:(char *files[])
staged	src/merge.h	/^	git_vector staged;$/;"	m	struct:__anon324	access:public
stamp	src/attr_file.h	/^		git_futils_filestamp stamp;$/;"	m	union:__anon170::__anon171	access:public
stamp	src/index.h	/^	git_futils_filestamp stamp;$/;"	m	struct:git_index	access:public
stamp	src/sortedcache.h	/^	git_futils_filestamp stamp;$/;"	m	struct:__anon310	access:public
start	deps/regex/regex.h	/^  regoff_t *start;$/;"	m	struct:re_registers	access:public
start	src/iterator.h	/^	char *start;$/;"	m	struct:git_iterator	access:public
start	src/iterator.h	/^	const char *start;$/;"	m	struct:__anon255	access:public
start	src/tsort.c	/^	ssize_t start;$/;"	m	struct:tsort_run	file:	access:public
start_inflate	src/odb_loose.c	/^static int start_inflate(z_stream *s, git_buf *obj, void *out, size_t len)$/;"	f	file:	signature:(z_stream *s, git_buf *obj, void *out, size_t len)
start_len	src/iterator.h	/^	size_t start_len;$/;"	m	struct:git_iterator	access:public
start_line	examples/blame.c	/^	int start_line;$/;"	m	struct:opts	file:	access:public
start_state	deps/http-parser/http_parser.c	383;"	d	file:
started	src/iterator.h	/^	bool started;$/;"	m	struct:git_iterator	access:public
started	src/rebase.c	/^		started : 1;$/;"	m	struct:git_rebase	file:	access:public
stash_delta_merge	src/stash.c	/^static git_diff_delta *stash_delta_merge($/;"	f	file:	signature:( const git_diff_delta *a, const git_diff_delta *b, git_pool *pool)
stash_tip_oid	tests/stash/foreach.c	/^static git_oid stash_tip_oid;$/;"	v	file:
stash_tip_oid	tests/stash/save.c	/^static git_oid stash_tip_oid;$/;"	v	file:
stash_tip_oid	tests/stash/submodules.c	/^static git_oid stash_tip_oid;$/;"	v	file:
stash_update_index_from_diff	src/stash.c	/^static int stash_update_index_from_diff($/;"	f	file:	signature:( git_index *index, const git_diff *diff, struct stash_update_rules *data)
stash_update_rules	src/stash.c	/^struct stash_update_rules {$/;"	s	file:
stash_update_rules::include_changed	src/stash.c	/^	bool include_changed;$/;"	m	struct:stash_update_rules	file:	access:public
stash_update_rules::include_ignored	src/stash.c	/^	bool include_ignored;$/;"	m	struct:stash_update_rules	file:	access:public
stash_update_rules::include_untracked	src/stash.c	/^	bool include_untracked;$/;"	m	struct:stash_update_rules	file:	access:public
stat	src/win32/mingw-compat.h	12;"	d
stat	src/win32/win32-compat.h	50;"	d
stat	tests/clar.c	29;"	d	file:
stat_calls	include/git2/checkout.h	/^	size_t stat_calls;$/;"	m	struct:__anon139	access:public
stat_calls	include/git2/sys/diff.h	/^	size_t stat_calls; \/**< Number of stat() calls performed *\/$/;"	m	struct:__anon60	access:public
stat_calls	src/fileops.h	/^	size_t stat_calls;$/;"	m	struct:git_futils_mkdir_perfdata	access:public
stat_calls	src/iterator.h	/^	size_t stat_calls;$/;"	m	struct:git_iterator	access:public
stat_desc	deps/zlib/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s	access:public
state	deps/http-parser/http_parser.c	/^enum state$/;"	g	file:
state	deps/http-parser/http_parser.h	/^  unsigned char state;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser	access:public
state	deps/zlib/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR	access:public
state_array_t	deps/regex/regex_internal.h	/^} state_array_t;$/;"	t	typeref:struct:__anon9
state_files	src/repository.c	/^static const char *state_files[] = {$/;"	v	file:
state_hash_mask	deps/regex/regex_internal.h	/^  unsigned int state_hash_mask;$/;"	m	struct:re_dfa_t	access:public
state_loc	tests/core/dirent.c	/^static walk_data *state_loc;$/;"	v	file:
state_log	deps/regex/regex_internal.h	/^  re_dfastate_t **state_log;$/;"	m	struct:__anon12	access:public
state_log_top	deps/regex/regex_internal.h	/^  int state_log_top;$/;"	m	struct:__anon12	access:public
state_path	src/rebase.c	/^	char *state_path;$/;"	m	struct:git_rebase	file:	access:public
state_table	deps/regex/regex_internal.h	/^  struct re_state_table_entry *state_table;$/;"	m	struct:re_dfa_t	typeref:struct:re_dfa_t::re_state_table_entry	access:public
static_bl_desc	deps/zlib/trees.c	/^local static_tree_desc  static_bl_desc =$/;"	v
static_d_desc	deps/zlib/trees.c	/^local static_tree_desc  static_d_desc =$/;"	v
static_dtree	deps/zlib/trees.c	/^local ct_data static_dtree[D_CODES];$/;"	v
static_dtree	deps/zlib/trees.h	/^local const ct_data static_dtree[D_CODES] = {$/;"	v
static_l_desc	deps/zlib/trees.c	/^local static_tree_desc  static_l_desc =$/;"	v
static_len	deps/zlib/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state	access:public
static_ltree	deps/zlib/trees.c	/^local ct_data static_ltree[L_CODES+2];$/;"	v
static_ltree	deps/zlib/trees.h	/^local const ct_data static_ltree[L_CODES+2] = {$/;"	v
static_tree	deps/zlib/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc	deps/zlib/deflate.h	/^typedef struct static_tree_desc_s  static_tree_desc;$/;"	t	typeref:struct:static_tree_desc_s
static_tree_desc_s	deps/zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
static_tree_desc_s	deps/zlib/trees.c	/^struct static_tree_desc_s {$/;"	s	file:
static_tree_desc_s::dummy	deps/zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::elems	deps/zlib/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::extra_base	deps/zlib/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::extra_bits	deps/zlib/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::max_length	deps/zlib/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::static_tree	deps/zlib/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
stats	include/git2/diff.h	/^	const git_diff_stats *stats);$/;"	v
stats	include/git2/diff.h	/^GIT_EXTERN(void) git_diff_stats_free(git_diff_stats *stats);$/;"	v
stats	src/pack-objects.c	/^	git_transfer_progress *stats;$/;"	m	struct:pack_write_context	file:	access:public
stats	src/remote.h	/^	git_transfer_progress stats;$/;"	m	struct:git_remote	access:public
stats	src/transports/local.c	/^	git_transfer_progress *stats;$/;"	m	struct:foreach_data	file:	access:public
stats	src/transports/smart_protocol.c	/^	git_transfer_progress *stats;$/;"	m	struct:network_packetsize_payload	file:	access:public
status	deps/zlib/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state	access:public
status	include/git2/diff.h	/^	git_delta_t   status;$/;"	m	struct:__anon86	access:public
status	include/git2/diff.h	/^GIT_EXTERN(char) git_diff_status_char(git_delta_t status);$/;"	v
status	include/git2/status.h	/^	git_status_t status;$/;"	m	struct:__anon50	access:public
status	src/push.h	/^	git_vector status;$/;"	m	struct:git_push	access:public
status	src/status.c	/^	unsigned int status;$/;"	m	struct:status_file_info	file:	access:public
status	src/transports/smart.h	/^	enum git_ack_status status;$/;"	m	struct:__anon186	typeref:enum:__anon186::git_ack_status	access:public
status	tests/diff/rename.c	/^	unsigned int *status;$/;"	m	struct:rename_expected	file:	access:public
status	tests/merge/merge_helpers.h	/^	unsigned int status;$/;"	m	struct:merge_index_with_status	access:public
status	tests/status/renames.c	/^	git_status_t status;$/;"	m	struct:status_entry	file:	access:public
status	tests/status/status_helpers.h	/^	unsigned int status;$/;"	m	struct:__anon366	access:public
status_code	deps/http-parser/http_parser.h	/^  unsigned short status_code; \/* responses only *\/$/;"	m	struct:http_parser	access:public
status_collect	src/status.c	/^static int status_collect($/;"	f	file:	signature:( git_diff_delta *head2idx, git_diff_delta *idx2wd, void *payload)
status_compute	src/status.c	/^static git_status_t status_compute($/;"	f	file:	signature:( git_status_list *status, git_diff_delta *head2idx, git_diff_delta *idx2wd)
status_counts_init	tests/status/status_helpers.h	16;"	d
status_entry	tests/status/renames.c	/^struct status_entry {$/;"	s	file:
status_entry::newname	tests/status/renames.c	/^	const char *newname;$/;"	m	struct:status_entry	file:	access:public
status_entry::oldname	tests/status/renames.c	/^	const char *oldname;$/;"	m	struct:status_entry	file:	access:public
status_entry::status	tests/status/renames.c	/^	git_status_t status;$/;"	m	struct:status_entry	file:	access:public
status_entry_cmp	src/status.c	/^static int status_entry_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
status_entry_cmp_base	src/status.c	/^GIT_INLINE(int) status_entry_cmp_base($/;"	f	signature:( const void *a, const void *b, int (*strcomp)(const char *a, const char *b))
status_entry_counts	tests/status/status_helpers.h	/^} status_entry_counts;$/;"	t	typeref:struct:__anon365
status_entry_icmp	src/status.c	/^static int status_entry_icmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
status_entry_single	tests/status/status_helpers.h	/^} status_entry_single;$/;"	t	typeref:struct:__anon366
status_file_info	src/status.c	/^struct status_file_info {$/;"	s	file:
status_file_info::ambiguous	src/status.c	/^	int ambiguous;$/;"	m	struct:status_file_info	file:	access:public
status_file_info::count	src/status.c	/^	unsigned int count;$/;"	m	struct:status_file_info	file:	access:public
status_file_info::expected	src/status.c	/^	char *expected;$/;"	m	struct:status_file_info	file:	access:public
status_file_info::fnm_flags	src/status.c	/^	int fnm_flags;$/;"	m	struct:status_file_info	file:	access:public
status_file_info::status	src/status.c	/^	unsigned int status;$/;"	m	struct:status_file_info	file:	access:public
status_is_included	src/status.c	/^static bool status_is_included($/;"	f	file:	signature:( git_status_list *status, git_diff_delta *head2idx, git_diff_delta *idx2wd)
status_paths	tests/iterator/workdir.c	/^static const char *status_paths[] = {$/;"	v	file:
status_paths_range_0	tests/iterator/workdir.c	/^static const char *status_paths_range_0[] = {$/;"	v	file:
status_paths_range_1	tests/iterator/workdir.c	/^static const char *status_paths_range_1[] = {$/;"	v	file:
status_paths_range_3	tests/iterator/workdir.c	/^static const char *status_paths_range_3[] = {$/;"	v	file:
status_paths_range_4	tests/iterator/workdir.c	/^static const char *status_paths_range_4[] = {$/;"	v	file:
status_paths_range_5	tests/iterator/workdir.c	/^static const char *status_paths_range_5[] = {$/;"	v	file:
status_validate_options	src/status.c	/^static int status_validate_options(const git_status_options *opts)$/;"	f	file:	signature:(const git_status_options *opts)
statuses	tests/diff/diff_helpers.h	/^	int *statuses;$/;"	m	struct:__anon369	access:public
statuses	tests/online/push_util.h	/^	git_vector statuses;$/;"	m	struct:__anon353	access:public
statuses	tests/submodule/status.c	/^	int *statuses;$/;"	m	struct:__anon362	file:	access:public
statuslist	include/git2/status.h	/^	git_status_list *statuslist);$/;"	v
statusopt	examples/status.c	/^	git_status_options statusopt;$/;"	m	struct:opts	file:	access:public
still_interesting	src/revwalk.c	/^static int still_interesting(git_commit_list *list, int64_t time, int slop)$/;"	f	file:	signature:(git_commit_list *list, int64_t time, int slop)
stop	deps/regex/regex_internal.h	/^  int stop;$/;"	m	struct:re_string_t	access:public
stop	tests/object/tree/walk.c	/^	const char *stop;$/;"	m	struct:treewalk_skip_data	file:	access:public
storage	src/tsort.c	/^	void **storage;$/;"	m	struct:tsort_store	file:	access:public
store_common	src/transports/smart_protocol.c	/^static int store_common(transport_smart *t)$/;"	f	file:	signature:(transport_smart *t)
store_delta	src/indexer.c	/^static int store_delta(git_indexer *idx)$/;"	f	file:	signature:(git_indexer *idx)
store_object	src/indexer.c	/^static int store_object(git_indexer *idx)$/;"	f	file:	signature:(git_indexer *idx)
store_refs	src/transports/local.c	/^static int store_refs(transport_local *t)$/;"	f	file:	signature:(transport_local *t)
str	src/object.c	/^	const char	*str;	\/* type name string *\/$/;"	m	struct:__anon340	file:	access:public
str	src/patch_parse.c	/^	const char *str;$/;"	m	struct:__anon164	file:	access:public
str0	tests/repo/pathspec.c	/^static char *str0[] = { "*_file", "new_file", "garbage" };$/;"	v	file:
str1	tests/repo/pathspec.c	/^static char *str1[] = { "*_FILE", "NEW_FILE", "GARBAGE" };$/;"	v	file:
str2	tests/repo/pathspec.c	/^static char *str2[] = { "staged_*" };$/;"	v	file:
str3	tests/repo/pathspec.c	/^static char *str3[] = { "!subdir", "*_file", "new_file" };$/;"	v	file:
str4	tests/repo/pathspec.c	/^static char *str4[] = { "*" };$/;"	v	file:
str5	tests/repo/pathspec.c	/^static char *str5[] = { "S*" };$/;"	v	file:
str_equal_no_trailing_slash	src/submodule.c	/^static kh_inline int str_equal_no_trailing_slash(const char *a, const char *b)$/;"	f	file:	signature:(const char *a, const char *b)
str_hash_no_trailing_slash	src/submodule.c	/^static kh_inline khint_t str_hash_no_trailing_slash(const char *s)$/;"	f	file:	signature:(const char *s)
str_idx	deps/regex/regex_internal.h	/^  int str_idx; \/* The position NODE match at.  *\/$/;"	m	struct:__anon10	access:public
str_idx	deps/regex/regex_internal.h	/^  int str_idx;$/;"	m	struct:__anon11	access:public
str_idx	deps/regex/regex_internal.h	/^  int str_idx;$/;"	m	struct:re_backref_cache_entry	access:public
str_match	include/git2/config.h	/^	const char *str_match;$/;"	m	struct:__anon112	access:public
str_oid	tests/core/oid.c	/^const char *str_oid = "ae90f12eea699729ed24555e40b9fd669da12a12";$/;"	v
str_oid_m	tests/core/oid.c	/^const char *str_oid_m = "ae90f12eea699729ed24555e40b9fd669da12a12THIS IS EXTRA TEXT THAT SHOULD GET IGNORED";$/;"	v
str_oid_p	tests/core/oid.c	/^const char *str_oid_p = "ae90f12eea699729ed";$/;"	v
str_tree	deps/regex/regex_internal.h	/^  bin_tree_t *str_tree;$/;"	m	struct:re_dfa_t	access:public
str_tree_storage	deps/regex/regex_internal.h	/^  bin_tree_storage_t *str_tree_storage;$/;"	m	struct:re_dfa_t	access:public
str_tree_storage_idx	deps/regex/regex_internal.h	/^  int str_tree_storage_idx;$/;"	m	struct:re_dfa_t	access:public
stransport_certificate	src/stransport_stream.c	/^static int stransport_certificate(git_cert **out, git_stream *stream)$/;"	f	file:	signature:(git_cert **out, git_stream *stream)
stransport_close	src/stransport_stream.c	/^static int stransport_close(git_stream *stream)$/;"	f	file:	signature:(git_stream *stream)
stransport_connect	src/stransport_stream.c	/^static int stransport_connect(git_stream *stream)$/;"	f	file:	signature:(git_stream *stream)
stransport_error	src/stransport_stream.c	/^static int stransport_error(OSStatus ret)$/;"	f	file:	signature:(OSStatus ret)
stransport_free	src/stransport_stream.c	/^static void stransport_free(git_stream *stream)$/;"	f	file:	signature:(git_stream *stream)
stransport_read	src/stransport_stream.c	/^static ssize_t stransport_read(git_stream *stream, void *data, size_t len)$/;"	f	file:	signature:(git_stream *stream, void *data, size_t len)
stransport_set_proxy	src/stransport_stream.c	/^static int stransport_set_proxy($/;"	f	file:	signature:( git_stream *stream, const git_proxy_options *proxy_opts)
stransport_stream	src/stransport_stream.c	/^} stransport_stream;$/;"	t	typeref:struct:__anon298	file:
stransport_write	src/stransport_stream.c	/^static ssize_t stransport_write(git_stream *stream, const char *data, size_t len, int flags)$/;"	f	file:	signature:(git_stream *stream, const char *data, size_t len, int flags)
strategy	deps/zlib/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state	access:public
strategy	src/checkout.c	/^	unsigned int strategy;$/;"	m	struct:__anon215	file:	access:public
strcasecmp	examples/blame.c	19;"	d	file:
strcasecmp	src/win32/msvc-compat.h	15;"	d
strcasecmp	tests/clar.c	44;"	d	file:
strcomp	src/diff.h	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:git_diff	access:public
strcomp	src/diff_print.c	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:__anon236	file:	access:public
strcomp	src/iterator.h	/^	int (*strcomp)(const char *a, const char *b);$/;"	m	struct:git_iterator	access:public
strcomp	src/pathspec.c	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:pathspec_match_context	file:	access:public
strdup	tests/clar.c	41;"	d	file:
stream	include/git2/odb.h	/^GIT_EXTERN(void) git_odb_stream_free(git_odb_stream *stream);$/;"	v
stream	include/git2/sys/filter.h	/^	git_filter_stream_fn   stream;$/;"	m	struct:git_filter	access:public
stream	src/indexer.c	/^	git_packfile_stream stream;$/;"	m	struct:git_indexer	file:	access:public
stream	src/odb.c	/^	git_odb_stream stream;$/;"	m	struct:__anon245	file:	access:public
stream	src/odb_loose.c	/^	git_odb_stream stream;$/;"	m	struct:__anon344	file:	access:public
stream	src/transports/smart_protocol.c	/^	git_smart_subtransport_stream *stream;$/;"	m	struct:push_packbuilder_payload	file:	access:public
stream	tests/odb/streamwrite.c	/^static git_odb_stream *stream;$/;"	v	file:
stream_list_free	src/filter.c	/^void stream_list_free(git_vector *streams)$/;"	f	signature:(git_vector *streams)
stream_list_init	src/filter.c	/^static int stream_list_init($/;"	f	file:	signature:( git_writestream **out, git_vector *streams, git_filter_list *filters, git_writestream *target)
stream_thunk	src/transports/smart_protocol.c	/^static int stream_thunk(void *buf, size_t size, void *data)$/;"	f	file:	signature:(void *buf, size_t size, void *data)
streaming_write	tests/object/raw/write.c	/^static void streaming_write(git_oid *oid, git_odb *odb, git_rawobj *raw)$/;"	f	file:	signature:(git_oid *oid, git_odb *odb, git_rawobj *raw)
strequal_ignore_eol	tests/reset/hard.c	/^static int strequal_ignore_eol(const char *exp, const char *str)$/;"	f	file:	signature:(const char *exp, const char *str)
strict_comparison	src/vector.c	/^static int strict_comparison(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
string	src/refspec.h	/^	char *string;$/;"	m	struct:git_refspec	access:public
string	tests/commit/parse.c	/^	const char *string;$/;"	m	struct:__anon378	file:	access:public
string	tests/commit/parse.c	/^	const char *string;$/;"	m	struct:__anon379	file:	access:public
strings	include/git2/strarray.h	/^	char **strings;$/;"	m	struct:git_strarray	access:public
strip_comments	src/config_file.c	/^static int strip_comments(char *line, int in_quotes)$/;"	f	file:	signature:(char *line, int in_quotes)
strip_cr_from_buf	tests/clar_libgit2.c	/^static size_t strip_cr_from_buf(char *start, size_t len)$/;"	f	file:	signature:(char *start, size_t len)
strm	deps/zlib/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state	access:public
strncasecmp	src/win32/msvc-compat.h	16;"	d
strncomp	src/diff.h	/^	int (*strncomp)(const char *, const char *, size_t);$/;"	m	struct:git_diff	access:public
strncomp	src/iterator.h	/^	int (*strncomp)(const char *a, const char *b, size_t n);$/;"	m	struct:git_iterator	access:public
strncomp	src/pathspec.c	/^	int (*strncomp)(const char *, const char *, size_t);$/;"	m	struct:pathspec_match_context	file:	access:public
strncpy	tests/clar.c	50;"	d	file:
strstart	deps/zlib/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state	access:public
strtoimax	include/git2/inttypes.h	301;"	d
strtoumax	include/git2/inttypes.h	302;"	d
style	src/xdiff/xdiff.h	/^	int style;$/;"	m	struct:s_xmparam	access:public
sub	tests/core/dirent.c	/^	char *sub;		\/* sub-directory name *\/$/;"	m	struct:walk_data	file:	access:public
sub	tests/core/dirent.c	/^static walk_data sub = {$/;"	v	file:
sub_epsilon_src_nodes	deps/regex/regexec.c	/^sub_epsilon_src_nodes (const re_dfa_t *dfa, int node, re_node_set *dest_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, int node, re_node_set *dest_nodes, const re_node_set *candidates)
sub_names	tests/core/dirent.c	/^static name_data sub_names[] = {$/;"	v	file:
sub_slash	tests/core/dirent.c	/^static walk_data sub_slash = {$/;"	v	file:
sub_tops	deps/regex/regex_internal.h	/^  re_sub_match_top_t **sub_tops;$/;"	m	struct:__anon12	access:public
subcmd	examples/remote.c	/^enum subcmd {$/;"	g	file:
subcmd_add	examples/remote.c	/^	subcmd_add,$/;"	e	enum:subcmd	file:
subcmd_remove	examples/remote.c	/^	subcmd_remove,$/;"	e	enum:subcmd	file:
subcmd_rename	examples/remote.c	/^	subcmd_rename,$/;"	e	enum:subcmd	file:
subcmd_seturl	examples/remote.c	/^	subcmd_seturl,$/;"	e	enum:subcmd	file:
subcmd_show	examples/remote.c	/^	subcmd_show,$/;"	e	enum:subcmd	file:
subexp_from	deps/regex/regex_internal.h	/^  int subexp_from;$/;"	m	struct:re_backref_cache_entry	access:public
subexp_map	deps/regex/regex_internal.h	/^  int *subexp_map;$/;"	m	struct:re_dfa_t	access:public
subexp_to	deps/regex/regex_internal.h	/^  int subexp_to;$/;"	m	struct:re_backref_cache_entry	access:public
submodule	include/git2/submodule.h	/^	git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_branch(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_name(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_path(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_url(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const git_oid *) git_submodule_head_id(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const git_oid *) git_submodule_index_id(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const git_oid *) git_submodule_wd_id(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(git_repository *) git_submodule_owner(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_add_finalize(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_sync(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(void) git_submodule_free(git_submodule *submodule);$/;"	v
submodule	src/checkout.c	/^		submodule:1;$/;"	m	struct:__anon216	file:	access:public
submodule_alloc	src/submodule.c	/^static int submodule_alloc($/;"	f	file:	signature:( git_submodule **out, git_repository *repo, const char *name)
submodule_cmp	src/submodule.c	/^static int submodule_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
submodule_config_error	src/submodule.c	/^static int submodule_config_error(const char *property, const char *value)$/;"	f	file:	signature:(const char *property, const char *value)
submodule_config_key_trunc_puts	src/submodule.c	/^static int submodule_config_key_trunc_puts(git_buf *key, const char *suffix)$/;"	f	file:	signature:(git_buf *key, const char *suffix)
submodule_copy_oid_maybe	src/submodule.c	/^static void submodule_copy_oid_maybe($/;"	f	file:	signature:( git_oid *tgt, const git_oid *src, bool valid)
submodule_expectations	tests/submodule/status.c	/^} submodule_expectations;$/;"	t	typeref:struct:__anon362	file:
submodule_free_dup	src/submodule.c	/^static void submodule_free_dup(void *sm)$/;"	f	file:	signature:(void *sm)
submodule_get_index_status	src/submodule.c	/^static void submodule_get_index_status(unsigned int *status, git_submodule *sm)$/;"	f	file:	signature:(unsigned int *status, git_submodule *sm)
submodule_get_or_create	src/submodule.c	/^static int submodule_get_or_create(git_submodule **out, git_repository *repo, git_strmap *map, const char *name)$/;"	f	file:	signature:(git_submodule **out, git_repository *repo, git_strmap *map, const char *name)
submodule_get_wd_status	src/submodule.c	/^static void submodule_get_wd_status($/;"	f	file:	signature:( unsigned int *status, git_submodule *sm, git_repository *sm_repo, git_submodule_ignore_t ign)
submodule_is_config_only	src/checkout.c	/^static bool submodule_is_config_only($/;"	f	file:	signature:( checkout_data *data, const char *path)
submodule_load_each	src/submodule.c	/^static int submodule_load_each(const git_config_entry *entry, void *payload)$/;"	f	file:	signature:(const git_config_entry *entry, void *payload)
submodule_load_from_wd_lite	src/submodule.c	/^static int submodule_load_from_wd_lite(git_submodule *sm)$/;"	f	file:	signature:(git_submodule *sm)
submodule_read_config	src/submodule.c	/^static int submodule_read_config(git_submodule *sm, git_config *cfg)$/;"	f	file:	signature:(git_submodule *sm, git_config *cfg)
submodule_release	src/submodule.c	/^static void submodule_release(git_submodule *sm)$/;"	f	file:	signature:(git_submodule *sm)
submodule_repo_create	src/submodule.c	/^static int submodule_repo_create($/;"	f	file:	signature:( git_repository **out, git_repository *parent_repo, const char *path)
submodule_repo_init	src/submodule.c	/^static int submodule_repo_init($/;"	f	file:	signature:( git_repository **out, git_repository *parent_repo, const char *path, const char *url, bool use_gitlink)
submodule_set_lookup_error	src/submodule.c	/^static void submodule_set_lookup_error(int error, const char *name)$/;"	f	file:	signature:(int error, const char *name)
submodule_update_from_head_data	src/submodule.c	/^static void submodule_update_from_head_data($/;"	f	file:	signature:( git_submodule *sm, mode_t mode, const git_oid *id)
submodule_update_from_index_entry	src/submodule.c	/^static void submodule_update_from_index_entry($/;"	f	file:	signature:( git_submodule *sm, const git_index_entry *ie)
submodule_update_head	src/submodule.c	/^static int submodule_update_head(git_submodule *submodule)$/;"	f	file:	signature:(git_submodule *submodule)
submodule_update_index	src/submodule.c	/^static int submodule_update_index(git_submodule *sm)$/;"	f	file:	signature:(git_submodule *sm)
submodules_from_head	src/submodule.c	/^static int submodules_from_head(git_strmap *map, git_tree *head, git_config *cfg)$/;"	f	file:	signature:(git_strmap *map, git_tree *head, git_config *cfg)
submodules_from_index	src/submodule.c	/^static int submodules_from_index(git_strmap *map, git_index *idx, git_config *cfg)$/;"	f	file:	signature:(git_strmap *map, git_index *idx, git_config *cfg)
subpath_len	src/tree.c	/^static size_t subpath_len(const char *path)$/;"	f	file:	signature:(const char *path)
subtransport	include/git2/sys/transport.h	/^	git_smart_subtransport *subtransport;$/;"	m	struct:git_smart_subtransport_stream	access:public
succeed_certificate_check	tests/online/clone.c	/^static int succeed_certificate_check(git_cert *cert, int valid, const char *host, void *payload)$/;"	f	file:	signature:(git_cert *cert, int valid, const char *host, void *payload)
success	tests/online/push_util.h	/^	int success;$/;"	m	struct:__anon355	access:public
suite	tests/clar.c	/^	const char *suite;$/;"	m	struct:clar_error	file:	access:public
suite_count	tests/generate.py	/^    def suite_count(self):$/;"	m	class:TestSuite	access:public
suites_ran	tests/clar.c	/^	int suites_ran;$/;"	m	struct:__anon364	file:	access:public
sum	tests/clar_libgit2_timer.h	/^	double sum;$/;"	m	struct:cl_perf_timer	access:public
sum	tests/perf/helper__perf__timer.h	/^	LARGE_INTEGER sum;$/;"	m	struct:perf__timer	access:public
sum	tests/perf/helper__perf__timer.h	/^	uint32_t sum;$/;"	m	struct:perf__timer	access:public
summary	include/git2/diff.h	/^	const char *summary;$/;"	m	struct:__anon100	access:public
summary	src/commit.h	/^	char *summary;$/;"	m	struct:git_commit	access:public
supports_ipv6	tests/core/posix.c	/^static bool supports_ipv6(void)$/;"	f	file:	signature:(void)
suseconds_t	src/win32/win32-compat.h	/^typedef long suseconds_t;$/;"	t
suspect	src/blame.h	/^	git_blame__origin *suspect;$/;"	m	struct:git_blame__entry	access:public
symbolic	src/refs.h	/^		char *symbolic;$/;"	m	union:git_reference::__anon258	access:public
symbolic	src/transaction.c	/^		char *symbolic;$/;"	m	union:__anon208::__anon209	file:	access:public
symref_target	include/git2/net.h	/^	char *symref_target;$/;"	m	struct:git_remote_head	access:public
sync_one_submodule	tests/submodule/modify.c	/^static int sync_one_submodule($/;"	f	file:	signature:( git_submodule *sm, const char *name, void *payload)
synchronized_threads_init	src/global.c	/^static int synchronized_threads_init(void)$/;"	f	file:	signature:(void)
syncsearch	deps/zlib/inflate.c	/^local unsigned syncsearch(have, buf, len)$/;"	f
syntax	deps/regex/regex_internal.h	/^  reg_syntax_t syntax;$/;"	m	struct:re_dfa_t	access:public
sysdir	src/attr_file.h	/^	git_buf sysdir;$/;"	m	struct:__anon173	access:public
system_attr_file	src/attr.c	/^static int system_attr_file($/;"	f	file:	signature:( git_buf *out, git_attr_session *attr_session)
systype	tests/checkout/crlf.c	/^static const char *systype;$/;"	v	file:
t	src/transports/http.c	/^	http_subtransport *t;$/;"	m	struct:__anon177	file:	access:public
t	tests/diff/racediffiter.c	/^	git_delta_t t;$/;"	m	struct:__anon367	file:	access:public
t40	tests/object/message.c	15;"	d	file:
table	deps/zlib/zutil.c	/^local ptr_table table[MAX_PTR];$/;"	v
table_bits	src/xdiff/xhistogram.c	/^	unsigned int table_bits,$/;"	m	struct:histindex	file:	access:public
tag	include/git2/tag.h	/^GIT_EXTERN(const char *) git_tag_message(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const char *) git_tag_name(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const git_oid *) git_tag_id(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const git_oid *) git_tag_target_id(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const git_signature *) git_tag_tagger(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(git_otype) git_tag_target_type(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(git_repository *) git_tag_owner(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(void) git_tag_free(git_tag *tag);$/;"	v
tag	src/describe.c	/^	git_tag *tag;$/;"	m	struct:commit_name	file:	access:public
tag	src/describe.c	/^	struct possible_tag *tag;$/;"	m	struct:git_describe_result	typeref:struct:git_describe_result::possible_tag	file:	access:public
tag	tests/object/tag/peel.c	/^static git_tag *tag;$/;"	v	file:
tag	tests/odb/loose_data.h	/^static object_data tag = {$/;"	v
tag1_id	tests/object/tag/read.c	/^static const char *tag1_id = "b25fa35b38051e4ae45d4222e795f9df2e43f1d1";$/;"	v	file:
tag2_id	tests/object/tag/read.c	/^static const char *tag2_id = "7b4384978d2493e851f9cca7858815fac9b10980";$/;"	v	file:
tag2_id	tests/object/tag/write.c	/^static const char *tag2_id = "7b4384978d2493e851f9cca7858815fac9b10980";$/;"	v	file:
tag_action	examples/tag.c	/^typedef void (*tag_action)(tag_state *state);$/;"	t	file:
tag_bytes	tests/odb/loose_data.h	/^static unsigned char tag_bytes[] = {$/;"	v
tag_cb_data	src/tag.c	/^} tag_cb_data;$/;"	t	typeref:struct:__anon248	file:
tag_data	tests/object/raw/data.h	/^static unsigned char tag_data[] = {$/;"	v
tag_data	tests/odb/loose_data.h	/^static unsigned char tag_data[] = {$/;"	v
tag_error	src/tag.c	/^static int tag_error(const char *str)$/;"	f	file:	signature:(const char *str)
tag_filter_data	src/tag.c	/^} tag_filter_data;$/;"	t	typeref:struct:__anon249	file:
tag_id	tests/object/raw/data.h	/^static char *tag_id = "09d373e1dfdc16b129ceec6dd649739911541e05";$/;"	v
tag_list_cb	src/tag.c	/^static int tag_list_cb(const char *tag_name, git_oid *oid, void *data)$/;"	f	file:	signature:(const char *tag_name, git_oid *oid, void *data)
tag_name	examples/tag.c	/^	const char *tag_name;$/;"	m	struct:__anon38	file:	access:public
tag_name	src/tag.h	/^	char *tag_name;$/;"	m	struct:git_tag	access:public
tag_obj	tests/object/raw/data.h	/^static git_rawobj tag_obj = {$/;"	v
tag_options	examples/tag.c	/^} tag_options;$/;"	t	typeref:struct:__anon38	file:
tag_options_init	examples/tag.c	/^static void tag_options_init(tag_options *opts)$/;"	f	file:	signature:(tag_options *opts)
tag_parse	src/tag.c	/^static int tag_parse(git_tag *tag, const char *buffer, const char *buffer_end)$/;"	f	file:	signature:(git_tag *tag, const char *buffer, const char *buffer_end)
tag_parsing	examples/general.c	/^static void tag_parsing(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
tag_state	examples/tag.c	/^} tag_state;$/;"	t	typeref:struct:__anon39	file:
tagged	src/pack-objects.h	/^	    tagged:1,$/;"	m	struct:git_pobject	access:public
tagged_commit	tests/object/tag/read.c	/^static const char *tagged_commit = "e90810b8df3e80c413d903f631643c716887138d";$/;"	v	file:
tagged_commit	tests/object/tag/write.c	/^static const char *tagged_commit = "e90810b8df3e80c413d903f631643c716887138d";$/;"	v	file:
tagger	src/tag.h	/^	git_signature *tagger;$/;"	m	struct:git_tag	access:public
tagger_email	tests/network/fetchlocal.c	/^static const char* tagger_email = "vicent@github.com";$/;"	v	file:
tagger_email	tests/object/tag/write.c	/^static const char* tagger_email = "vicent@github.com";$/;"	v	file:
tagger_message	tests/network/fetchlocal.c	/^static const char* tagger_message = "This is my tag.\\n\\nThere are many tags, but this one is mine\\n";$/;"	v	file:
tagger_message	tests/object/tag/write.c	/^static const char* tagger_message = "This is my tag.\\n\\nThere are many tags, but this one is mine\\n";$/;"	v	file:
tagger_name	tests/network/fetchlocal.c	/^static const char* tagger_name = "Vicent Marti";$/;"	v	file:
tagger_name	tests/object/tag/write.c	/^static const char* tagger_name = "Vicent Marti";$/;"	v	file:
taggerless	tests/object/tag/read.c	/^static const char *taggerless = "4a23e2e65ad4e31c4c9db7dc746650bfad082679";$/;"	v	file:
taglist	src/tag.c	/^	git_vector *taglist;$/;"	m	struct:__anon249	file:	access:public
tags_cb	src/tag.c	/^static int tags_cb(const char *ref, void *data)$/;"	f	file:	signature:(const char *ref, void *data)
tail	src/oid.c	/^	const char *tail;$/;"	m	union:__anon301	file:	access:public
tail	src/xdiff/xtypes.h	/^	chanode_t *head, *tail;$/;"	m	struct:s_chastore	access:public
target	examples/tag.c	/^	const char *target;$/;"	m	struct:__anon38	file:	access:public
target	src/blame_git.c	/^	git_blame__origin *target;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
target	src/checkout.c	/^	git_iterator *target;$/;"	m	struct:__anon215	file:	access:public
target	src/filter.c	/^	git_buf *target;$/;"	m	struct:buf_stream	file:	access:public
target	src/filter.c	/^	git_writestream *target;$/;"	m	struct:proxy_stream	file:	access:public
target	src/refs.h	/^	} target;$/;"	m	struct:git_reference	typeref:union:git_reference::__anon258	access:public
target	src/tag.h	/^	git_oid target;$/;"	m	struct:git_tag	access:public
target	src/transaction.c	/^	} target;$/;"	m	struct:__anon208	typeref:union:__anon208::__anon209	file:	access:public
target	src/transports/auth_negotiate.c	/^	git_buf target;$/;"	m	struct:__anon194	file:	access:public
target	tests/object/tag/peel.c	/^static git_object *target;$/;"	v	file:
target	tests/refs/branches/create.c	/^static git_commit *target;$/;"	v	file:
target	tests/reset/hard.c	/^static git_object *target;$/;"	v	file:
target	tests/reset/mixed.c	/^static git_object *target;$/;"	v	file:
target	tests/reset/soft.c	/^static git_object *target;$/;"	v	file:
target_directory	include/git2/checkout.h	/^	const char *target_directory; \/**< alternative checkout path to workdir *\/$/;"	m	struct:git_checkout_options	access:public
target_len	src/checkout.c	/^	size_t target_len;$/;"	m	struct:__anon215	file:	access:public
target_limit	include/git2/merge.h	/^	unsigned int target_limit;$/;"	m	struct:__anon132	access:public
target_path	src/checkout.c	/^	git_buf target_path;$/;"	m	struct:__anon215	file:	access:public
targets	tests/diff/rename.c	/^	const char **targets;$/;"	m	struct:rename_expected	file:	access:public
temp_buf	src/filter.c	/^	git_buf *temp_buf;$/;"	m	struct:git_filter_list	file:	access:public
temp_buf	src/filter.c	/^	git_buf temp_buf;$/;"	m	struct:proxy_stream	file:	access:public
temp_buf	src/filter.h	/^	git_buf *temp_buf;$/;"	m	struct:__anon260	access:public
template	examples/init.c	/^	const char *template;$/;"	m	struct:opts	file:	access:public
template_path	include/git2/repository.h	/^	const char *template_path;$/;"	m	struct:__anon119	access:public
template_sandbox	tests/repo/init.c	/^static const char *template_sandbox(const char *name)$/;"	f	file:	signature:(const char *name)
test	tests/clar.c	/^	const char *test;$/;"	m	struct:clar_error	file:	access:public
test_4096	tests/core/buffer.c	/^const char *test_4096 = TESTSTR_4096;$/;"	v
test_8192	tests/core/buffer.c	/^const char *test_8192 = TESTSTR_8192;$/;"	v
test_abort	tests/rebase/abort.c	/^static void test_abort($/;"	f	file:	signature:( git_annotated_commit *branch, git_annotated_commit *onto)
test_add_entry	tests/index/add.c	/^static void test_add_entry($/;"	f	file:	signature:( bool should_succeed, const char *idstr, git_filemode_t mode)
test_apply_fromdiff__add	tests/apply/fromdiff.c	/^void test_apply_fromdiff__add(void)$/;"	f	signature:(void)
test_apply_fromdiff__append	tests/apply/fromdiff.c	/^void test_apply_fromdiff__append(void)$/;"	f	signature:(void)
test_apply_fromdiff__append_nocontext	tests/apply/fromdiff.c	/^void test_apply_fromdiff__append_nocontext(void)$/;"	f	signature:(void)
test_apply_fromdiff__binary_add	tests/apply/fromdiff.c	/^void test_apply_fromdiff__binary_add(void)$/;"	f	signature:(void)
test_apply_fromdiff__binary_change_delta	tests/apply/fromdiff.c	/^void test_apply_fromdiff__binary_change_delta(void)$/;"	f	signature:(void)
test_apply_fromdiff__binary_change_literal	tests/apply/fromdiff.c	/^void test_apply_fromdiff__binary_change_literal(void)$/;"	f	signature:(void)
test_apply_fromdiff__binary_delete	tests/apply/fromdiff.c	/^void test_apply_fromdiff__binary_delete(void)$/;"	f	signature:(void)
test_apply_fromdiff__binary_no_change	tests/apply/fromdiff.c	/^void test_apply_fromdiff__binary_no_change(void)$/;"	f	signature:(void)
test_apply_fromdiff__change_firstline	tests/apply/fromdiff.c	/^void test_apply_fromdiff__change_firstline(void)$/;"	f	signature:(void)
test_apply_fromdiff__change_middle	tests/apply/fromdiff.c	/^void test_apply_fromdiff__change_middle(void)$/;"	f	signature:(void)
test_apply_fromdiff__change_middle_nocontext	tests/apply/fromdiff.c	/^void test_apply_fromdiff__change_middle_nocontext(void)$/;"	f	signature:(void)
test_apply_fromdiff__cleanup	tests/apply/fromdiff.c	/^void test_apply_fromdiff__cleanup(void)$/;"	f	signature:(void)
test_apply_fromdiff__delete	tests/apply/fromdiff.c	/^void test_apply_fromdiff__delete(void)$/;"	f	signature:(void)
test_apply_fromdiff__from_empty_file	tests/apply/fromdiff.c	/^void test_apply_fromdiff__from_empty_file(void)$/;"	f	signature:(void)
test_apply_fromdiff__initialize	tests/apply/fromdiff.c	/^void test_apply_fromdiff__initialize(void)$/;"	f	signature:(void)
test_apply_fromdiff__lastline	tests/apply/fromdiff.c	/^void test_apply_fromdiff__lastline(void)$/;"	f	signature:(void)
test_apply_fromdiff__no_change	tests/apply/fromdiff.c	/^void test_apply_fromdiff__no_change(void)$/;"	f	signature:(void)
test_apply_fromdiff__prepend	tests/apply/fromdiff.c	/^void test_apply_fromdiff__prepend(void)$/;"	f	signature:(void)
test_apply_fromdiff__prepend_and_append	tests/apply/fromdiff.c	/^void test_apply_fromdiff__prepend_and_append(void)$/;"	f	signature:(void)
test_apply_fromdiff__prepend_nocontext	tests/apply/fromdiff.c	/^void test_apply_fromdiff__prepend_nocontext(void)$/;"	f	signature:(void)
test_apply_fromdiff__to_empty_file	tests/apply/fromdiff.c	/^void test_apply_fromdiff__to_empty_file(void)$/;"	f	signature:(void)
test_apply_fromfile__add	tests/apply/fromfile.c	/^void test_apply_fromfile__add(void)$/;"	f	signature:(void)
test_apply_fromfile__append	tests/apply/fromfile.c	/^void test_apply_fromfile__append(void)$/;"	f	signature:(void)
test_apply_fromfile__append_no_nl	tests/apply/fromfile.c	/^void test_apply_fromfile__append_no_nl(void)$/;"	f	signature:(void)
test_apply_fromfile__append_nocontext	tests/apply/fromfile.c	/^void test_apply_fromfile__append_nocontext(void)$/;"	f	signature:(void)
test_apply_fromfile__binary_add	tests/apply/fromfile.c	/^void test_apply_fromfile__binary_add(void)$/;"	f	signature:(void)
test_apply_fromfile__binary_change_delta	tests/apply/fromfile.c	/^void test_apply_fromfile__binary_change_delta(void)$/;"	f	signature:(void)
test_apply_fromfile__binary_change_does_not_apply	tests/apply/fromfile.c	/^void test_apply_fromfile__binary_change_does_not_apply(void)$/;"	f	signature:(void)
test_apply_fromfile__binary_change_literal	tests/apply/fromfile.c	/^void test_apply_fromfile__binary_change_literal(void)$/;"	f	signature:(void)
test_apply_fromfile__binary_change_must_be_reversible	tests/apply/fromfile.c	/^void test_apply_fromfile__binary_change_must_be_reversible(void)$/;"	f	signature:(void)
test_apply_fromfile__binary_delete	tests/apply/fromfile.c	/^void test_apply_fromfile__binary_delete(void)$/;"	f	signature:(void)
test_apply_fromfile__change_firstline	tests/apply/fromfile.c	/^void test_apply_fromfile__change_firstline(void)$/;"	f	signature:(void)
test_apply_fromfile__change_middle	tests/apply/fromfile.c	/^void test_apply_fromfile__change_middle(void)$/;"	f	signature:(void)
test_apply_fromfile__change_middle_grow	tests/apply/fromfile.c	/^void test_apply_fromfile__change_middle_grow(void)$/;"	f	signature:(void)
test_apply_fromfile__change_middle_grow_nocontext	tests/apply/fromfile.c	/^void test_apply_fromfile__change_middle_grow_nocontext(void)$/;"	f	signature:(void)
test_apply_fromfile__change_middle_nocontext	tests/apply/fromfile.c	/^void test_apply_fromfile__change_middle_nocontext(void)$/;"	f	signature:(void)
test_apply_fromfile__change_middle_shrink	tests/apply/fromfile.c	/^void test_apply_fromfile__change_middle_shrink(void)$/;"	f	signature:(void)
test_apply_fromfile__change_middle_shrink_nocontext	tests/apply/fromfile.c	/^void test_apply_fromfile__change_middle_shrink_nocontext(void)$/;"	f	signature:(void)
test_apply_fromfile__cleanup	tests/apply/fromfile.c	/^void test_apply_fromfile__cleanup(void)$/;"	f	signature:(void)
test_apply_fromfile__delete	tests/apply/fromfile.c	/^void test_apply_fromfile__delete(void)$/;"	f	signature:(void)
test_apply_fromfile__empty_context	tests/apply/fromfile.c	/^void test_apply_fromfile__empty_context(void)$/;"	f	signature:(void)
test_apply_fromfile__empty_file_not_allowed	tests/apply/fromfile.c	/^void test_apply_fromfile__empty_file_not_allowed(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_corrupt_githeader	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_corrupt_githeader(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_missing_hunk_header	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_missing_hunk_header(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_missing_new_file	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_missing_new_file(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_missing_old_file	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_missing_old_file(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_no_changes	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_no_changes(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_not_a_patch	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_not_a_patch(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_truncated_1	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_truncated_1(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_truncated_2	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_truncated_2(void)$/;"	f	signature:(void)
test_apply_fromfile__fail_truncated_3	tests/apply/fromfile.c	/^void test_apply_fromfile__fail_truncated_3(void)$/;"	f	signature:(void)
test_apply_fromfile__from_empty_file	tests/apply/fromfile.c	/^void test_apply_fromfile__from_empty_file(void)$/;"	f	signature:(void)
test_apply_fromfile__initialize	tests/apply/fromfile.c	/^void test_apply_fromfile__initialize(void)$/;"	f	signature:(void)
test_apply_fromfile__lastline	tests/apply/fromfile.c	/^void test_apply_fromfile__lastline(void)$/;"	f	signature:(void)
test_apply_fromfile__modechange	tests/apply/fromfile.c	/^void test_apply_fromfile__modechange(void)$/;"	f	signature:(void)
test_apply_fromfile__modechange_with_modification	tests/apply/fromfile.c	/^void test_apply_fromfile__modechange_with_modification(void)$/;"	f	signature:(void)
test_apply_fromfile__noisy	tests/apply/fromfile.c	/^void test_apply_fromfile__noisy(void)$/;"	f	signature:(void)
test_apply_fromfile__noisy_nocontext	tests/apply/fromfile.c	/^void test_apply_fromfile__noisy_nocontext(void)$/;"	f	signature:(void)
test_apply_fromfile__prepend	tests/apply/fromfile.c	/^void test_apply_fromfile__prepend(void)$/;"	f	signature:(void)
test_apply_fromfile__prepend_and_append	tests/apply/fromfile.c	/^void test_apply_fromfile__prepend_and_append(void)$/;"	f	signature:(void)
test_apply_fromfile__prepend_nocontext	tests/apply/fromfile.c	/^void test_apply_fromfile__prepend_nocontext(void)$/;"	f	signature:(void)
test_apply_fromfile__rename_exact	tests/apply/fromfile.c	/^void test_apply_fromfile__rename_exact(void)$/;"	f	signature:(void)
test_apply_fromfile__rename_similar	tests/apply/fromfile.c	/^void test_apply_fromfile__rename_similar(void)$/;"	f	signature:(void)
test_apply_fromfile__rename_similar_quotedname	tests/apply/fromfile.c	/^void test_apply_fromfile__rename_similar_quotedname(void)$/;"	f	signature:(void)
test_apply_fromfile__to_empty_file	tests/apply/fromfile.c	/^void test_apply_fromfile__to_empty_file(void)$/;"	f	signature:(void)
test_arraysize_add	tests/core/errors.c	/^static int test_arraysize_add(size_t one, size_t two)$/;"	f	file:	signature:(size_t one, size_t two)
test_arraysize_multiply	tests/core/errors.c	/^static int test_arraysize_multiply(size_t nelem, size_t size)$/;"	f	file:	signature:(size_t nelem, size_t size)
test_attr_file__assign_variants	tests/attr/file.c	/^void test_attr_file__assign_variants(void)$/;"	f	signature:(void)
test_attr_file__check_attr_examples	tests/attr/file.c	/^void test_attr_file__check_attr_examples(void)$/;"	f	signature:(void)
test_attr_file__match_variants	tests/attr/file.c	/^void test_attr_file__match_variants(void)$/;"	f	signature:(void)
test_attr_file__simple_read	tests/attr/file.c	/^void test_attr_file__simple_read(void)$/;"	f	signature:(void)
test_attr_flags__bare	tests/attr/flags.c	/^void test_attr_flags__bare(void)$/;"	f	signature:(void)
test_attr_flags__cleanup	tests/attr/flags.c	/^void test_attr_flags__cleanup(void)$/;"	f	signature:(void)
test_attr_flags__index_vs_workdir	tests/attr/flags.c	/^void test_attr_flags__index_vs_workdir(void)$/;"	f	signature:(void)
test_attr_flags__subdir	tests/attr/flags.c	/^void test_attr_flags__subdir(void)$/;"	f	signature:(void)
test_attr_ignore__allow_root	tests/attr/ignore.c	/^void test_attr_ignore__allow_root(void)$/;"	f	signature:(void)
test_attr_ignore__cleanup	tests/attr/ignore.c	/^void test_attr_ignore__cleanup(void)$/;"	f	signature:(void)
test_attr_ignore__dont_ignore_files_for_folder	tests/attr/ignore.c	/^void test_attr_ignore__dont_ignore_files_for_folder(void)$/;"	f	signature:(void)
test_attr_ignore__expand_tilde_to_homedir	tests/attr/ignore.c	/^void test_attr_ignore__expand_tilde_to_homedir(void)$/;"	f	signature:(void)
test_attr_ignore__full_paths	tests/attr/ignore.c	/^void test_attr_ignore__full_paths(void)$/;"	f	signature:(void)
test_attr_ignore__gitignore_in_subdir	tests/attr/ignore.c	/^void test_attr_ignore__gitignore_in_subdir(void)$/;"	f	signature:(void)
test_attr_ignore__globs_and_path_delimiters	tests/attr/ignore.c	/^void test_attr_ignore__globs_and_path_delimiters(void)$/;"	f	signature:(void)
test_attr_ignore__honor_temporary_rules	tests/attr/ignore.c	/^void test_attr_ignore__honor_temporary_rules(void)$/;"	f	signature:(void)
test_attr_ignore__ignore_root	tests/attr/ignore.c	/^void test_attr_ignore__ignore_root(void)$/;"	f	signature:(void)
test_attr_ignore__initialize	tests/attr/ignore.c	/^void test_attr_ignore__initialize(void)$/;"	f	signature:(void)
test_attr_ignore__leading_stars	tests/attr/ignore.c	/^void test_attr_ignore__leading_stars(void)$/;"	f	signature:(void)
test_attr_ignore__more_starstar_cases	tests/attr/ignore.c	/^void test_attr_ignore__more_starstar_cases(void)$/;"	f	signature:(void)
test_attr_ignore__skip_gitignore_directory	tests/attr/ignore.c	/^void test_attr_ignore__skip_gitignore_directory(void)$/;"	f	signature:(void)
test_attr_ignore__subdirectory_gitignore	tests/attr/ignore.c	/^void test_attr_ignore__subdirectory_gitignore(void)$/;"	f	signature:(void)
test_attr_ignore__symlink_to_outside	tests/attr/ignore.c	/^void test_attr_ignore__symlink_to_outside(void)$/;"	f	signature:(void)
test_attr_lookup__assign_variants	tests/attr/lookup.c	/^void test_attr_lookup__assign_variants(void)$/;"	f	signature:(void)
test_attr_lookup__check_attr_examples	tests/attr/lookup.c	/^void test_attr_lookup__check_attr_examples(void)$/;"	f	signature:(void)
test_attr_lookup__from_buffer	tests/attr/lookup.c	/^void test_attr_lookup__from_buffer(void)$/;"	f	signature:(void)
test_attr_lookup__match_variants	tests/attr/lookup.c	/^void test_attr_lookup__match_variants(void)$/;"	f	signature:(void)
test_attr_lookup__simple	tests/attr/lookup.c	/^void test_attr_lookup__simple(void)$/;"	f	signature:(void)
test_attr_repo__bad_macros	tests/attr/repo.c	/^void test_attr_repo__bad_macros(void)$/;"	f	signature:(void)
test_attr_repo__bare_repo_with_index	tests/attr/repo.c	/^void test_attr_repo__bare_repo_with_index(void)$/;"	f	signature:(void)
test_attr_repo__cleanup	tests/attr/repo.c	/^void test_attr_repo__cleanup(void)$/;"	f	signature:(void)
test_attr_repo__foreach	tests/attr/repo.c	/^void test_attr_repo__foreach(void)$/;"	f	signature:(void)
test_attr_repo__get_many	tests/attr/repo.c	/^void test_attr_repo__get_many(void)$/;"	f	signature:(void)
test_attr_repo__get_many_in_place	tests/attr/repo.c	/^void test_attr_repo__get_many_in_place(void)$/;"	f	signature:(void)
test_attr_repo__get_one	tests/attr/repo.c	/^void test_attr_repo__get_one(void)$/;"	f	signature:(void)
test_attr_repo__get_one_start_deep	tests/attr/repo.c	/^void test_attr_repo__get_one_start_deep(void)$/;"	f	signature:(void)
test_attr_repo__initialize	tests/attr/repo.c	/^void test_attr_repo__initialize(void)$/;"	f	signature:(void)
test_attr_repo__macros	tests/attr/repo.c	/^void test_attr_repo__macros(void)$/;"	f	signature:(void)
test_attr_repo__manpage_example	tests/attr/repo.c	/^void test_attr_repo__manpage_example(void)$/;"	f	signature:(void)
test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives	tests/attr/repo.c	/^void test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives(void)$/;"	f	signature:(void)
test_blame_buffer__add_lines_at_end	tests/blame/buffer.c	/^void test_blame_buffer__add_lines_at_end(void)$/;"	f	signature:(void)
test_blame_buffer__add_splits_hunk	tests/blame/buffer.c	/^void test_blame_buffer__add_splits_hunk(void)$/;"	f	signature:(void)
test_blame_buffer__added_line	tests/blame/buffer.c	/^void test_blame_buffer__added_line(void)$/;"	f	signature:(void)
test_blame_buffer__cleanup	tests/blame/buffer.c	/^void test_blame_buffer__cleanup(void)$/;"	f	signature:(void)
test_blame_buffer__delete_crosses_hunk_boundary	tests/blame/buffer.c	/^void test_blame_buffer__delete_crosses_hunk_boundary(void)$/;"	f	signature:(void)
test_blame_buffer__deleted_line	tests/blame/buffer.c	/^void test_blame_buffer__deleted_line(void)$/;"	f	signature:(void)
test_blame_buffer__initialize	tests/blame/buffer.c	/^void test_blame_buffer__initialize(void)$/;"	f	signature:(void)
test_blame_buffer__replace_line	tests/blame/buffer.c	/^void test_blame_buffer__replace_line(void)$/;"	f	signature:(void)
test_blame_getters__byindex	tests/blame/getters.c	/^void test_blame_getters__byindex(void)$/;"	f	signature:(void)
test_blame_getters__byline	tests/blame/getters.c	/^void test_blame_getters__byline(void)$/;"	f	signature:(void)
test_blame_getters__cleanup	tests/blame/getters.c	/^void test_blame_getters__cleanup(void)$/;"	f	signature:(void)
test_blame_getters__initialize	tests/blame/getters.c	/^void test_blame_getters__initialize(void)$/;"	f	signature:(void)
test_blame_harder__c	tests/blame/harder.c	/^void test_blame_harder__c(void)$/;"	f	signature:(void)
test_blame_harder__cc	tests/blame/harder.c	/^void test_blame_harder__cc(void)$/;"	f	signature:(void)
test_blame_harder__ccc	tests/blame/harder.c	/^void test_blame_harder__ccc(void)$/;"	f	signature:(void)
test_blame_harder__cleanup	tests/blame/harder.c	/^void test_blame_harder__cleanup(void)$/;"	f	signature:(void)
test_blame_harder__initialize	tests/blame/harder.c	/^void test_blame_harder__initialize(void)$/;"	f	signature:(void)
test_blame_harder__m	tests/blame/harder.c	/^void test_blame_harder__m(void)$/;"	f	signature:(void)
test_blame_simple__can_blame_huge_file	tests/blame/simple.c	/^void test_blame_simple__can_blame_huge_file(void)$/;"	f	signature:(void)
test_blame_simple__can_restrict_lines_both	tests/blame/simple.c	/^void test_blame_simple__can_restrict_lines_both(void)$/;"	f	signature:(void)
test_blame_simple__can_restrict_lines_max	tests/blame/simple.c	/^void test_blame_simple__can_restrict_lines_max(void)$/;"	f	signature:(void)
test_blame_simple__can_restrict_lines_min	tests/blame/simple.c	/^void test_blame_simple__can_restrict_lines_min(void)$/;"	f	signature:(void)
test_blame_simple__can_restrict_to_first_parent_commits	tests/blame/simple.c	/^void test_blame_simple__can_restrict_to_first_parent_commits(void)$/;"	f	signature:(void)
test_blame_simple__can_restrict_to_newish_commits	tests/blame/simple.c	/^void test_blame_simple__can_restrict_to_newish_commits(void)$/;"	f	signature:(void)
test_blame_simple__cleanup	tests/blame/simple.c	/^void test_blame_simple__cleanup(void)$/;"	f	signature:(void)
test_blame_simple__initialize	tests/blame/simple.c	/^void test_blame_simple__initialize(void)$/;"	f	signature:(void)
test_blame_simple__trivial_blamerepo	tests/blame/simple.c	/^void test_blame_simple__trivial_blamerepo(void)$/;"	f	signature:(void)
test_blame_simple__trivial_libgit2	tests/blame/simple.c	/^void test_blame_simple__trivial_libgit2(void)$/;"	f	signature:(void)
test_blame_simple__trivial_testrepo	tests/blame/simple.c	/^void test_blame_simple__trivial_testrepo(void)$/;"	f	signature:(void)
test_body	tests/object/raw/write.c	/^void test_body(object_data *d, git_rawobj *o) $/;"	f	signature:(object_data *d, git_rawobj *o)
test_buf_basic__printf	tests/buf/basic.c	/^void test_buf_basic__printf(void)$/;"	f	signature:(void)
test_buf_basic__resize	tests/buf/basic.c	/^void test_buf_basic__resize(void)$/;"	f	signature:(void)
test_buf_basic__resize_incremental	tests/buf/basic.c	/^void test_buf_basic__resize_incremental(void)$/;"	f	signature:(void)
test_buf_oom__grow	tests/buf/oom.c	/^void test_buf_oom__grow(void)$/;"	f	signature:(void)
test_buf_oom__grow_by	tests/buf/oom.c	/^void test_buf_oom__grow_by(void)$/;"	f	signature:(void)
test_buf_quote__quote_succeeds	tests/buf/quote.c	/^void test_buf_quote__quote_succeeds(void)$/;"	f	signature:(void)
test_buf_quote__unquote_fails	tests/buf/quote.c	/^void test_buf_quote__unquote_fails(void)$/;"	f	signature:(void)
test_buf_quote__unquote_succeeds	tests/buf/quote.c	/^void test_buf_quote__unquote_succeeds(void)$/;"	f	signature:(void)
test_buf_splice__append	tests/buf/splice.c	/^void test_buf_splice__append(void)$/;"	f	signature:(void)
test_buf_splice__cleanup	tests/buf/splice.c	/^void test_buf_splice__cleanup(void) {$/;"	f	signature:(void)
test_buf_splice__dont_do_anything	tests/buf/splice.c	/^void test_buf_splice__dont_do_anything(void)$/;"	f	signature:(void)
test_buf_splice__initialize	tests/buf/splice.c	/^void test_buf_splice__initialize(void) {$/;"	f	signature:(void)
test_buf_splice__insert_at	tests/buf/splice.c	/^void test_buf_splice__insert_at(void)$/;"	f	signature:(void)
test_buf_splice__preprend	tests/buf/splice.c	/^void test_buf_splice__preprend(void)$/;"	f	signature:(void)
test_buf_splice__remove_at	tests/buf/splice.c	/^void test_buf_splice__remove_at(void)$/;"	f	signature:(void)
test_buf_splice__replace	tests/buf/splice.c	/^void test_buf_splice__replace(void)$/;"	f	signature:(void)
test_buf_splice__replace_with_longer	tests/buf/splice.c	/^void test_buf_splice__replace_with_longer(void)$/;"	f	signature:(void)
test_buf_splice__replace_with_shorter	tests/buf/splice.c	/^void test_buf_splice__replace_with_shorter(void)$/;"	f	signature:(void)
test_buf_splice__truncate	tests/buf/splice.c	/^void test_buf_splice__truncate(void)$/;"	f	signature:(void)
test_canonicalize	tests/path/win32.c	/^void test_canonicalize(const wchar_t *in, const wchar_t *expected)$/;"	f	signature:(const wchar_t *in, const wchar_t *expected)
test_checkout	tests/checkout/crlf.c	/^static void test_checkout(const char *autocrlf, const char *attrs)$/;"	f	file:	signature:(const char *autocrlf, const char *attrs)
test_checkout_binaryunicode__autocrlf	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__autocrlf(void)$/;"	f	signature:(void)
test_checkout_binaryunicode__cleanup	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__cleanup(void)$/;"	f	signature:(void)
test_checkout_binaryunicode__initialize	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__initialize(void)$/;"	f	signature:(void)
test_checkout_binaryunicode__noautocrlf	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__noautocrlf(void)$/;"	f	signature:(void)
test_checkout_conflict__add_add	tests/checkout/conflict.c	/^void test_checkout_conflict__add_add(void)$/;"	f	signature:(void)
test_checkout_conflict__automerge	tests/checkout/conflict.c	/^void test_checkout_conflict__automerge(void)$/;"	f	signature:(void)
test_checkout_conflict__cleanup	tests/checkout/conflict.c	/^void test_checkout_conflict__cleanup(void)$/;"	f	signature:(void)
test_checkout_conflict__diff3	tests/checkout/conflict.c	/^void test_checkout_conflict__diff3(void)$/;"	f	signature:(void)
test_checkout_conflict__directory_file	tests/checkout/conflict.c	/^void test_checkout_conflict__directory_file(void)$/;"	f	signature:(void)
test_checkout_conflict__directory_file_with_custom_labels	tests/checkout/conflict.c	/^void test_checkout_conflict__directory_file_with_custom_labels(void)$/;"	f	signature:(void)
test_checkout_conflict__ignored	tests/checkout/conflict.c	/^void test_checkout_conflict__ignored(void)$/;"	f	signature:(void)
test_checkout_conflict__initialize	tests/checkout/conflict.c	/^void test_checkout_conflict__initialize(void)$/;"	f	signature:(void)
test_checkout_conflict__link_file	tests/checkout/conflict.c	/^void test_checkout_conflict__link_file(void)$/;"	f	signature:(void)
test_checkout_conflict__links	tests/checkout/conflict.c	/^void test_checkout_conflict__links(void)$/;"	f	signature:(void)
test_checkout_conflict__mode_change	tests/checkout/conflict.c	/^void test_checkout_conflict__mode_change(void)$/;"	f	signature:(void)
test_checkout_conflict__name_mangled_file_exists_in_workdir	tests/checkout/conflict.c	/^void test_checkout_conflict__name_mangled_file_exists_in_workdir(void)$/;"	f	signature:(void)
test_checkout_conflict__ours	tests/checkout/conflict.c	/^void test_checkout_conflict__ours(void)$/;"	f	signature:(void)
test_checkout_conflict__path_filters	tests/checkout/conflict.c	/^void test_checkout_conflict__path_filters(void)$/;"	f	signature:(void)
test_checkout_conflict__rename_keep_ours	tests/checkout/conflict.c	/^void test_checkout_conflict__rename_keep_ours(void)$/;"	f	signature:(void)
test_checkout_conflict__renames	tests/checkout/conflict.c	/^void test_checkout_conflict__renames(void)$/;"	f	signature:(void)
test_checkout_conflict__report_progress	tests/checkout/conflict.c	/^void test_checkout_conflict__report_progress(void)$/;"	f	signature:(void)
test_checkout_conflict__theirs	tests/checkout/conflict.c	/^void test_checkout_conflict__theirs(void)$/;"	f	signature:(void)
test_checkout_conflict__update_only	tests/checkout/conflict.c	/^void test_checkout_conflict__update_only(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_false_no_attrs	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_false_no_attrs(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_false_text_auto_attr	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_false_text_auto_attr(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_input_no_attrs	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_input_no_attrs(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_input_text_auto_attr	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_input_text_auto_attr(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_true_index_size_is_filtered_size	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_true_index_size_is_filtered_size(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_true_no_attrs	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_true_no_attrs(void)$/;"	f	signature:(void)
test_checkout_crlf__autocrlf_true_text_auto_attr	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_true_text_auto_attr(void)$/;"	f	signature:(void)
test_checkout_crlf__can_write_empty_file	tests/checkout/crlf.c	/^void test_checkout_crlf__can_write_empty_file(void)$/;"	f	signature:(void)
test_checkout_crlf__cleanup	tests/checkout/crlf.c	/^void test_checkout_crlf__cleanup(void)$/;"	f	signature:(void)
test_checkout_crlf__detect_crlf_autocrlf_false	tests/checkout/crlf.c	/^void test_checkout_crlf__detect_crlf_autocrlf_false(void)$/;"	f	signature:(void)
test_checkout_crlf__detect_crlf_autocrlf_true	tests/checkout/crlf.c	/^void test_checkout_crlf__detect_crlf_autocrlf_true(void)$/;"	f	signature:(void)
test_checkout_crlf__detect_crlf_autocrlf_true_utf8	tests/checkout/crlf.c	/^void test_checkout_crlf__detect_crlf_autocrlf_true_utf8(void)$/;"	f	signature:(void)
test_checkout_crlf__initialize	tests/checkout/crlf.c	/^void test_checkout_crlf__initialize(void)$/;"	f	signature:(void)
test_checkout_crlf__matches_core_git	tests/checkout/crlf.c	/^void test_checkout_crlf__matches_core_git(void)$/;"	f	signature:(void)
test_checkout_crlf__with_ident	tests/checkout/crlf.c	/^void test_checkout_crlf__with_ident(void)$/;"	f	signature:(void)
test_checkout_fails	tests/checkout/nasty.c	/^static void test_checkout_fails(const char *refname, const char *filename)$/;"	f	file:	signature:(const char *refname, const char *filename)
test_checkout_head__cleanup	tests/checkout/head.c	/^void test_checkout_head__cleanup(void)$/;"	f	signature:(void)
test_checkout_head__initialize	tests/checkout/head.c	/^void test_checkout_head__initialize(void)$/;"	f	signature:(void)
test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH	tests/checkout/head.c	/^void test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH(void)$/;"	f	signature:(void)
test_checkout_head__with_index_only_tree	tests/checkout/head.c	/^void test_checkout_head__with_index_only_tree(void)$/;"	f	signature:(void)
test_checkout_icase__cleanup	tests/checkout/icase.c	/^void test_checkout_icase__cleanup(void)$/;"	f	signature:(void)
test_checkout_icase__conflicts_with_casechanged_subtrees	tests/checkout/icase.c	/^void test_checkout_icase__conflicts_with_casechanged_subtrees(void)$/;"	f	signature:(void)
test_checkout_icase__ignores_unstaged_casechange	tests/checkout/icase.c	/^void test_checkout_icase__ignores_unstaged_casechange(void)$/;"	f	signature:(void)
test_checkout_icase__initialize	tests/checkout/icase.c	/^void test_checkout_icase__initialize(void)$/;"	f	signature:(void)
test_checkout_icase__overwrites_empty_folders_for_files	tests/checkout/icase.c	/^void test_checkout_icase__overwrites_empty_folders_for_files(void)$/;"	f	signature:(void)
test_checkout_icase__overwrites_files_for_files_when_forced	tests/checkout/icase.c	/^void test_checkout_icase__overwrites_files_for_files_when_forced(void)$/;"	f	signature:(void)
test_checkout_icase__overwrites_files_for_folders_when_forced	tests/checkout/icase.c	/^void test_checkout_icase__overwrites_files_for_folders_when_forced(void)$/;"	f	signature:(void)
test_checkout_icase__overwrites_folders_for_files_when_forced	tests/checkout/icase.c	/^void test_checkout_icase__overwrites_folders_for_files_when_forced(void)$/;"	f	signature:(void)
test_checkout_icase__overwrites_links_for_files_when_forced	tests/checkout/icase.c	/^void test_checkout_icase__overwrites_links_for_files_when_forced(void)$/;"	f	signature:(void)
test_checkout_icase__overwrites_links_for_folders_when_forced	tests/checkout/icase.c	/^void test_checkout_icase__overwrites_links_for_folders_when_forced(void)$/;"	f	signature:(void)
test_checkout_icase__refuses_to_overwrite_files_for_files	tests/checkout/icase.c	/^void test_checkout_icase__refuses_to_overwrite_files_for_files(void)$/;"	f	signature:(void)
test_checkout_icase__refuses_to_overwrite_files_for_folders	tests/checkout/icase.c	/^void test_checkout_icase__refuses_to_overwrite_files_for_folders(void)$/;"	f	signature:(void)
test_checkout_icase__refuses_to_overwrite_links_for_files	tests/checkout/icase.c	/^void test_checkout_icase__refuses_to_overwrite_links_for_files(void)$/;"	f	signature:(void)
test_checkout_icase__refuses_to_overwrite_links_for_folders	tests/checkout/icase.c	/^void test_checkout_icase__refuses_to_overwrite_links_for_folders(void)$/;"	f	signature:(void)
test_checkout_icase__refuses_to_overwrite_populated_folders_for_files	tests/checkout/icase.c	/^void test_checkout_icase__refuses_to_overwrite_populated_folders_for_files(void)$/;"	f	signature:(void)
test_checkout_index__adding_conflict_removes_stage_0	tests/checkout/index.c	/^void test_checkout_index__adding_conflict_removes_stage_0(void)$/;"	f	signature:(void)
test_checkout_index__calls_progress_callback	tests/checkout/index.c	/^void test_checkout_index__calls_progress_callback(void)$/;"	f	signature:(void)
test_checkout_index__can_checkout_a_newly_initialized_repository	tests/checkout/index.c	/^void test_checkout_index__can_checkout_a_newly_initialized_repository(void)$/;"	f	signature:(void)
test_checkout_index__can_create_missing_files	tests/checkout/index.c	/^void test_checkout_index__can_create_missing_files(void)$/;"	f	signature:(void)
test_checkout_index__can_get_repo_from_index	tests/checkout/index.c	/^void test_checkout_index__can_get_repo_from_index(void)$/;"	f	signature:(void)
test_checkout_index__can_notify_of_skipped_files	tests/checkout/index.c	/^void test_checkout_index__can_notify_of_skipped_files(void)$/;"	f	signature:(void)
test_checkout_index__can_overcome_name_clashes	tests/checkout/index.c	/^void test_checkout_index__can_overcome_name_clashes(void)$/;"	f	signature:(void)
test_checkout_index__can_overwrite_modified_file	tests/checkout/index.c	/^void test_checkout_index__can_overwrite_modified_file(void)$/;"	f	signature:(void)
test_checkout_index__can_remove_untracked_files	tests/checkout/index.c	/^void test_checkout_index__can_remove_untracked_files(void)$/;"	f	signature:(void)
test_checkout_index__can_update_prefixed_files	tests/checkout/index.c	/^void test_checkout_index__can_update_prefixed_files(void)$/;"	f	signature:(void)
test_checkout_index__cannot_checkout_a_bare_repository	tests/checkout/index.c	/^void test_checkout_index__cannot_checkout_a_bare_repository(void)$/;"	f	signature:(void)
test_checkout_index__cleanup	tests/checkout/index.c	/^void test_checkout_index__cleanup(void)$/;"	f	signature:(void)
test_checkout_index__conflicts_honor_coreautocrlf	tests/checkout/index.c	/^void test_checkout_index__conflicts_honor_coreautocrlf(void)$/;"	f	signature:(void)
test_checkout_index__donot_overwrite_modified_file_by_default	tests/checkout/index.c	/^void test_checkout_index__donot_overwrite_modified_file_by_default(void)$/;"	f	signature:(void)
test_checkout_index__honor_coreautocrlf_setting_set_to_true	tests/checkout/index.c	/^void test_checkout_index__honor_coreautocrlf_setting_set_to_true(void)$/;"	f	signature:(void)
test_checkout_index__honor_coresymlinks_default	tests/checkout/index.c	/^void test_checkout_index__honor_coresymlinks_default(void)$/;"	f	signature:(void)
test_checkout_index__honor_coresymlinks_setting_set_to_false	tests/checkout/index.c	/^void test_checkout_index__honor_coresymlinks_setting_set_to_false(void)$/;"	f	signature:(void)
test_checkout_index__honor_coresymlinks_setting_set_to_true	tests/checkout/index.c	/^void test_checkout_index__honor_coresymlinks_setting_set_to_true(void)$/;"	f	signature:(void)
test_checkout_index__honor_the_gitattributes_directives	tests/checkout/index.c	/^void test_checkout_index__honor_the_gitattributes_directives(void)$/;"	f	signature:(void)
test_checkout_index__honor_the_specified_pathspecs	tests/checkout/index.c	/^void test_checkout_index__honor_the_specified_pathspecs(void)$/;"	f	signature:(void)
test_checkout_index__initialize	tests/checkout/index.c	/^void test_checkout_index__initialize(void)$/;"	f	signature:(void)
test_checkout_index__issue_1397	tests/checkout/index.c	/^void test_checkout_index__issue_1397(void)$/;"	f	signature:(void)
test_checkout_index__options_dir_modes	tests/checkout/index.c	/^void test_checkout_index__options_dir_modes(void)$/;"	f	signature:(void)
test_checkout_index__options_disable_filters	tests/checkout/index.c	/^void test_checkout_index__options_disable_filters(void)$/;"	f	signature:(void)
test_checkout_index__options_open_flags	tests/checkout/index.c	/^void test_checkout_index__options_open_flags(void)$/;"	f	signature:(void)
test_checkout_index__options_override_file_modes	tests/checkout/index.c	/^void test_checkout_index__options_override_file_modes(void)$/;"	f	signature:(void)
test_checkout_index__target_directory	tests/checkout/index.c	/^void test_checkout_index__target_directory(void)$/;"	f	signature:(void)
test_checkout_index__target_directory_from_bare	tests/checkout/index.c	/^void test_checkout_index__target_directory_from_bare(void)$/;"	f	signature:(void)
test_checkout_index__validates_struct_version	tests/checkout/index.c	/^void test_checkout_index__validates_struct_version(void)$/;"	f	signature:(void)
test_checkout_index__wont_notify_of_expected_line_ending_changes	tests/checkout/index.c	/^void test_checkout_index__wont_notify_of_expected_line_ending_changes(void)$/;"	f	signature:(void)
test_checkout_index__writes_conflict_file	tests/checkout/index.c	/^void test_checkout_index__writes_conflict_file(void)$/;"	f	signature:(void)
test_checkout_nasty__cleanup	tests/checkout/nasty.c	/^void test_checkout_nasty__cleanup(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_backslash_dotcapitalgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_backslash_dotcapitalgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_dotcapitalgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_dotcapitalgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_dotgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_dotgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_dotgit_tree	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_dotgit_tree(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_git_colon	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_git_colon(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_git_colon_stuff	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_git_colon_stuff(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_git_dot	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_git_dot(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_git_hfs_ignorable	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_git_hfs_ignorable(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_path_two	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_path_two(void)$/;"	f	signature:(void)
test_checkout_nasty__dot_tree	tests/checkout/nasty.c	/^void test_checkout_nasty__dot_tree(void)$/;"	f	signature:(void)
test_checkout_nasty__dotcapitalgit_backslash_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotcapitalgit_backslash_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotcapitalgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotcapitalgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotcapitalgit_tree	tests/checkout/nasty.c	/^void test_checkout_nasty__dotcapitalgit_tree(void)$/;"	f	signature:(void)
test_checkout_nasty__dotdot_dotcapitalgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotdot_dotcapitalgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotdot_dotgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotdot_dotgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotdot_dotgit_tree	tests/checkout/nasty.c	/^void test_checkout_nasty__dotdot_dotgit_tree(void)$/;"	f	signature:(void)
test_checkout_nasty__dotdot_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotdot_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotdot_tree	tests/checkout/nasty.c	/^void test_checkout_nasty__dotdot_tree(void)$/;"	f	signature:(void)
test_checkout_nasty__dotgit_backslash_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotgit_backslash_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotgit_path	tests/checkout/nasty.c	/^void test_checkout_nasty__dotgit_path(void)$/;"	f	signature:(void)
test_checkout_nasty__dotgit_tree	tests/checkout/nasty.c	/^void test_checkout_nasty__dotgit_tree(void)$/;"	f	signature:(void)
test_checkout_nasty__git_custom_shortname	tests/checkout/nasty.c	/^void test_checkout_nasty__git_custom_shortname(void)$/;"	f	signature:(void)
test_checkout_nasty__git_tilde1	tests/checkout/nasty.c	/^void test_checkout_nasty__git_tilde1(void)$/;"	f	signature:(void)
test_checkout_nasty__honors_core_protecthfs	tests/checkout/nasty.c	/^void test_checkout_nasty__honors_core_protecthfs(void)$/;"	f	signature:(void)
test_checkout_nasty__honors_core_protectntfs	tests/checkout/nasty.c	/^void test_checkout_nasty__honors_core_protectntfs(void)$/;"	f	signature:(void)
test_checkout_nasty__initialize	tests/checkout/nasty.c	/^void test_checkout_nasty__initialize(void)$/;"	f	signature:(void)
test_checkout_nasty__only_looks_like_a_git_shortname	tests/checkout/nasty.c	/^void test_checkout_nasty__only_looks_like_a_git_shortname(void)$/;"	f	signature:(void)
test_checkout_nasty__symlink1	tests/checkout/nasty.c	/^void test_checkout_nasty__symlink1(void)$/;"	f	signature:(void)
test_checkout_nasty__symlink2	tests/checkout/nasty.c	/^void test_checkout_nasty__symlink2(void)$/;"	f	signature:(void)
test_checkout_nasty__symlink3	tests/checkout/nasty.c	/^void test_checkout_nasty__symlink3(void)$/;"	f	signature:(void)
test_checkout_notify_cb	tests/checkout/index.c	/^static int test_checkout_notify_cb($/;"	f	file:	signature:( git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload)
test_checkout_passes	tests/checkout/nasty.c	/^static void test_checkout_passes(const char *refname, const char *filename)$/;"	f	file:	signature:(const char *refname, const char *filename)
test_checkout_tree__baseline_is_empty_when_no_index	tests/checkout/tree.c	/^void test_checkout_tree__baseline_is_empty_when_no_index(void)$/;"	f	signature:(void)
test_checkout_tree__caches_attributes_during_checkout	tests/checkout/tree.c	/^void test_checkout_tree__caches_attributes_during_checkout(void)$/;"	f	signature:(void)
test_checkout_tree__calls_progress_callback	tests/checkout/tree.c	/^void test_checkout_tree__calls_progress_callback(void)$/;"	f	signature:(void)
test_checkout_tree__can_cancel_checkout_from_notify	tests/checkout/tree.c	/^void test_checkout_tree__can_cancel_checkout_from_notify(void)$/;"	f	signature:(void)
test_checkout_tree__can_checkout_a_subdirectory_from_a_commit	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_a_subdirectory_from_a_commit(void)$/;"	f	signature:(void)
test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree(void)$/;"	f	signature:(void)
test_checkout_tree__can_checkout_and_remove_directory	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_and_remove_directory(void)$/;"	f	signature:(void)
test_checkout_tree__can_checkout_with_last_workdir_item_missing	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_with_last_workdir_item_missing(void)$/;"	f	signature:(void)
test_checkout_tree__can_checkout_with_pattern	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_with_pattern(void)$/;"	f	signature:(void)
test_checkout_tree__can_collect_perfdata	tests/checkout/tree.c	/^void test_checkout_tree__can_collect_perfdata(void)$/;"	f	signature:(void)
test_checkout_tree__can_continue_when_dir_in_use	tests/checkout/tree.c	/^void test_checkout_tree__can_continue_when_dir_in_use(void)$/;"	f	signature:(void)
test_checkout_tree__can_disable_pattern_match	tests/checkout/tree.c	/^void test_checkout_tree__can_disable_pattern_match(void)$/;"	f	signature:(void)
test_checkout_tree__can_not_update_index	tests/checkout/tree.c	/^void test_checkout_tree__can_not_update_index(void)$/;"	f	signature:(void)
test_checkout_tree__can_overwrite_ignored_by_default	tests/checkout/tree.c	/^void test_checkout_tree__can_overwrite_ignored_by_default(void)$/;"	f	signature:(void)
test_checkout_tree__can_overwrite_ignored_folder_by_default	tests/checkout/tree.c	/^void test_checkout_tree__can_overwrite_ignored_folder_by_default(void)$/;"	f	signature:(void)
test_checkout_tree__can_remove_ignored	tests/checkout/tree.c	/^void test_checkout_tree__can_remove_ignored(void)$/;"	f	signature:(void)
test_checkout_tree__can_remove_untracked	tests/checkout/tree.c	/^void test_checkout_tree__can_remove_untracked(void)$/;"	f	signature:(void)
test_checkout_tree__can_switch_branches	tests/checkout/tree.c	/^void test_checkout_tree__can_switch_branches(void)$/;"	f	signature:(void)
test_checkout_tree__can_update_but_not_write_index	tests/checkout/tree.c	/^void test_checkout_tree__can_update_but_not_write_index(void)$/;"	f	signature:(void)
test_checkout_tree__can_update_only	tests/checkout/tree.c	/^void test_checkout_tree__can_update_only(void)$/;"	f	signature:(void)
test_checkout_tree__can_write_to_empty_dirs	tests/checkout/tree.c	/^void test_checkout_tree__can_write_to_empty_dirs(void)$/;"	f	signature:(void)
test_checkout_tree__cannot_checkout_a_non_treeish	tests/checkout/tree.c	/^void test_checkout_tree__cannot_checkout_a_non_treeish(void)$/;"	f	signature:(void)
test_checkout_tree__case_changing_rename	tests/checkout/tree.c	/^void test_checkout_tree__case_changing_rename(void)$/;"	f	signature:(void)
test_checkout_tree__checking_out_a_conflicting_content_change_returns_ECONFLICT	tests/checkout/tree.c	/^void test_checkout_tree__checking_out_a_conflicting_content_change_returns_ECONFLICT(void)$/;"	f	signature:(void)
test_checkout_tree__checking_out_a_conflicting_type_change_returns_ECONFLICT	tests/checkout/tree.c	/^void test_checkout_tree__checking_out_a_conflicting_type_change_returns_ECONFLICT(void)$/;"	f	signature:(void)
test_checkout_tree__checking_out_a_conflicting_type_change_returns_ECONFLICT_2	tests/checkout/tree.c	/^void test_checkout_tree__checking_out_a_conflicting_type_change_returns_ECONFLICT_2(void)$/;"	f	signature:(void)
test_checkout_tree__cleanup	tests/checkout/tree.c	/^void test_checkout_tree__cleanup(void)$/;"	f	signature:(void)
test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting	tests/checkout/tree.c	/^void test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting(void)$/;"	f	signature:(void)
test_checkout_tree__conflict_on_ignored_when_not_overwriting	tests/checkout/tree.c	/^void test_checkout_tree__conflict_on_ignored_when_not_overwriting(void)$/;"	f	signature:(void)
test_checkout_tree__doesnt_write_unrequested_files_to_worktree	tests/checkout/tree.c	/^void test_checkout_tree__doesnt_write_unrequested_files_to_worktree(void)$/;"	f	signature:(void)
test_checkout_tree__donot_update_deleted_file_by_default	tests/checkout/tree.c	/^void test_checkout_tree__donot_update_deleted_file_by_default(void)$/;"	f	signature:(void)
test_checkout_tree__extremely_long_file_name	tests/checkout/tree.c	/^void test_checkout_tree__extremely_long_file_name(void)$/;"	f	signature:(void)
test_checkout_tree__fails_when_conflicts_exist_in_index	tests/checkout/tree.c	/^void test_checkout_tree__fails_when_conflicts_exist_in_index(void)$/;"	f	signature:(void)
test_checkout_tree__fails_when_dir_in_use	tests/checkout/tree.c	/^void test_checkout_tree__fails_when_dir_in_use(void)$/;"	f	signature:(void)
test_checkout_tree__filemode_preserved_in_index	tests/checkout/tree.c	/^void test_checkout_tree__filemode_preserved_in_index(void)$/;"	f	signature:(void)
test_checkout_tree__filemode_preserved_in_workdir	tests/checkout/tree.c	/^void test_checkout_tree__filemode_preserved_in_workdir(void)$/;"	f	signature:(void)
test_checkout_tree__initialize	tests/checkout/tree.c	/^void test_checkout_tree__initialize(void)$/;"	f	signature:(void)
test_checkout_tree__issue_1397	tests/checkout/tree.c	/^void test_checkout_tree__issue_1397(void)$/;"	f	signature:(void)
test_checkout_tree__nullopts	tests/checkout/tree.c	/^void test_checkout_tree__nullopts(void)$/;"	f	signature:(void)
test_checkout_tree__removes_conflicts	tests/checkout/tree.c	/^void test_checkout_tree__removes_conflicts(void)$/;"	f	signature:(void)
test_checkout_tree__removes_conflicts_only_by_pathscope	tests/checkout/tree.c	/^void test_checkout_tree__removes_conflicts_only_by_pathscope(void)$/;"	f	signature:(void)
test_checkout_tree__safe_proceeds_if_no_index	tests/checkout/tree.c	/^void test_checkout_tree__safe_proceeds_if_no_index(void)$/;"	f	signature:(void)
test_checkout_tree__target_directory_from_bare	tests/checkout/tree.c	/^void test_checkout_tree__target_directory_from_bare(void)$/;"	f	signature:(void)
test_checkout_typechange__checkout_typechanges_safe	tests/checkout/typechange.c	/^void test_checkout_typechange__checkout_typechanges_safe(void)$/;"	f	signature:(void)
test_checkout_typechange__checkout_with_conflicts	tests/checkout/typechange.c	/^void test_checkout_typechange__checkout_with_conflicts(void)$/;"	f	signature:(void)
test_checkout_typechange__cleanup	tests/checkout/typechange.c	/^void test_checkout_typechange__cleanup(void)$/;"	f	signature:(void)
test_checkout_typechange__initialize	tests/checkout/typechange.c	/^void test_checkout_typechange__initialize(void)$/;"	f	signature:(void)
test_cherrypick_bare__automerge	tests/cherrypick/bare.c	/^void test_cherrypick_bare__automerge(void)$/;"	f	signature:(void)
test_cherrypick_bare__cleanup	tests/cherrypick/bare.c	/^void test_cherrypick_bare__cleanup(void)$/;"	f	signature:(void)
test_cherrypick_bare__conflicts	tests/cherrypick/bare.c	/^void test_cherrypick_bare__conflicts(void)$/;"	f	signature:(void)
test_cherrypick_bare__initialize	tests/cherrypick/bare.c	/^void test_cherrypick_bare__initialize(void)$/;"	f	signature:(void)
test_cherrypick_bare__orphan	tests/cherrypick/bare.c	/^void test_cherrypick_bare__orphan(void)$/;"	f	signature:(void)
test_cherrypick_workdir__automerge	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__automerge(void)$/;"	f	signature:(void)
test_cherrypick_workdir__both_renamed	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__both_renamed(void)$/;"	f	signature:(void)
test_cherrypick_workdir__cleanup	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__cleanup(void)$/;"	f	signature:(void)
test_cherrypick_workdir__conflict_use_ours	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__conflict_use_ours(void)$/;"	f	signature:(void)
test_cherrypick_workdir__conflicts	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__conflicts(void)$/;"	f	signature:(void)
test_cherrypick_workdir__empty_result	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__empty_result(void)$/;"	f	signature:(void)
test_cherrypick_workdir__initialize	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__initialize(void)$/;"	f	signature:(void)
test_cherrypick_workdir__merge_fails_without_mainline_specified	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__merge_fails_without_mainline_specified(void)$/;"	f	signature:(void)
test_cherrypick_workdir__merge_first_parent	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__merge_first_parent(void)$/;"	f	signature:(void)
test_cherrypick_workdir__merge_second_parent	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__merge_second_parent(void)$/;"	f	signature:(void)
test_cherrypick_workdir__nonmerge_fails_mainline_specified	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__nonmerge_fails_mainline_specified(void)$/;"	f	signature:(void)
test_cherrypick_workdir__rename	tests/cherrypick/workdir.c	/^void test_cherrypick_workdir__rename(void)$/;"	f	signature:(void)
test_clone_empty__can_clone_an_empty_local_repo	tests/clone/empty.c	/^void test_clone_empty__can_clone_an_empty_local_repo(void)$/;"	f	signature:(void)
test_clone_empty__can_clone_an_empty_local_repo_barely	tests/clone/empty.c	/^void test_clone_empty__can_clone_an_empty_local_repo_barely(void)$/;"	f	signature:(void)
test_clone_empty__can_clone_an_empty_standard_repo	tests/clone/empty.c	/^void test_clone_empty__can_clone_an_empty_standard_repo(void)$/;"	f	signature:(void)
test_clone_empty__cleanup	tests/clone/empty.c	/^void test_clone_empty__cleanup(void)$/;"	f	signature:(void)
test_clone_empty__initialize	tests/clone/empty.c	/^void test_clone_empty__initialize(void)$/;"	f	signature:(void)
test_clone_local__git_style_unc_paths	tests/clone/local.c	/^void test_clone_local__git_style_unc_paths(void)$/;"	f	signature:(void)
test_clone_local__hardlinks	tests/clone/local.c	/^void test_clone_local__hardlinks(void)$/;"	f	signature:(void)
test_clone_local__should_clone_local	tests/clone/local.c	/^void test_clone_local__should_clone_local(void)$/;"	f	signature:(void)
test_clone_local__standard_unc_paths_are_written_git_style	tests/clone/local.c	/^void test_clone_local__standard_unc_paths_are_written_git_style(void)$/;"	f	signature:(void)
test_clone_nonetwork__bad_urls	tests/clone/nonetwork.c	/^void test_clone_nonetwork__bad_urls(void)$/;"	f	signature:(void)
test_clone_nonetwork__can_cancel_clone_in_checkout	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_cancel_clone_in_checkout(void)$/;"	f	signature:(void)
test_clone_nonetwork__can_cancel_clone_in_fetch	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_cancel_clone_in_fetch(void)$/;"	f	signature:(void)
test_clone_nonetwork__can_checkout_given_branch	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_checkout_given_branch(void)$/;"	f	signature:(void)
test_clone_nonetwork__can_detached_head	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_detached_head(void)$/;"	f	signature:(void)
test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo(void)$/;"	f	signature:(void)
test_clone_nonetwork__cleanup	tests/clone/nonetwork.c	/^void test_clone_nonetwork__cleanup(void)$/;"	f	signature:(void)
test_clone_nonetwork__clone_from_empty_sets_upstream	tests/clone/nonetwork.c	/^void test_clone_nonetwork__clone_from_empty_sets_upstream(void)$/;"	f	signature:(void)
test_clone_nonetwork__clone_submodule	tests/clone/nonetwork.c	/^void test_clone_nonetwork__clone_submodule(void)$/;"	f	signature:(void)
test_clone_nonetwork__clone_tag_to_tree	tests/clone/nonetwork.c	/^void test_clone_nonetwork__clone_tag_to_tree(void)$/;"	f	signature:(void)
test_clone_nonetwork__clone_updates_reflog_properly	tests/clone/nonetwork.c	/^void test_clone_nonetwork__clone_updates_reflog_properly(void)$/;"	f	signature:(void)
test_clone_nonetwork__cope_with_already_existing_directory	tests/clone/nonetwork.c	/^void test_clone_nonetwork__cope_with_already_existing_directory(void)$/;"	f	signature:(void)
test_clone_nonetwork__custom_origin_name	tests/clone/nonetwork.c	/^void test_clone_nonetwork__custom_origin_name(void)$/;"	f	signature:(void)
test_clone_nonetwork__defaults	tests/clone/nonetwork.c	/^void test_clone_nonetwork__defaults(void)$/;"	f	signature:(void)
test_clone_nonetwork__do_not_clean_existing_directory	tests/clone/nonetwork.c	/^void test_clone_nonetwork__do_not_clean_existing_directory(void)$/;"	f	signature:(void)
test_clone_nonetwork__fail_when_the_target_is_a_file	tests/clone/nonetwork.c	/^void test_clone_nonetwork__fail_when_the_target_is_a_file(void)$/;"	f	signature:(void)
test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory	tests/clone/nonetwork.c	/^void test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory(void)$/;"	f	signature:(void)
test_clone_nonetwork__initialize	tests/clone/nonetwork.c	/^void test_clone_nonetwork__initialize(void)$/;"	f	signature:(void)
test_clone_nonetwork__local	tests/clone/nonetwork.c	/^void test_clone_nonetwork__local(void)$/;"	f	signature:(void)
test_clone_nonetwork__local_absolute_path	tests/clone/nonetwork.c	/^void test_clone_nonetwork__local_absolute_path(void)$/;"	f	signature:(void)
test_clone_nonetwork__local_bare	tests/clone/nonetwork.c	/^void test_clone_nonetwork__local_bare(void)$/;"	f	signature:(void)
test_clone_transport__custom_transport	tests/clone/transport.c	/^void test_clone_transport__custom_transport(void)$/;"	f	signature:(void)
test_cmp	tests/core/vector.c	/^static int test_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
test_commit_commit__body	tests/commit/commit.c	/^void test_commit_commit__body(void)$/;"	f	signature:(void)
test_commit_commit__cleanup	tests/commit/commit.c	/^void test_commit_commit__cleanup(void)$/;"	f	signature:(void)
test_commit_commit__create_initial_commit	tests/commit/commit.c	/^void test_commit_commit__create_initial_commit(void)$/;"	f	signature:(void)
test_commit_commit__create_initial_commit_parent_not_current	tests/commit/commit.c	/^void test_commit_commit__create_initial_commit_parent_not_current(void)$/;"	f	signature:(void)
test_commit_commit__create_unexisting_update_ref	tests/commit/commit.c	/^void test_commit_commit__create_unexisting_update_ref(void)$/;"	f	signature:(void)
test_commit_commit__initialize	tests/commit/commit.c	/^void test_commit_commit__initialize(void)$/;"	f	signature:(void)
test_commit_commit__summary	tests/commit/commit.c	/^void test_commit_commit__summary(void)$/;"	f	signature:(void)
test_commit_parent__can_retrieve_nth_generation_parent	tests/commit/parent.c	/^void test_commit_parent__can_retrieve_nth_generation_parent(void)$/;"	f	signature:(void)
test_commit_parent__cleanup	tests/commit/parent.c	/^void test_commit_parent__cleanup(void)$/;"	f	signature:(void)
test_commit_parent__initialize	tests/commit/parent.c	/^void test_commit_parent__initialize(void)$/;"	f	signature:(void)
test_commit_parse__arbitrary_field	tests/commit/parse.c	/^void test_commit_parse__arbitrary_field(void)$/;"	f	signature:(void)
test_commit_parse__cleanup	tests/commit/parse.c	/^void test_commit_parse__cleanup(void)$/;"	f	signature:(void)
test_commit_parse__details0	tests/commit/parse.c	/^void test_commit_parse__details0(void) {$/;"	f	signature:(void)
test_commit_parse__entire_commit	tests/commit/parse.c	/^void test_commit_parse__entire_commit(void)$/;"	f	signature:(void)
test_commit_parse__extract_signature	tests/commit/parse.c	/^void test_commit_parse__extract_signature(void)$/;"	f	signature:(void)
test_commit_parse__header	tests/commit/parse.c	/^void test_commit_parse__header(void)$/;"	f	signature:(void)
test_commit_parse__initialize	tests/commit/parse.c	/^void test_commit_parse__initialize(void)$/;"	f	signature:(void)
test_commit_parse__leading_lf	tests/commit/parse.c	/^void test_commit_parse__leading_lf(void)$/;"	f	signature:(void)
test_commit_parse__only_lf	tests/commit/parse.c	/^void test_commit_parse__only_lf(void)$/;"	f	signature:(void)
test_commit_parse__signature	tests/commit/parse.c	/^void test_commit_parse__signature(void)$/;"	f	signature:(void)
test_commit_signature__angle_brackets_in_email_are_not_supported	tests/commit/signature.c	/^void test_commit_signature__angle_brackets_in_email_are_not_supported(void)$/;"	f	signature:(void)
test_commit_signature__angle_brackets_in_names_are_not_supported	tests/commit/signature.c	/^void test_commit_signature__angle_brackets_in_names_are_not_supported(void)$/;"	f	signature:(void)
test_commit_signature__create_empties	tests/commit/signature.c	/^void test_commit_signature__create_empties(void)$/;"	f	signature:(void)
test_commit_signature__create_one_char	tests/commit/signature.c	/^void test_commit_signature__create_one_char(void)$/;"	f	signature:(void)
test_commit_signature__create_two_char	tests/commit/signature.c	/^void test_commit_signature__create_two_char(void)$/;"	f	signature:(void)
test_commit_signature__create_zero_char	tests/commit/signature.c	/^void test_commit_signature__create_zero_char(void)$/;"	f	signature:(void)
test_commit_signature__from_buf	tests/commit/signature.c	/^void test_commit_signature__from_buf(void)$/;"	f	signature:(void)
test_commit_signature__leading_and_trailing_crud_is_trimmed	tests/commit/signature.c	/^void test_commit_signature__leading_and_trailing_crud_is_trimmed(void)$/;"	f	signature:(void)
test_commit_signature__leading_and_trailing_spaces_are_trimmed	tests/commit/signature.c	/^void test_commit_signature__leading_and_trailing_spaces_are_trimmed(void)$/;"	f	signature:(void)
test_commit_write__attach_multiline_signature	tests/commit/write.c	/^void test_commit_write__attach_multiline_signature(void)$/;"	f	signature:(void)
test_commit_write__attach_singleline_signature	tests/commit/write.c	/^void test_commit_write__attach_singleline_signature(void)$/;"	f	signature:(void)
test_commit_write__can_validate_objects	tests/commit/write.c	/^void test_commit_write__can_validate_objects(void)$/;"	f	signature:(void)
test_commit_write__can_write_invalid_objects	tests/commit/write.c	/^void test_commit_write__can_write_invalid_objects(void)$/;"	f	signature:(void)
test_commit_write__cleanup	tests/commit/write.c	/^void test_commit_write__cleanup(void)$/;"	f	signature:(void)
test_commit_write__from_memory	tests/commit/write.c	/^void test_commit_write__from_memory(void)$/;"	f	signature:(void)
test_commit_write__initialize	tests/commit/write.c	/^void test_commit_write__initialize(void)$/;"	f	signature:(void)
test_commit_write__into_buf	tests/commit/write.c	/^void test_commit_write__into_buf(void)$/;"	f	signature:(void)
test_commit_write__root	tests/commit/write.c	/^void test_commit_write__root(void)$/;"	f	signature:(void)
test_config_add__cleanup	tests/config/add.c	/^void test_config_add__cleanup(void)$/;"	f	signature:(void)
test_config_add__initialize	tests/config/add.c	/^void test_config_add__initialize(void)$/;"	f	signature:(void)
test_config_add__to_existing_section	tests/config/add.c	/^void test_config_add__to_existing_section(void)$/;"	f	signature:(void)
test_config_add__to_new_section	tests/config/add.c	/^void test_config_add__to_new_section(void)$/;"	f	signature:(void)
test_config_backend__checks_version	tests/config/backend.c	/^void test_config_backend__checks_version(void)$/;"	f	signature:(void)
test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS	tests/config/configlevel.c	/^void test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS(void)$/;"	f	signature:(void)
test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed	tests/config/configlevel.c	/^void test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed(void)$/;"	f	signature:(void)
test_config_configlevel__can_replace_a_config_file_at_an_existing_level	tests/config/configlevel.c	/^void test_config_configlevel__can_replace_a_config_file_at_an_existing_level(void)$/;"	f	signature:(void)
test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND	tests/config/configlevel.c	/^void test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_config_global__cleanup	tests/config/global.c	/^void test_config_global__cleanup(void)$/;"	f	signature:(void)
test_config_global__initialize	tests/config/global.c	/^void test_config_global__initialize(void)$/;"	f	signature:(void)
test_config_global__open_global	tests/config/global.c	/^void test_config_global__open_global(void)$/;"	f	signature:(void)
test_config_global__open_programdata	tests/config/global.c	/^void test_config_global__open_programdata(void)$/;"	f	signature:(void)
test_config_global__open_xdg	tests/config/global.c	/^void test_config_global__open_xdg(void)$/;"	f	signature:(void)
test_config_include__absolute	tests/config/include.c	/^void test_config_include__absolute(void)$/;"	f	signature:(void)
test_config_include__depth	tests/config/include.c	/^void test_config_include__depth(void)$/;"	f	signature:(void)
test_config_include__depth2	tests/config/include.c	/^void test_config_include__depth2(void)$/;"	f	signature:(void)
test_config_include__homedir	tests/config/include.c	/^void test_config_include__homedir(void)$/;"	f	signature:(void)
test_config_include__missing	tests/config/include.c	/^void test_config_include__missing(void)$/;"	f	signature:(void)
test_config_include__ordering	tests/config/include.c	/^void test_config_include__ordering(void)$/;"	f	signature:(void)
test_config_include__relative	tests/config/include.c	/^void test_config_include__relative(void)$/;"	f	signature:(void)
test_config_multivar__add	tests/config/multivar.c	/^void test_config_multivar__add(void)$/;"	f	signature:(void)
test_config_multivar__add_new	tests/config/multivar.c	/^void test_config_multivar__add_new(void)$/;"	f	signature:(void)
test_config_multivar__cleanup	tests/config/multivar.c	/^void test_config_multivar__cleanup(void)$/;"	f	signature:(void)
test_config_multivar__delete	tests/config/multivar.c	/^void test_config_multivar__delete(void)$/;"	f	signature:(void)
test_config_multivar__delete_multiple	tests/config/multivar.c	/^void test_config_multivar__delete_multiple(void)$/;"	f	signature:(void)
test_config_multivar__delete_notfound	tests/config/multivar.c	/^void test_config_multivar__delete_notfound(void)$/;"	f	signature:(void)
test_config_multivar__foreach	tests/config/multivar.c	/^void test_config_multivar__foreach(void)$/;"	f	signature:(void)
test_config_multivar__get	tests/config/multivar.c	/^void test_config_multivar__get(void)$/;"	f	signature:(void)
test_config_multivar__initialize	tests/config/multivar.c	/^void test_config_multivar__initialize(void)$/;"	f	signature:(void)
test_config_multivar__replace	tests/config/multivar.c	/^void test_config_multivar__replace(void)$/;"	f	signature:(void)
test_config_multivar__replace_multiple	tests/config/multivar.c	/^void test_config_multivar__replace_multiple(void)$/;"	f	signature:(void)
test_config_new__write_new_config	tests/config/new.c	/^void test_config_new__write_new_config(void)$/;"	f	signature:(void)
test_config_read__blank_lines	tests/config/read.c	/^void test_config_read__blank_lines(void)$/;"	f	signature:(void)
test_config_read__can_load_and_parse_an_empty_config_file	tests/config/read.c	/^void test_config_read__can_load_and_parse_an_empty_config_file(void)$/;"	f	signature:(void)
test_config_read__case_sensitive	tests/config/read.c	/^void test_config_read__case_sensitive(void)$/;"	f	signature:(void)
test_config_read__cleanup	tests/config/read.c	/^void test_config_read__cleanup(void)$/;"	f	signature:(void)
test_config_read__corrupt_header	tests/config/read.c	/^void test_config_read__corrupt_header(void)$/;"	f	signature:(void)
test_config_read__corrupt_header2	tests/config/read.c	/^void test_config_read__corrupt_header2(void)$/;"	f	signature:(void)
test_config_read__corrupt_header3	tests/config/read.c	/^void test_config_read__corrupt_header3(void)$/;"	f	signature:(void)
test_config_read__empty_files	tests/config/read.c	/^void test_config_read__empty_files(void)$/;"	f	signature:(void)
test_config_read__escaping_quotes	tests/config/read.c	/^void test_config_read__escaping_quotes(void)$/;"	f	signature:(void)
test_config_read__fallback_from_local_to_global_and_from_global_to_system	tests/config/read.c	/^void test_config_read__fallback_from_local_to_global_and_from_global_to_system(void)$/;"	f	signature:(void)
test_config_read__foreach	tests/config/read.c	/^void test_config_read__foreach(void)$/;"	f	signature:(void)
test_config_read__foreach_match	tests/config/read.c	/^void test_config_read__foreach_match(void)$/;"	f	signature:(void)
test_config_read__header_in_last_line	tests/config/read.c	/^void test_config_read__header_in_last_line(void)$/;"	f	signature:(void)
test_config_read__invalid_escape_sequence	tests/config/read.c	/^void test_config_read__invalid_escape_sequence(void)$/;"	f	signature:(void)
test_config_read__invalid_ext_headers	tests/config/read.c	/^void test_config_read__invalid_ext_headers(void)$/;"	f	signature:(void)
test_config_read__invalid_key_chars	tests/config/read.c	/^void test_config_read__invalid_key_chars(void)$/;"	f	signature:(void)
test_config_read__iterator	tests/config/read.c	/^void test_config_read__iterator(void)$/;"	f	signature:(void)
test_config_read__iterator_glob	tests/config/read.c	/^void test_config_read__iterator_glob(void)$/;"	f	signature:(void)
test_config_read__iterator_invalid_glob	tests/config/read.c	/^void test_config_read__iterator_invalid_glob(void)$/;"	f	signature:(void)
test_config_read__local_config_overrides_global_config_overrides_system_config	tests/config/read.c	/^void test_config_read__local_config_overrides_global_config_overrides_system_config(void)$/;"	f	signature:(void)
test_config_read__lone_variable	tests/config/read.c	/^void test_config_read__lone_variable(void)$/;"	f	signature:(void)
test_config_read__lone_variable_with_trailing_whitespace	tests/config/read.c	/^void test_config_read__lone_variable_with_trailing_whitespace(void)$/;"	f	signature:(void)
test_config_read__multiline_eof	tests/config/read.c	/^void test_config_read__multiline_eof(void)$/;"	f	signature:(void)
test_config_read__multiline_value	tests/config/read.c	/^void test_config_read__multiline_value(void)$/;"	f	signature:(void)
test_config_read__multiline_value_and_eof	tests/config/read.c	/^void test_config_read__multiline_value_and_eof(void)$/;"	f	signature:(void)
test_config_read__number_suffixes	tests/config/read.c	/^void test_config_read__number_suffixes(void)$/;"	f	signature:(void)
test_config_read__override_variable	tests/config/read.c	/^void test_config_read__override_variable(void)$/;"	f	signature:(void)
test_config_read__path	tests/config/read.c	/^void test_config_read__path(void)$/;"	f	signature:(void)
test_config_read__prefixes	tests/config/read.c	/^void test_config_read__prefixes(void)$/;"	f	signature:(void)
test_config_read__read_git_config_entry	tests/config/read.c	/^void test_config_read__read_git_config_entry(void)$/;"	f	signature:(void)
test_config_read__simple_read	tests/config/read.c	/^void test_config_read__simple_read(void)$/;"	f	signature:(void)
test_config_read__simple_read_from_specific_level	tests/config/read.c	/^void test_config_read__simple_read_from_specific_level(void)$/;"	f	signature:(void)
test_config_read__subsection_header	tests/config/read.c	/^void test_config_read__subsection_header(void)$/;"	f	signature:(void)
test_config_read__symbol_headers	tests/config/read.c	/^void test_config_read__symbol_headers(void)$/;"	f	signature:(void)
test_config_read__whitespace_not_required_around_assignment	tests/config/read.c	/^void test_config_read__whitespace_not_required_around_assignment(void)$/;"	f	signature:(void)
test_config_rename__can_rename	tests/config/rename.c	/^void test_config_rename__can_rename(void)$/;"	f	signature:(void)
test_config_rename__cleanup	tests/config/rename.c	/^void test_config_rename__cleanup(void)$/;"	f	signature:(void)
test_config_rename__initialize	tests/config/rename.c	/^void test_config_rename__initialize(void)$/;"	f	signature:(void)
test_config_rename__prevent_overwrite	tests/config/rename.c	/^void test_config_rename__prevent_overwrite(void)$/;"	f	signature:(void)
test_config_rename__require_a_valid_new_name	tests/config/rename.c	/^void test_config_rename__require_a_valid_new_name(void)$/;"	f	signature:(void)
test_config_snapshot__create_snapshot	tests/config/snapshot.c	/^void test_config_snapshot__create_snapshot(void)$/;"	f	signature:(void)
test_config_snapshot__multivar	tests/config/snapshot.c	/^void test_config_snapshot__multivar(void)$/;"	f	signature:(void)
test_config_stress__cleanup	tests/config/stress.c	/^void test_config_stress__cleanup(void)$/;"	f	signature:(void)
test_config_stress__comments	tests/config/stress.c	/^void test_config_stress__comments(void)$/;"	f	signature:(void)
test_config_stress__complex	tests/config/stress.c	/^void test_config_stress__complex(void)$/;"	f	signature:(void)
test_config_stress__dont_break_on_invalid_input	tests/config/stress.c	/^void test_config_stress__dont_break_on_invalid_input(void)$/;"	f	signature:(void)
test_config_stress__escape_subsection_names	tests/config/stress.c	/^void test_config_stress__escape_subsection_names(void)$/;"	f	signature:(void)
test_config_stress__initialize	tests/config/stress.c	/^void test_config_stress__initialize(void)$/;"	f	signature:(void)
test_config_stress__quick_write	tests/config/stress.c	/^void test_config_stress__quick_write(void)$/;"	f	signature:(void)
test_config_stress__trailing_backslash	tests/config/stress.c	/^void test_config_stress__trailing_backslash(void)$/;"	f	signature:(void)
test_config_validkeyname__accessing_requires_a_valid_name	tests/config/validkeyname.c	/^void test_config_validkeyname__accessing_requires_a_valid_name(void)$/;"	f	signature:(void)
test_config_validkeyname__cleanup	tests/config/validkeyname.c	/^void test_config_validkeyname__cleanup(void)$/;"	f	signature:(void)
test_config_validkeyname__initialize	tests/config/validkeyname.c	/^void test_config_validkeyname__initialize(void)$/;"	f	signature:(void)
test_config_write__add_section_at_file_with_no_clrf_at_the_end	tests/config/write.c	/^void test_config_write__add_section_at_file_with_no_clrf_at_the_end(void)$/;"	f	signature:(void)
test_config_write__add_value_at_file_with_no_clrf_at_the_end	tests/config/write.c	/^void test_config_write__add_value_at_file_with_no_clrf_at_the_end(void)$/;"	f	signature:(void)
test_config_write__add_value_at_specific_level	tests/config/write.c	/^void test_config_write__add_value_at_specific_level(void)$/;"	f	signature:(void)
test_config_write__add_value_which_needs_quotes	tests/config/write.c	/^void test_config_write__add_value_which_needs_quotes(void)$/;"	f	signature:(void)
test_config_write__add_value_with_duplicate_header	tests/config/write.c	/^void test_config_write__add_value_with_duplicate_header(void)$/;"	f	signature:(void)
test_config_write__can_set_a_value_to_NULL	tests/config/write.c	/^void test_config_write__can_set_a_value_to_NULL(void)$/;"	f	signature:(void)
test_config_write__can_set_an_empty_value	tests/config/write.c	/^void test_config_write__can_set_an_empty_value(void)$/;"	f	signature:(void)
test_config_write__cleanup	tests/config/write.c	/^void test_config_write__cleanup(void)$/;"	f	signature:(void)
test_config_write__delete_inexistent	tests/config/write.c	/^void test_config_write__delete_inexistent(void)$/;"	f	signature:(void)
test_config_write__delete_value	tests/config/write.c	/^void test_config_write__delete_value(void)$/;"	f	signature:(void)
test_config_write__delete_value_at_specific_level	tests/config/write.c	/^void test_config_write__delete_value_at_specific_level(void)$/;"	f	signature:(void)
test_config_write__delete_value_with_duplicate_header	tests/config/write.c	/^void test_config_write__delete_value_with_duplicate_header(void)$/;"	f	signature:(void)
test_config_write__escape_value	tests/config/write.c	/^void test_config_write__escape_value(void)$/;"	f	signature:(void)
test_config_write__initialize	tests/config/write.c	/^void test_config_write__initialize(void)$/;"	f	signature:(void)
test_config_write__locking	tests/config/write.c	/^void test_config_write__locking(void)$/;"	f	signature:(void)
test_config_write__outside_change	tests/config/write.c	/^void test_config_write__outside_change(void)$/;"	f	signature:(void)
test_config_write__overwrite_multivar_within_duplicate_header	tests/config/write.c	/^void test_config_write__overwrite_multivar_within_duplicate_header(void)$/;"	f	signature:(void)
test_config_write__overwrite_value_with_duplicate_header	tests/config/write.c	/^void test_config_write__overwrite_value_with_duplicate_header(void)$/;"	f	signature:(void)
test_config_write__preserves_entry_with_name_only	tests/config/write.c	/^void test_config_write__preserves_entry_with_name_only(void)$/;"	f	signature:(void)
test_config_write__preserves_whitespace_and_comments	tests/config/write.c	/^void test_config_write__preserves_whitespace_and_comments(void)$/;"	f	signature:(void)
test_config_write__repeated	tests/config/write.c	/^void test_config_write__repeated(void)$/;"	f	signature:(void)
test_config_write__replace_value	tests/config/write.c	/^void test_config_write__replace_value(void)$/;"	f	signature:(void)
test_config_write__to_empty_file	tests/config/write.c	/^void test_config_write__to_empty_file(void)$/;"	f	signature:(void)
test_config_write__to_file_with_only_comment	tests/config/write.c	/^void test_config_write__to_file_with_only_comment(void)$/;"	f	signature:(void)
test_config_write__updating_a_locked_config_file_returns_ELOCKED	tests/config/write.c	/^void test_config_write__updating_a_locked_config_file_returns_ELOCKED(void)$/;"	f	signature:(void)
test_config_write__value_containing_quotes	tests/config/write.c	/^void test_config_write__value_containing_quotes(void)$/;"	f	signature:(void)
test_config_write__write_subsection	tests/config/write.c	/^void test_config_write__write_subsection(void)$/;"	f	signature:(void)
test_copy_note	tests/rebase/merge.c	/^static void test_copy_note($/;"	f	file:	signature:( const git_rebase_options *opts, bool should_exist)
test_core_array__bsearch2	tests/core/array.c	/^void test_core_array__bsearch2(void)$/;"	f	signature:(void)
test_core_bitvec__0	tests/core/bitvec.c	/^void test_core_bitvec__0(void)$/;"	f	signature:(void)
test_core_buffer__0	tests/core/buffer.c	/^void test_core_buffer__0(void)$/;"	f	signature:(void)
test_core_buffer__1	tests/core/buffer.c	/^void test_core_buffer__1(void)$/;"	f	signature:(void)
test_core_buffer__10	tests/core/buffer.c	/^void test_core_buffer__10(void)$/;"	f	signature:(void)
test_core_buffer__11	tests/core/buffer.c	/^void test_core_buffer__11(void)$/;"	f	signature:(void)
test_core_buffer__2	tests/core/buffer.c	/^void test_core_buffer__2(void)$/;"	f	signature:(void)
test_core_buffer__3	tests/core/buffer.c	/^void test_core_buffer__3(void)$/;"	f	signature:(void)
test_core_buffer__4	tests/core/buffer.c	/^void test_core_buffer__4(void)$/;"	f	signature:(void)
test_core_buffer__5	tests/core/buffer.c	/^void test_core_buffer__5(void)$/;"	f	signature:(void)
test_core_buffer__6	tests/core/buffer.c	/^void test_core_buffer__6(void)$/;"	f	signature:(void)
test_core_buffer__7	tests/core/buffer.c	/^void test_core_buffer__7(void)$/;"	f	signature:(void)
test_core_buffer__8	tests/core/buffer.c	/^void test_core_buffer__8(void)$/;"	f	signature:(void)
test_core_buffer__9	tests/core/buffer.c	/^void test_core_buffer__9(void)$/;"	f	signature:(void)
test_core_buffer__classify_with_utf8	tests/core/buffer.c	/^void test_core_buffer__classify_with_utf8(void)$/;"	f	signature:(void)
test_core_buffer__decode_base64	tests/core/buffer.c	/^void test_core_buffer__decode_base64(void)$/;"	f	signature:(void)
test_core_buffer__decode_base85	tests/core/buffer.c	/^void test_core_buffer__decode_base85(void)$/;"	f	signature:(void)
test_core_buffer__decode_base85_fails_gracefully	tests/core/buffer.c	/^void test_core_buffer__decode_base85_fails_gracefully(void)$/;"	f	signature:(void)
test_core_buffer__dont_grow_borrowed	tests/core/buffer.c	/^void test_core_buffer__dont_grow_borrowed(void)$/;"	f	signature:(void)
test_core_buffer__encode_base64	tests/core/buffer.c	/^void test_core_buffer__encode_base64(void)$/;"	f	signature:(void)
test_core_buffer__encode_base85	tests/core/buffer.c	/^void test_core_buffer__encode_base85(void)$/;"	f	signature:(void)
test_core_buffer__join3	tests/core/buffer.c	/^void test_core_buffer__join3(void)$/;"	f	signature:(void)
test_core_buffer__lf_and_crlf_conversions	tests/core/buffer.c	/^void test_core_buffer__lf_and_crlf_conversions(void)$/;"	f	signature:(void)
test_core_buffer__puts_escaped	tests/core/buffer.c	/^void test_core_buffer__puts_escaped(void)$/;"	f	signature:(void)
test_core_buffer__rfind_variants	tests/core/buffer.c	/^void test_core_buffer__rfind_variants(void)$/;"	f	signature:(void)
test_core_buffer__similarity_metric	tests/core/buffer.c	/^void test_core_buffer__similarity_metric(void)$/;"	f	signature:(void)
test_core_buffer__similarity_metric_whitespace	tests/core/buffer.c	/^void test_core_buffer__similarity_metric_whitespace(void)$/;"	f	signature:(void)
test_core_buffer__unescape	tests/core/buffer.c	/^void test_core_buffer__unescape(void)$/;"	f	signature:(void)
test_core_copy__file	tests/core/copy.c	/^void test_core_copy__file(void)$/;"	f	signature:(void)
test_core_copy__file_in_dir	tests/core/copy.c	/^void test_core_copy__file_in_dir(void)$/;"	f	signature:(void)
test_core_copy__tree	tests/core/copy.c	/^void test_core_copy__tree(void)$/;"	f	signature:(void)
test_core_dirent__diriter_at_directory_root	tests/core/dirent.c	/^void test_core_dirent__diriter_at_directory_root(void)$/;"	f	signature:(void)
test_core_dirent__diriter_with_fullname	tests/core/dirent.c	/^void test_core_dirent__diriter_with_fullname(void)$/;"	f	signature:(void)
test_core_dirent__dont_traverse_dot	tests/core/dirent.c	/^void test_core_dirent__dont_traverse_dot(void)$/;"	f	signature:(void)
test_core_dirent__dont_traverse_empty_folders	tests/core/dirent.c	/^void test_core_dirent__dont_traverse_empty_folders(void)$/;"	f	signature:(void)
test_core_dirent__empty_dir	tests/core/dirent.c	/^void test_core_dirent__empty_dir(void)$/;"	f	signature:(void)
test_core_dirent__length_limits	tests/core/dirent.c	/^void test_core_dirent__length_limits(void)$/;"	f	signature:(void)
test_core_dirent__traverse_slash_terminated_folder	tests/core/dirent.c	/^void test_core_dirent__traverse_slash_terminated_folder(void)$/;"	f	signature:(void)
test_core_dirent__traverse_subfolder	tests/core/dirent.c	/^void test_core_dirent__traverse_subfolder(void)$/;"	f	signature:(void)
test_core_dirent__traverse_weird_filenames	tests/core/dirent.c	/^void test_core_dirent__traverse_weird_filenames(void)$/;"	f	signature:(void)
test_core_encoding__decode	tests/core/encoding.c	/^void test_core_encoding__decode(void)$/;"	f	signature:(void)
test_core_encoding__encode	tests/core/encoding.c	/^void test_core_encoding__encode(void)$/;"	f	signature:(void)
test_core_env__0	tests/core/env.c	/^void test_core_env__0(void)$/;"	f	signature:(void)
test_core_env__1	tests/core/env.c	/^void test_core_env__1(void)$/;"	f	signature:(void)
test_core_env__2	tests/core/env.c	/^void test_core_env__2(void)$/;"	f	signature:(void)
test_core_env__cleanup	tests/core/env.c	/^void test_core_env__cleanup(void)$/;"	f	signature:(void)
test_core_env__initialize	tests/core/env.c	/^void test_core_env__initialize(void)$/;"	f	signature:(void)
test_core_env__substitution	tests/core/env.c	/^void test_core_env__substitution(void)$/;"	f	signature:(void)
test_core_errors__free_state	tests/core/errors.c	/^void test_core_errors__free_state(void)$/;"	f	signature:(void)
test_core_errors__integer_overflow_alloc_add	tests/core/errors.c	/^void test_core_errors__integer_overflow_alloc_add(void)$/;"	f	signature:(void)
test_core_errors__integer_overflow_alloc_multiply	tests/core/errors.c	/^void test_core_errors__integer_overflow_alloc_multiply(void)$/;"	f	signature:(void)
test_core_errors__integer_overflow_sets_oom	tests/core/errors.c	/^void test_core_errors__integer_overflow_sets_oom(void)$/;"	f	signature:(void)
test_core_errors__new_school	tests/core/errors.c	/^void test_core_errors__new_school(void)$/;"	f	signature:(void)
test_core_errors__public_api	tests/core/errors.c	/^void test_core_errors__public_api(void)$/;"	f	signature:(void)
test_core_errors__restore	tests/core/errors.c	/^void test_core_errors__restore(void)$/;"	f	signature:(void)
test_core_errors__restore_oom	tests/core/errors.c	/^void test_core_errors__restore_oom(void)$/;"	f	signature:(void)
test_core_features__0	tests/core/features.c	/^void test_core_features__0(void)$/;"	f	signature:(void)
test_core_filebuf__0	tests/core/filebuf.c	/^void test_core_filebuf__0(void)$/;"	f	signature:(void)
test_core_filebuf__1	tests/core/filebuf.c	/^void test_core_filebuf__1(void)$/;"	f	signature:(void)
test_core_filebuf__2	tests/core/filebuf.c	/^void test_core_filebuf__2(void)$/;"	f	signature:(void)
test_core_filebuf__4	tests/core/filebuf.c	/^void test_core_filebuf__4(void)$/;"	f	signature:(void)
test_core_filebuf__5	tests/core/filebuf.c	/^void test_core_filebuf__5(void)$/;"	f	signature:(void)
test_core_filebuf__detects_directory	tests/core/filebuf.c	/^void test_core_filebuf__detects_directory(void)$/;"	f	signature:(void)
test_core_filebuf__hidden_file	tests/core/filebuf.c	/^void test_core_filebuf__hidden_file(void)$/;"	f	signature:(void)
test_core_filebuf__rename_error	tests/core/filebuf.c	/^void test_core_filebuf__rename_error(void)$/;"	f	signature:(void)
test_core_filebuf__symlink_depth	tests/core/filebuf.c	/^void test_core_filebuf__symlink_depth(void)$/;"	f	signature:(void)
test_core_filebuf__symlink_follow	tests/core/filebuf.c	/^void test_core_filebuf__symlink_follow(void)$/;"	f	signature:(void)
test_core_filebuf__umask	tests/core/filebuf.c	/^void test_core_filebuf__umask(void)$/;"	f	signature:(void)
test_core_ftruncate__2gb	tests/core/ftruncate.c	/^void test_core_ftruncate__2gb(void)$/;"	f	signature:(void)
test_core_ftruncate__4gb	tests/core/ftruncate.c	/^void test_core_ftruncate__4gb(void)$/;"	f	signature:(void)
test_core_ftruncate__cleanup	tests/core/ftruncate.c	/^void test_core_ftruncate__cleanup(void)$/;"	f	signature:(void)
test_core_ftruncate__initialize	tests/core/ftruncate.c	/^void test_core_ftruncate__initialize(void)$/;"	f	signature:(void)
test_core_futils__cleanup	tests/core/futils.c	/^void test_core_futils__cleanup(void)$/;"	f	signature:(void)
test_core_futils__initialize	tests/core/futils.c	/^void test_core_futils__initialize(void)$/;"	f	signature:(void)
test_core_futils__write_hidden_file	tests/core/futils.c	/^void test_core_futils__write_hidden_file(void)$/;"	f	signature:(void)
test_core_futils__writebuffer	tests/core/futils.c	/^void test_core_futils__writebuffer(void)$/;"	f	signature:(void)
test_core_hex__fromhex	tests/core/hex.c	/^void test_core_hex__fromhex(void)$/;"	f	signature:(void)
test_core_iconv__cleanup	tests/core/iconv.c	/^void test_core_iconv__cleanup(void)$/;"	f	signature:(void)
test_core_iconv__decomposed_to_precomposed	tests/core/iconv.c	/^void test_core_iconv__decomposed_to_precomposed(void)$/;"	f	signature:(void)
test_core_iconv__initialize	tests/core/iconv.c	/^void test_core_iconv__initialize(void)$/;"	f	signature:(void)
test_core_iconv__precomposed_is_unmodified	tests/core/iconv.c	/^void test_core_iconv__precomposed_is_unmodified(void)$/;"	f	signature:(void)
test_core_iconv__unchanged	tests/core/iconv.c	/^void test_core_iconv__unchanged(void)$/;"	f	signature:(void)
test_core_init__concurrent_init_succeeds	tests/core/init.c	/^void test_core_init__concurrent_init_succeeds(void)$/;"	f	signature:(void)
test_core_init__reinit_succeeds	tests/core/init.c	/^void test_core_init__reinit_succeeds(void)$/;"	f	signature:(void)
test_core_init__returns_count	tests/core/init.c	/^void test_core_init__returns_count(void)$/;"	f	signature:(void)
test_core_link__cleanup	tests/core/link.c	/^void test_core_link__cleanup(void)$/;"	f	signature:(void)
test_core_link__lstat_dangling_junction	tests/core/link.c	/^void test_core_link__lstat_dangling_junction(void)$/;"	f	signature:(void)
test_core_link__lstat_dangling_symlink	tests/core/link.c	/^void test_core_link__lstat_dangling_symlink(void)$/;"	f	signature:(void)
test_core_link__lstat_dangling_symlink_directory	tests/core/link.c	/^void test_core_link__lstat_dangling_symlink_directory(void)$/;"	f	signature:(void)
test_core_link__lstat_hardlink	tests/core/link.c	/^void test_core_link__lstat_hardlink(void)$/;"	f	signature:(void)
test_core_link__lstat_junction	tests/core/link.c	/^void test_core_link__lstat_junction(void)$/;"	f	signature:(void)
test_core_link__lstat_regular_file	tests/core/link.c	/^void test_core_link__lstat_regular_file(void)$/;"	f	signature:(void)
test_core_link__lstat_reparse_point	tests/core/link.c	/^void test_core_link__lstat_reparse_point(void)$/;"	f	signature:(void)
test_core_link__lstat_symlink	tests/core/link.c	/^void test_core_link__lstat_symlink(void)$/;"	f	signature:(void)
test_core_link__lstat_symlink_directory	tests/core/link.c	/^void test_core_link__lstat_symlink_directory(void)$/;"	f	signature:(void)
test_core_link__readlink_dangling	tests/core/link.c	/^void test_core_link__readlink_dangling(void)$/;"	f	signature:(void)
test_core_link__readlink_multiple	tests/core/link.c	/^void test_core_link__readlink_multiple(void)$/;"	f	signature:(void)
test_core_link__readlink_nonexistent_file	tests/core/link.c	/^void test_core_link__readlink_nonexistent_file(void)$/;"	f	signature:(void)
test_core_link__readlink_normal_file	tests/core/link.c	/^void test_core_link__readlink_normal_file(void)$/;"	f	signature:(void)
test_core_link__readlink_symlink	tests/core/link.c	/^void test_core_link__readlink_symlink(void)$/;"	f	signature:(void)
test_core_link__stat_dangling_junction	tests/core/link.c	/^void test_core_link__stat_dangling_junction(void)$/;"	f	signature:(void)
test_core_link__stat_dangling_symlink	tests/core/link.c	/^void test_core_link__stat_dangling_symlink(void)$/;"	f	signature:(void)
test_core_link__stat_dangling_symlink_directory	tests/core/link.c	/^void test_core_link__stat_dangling_symlink_directory(void)$/;"	f	signature:(void)
test_core_link__stat_hardlink	tests/core/link.c	/^void test_core_link__stat_hardlink(void)$/;"	f	signature:(void)
test_core_link__stat_junction	tests/core/link.c	/^void test_core_link__stat_junction(void)$/;"	f	signature:(void)
test_core_link__stat_regular_file	tests/core/link.c	/^void test_core_link__stat_regular_file(void)$/;"	f	signature:(void)
test_core_link__stat_reparse_point	tests/core/link.c	/^void test_core_link__stat_reparse_point(void)$/;"	f	signature:(void)
test_core_link__stat_symlink	tests/core/link.c	/^void test_core_link__stat_symlink(void)$/;"	f	signature:(void)
test_core_link__stat_symlink_chain	tests/core/link.c	/^void test_core_link__stat_symlink_chain(void)$/;"	f	signature:(void)
test_core_link__stat_symlink_directory	tests/core/link.c	/^void test_core_link__stat_symlink_directory(void)$/;"	f	signature:(void)
test_core_mkdir__absolute	tests/core/mkdir.c	/^void test_core_mkdir__absolute(void)$/;"	f	signature:(void)
test_core_mkdir__basic	tests/core/mkdir.c	/^void test_core_mkdir__basic(void)$/;"	f	signature:(void)
test_core_mkdir__chmods	tests/core/mkdir.c	/^void test_core_mkdir__chmods(void)$/;"	f	signature:(void)
test_core_mkdir__keeps_parent_symlinks	tests/core/mkdir.c	/^void test_core_mkdir__keeps_parent_symlinks(void)$/;"	f	signature:(void)
test_core_mkdir__mkdir_path_inside_unwriteable_parent	tests/core/mkdir.c	/^void test_core_mkdir__mkdir_path_inside_unwriteable_parent(void)$/;"	f	signature:(void)
test_core_mkdir__with_base	tests/core/mkdir.c	/^void test_core_mkdir__with_base(void)$/;"	f	signature:(void)
test_core_oid__initialize	tests/core/oid.c	/^void test_core_oid__initialize(void)$/;"	f	signature:(void)
test_core_oid__ncmp	tests/core/oid.c	/^void test_core_oid__ncmp(void)$/;"	f	signature:(void)
test_core_oid__strcmp	tests/core/oid.c	/^void test_core_oid__strcmp(void)$/;"	f	signature:(void)
test_core_oid__streq	tests/core/oid.c	/^void test_core_oid__streq(void)$/;"	f	signature:(void)
test_core_oidmap__basic	tests/core/oidmap.c	/^void test_core_oidmap__basic(void)$/;"	f	signature:(void)
test_core_oidmap__hash_collision	tests/core/oidmap.c	/^void test_core_oidmap__hash_collision(void)$/;"	f	signature:(void)
test_core_opts__invalid_option	tests/core/opts.c	/^void test_core_opts__invalid_option(void)$/;"	f	signature:(void)
test_core_opts__readwrite	tests/core/opts.c	/^void test_core_opts__readwrite(void)$/;"	f	signature:(void)
test_core_path__00_dirname	tests/core/path.c	/^void test_core_path__00_dirname(void)$/;"	f	signature:(void)
test_core_path__01_basename	tests/core/path.c	/^void test_core_path__01_basename(void)$/;"	f	signature:(void)
test_core_path__02_topdir	tests/core/path.c	/^void test_core_path__02_topdir(void)$/;"	f	signature:(void)
test_core_path__05_joins	tests/core/path.c	/^void test_core_path__05_joins(void)$/;"	f	signature:(void)
test_core_path__06_long_joins	tests/core/path.c	/^void test_core_path__06_long_joins(void)$/;"	f	signature:(void)
test_core_path__07_path_to_dir	tests/core/path.c	/^void test_core_path__07_path_to_dir(void)$/;"	f	signature:(void)
test_core_path__08_self_join	tests/core/path.c	/^void test_core_path__08_self_join(void)$/;"	f	signature:(void)
test_core_path__09_percent_decode	tests/core/path.c	/^void test_core_path__09_percent_decode(void)$/;"	f	signature:(void)
test_core_path__10_fromurl	tests/core/path.c	/^void test_core_path__10_fromurl(void)$/;"	f	signature:(void)
test_core_path__11_walkup	tests/core/path.c	/^void test_core_path__11_walkup(void)$/;"	f	signature:(void)
test_core_path__11a_walkup_cancel	tests/core/path.c	/^void test_core_path__11a_walkup_cancel(void)$/;"	f	signature:(void)
test_core_path__12_offset_to_path_root	tests/core/path.c	/^void test_core_path__12_offset_to_path_root(void)$/;"	f	signature:(void)
test_core_path__13_cannot_prettify_a_non_existing_file	tests/core/path.c	/^void test_core_path__13_cannot_prettify_a_non_existing_file(void)$/;"	f	signature:(void)
test_core_path__14_apply_relative	tests/core/path.c	/^void test_core_path__14_apply_relative(void)$/;"	f	signature:(void)
test_core_path__15_resolve_relative	tests/core/path.c	/^void test_core_path__15_resolve_relative(void)$/;"	f	signature:(void)
test_core_path__16_resolve_relative	tests/core/path.c	/^void test_core_path__16_resolve_relative(void)$/;"	f	signature:(void)
test_core_pool__0	tests/core/pool.c	/^void test_core_pool__0(void)$/;"	f	signature:(void)
test_core_pool__1	tests/core/pool.c	/^void test_core_pool__1(void)$/;"	f	signature:(void)
test_core_pool__2	tests/core/pool.c	/^void test_core_pool__2(void)$/;"	f	signature:(void)
test_core_pool__strndup_limit	tests/core/pool.c	/^void test_core_pool__strndup_limit(void)$/;"	f	signature:(void)
test_core_posix__inet_pton	tests/core/posix.c	/^void test_core_posix__inet_pton(void)$/;"	f	signature:(void)
test_core_posix__initialize	tests/core/posix.c	/^void test_core_posix__initialize(void)$/;"	f	signature:(void)
test_core_posix__p_regcomp_compile_userdiff_regexps	tests/core/posix.c	/^void test_core_posix__p_regcomp_compile_userdiff_regexps(void)$/;"	f	signature:(void)
test_core_posix__p_regcomp_ignores_global_locale_ctype	tests/core/posix.c	/^void test_core_posix__p_regcomp_ignores_global_locale_ctype(void)$/;"	f	signature:(void)
test_core_posix__utimes	tests/core/posix.c	/^void test_core_posix__utimes(void)$/;"	f	signature:(void)
test_core_pqueue__interleave_inserts_and_pops	tests/core/pqueue.c	/^void test_core_pqueue__interleave_inserts_and_pops(void)$/;"	f	signature:(void)
test_core_pqueue__interleaved_pushes_and_pops	tests/core/pqueue.c	/^void test_core_pqueue__interleaved_pushes_and_pops(void)$/;"	f	signature:(void)
test_core_pqueue__items_are_put_in_order	tests/core/pqueue.c	/^void test_core_pqueue__items_are_put_in_order(void)$/;"	f	signature:(void)
test_core_pqueue__max_heap_size	tests/core/pqueue.c	/^void test_core_pqueue__max_heap_size(void)$/;"	f	signature:(void)
test_core_pqueue__max_heap_size_without_comparison	tests/core/pqueue.c	/^void test_core_pqueue__max_heap_size_without_comparison(void)$/;"	f	signature:(void)
test_core_rmdir__can_remove_empty_parents	tests/core/rmdir.c	/^void test_core_rmdir__can_remove_empty_parents(void)$/;"	f	signature:(void)
test_core_rmdir__can_skip_non_empty_dir	tests/core/rmdir.c	/^void test_core_rmdir__can_skip_non_empty_dir(void)$/;"	f	signature:(void)
test_core_rmdir__delete_recursive	tests/core/rmdir.c	/^void test_core_rmdir__delete_recursive(void)$/;"	f	signature:(void)
test_core_rmdir__fail_to_delete_non_empty_dir	tests/core/rmdir.c	/^void test_core_rmdir__fail_to_delete_non_empty_dir(void)$/;"	f	signature:(void)
test_core_rmdir__initialize	tests/core/rmdir.c	/^void test_core_rmdir__initialize(void)$/;"	f	signature:(void)
test_core_sortedcache__in_memory	tests/core/sortedcache.c	/^void test_core_sortedcache__in_memory(void)$/;"	f	signature:(void)
test_core_sortedcache__name_only	tests/core/sortedcache.c	/^void test_core_sortedcache__name_only(void)$/;"	f	signature:(void)
test_core_sortedcache__on_disk	tests/core/sortedcache.c	/^void test_core_sortedcache__on_disk(void)$/;"	f	signature:(void)
test_core_stat__0	tests/core/stat.c	/^void test_core_stat__0(void)$/;"	f	signature:(void)
test_core_stat__cleanup	tests/core/stat.c	/^void test_core_stat__cleanup(void)$/;"	f	signature:(void)
test_core_stat__initialize	tests/core/stat.c	/^void test_core_stat__initialize(void)$/;"	f	signature:(void)
test_core_stat__root	tests/core/stat.c	/^void test_core_stat__root(void)$/;"	f	signature:(void)
test_core_stream__register_tls	tests/core/stream.c	/^void test_core_stream__register_tls(void)$/;"	f	signature:(void)
test_core_string__0	tests/core/string.c	/^void test_core_string__0(void)$/;"	f	signature:(void)
test_core_string__1	tests/core/string.c	/^void test_core_string__1(void)$/;"	f	signature:(void)
test_core_string__2	tests/core/string.c	/^void test_core_string__2(void)$/;"	f	signature:(void)
test_core_string__strcasecmp	tests/core/string.c	/^void test_core_string__strcasecmp(void)$/;"	f	signature:(void)
test_core_string__strcmp	tests/core/string.c	/^void test_core_string__strcmp(void)$/;"	f	signature:(void)
test_core_strmap__0	tests/core/strmap.c	/^void test_core_strmap__0(void)$/;"	f	signature:(void)
test_core_strmap__1	tests/core/strmap.c	/^void test_core_strmap__1(void)$/;"	f	signature:(void)
test_core_strmap__2	tests/core/strmap.c	/^void test_core_strmap__2(void)$/;"	f	signature:(void)
test_core_strmap__3	tests/core/strmap.c	/^void test_core_strmap__3(void)$/;"	f	signature:(void)
test_core_strmap__cleanup	tests/core/strmap.c	/^void test_core_strmap__cleanup(void)$/;"	f	signature:(void)
test_core_strmap__initialize	tests/core/strmap.c	/^void test_core_strmap__initialize(void)$/;"	f	signature:(void)
test_core_strtol__int32	tests/core/strtol.c	/^void test_core_strtol__int32(void)$/;"	f	signature:(void)
test_core_strtol__int64	tests/core/strtol.c	/^void test_core_strtol__int64(void)$/;"	f	signature:(void)
test_core_structinit__compare	tests/core/structinit.c	/^void test_core_structinit__compare(void)$/;"	f	signature:(void)
test_core_useragent__get	tests/core/useragent.c	/^void test_core_useragent__get(void)$/;"	f	signature:(void)
test_core_vector__0	tests/core/vector.c	/^void test_core_vector__0(void)$/;"	f	signature:(void)
test_core_vector__1	tests/core/vector.c	/^void test_core_vector__1(void)$/;"	f	signature:(void)
test_core_vector__2	tests/core/vector.c	/^void test_core_vector__2(void)$/;"	f	signature:(void)
test_core_vector__3	tests/core/vector.c	/^void test_core_vector__3(void)$/;"	f	signature:(void)
test_core_vector__4	tests/core/vector.c	/^void test_core_vector__4(void)$/;"	f	signature:(void)
test_core_vector__5	tests/core/vector.c	/^void test_core_vector__5(void)$/;"	f	signature:(void)
test_core_vector__grow_and_shrink	tests/core/vector.c	/^void test_core_vector__grow_and_shrink(void)$/;"	f	signature:(void)
test_core_vector__remove_matching	tests/core/vector.c	/^void test_core_vector__remove_matching(void)$/;"	f	signature:(void)
test_core_vector__reverse	tests/core/vector.c	/^void test_core_vector__reverse(void)$/;"	f	signature:(void)
test_core_zstream__basic	tests/core/zstream.c	/^void test_core_zstream__basic(void)$/;"	f	signature:(void)
test_core_zstream__big_data	tests/core/zstream.c	/^void test_core_zstream__big_data(void)$/;"	f	signature:(void)
test_core_zstream__buffer	tests/core/zstream.c	/^void test_core_zstream__buffer(void)$/;"	f	signature:(void)
test_core_zstream__fails_on_trailing_garbage	tests/core/zstream.c	/^void test_core_zstream__fails_on_trailing_garbage(void)$/;"	f	signature:(void)
test_count	tests/clar.c	/^	size_t test_count;$/;"	m	struct:clar_suite	file:	access:public
test_ctor	tests/core/stream.c	/^static int test_ctor(git_stream **out, const char *host, const char *port)$/;"	f	file:	signature:(git_stream **out, const char *host, const char *port)
test_date_date__overflow	tests/date/date.c	/^void test_date_date__overflow(void)$/;"	f	signature:(void)
test_date_rfc2822__format_rfc2822_buffer_too_small	tests/date/rfc2822.c	/^void test_date_rfc2822__format_rfc2822_buffer_too_small(void)$/;"	f	signature:(void)
test_date_rfc2822__format_rfc2822_negative_offset	tests/date/rfc2822.c	/^void test_date_rfc2822__format_rfc2822_negative_offset(void)$/;"	f	signature:(void)
test_date_rfc2822__format_rfc2822_no_offset	tests/date/rfc2822.c	/^void test_date_rfc2822__format_rfc2822_no_offset(void)$/;"	f	signature:(void)
test_date_rfc2822__format_rfc2822_positive_offset	tests/date/rfc2822.c	/^void test_date_rfc2822__format_rfc2822_positive_offset(void)$/;"	f	signature:(void)
test_describe_describe__can_describe_against_a_bare_repo	tests/describe/describe.c	/^void test_describe_describe__can_describe_against_a_bare_repo(void)$/;"	f	signature:(void)
test_describe_describe__describe_a_repo_with_no_refs	tests/describe/describe.c	/^void test_describe_describe__describe_a_repo_with_no_refs(void)$/;"	f	signature:(void)
test_describe_t6120__all	tests/describe/t6120.c	/^void test_describe_t6120__all(void)$/;"	f	signature:(void)
test_describe_t6120__cleanup	tests/describe/t6120.c	/^void test_describe_t6120__cleanup(void)$/;"	f	signature:(void)
test_describe_t6120__default	tests/describe/t6120.c	/^void test_describe_t6120__default(void)$/;"	f	signature:(void)
test_describe_t6120__firstparent	tests/describe/t6120.c	/^void test_describe_t6120__firstparent(void)$/;"	f	signature:(void)
test_describe_t6120__initialize	tests/describe/t6120.c	/^void test_describe_t6120__initialize(void)$/;"	f	signature:(void)
test_describe_t6120__longformat	tests/describe/t6120.c	/^void test_describe_t6120__longformat(void)$/;"	f	signature:(void)
test_describe_t6120__pattern	tests/describe/t6120.c	/^void test_describe_t6120__pattern(void)$/;"	f	signature:(void)
test_describe_t6120__tags	tests/describe/t6120.c	/^void test_describe_t6120__tags(void)$/;"	f	signature:(void)
test_describe_t6120__workdir	tests/describe/t6120.c	/^void test_describe_t6120__workdir(void)$/;"	f	signature:(void)
test_diff_binary__add	tests/diff/binary.c	/^void test_diff_binary__add(void)$/;"	f	signature:(void)
test_diff_binary__add_normal	tests/diff/binary.c	/^void test_diff_binary__add_normal(void)$/;"	f	signature:(void)
test_diff_binary__blob_to_blob	tests/diff/binary.c	/^void test_diff_binary__blob_to_blob(void)$/;"	f	signature:(void)
test_diff_binary__cleanup	tests/diff/binary.c	/^void test_diff_binary__cleanup(void)$/;"	f	signature:(void)
test_diff_binary__delete	tests/diff/binary.c	/^void test_diff_binary__delete(void)$/;"	f	signature:(void)
test_diff_binary__delete_normal	tests/diff/binary.c	/^void test_diff_binary__delete_normal(void)$/;"	f	signature:(void)
test_diff_binary__delta	tests/diff/binary.c	/^void test_diff_binary__delta(void)$/;"	f	signature:(void)
test_diff_binary__delta_append	tests/diff/binary.c	/^void test_diff_binary__delta_append(void)$/;"	f	signature:(void)
test_diff_binary__empty_for_no_diff	tests/diff/binary.c	/^void test_diff_binary__empty_for_no_diff(void)$/;"	f	signature:(void)
test_diff_binary__index_to_workdir	tests/diff/binary.c	/^void test_diff_binary__index_to_workdir(void)$/;"	f	signature:(void)
test_diff_binary__initialize	tests/diff/binary.c	/^void test_diff_binary__initialize(void)$/;"	f	signature:(void)
test_diff_binary__modify	tests/diff/binary.c	/^void test_diff_binary__modify(void)$/;"	f	signature:(void)
test_diff_binary__modify_normal	tests/diff/binary.c	/^void test_diff_binary__modify_normal(void)$/;"	f	signature:(void)
test_diff_binary__print_patch_from_diff	tests/diff/binary.c	/^void test_diff_binary__print_patch_from_diff(void)$/;"	f	signature:(void)
test_diff_blob__binary_data_comparisons	tests/diff/blob.c	/^void test_diff_blob__binary_data_comparisons(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_a_binary_blob_and_a_text_blob	tests/diff/blob.c	/^void test_diff_blob__can_compare_a_binary_blob_and_a_text_blob(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_against_null_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_against_null_blobs(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_against_null_blobs_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_against_null_blobs_with_patch(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_blob_to_buffer	tests/diff/blob.c	/^void test_diff_blob__can_compare_blob_to_buffer(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_blob_to_buffer_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_blob_to_buffer_with_patch(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_buffer_to_buffer	tests/diff/blob.c	/^void test_diff_blob__can_compare_buffer_to_buffer(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_identical_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_identical_blobs(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_identical_blobs_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_identical_blobs_with_patch(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_text_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_text_blobs(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_text_blobs_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_text_blobs_with_patch(void)$/;"	f	signature:(void)
test_diff_blob__can_compare_two_binary_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_two_binary_blobs(void)$/;"	f	signature:(void)
test_diff_blob__can_correctly_detect_a_binary_blob_as_binary	tests/diff/blob.c	/^void test_diff_blob__can_correctly_detect_a_binary_blob_as_binary(void)$/;"	f	signature:(void)
test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary	tests/diff/blob.c	/^void test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary(void)$/;"	f	signature:(void)
test_diff_blob__checks_options_version_too_high	tests/diff/blob.c	/^void test_diff_blob__checks_options_version_too_high(void)$/;"	f	signature:(void)
test_diff_blob__checks_options_version_too_low	tests/diff/blob.c	/^void test_diff_blob__checks_options_version_too_low(void)$/;"	f	signature:(void)
test_diff_blob__cleanup	tests/diff/blob.c	/^void test_diff_blob__cleanup(void)$/;"	f	signature:(void)
test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext	tests/diff/blob.c	/^void test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext(void)$/;"	f	signature:(void)
test_diff_blob__initialize	tests/diff/blob.c	/^void test_diff_blob__initialize(void)$/;"	f	signature:(void)
test_diff_blob__using_path_and_attributes	tests/diff/blob.c	/^void test_diff_blob__using_path_and_attributes(void)$/;"	f	signature:(void)
test_diff_diffiter__checks_options_version	tests/diff/diffiter.c	/^void test_diff_diffiter__checks_options_version(void)$/;"	f	signature:(void)
test_diff_diffiter__cleanup	tests/diff/diffiter.c	/^void test_diff_diffiter__cleanup(void)$/;"	f	signature:(void)
test_diff_diffiter__create	tests/diff/diffiter.c	/^void test_diff_diffiter__create(void)$/;"	f	signature:(void)
test_diff_diffiter__initialize	tests/diff/diffiter.c	/^void test_diff_diffiter__initialize(void)$/;"	f	signature:(void)
test_diff_diffiter__iterate_all	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_all(void)$/;"	f	signature:(void)
test_diff_diffiter__iterate_and_generate_patch_text	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_and_generate_patch_text(void)$/;"	f	signature:(void)
test_diff_diffiter__iterate_files_1	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_files_1(void)$/;"	f	signature:(void)
test_diff_diffiter__iterate_files_2	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_files_2(void)$/;"	f	signature:(void)
test_diff_diffiter__iterate_files_and_hunks	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_files_and_hunks(void)$/;"	f	signature:(void)
test_diff_diffiter__iterate_randomly_while_saving_state	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_randomly_while_saving_state(void)$/;"	f	signature:(void)
test_diff_diffiter__max_size_threshold	tests/diff/diffiter.c	/^void test_diff_diffiter__max_size_threshold(void)$/;"	f	signature:(void)
test_diff_drivers__builtins	tests/diff/drivers.c	/^void test_diff_drivers__builtins(void)$/;"	f	signature:(void)
test_diff_drivers__cleanup	tests/diff/drivers.c	/^void test_diff_drivers__cleanup(void)$/;"	f	signature:(void)
test_diff_drivers__initialize	tests/diff/drivers.c	/^void test_diff_drivers__initialize(void)$/;"	f	signature:(void)
test_diff_drivers__invalid_pattern	tests/diff/drivers.c	/^void test_diff_drivers__invalid_pattern(void)$/;"	f	signature:(void)
test_diff_drivers__long_lines	tests/diff/drivers.c	/^void test_diff_drivers__long_lines(void)$/;"	f	signature:(void)
test_diff_drivers__patterns	tests/diff/drivers.c	/^void test_diff_drivers__patterns(void)$/;"	f	signature:(void)
test_diff_format_email__binary	tests/diff/format_email.c	/^void test_diff_format_email__binary(void)$/;"	f	signature:(void)
test_diff_format_email__cleanup	tests/diff/format_email.c	/^void test_diff_format_email__cleanup(void)$/;"	f	signature:(void)
test_diff_format_email__exclude_marker	tests/diff/format_email.c	/^void test_diff_format_email__exclude_marker(void)$/;"	f	signature:(void)
test_diff_format_email__initialize	tests/diff/format_email.c	/^void test_diff_format_email__initialize(void)$/;"	f	signature:(void)
test_diff_format_email__invalid_no	tests/diff/format_email.c	/^void test_diff_format_email__invalid_no(void)$/;"	f	signature:(void)
test_diff_format_email__mode_change	tests/diff/format_email.c	/^void test_diff_format_email__mode_change(void)$/;"	f	signature:(void)
test_diff_format_email__multiline_summary	tests/diff/format_email.c	/^void test_diff_format_email__multiline_summary(void)$/;"	f	signature:(void)
test_diff_format_email__multiple	tests/diff/format_email.c	/^void test_diff_format_email__multiple(void)$/;"	f	signature:(void)
test_diff_format_email__rename_add_remove	tests/diff/format_email.c	/^void test_diff_format_email__rename_add_remove(void)$/;"	f	signature:(void)
test_diff_format_email__simple	tests/diff/format_email.c	/^void test_diff_format_email__simple(void)$/;"	f	signature:(void)
test_diff_format_email__with_message	tests/diff/format_email.c	/^void test_diff_format_email__with_message(void)$/;"	f	signature:(void)
test_diff_index__0	tests/diff/index.c	/^void test_diff_index__0(void)$/;"	f	signature:(void)
test_diff_index__1	tests/diff/index.c	/^void test_diff_index__1(void)$/;"	f	signature:(void)
test_diff_index__checks_options_version	tests/diff/index.c	/^void test_diff_index__checks_options_version(void)$/;"	f	signature:(void)
test_diff_index__cleanup	tests/diff/index.c	/^void test_diff_index__cleanup(void)$/;"	f	signature:(void)
test_diff_index__initialize	tests/diff/index.c	/^void test_diff_index__initialize(void)$/;"	f	signature:(void)
test_diff_index__not_in_head_conflicted	tests/diff/index.c	/^void test_diff_index__not_in_head_conflicted(void)$/;"	f	signature:(void)
test_diff_index__reports_conflicts	tests/diff/index.c	/^void test_diff_index__reports_conflicts(void)$/;"	f	signature:(void)
test_diff_index__reports_conflicts_when_reversed	tests/diff/index.c	/^void test_diff_index__reports_conflicts_when_reversed(void)$/;"	f	signature:(void)
test_diff_index__to_index	tests/diff/index.c	/^void test_diff_index__to_index(void)$/;"	f	signature:(void)
test_diff_notify__cleanup	tests/diff/notify.c	/^void test_diff_notify__cleanup(void)$/;"	f	signature:(void)
test_diff_notify__initialize	tests/diff/notify.c	/^void test_diff_notify__initialize(void)$/;"	f	signature:(void)
test_diff_notify__notify_catchall	tests/diff/notify.c	/^void test_diff_notify__notify_catchall(void)$/;"	f	signature:(void)
test_diff_notify__notify_catchall_with_empty_pathspecs	tests/diff/notify.c	/^void test_diff_notify__notify_catchall_with_empty_pathspecs(void)$/;"	f	signature:(void)
test_diff_notify__notify_cb_can_abort_diff	tests/diff/notify.c	/^void test_diff_notify__notify_cb_can_abort_diff(void)$/;"	f	signature:(void)
test_diff_notify__notify_cb_can_be_used_as_filtering_function	tests/diff/notify.c	/^void test_diff_notify__notify_cb_can_be_used_as_filtering_function(void)$/;"	f	signature:(void)
test_diff_notify__notify_multiple_pathspec	tests/diff/notify.c	/^void test_diff_notify__notify_multiple_pathspec(void)$/;"	f	signature:(void)
test_diff_notify__notify_single_pathspec	tests/diff/notify.c	/^void test_diff_notify__notify_single_pathspec(void)$/;"	f	signature:(void)
test_diff_notify__progress_cb_can_abort_diff	tests/diff/notify.c	/^void test_diff_notify__progress_cb_can_abort_diff(void)$/;"	f	signature:(void)
test_diff_parse__can_parse_generated_diff	tests/diff/parse.c	/^void test_diff_parse__can_parse_generated_diff(void)$/;"	f	signature:(void)
test_diff_parse__cleanup	tests/diff/parse.c	/^void test_diff_parse__cleanup(void)$/;"	f	signature:(void)
test_diff_parse__get_patch_from_diff	tests/diff/parse.c	/^void test_diff_parse__get_patch_from_diff(void)$/;"	f	signature:(void)
test_diff_parse__invalid_patches_fails	tests/diff/parse.c	/^void test_diff_parse__invalid_patches_fails(void)$/;"	f	signature:(void)
test_diff_parse__nonpatches_fail_with_notfound	tests/diff/parse.c	/^void test_diff_parse__nonpatches_fail_with_notfound(void)$/;"	f	signature:(void)
test_diff_patch__can_cancel_diff_print	tests/diff/patch.c	/^void test_diff_patch__can_cancel_diff_print(void)$/;"	f	signature:(void)
test_diff_patch__can_properly_display_the_removal_of_a_file	tests/diff/patch.c	/^void test_diff_patch__can_properly_display_the_removal_of_a_file(void)$/;"	f	signature:(void)
test_diff_patch__cleanup	tests/diff/patch.c	/^void test_diff_patch__cleanup(void)$/;"	f	signature:(void)
test_diff_patch__config_options	tests/diff/patch.c	/^void test_diff_patch__config_options(void)$/;"	f	signature:(void)
test_diff_patch__hunks_have_correct_line_numbers	tests/diff/patch.c	/^void test_diff_patch__hunks_have_correct_line_numbers(void)$/;"	f	signature:(void)
test_diff_patch__initialize	tests/diff/patch.c	/^void test_diff_patch__initialize(void)$/;"	f	signature:(void)
test_diff_patch__line_counts_with_eofnl	tests/diff/patch.c	/^void test_diff_patch__line_counts_with_eofnl(void)$/;"	f	signature:(void)
test_diff_patch__to_string	tests/diff/patch.c	/^void test_diff_patch__to_string(void)$/;"	f	signature:(void)
test_diff_pathspec__0	tests/diff/pathspec.c	/^void test_diff_pathspec__0(void)$/;"	f	signature:(void)
test_diff_pathspec__cleanup	tests/diff/pathspec.c	/^void test_diff_pathspec__cleanup(void)$/;"	f	signature:(void)
test_diff_pathspec__initialize	tests/diff/pathspec.c	/^void test_diff_pathspec__initialize(void)$/;"	f	signature:(void)
test_diff_racediffiter__basic	tests/diff/racediffiter.c	/^void test_diff_racediffiter__basic(void)$/;"	f	signature:(void)
test_diff_racediffiter__cleanup	tests/diff/racediffiter.c	/^void test_diff_racediffiter__cleanup(void)$/;"	f	signature:(void)
test_diff_racediffiter__initialize	tests/diff/racediffiter.c	/^void test_diff_racediffiter__initialize(void)$/;"	f	signature:(void)
test_diff_racediffiter__racy	tests/diff/racediffiter.c	/^void test_diff_racediffiter__racy(void)$/;"	f	signature:(void)
test_diff_rename__blank_files_not_renamed_when_not_ignoring_whitespace	tests/diff/rename.c	/^void test_diff_rename__blank_files_not_renamed_when_not_ignoring_whitespace(void)$/;"	f	signature:(void)
test_diff_rename__blank_files_renamed_when_ignoring_whitespace	tests/diff/rename.c	/^void test_diff_rename__blank_files_renamed_when_ignoring_whitespace(void)$/;"	f	signature:(void)
test_diff_rename__by_config_doesnt_mess_with_whitespace_settings	tests/diff/rename.c	/^void test_diff_rename__by_config_doesnt_mess_with_whitespace_settings(void)$/;"	f	signature:(void)
test_diff_rename__can_delete_unmodified_deltas	tests/diff/rename.c	/^void test_diff_rename__can_delete_unmodified_deltas(void)$/;"	f	signature:(void)
test_diff_rename__can_find_copy_to_split	tests/diff/rename.c	/^void test_diff_rename__can_find_copy_to_split(void)$/;"	f	signature:(void)
test_diff_rename__can_override_thresholds_when_obeying_config	tests/diff/rename.c	/^void test_diff_rename__can_override_thresholds_when_obeying_config(void)$/;"	f	signature:(void)
test_diff_rename__can_rename_from_rewrite	tests/diff/rename.c	/^void test_diff_rename__can_rename_from_rewrite(void)$/;"	f	signature:(void)
test_diff_rename__case_changes_are_split	tests/diff/rename.c	/^void test_diff_rename__case_changes_are_split(void)$/;"	f	signature:(void)
test_diff_rename__checks_options_version	tests/diff/rename.c	/^void test_diff_rename__checks_options_version(void)$/;"	f	signature:(void)
test_diff_rename__cleanup	tests/diff/rename.c	/^void test_diff_rename__cleanup(void)$/;"	f	signature:(void)
test_diff_rename__empty_files_renamed	tests/diff/rename.c	/^void test_diff_rename__empty_files_renamed(void)$/;"	f	signature:(void)
test_diff_rename__file_exchange	tests/diff/rename.c	/^void test_diff_rename__file_exchange(void)$/;"	f	signature:(void)
test_diff_rename__file_exchange_three	tests/diff/rename.c	/^void test_diff_rename__file_exchange_three(void)$/;"	f	signature:(void)
test_diff_rename__file_partial_exchange	tests/diff/rename.c	/^void test_diff_rename__file_partial_exchange(void)$/;"	f	signature:(void)
test_diff_rename__from_deleted_to_split	tests/diff/rename.c	/^void test_diff_rename__from_deleted_to_split(void)$/;"	f	signature:(void)
test_diff_rename__identical	tests/diff/rename.c	/^void test_diff_rename__identical(void)$/;"	f	signature:(void)
test_diff_rename__initialize	tests/diff/rename.c	/^void test_diff_rename__initialize(void)$/;"	f	signature:(void)
test_diff_rename__match_oid	tests/diff/rename.c	/^void test_diff_rename__match_oid(void)$/;"	f	signature:(void)
test_diff_rename__matches_config_behavior	tests/diff/rename.c	/^void test_diff_rename__matches_config_behavior(void)$/;"	f	signature:(void)
test_diff_rename__not_exact_match	tests/diff/rename.c	/^void test_diff_rename__not_exact_match(void)$/;"	f	signature:(void)
test_diff_rename__patch	tests/diff/rename.c	/^void test_diff_rename__patch(void)$/;"	f	signature:(void)
test_diff_rename__rejected_match_can_match_others	tests/diff/rename.c	/^void test_diff_rename__rejected_match_can_match_others(void)$/;"	f	signature:(void)
test_diff_rename__rejected_match_can_match_others_three	tests/diff/rename.c	/^void test_diff_rename__rejected_match_can_match_others_three(void)$/;"	f	signature:(void)
test_diff_rename__rejected_match_can_match_others_two	tests/diff/rename.c	/^void test_diff_rename__rejected_match_can_match_others_two(void)$/;"	f	signature:(void)
test_diff_rename__rename_and_copy_from_same_source	tests/diff/rename.c	/^void test_diff_rename__rename_and_copy_from_same_source(void)$/;"	f	signature:(void)
test_diff_rename__rewrite_on_single_file	tests/diff/rename.c	/^void test_diff_rename__rewrite_on_single_file(void)$/;"	f	signature:(void)
test_diff_rename__test_small_files	tests/diff/rename.c	/^void test_diff_rename__test_small_files(void)$/;"	f	signature:(void)
test_diff_rename__unmodified_can_be_renamed	tests/diff/rename.c	/^void test_diff_rename__unmodified_can_be_renamed(void)$/;"	f	signature:(void)
test_diff_rename__working_directory_changes	tests/diff/rename.c	/^void test_diff_rename__working_directory_changes(void)$/;"	f	signature:(void)
test_diff_stats__binary	tests/diff/stats.c	/^void test_diff_stats__binary(void)$/;"	f	signature:(void)
test_diff_stats__binary_numstat	tests/diff/stats.c	/^void test_diff_stats__binary_numstat(void)$/;"	f	signature:(void)
test_diff_stats__cleanup	tests/diff/stats.c	/^void test_diff_stats__cleanup(void)$/;"	f	signature:(void)
test_diff_stats__initialize	tests/diff/stats.c	/^void test_diff_stats__initialize(void)$/;"	f	signature:(void)
test_diff_stats__mode_change	tests/diff/stats.c	/^void test_diff_stats__mode_change(void)$/;"	f	signature:(void)
test_diff_stats__multiple_hunks	tests/diff/stats.c	/^void test_diff_stats__multiple_hunks(void)$/;"	f	signature:(void)
test_diff_stats__numstat	tests/diff/stats.c	/^void test_diff_stats__numstat(void)$/;"	f	signature:(void)
test_diff_stats__rename	tests/diff/stats.c	/^void test_diff_stats__rename(void)$/;"	f	signature:(void)
test_diff_stats__rename_and_modifiy	tests/diff/stats.c	/^void test_diff_stats__rename_and_modifiy(void)$/;"	f	signature:(void)
test_diff_stats__rename_and_modifiy_no_find	tests/diff/stats.c	/^void test_diff_stats__rename_and_modifiy_no_find(void)$/;"	f	signature:(void)
test_diff_stats__rename_no_find	tests/diff/stats.c	/^void test_diff_stats__rename_no_find(void)$/;"	f	signature:(void)
test_diff_stats__rename_nochanges	tests/diff/stats.c	/^void test_diff_stats__rename_nochanges(void)$/;"	f	signature:(void)
test_diff_stats__rename_nochanges_no_find	tests/diff/stats.c	/^void test_diff_stats__rename_nochanges_no_find(void)$/;"	f	signature:(void)
test_diff_stats__shortstat	tests/diff/stats.c	/^void test_diff_stats__shortstat(void)$/;"	f	signature:(void)
test_diff_stats__shortstat_nodeletions	tests/diff/stats.c	/^void test_diff_stats__shortstat_nodeletions(void)$/;"	f	signature:(void)
test_diff_stats__shortstat_noinsertions	tests/diff/stats.c	/^void test_diff_stats__shortstat_noinsertions(void)$/;"	f	signature:(void)
test_diff_stats__stat	tests/diff/stats.c	/^void test_diff_stats__stat(void)$/;"	f	signature:(void)
test_diff_submodules__can_be_identified_by_trailing_slash_in_pathspec	tests/diff/submodules.c	/^void test_diff_submodules__can_be_identified_by_trailing_slash_in_pathspec(void)$/;"	f	signature:(void)
test_diff_submodules__cleanup	tests/diff/submodules.c	/^void test_diff_submodules__cleanup(void)$/;"	f	signature:(void)
test_diff_submodules__diff_ignore_options	tests/diff/submodules.c	/^void test_diff_submodules__diff_ignore_options(void)$/;"	f	signature:(void)
test_diff_submodules__dirty_submodule	tests/diff/submodules.c	/^void test_diff_submodules__dirty_submodule(void)$/;"	f	signature:(void)
test_diff_submodules__dirty_submodule_2	tests/diff/submodules.c	/^void test_diff_submodules__dirty_submodule_2(void)$/;"	f	signature:(void)
test_diff_submodules__initialize	tests/diff/submodules.c	/^void test_diff_submodules__initialize(void)$/;"	f	signature:(void)
test_diff_submodules__invalid_cache	tests/diff/submodules.c	/^void test_diff_submodules__invalid_cache(void)$/;"	f	signature:(void)
test_diff_submodules__skips_empty_includes_used	tests/diff/submodules.c	/^void test_diff_submodules__skips_empty_includes_used(void)$/;"	f	signature:(void)
test_diff_submodules__submod2_head_to_index	tests/diff/submodules.c	/^void test_diff_submodules__submod2_head_to_index(void)$/;"	f	signature:(void)
test_diff_submodules__submod2_index_to_wd	tests/diff/submodules.c	/^void test_diff_submodules__submod2_index_to_wd(void)$/;"	f	signature:(void)
test_diff_submodules__unmodified_submodule	tests/diff/submodules.c	/^void test_diff_submodules__unmodified_submodule(void)$/;"	f	signature:(void)
test_diff_tree__0	tests/diff/tree.c	/^void test_diff_tree__0(void)$/;"	f	signature:(void)
test_diff_tree__bare	tests/diff/tree.c	/^void test_diff_tree__bare(void)$/;"	f	signature:(void)
test_diff_tree__checks_options_version	tests/diff/tree.c	/^void test_diff_tree__checks_options_version(void)$/;"	f	signature:(void)
test_diff_tree__cleanup	tests/diff/tree.c	/^void test_diff_tree__cleanup(void)$/;"	f	signature:(void)
test_diff_tree__diff_configs	tests/diff/tree.c	/^void test_diff_tree__diff_configs(void)$/;"	f	signature:(void)
test_diff_tree__initialize	tests/diff/tree.c	/^void test_diff_tree__initialize(void)$/;"	f	signature:(void)
test_diff_tree__issue_1397	tests/diff/tree.c	/^void test_diff_tree__issue_1397(void)$/;"	f	signature:(void)
test_diff_tree__larger_hunks	tests/diff/tree.c	/^void test_diff_tree__larger_hunks(void)$/;"	f	signature:(void)
test_diff_tree__merge	tests/diff/tree.c	/^void test_diff_tree__merge(void)$/;"	f	signature:(void)
test_diff_tree__options	tests/diff/tree.c	/^void test_diff_tree__options(void)$/;"	f	signature:(void)
test_diff_tree__regular_blob_mode_changed_to_executable_file	tests/diff/tree.c	/^void test_diff_tree__regular_blob_mode_changed_to_executable_file(void)$/;"	f	signature:(void)
test_diff_tree__symlink_blob_mode_changed_to_regular_file	tests/diff/tree.c	/^void test_diff_tree__symlink_blob_mode_changed_to_regular_file(void)$/;"	f	signature:(void)
test_diff_tree__symlink_blob_mode_changed_to_regular_file_as_typechange	tests/diff/tree.c	/^void test_diff_tree__symlink_blob_mode_changed_to_regular_file_as_typechange(void)$/;"	f	signature:(void)
test_diff_workdir__binary_detection	tests/diff/workdir.c	/^void test_diff_workdir__binary_detection(void)$/;"	f	signature:(void)
test_diff_workdir__can_diff_empty_file	tests/diff/workdir.c	/^void test_diff_workdir__can_diff_empty_file(void)$/;"	f	signature:(void)
test_diff_workdir__can_update_index	tests/diff/workdir.c	/^void test_diff_workdir__can_update_index(void)$/;"	f	signature:(void)
test_diff_workdir__cannot_diff_against_a_bare_repository	tests/diff/workdir.c	/^void test_diff_workdir__cannot_diff_against_a_bare_repository(void)$/;"	f	signature:(void)
test_diff_workdir__checks_options_version	tests/diff/workdir.c	/^void test_diff_workdir__checks_options_version(void)$/;"	f	signature:(void)
test_diff_workdir__cleanup	tests/diff/workdir.c	/^void test_diff_workdir__cleanup(void)$/;"	f	signature:(void)
test_diff_workdir__eof_newline_changes	tests/diff/workdir.c	/^void test_diff_workdir__eof_newline_changes(void)$/;"	f	signature:(void)
test_diff_workdir__filemode_changes	tests/diff/workdir.c	/^void test_diff_workdir__filemode_changes(void)$/;"	f	signature:(void)
test_diff_workdir__filemode_changes_with_filemode_false	tests/diff/workdir.c	/^void test_diff_workdir__filemode_changes_with_filemode_false(void)$/;"	f	signature:(void)
test_diff_workdir__head_index_and_workdir_all_differ	tests/diff/workdir.c	/^void test_diff_workdir__head_index_and_workdir_all_differ(void)$/;"	f	signature:(void)
test_diff_workdir__larger_hunks	tests/diff/workdir.c	/^void test_diff_workdir__larger_hunks(void)$/;"	f	signature:(void)
test_diff_workdir__only_writes_index_when_necessary	tests/diff/workdir.c	/^void test_diff_workdir__only_writes_index_when_necessary(void)$/;"	f	signature:(void)
test_diff_workdir__patience_diff	tests/diff/workdir.c	/^void test_diff_workdir__patience_diff(void)$/;"	f	signature:(void)
test_diff_workdir__submodules	tests/diff/workdir.c	/^void test_diff_workdir__submodules(void)$/;"	f	signature:(void)
test_diff_workdir__symlink_changed_on_non_symlink_platform	tests/diff/workdir.c	/^void test_diff_workdir__symlink_changed_on_non_symlink_platform(void)$/;"	f	signature:(void)
test_diff_workdir__to_index	tests/diff/workdir.c	/^void test_diff_workdir__to_index(void)$/;"	f	signature:(void)
test_diff_workdir__to_index_conflicted	tests/diff/workdir.c	/^void test_diff_workdir__to_index_conflicted(void) {$/;"	f	signature:(void)
test_diff_workdir__to_index_issue_1397	tests/diff/workdir.c	/^void test_diff_workdir__to_index_issue_1397(void)$/;"	f	signature:(void)
test_diff_workdir__to_index_pathlist	tests/diff/workdir.c	/^void test_diff_workdir__to_index_pathlist(void)$/;"	f	signature:(void)
test_diff_workdir__to_index_with_assume_unchanged	tests/diff/workdir.c	/^void test_diff_workdir__to_index_with_assume_unchanged(void)$/;"	f	signature:(void)
test_diff_workdir__to_index_with_conflicts	tests/diff/workdir.c	/^void test_diff_workdir__to_index_with_conflicts(void)$/;"	f	signature:(void)
test_diff_workdir__to_index_with_pathlist_disabling_fnmatch	tests/diff/workdir.c	/^void test_diff_workdir__to_index_with_pathlist_disabling_fnmatch(void)$/;"	f	signature:(void)
test_diff_workdir__to_index_with_pathspec	tests/diff/workdir.c	/^void test_diff_workdir__to_index_with_pathspec(void)$/;"	f	signature:(void)
test_diff_workdir__to_null_tree	tests/diff/workdir.c	/^void test_diff_workdir__to_null_tree(void)$/;"	f	signature:(void)
test_diff_workdir__to_tree	tests/diff/workdir.c	/^void test_diff_workdir__to_tree(void)$/;"	f	signature:(void)
test_diff_workdir__to_tree_issue_1397	tests/diff/workdir.c	/^void test_diff_workdir__to_tree_issue_1397(void)$/;"	f	signature:(void)
test_diff_workdir__untracked_directory_comes_last	tests/diff/workdir.c	/^void test_diff_workdir__untracked_directory_comes_last(void)$/;"	f	signature:(void)
test_diff_workdir__untracked_directory_scenarios	tests/diff/workdir.c	/^void test_diff_workdir__untracked_directory_scenarios(void)$/;"	f	signature:(void)
test_diff_workdir__untracked_with_bom	tests/diff/workdir.c	/^void test_diff_workdir__untracked_with_bom(void)$/;"	f	signature:(void)
test_diff_workdir__with_stale_index	tests/diff/workdir.c	/^void test_diff_workdir__with_stale_index(void)$/;"	f	signature:(void)
test_driver_apply	tests/merge/driver.c	/^static int test_driver_apply($/;"	f	file:	signature:( git_merge_driver *s, const char **path_out, uint32_t *mode_out, git_buf *merged_out, const char *filter_name, const git_merge_driver_source *src)
test_driver_conflict_apply	tests/merge/driver.c	/^static struct test_merge_driver test_driver_conflict_apply = {$/;"	v	typeref:struct:test_merge_driver	file:
test_driver_custom	tests/merge/driver.c	/^static struct test_merge_driver test_driver_custom = {$/;"	v	typeref:struct:test_merge_driver	file:
test_driver_defer_apply	tests/merge/driver.c	/^static struct test_merge_driver test_driver_defer_apply = {$/;"	v	typeref:struct:test_merge_driver	file:
test_driver_init	tests/merge/driver.c	/^static int test_driver_init(git_merge_driver *s)$/;"	f	file:	signature:(git_merge_driver *s)
test_driver_shutdown	tests/merge/driver.c	/^static void test_driver_shutdown(git_merge_driver *s)$/;"	f	file:	signature:(git_merge_driver *s)
test_driver_wildcard	tests/merge/driver.c	/^static struct test_merge_driver test_driver_wildcard = {$/;"	v	typeref:struct:test_merge_driver	file:
test_drivers_register	tests/merge/driver.c	/^static void test_drivers_register(void)$/;"	f	file:	signature:(void)
test_drivers_unregister	tests/merge/driver.c	/^static void test_drivers_unregister(void)$/;"	f	file:	signature:(void)
test_entries	tests/index/tests.c	/^static struct test_entry test_entries[] = {$/;"	v	typeref:struct:test_entry	file:
test_entry	tests/index/tests.c	/^struct test_entry {$/;"	s	file:
test_entry::file_size	tests/index/tests.c	/^   git_off_t file_size;$/;"	m	struct:test_entry	file:	access:public
test_entry::index	tests/index/tests.c	/^   size_t index;$/;"	m	struct:test_entry	file:	access:public
test_entry::mtime	tests/index/tests.c	/^   git_time_t mtime;$/;"	m	struct:test_entry	file:	access:public
test_entry::path	tests/index/tests.c	/^   char path[128];$/;"	m	struct:test_entry	file:	access:public
test_fetchhead_nonetwork__create_when_refpecs_given	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__create_when_refpecs_given(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__initialize	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__initialize(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__invalid_description	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_description(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__invalid_for_merge	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_for_merge(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__invalid_oid	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_oid(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__invalid_unterminated_last_line	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_unterminated_last_line(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__name_missing	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__name_missing(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__nonexistent	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__nonexistent(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__quote_in_branch_name	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__quote_in_branch_name(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__read	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__read(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__read_old_style	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__read_old_style(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__type_missing	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__type_missing(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__unborn_with_upstream	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__unborn_with_upstream(void)$/;"	f	signature:(void)
test_fetchhead_nonetwork__write	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__write(void)$/;"	f	signature:(void)
test_file_contents	tests/merge/workdir/setup.c	/^static bool test_file_contents(const char *filename, const char *expected)$/;"	f	file:	signature:(const char *filename, const char *expected)
test_files_1	tests/status/ignore.c	/^static const char *test_files_1[] = {$/;"	v	file:
test_filter_blob__all_crlf	tests/filter/blob.c	/^void test_filter_blob__all_crlf(void)$/;"	f	signature:(void)
test_filter_blob__cleanup	tests/filter/blob.c	/^void test_filter_blob__cleanup(void)$/;"	f	signature:(void)
test_filter_blob__ident	tests/filter/blob.c	/^void test_filter_blob__ident(void)$/;"	f	signature:(void)
test_filter_blob__initialize	tests/filter/blob.c	/^void test_filter_blob__initialize(void)$/;"	f	signature:(void)
test_filter_blob__sanitizes	tests/filter/blob.c	/^void test_filter_blob__sanitizes(void)$/;"	f	signature:(void)
test_filter_crlf__cleanup	tests/filter/crlf.c	/^void test_filter_crlf__cleanup(void)$/;"	f	signature:(void)
test_filter_crlf__initialize	tests/filter/crlf.c	/^void test_filter_crlf__initialize(void)$/;"	f	signature:(void)
test_filter_crlf__no_safecrlf	tests/filter/crlf.c	/^void test_filter_crlf__no_safecrlf(void)$/;"	f	signature:(void)
test_filter_crlf__safecrlf_warn	tests/filter/crlf.c	/^void test_filter_crlf__safecrlf_warn(void)$/;"	f	signature:(void)
test_filter_crlf__to_odb	tests/filter/crlf.c	/^void test_filter_crlf__to_odb(void)$/;"	f	signature:(void)
test_filter_crlf__to_worktree	tests/filter/crlf.c	/^void test_filter_crlf__to_worktree(void)$/;"	f	signature:(void)
test_filter_crlf__with_safecrlf	tests/filter/crlf.c	/^void test_filter_crlf__with_safecrlf(void)$/;"	f	signature:(void)
test_filter_crlf__with_safecrlf_and_unsafe_allowed	tests/filter/crlf.c	/^void test_filter_crlf__with_safecrlf_and_unsafe_allowed(void)$/;"	f	signature:(void)
test_filter_custom__can_register_a_custom_filter_in_the_repository	tests/filter/custom.c	/^void test_filter_custom__can_register_a_custom_filter_in_the_repository(void)$/;"	f	signature:(void)
test_filter_custom__cleanup	tests/filter/custom.c	/^void test_filter_custom__cleanup(void)$/;"	f	signature:(void)
test_filter_custom__filter_registry_failure_cases	tests/filter/custom.c	/^void test_filter_custom__filter_registry_failure_cases(void)$/;"	f	signature:(void)
test_filter_custom__initialize	tests/filter/custom.c	/^void test_filter_custom__initialize(void)$/;"	f	signature:(void)
test_filter_custom__order_dependency	tests/filter/custom.c	/^void test_filter_custom__order_dependency(void)$/;"	f	signature:(void)
test_filter_custom__to_odb	tests/filter/custom.c	/^void test_filter_custom__to_odb(void)$/;"	f	signature:(void)
test_filter_custom__to_workdir	tests/filter/custom.c	/^void test_filter_custom__to_workdir(void)$/;"	f	signature:(void)
test_filter_file__apply	tests/filter/file.c	/^void test_filter_file__apply(void)$/;"	f	signature:(void)
test_filter_file__apply_stream	tests/filter/file.c	/^void test_filter_file__apply_stream(void)$/;"	f	signature:(void)
test_filter_file__cleanup	tests/filter/file.c	/^void test_filter_file__cleanup(void)$/;"	f	signature:(void)
test_filter_file__initialize	tests/filter/file.c	/^void test_filter_file__initialize(void)$/;"	f	signature:(void)
test_filter_ident__cleanup	tests/filter/ident.c	/^void test_filter_ident__cleanup(void)$/;"	f	signature:(void)
test_filter_ident__initialize	tests/filter/ident.c	/^void test_filter_ident__initialize(void)$/;"	f	signature:(void)
test_filter_ident__to_odb	tests/filter/ident.c	/^void test_filter_ident__to_odb(void)$/;"	f	signature:(void)
test_filter_ident__to_worktree	tests/filter/ident.c	/^void test_filter_ident__to_worktree(void)$/;"	f	signature:(void)
test_filter_query__autocrlf_true_implies_crlf	tests/filter/query.c	/^void test_filter_query__autocrlf_true_implies_crlf(void)$/;"	f	signature:(void)
test_filter_query__cleanup	tests/filter/query.c	/^void test_filter_query__cleanup(void)$/;"	f	signature:(void)
test_filter_query__custom	tests/filter/query.c	/^void test_filter_query__custom(void)$/;"	f	signature:(void)
test_filter_query__filters	tests/filter/query.c	/^void test_filter_query__filters(void)$/;"	f	signature:(void)
test_filter_query__initialize	tests/filter/query.c	/^void test_filter_query__initialize(void)$/;"	f	signature:(void)
test_filter_query__unknown	tests/filter/query.c	/^void test_filter_query__unknown(void)$/;"	f	signature:(void)
test_filter_stream__bigfile	tests/filter/stream.c	/^void test_filter_stream__bigfile(void)$/;"	f	signature:(void)
test_filter_stream__cleanup	tests/filter/stream.c	/^void test_filter_stream__cleanup(void)$/;"	f	signature:(void)
test_filter_stream__initialize	tests/filter/stream.c	/^void test_filter_stream__initialize(void)$/;"	f	signature:(void)
test_filter_stream__smallfile	tests/filter/stream.c	/^void test_filter_stream__smallfile(void)$/;"	f	signature:(void)
test_filter_wildcard__cleanup	tests/filter/wildcard.c	/^void test_filter_wildcard__cleanup(void)$/;"	f	signature:(void)
test_filter_wildcard__flip	tests/filter/wildcard.c	/^void test_filter_wildcard__flip(void)$/;"	f	signature:(void)
test_filter_wildcard__initialize	tests/filter/wildcard.c	/^void test_filter_wildcard__initialize(void)$/;"	f	signature:(void)
test_filter_wildcard__none	tests/filter/wildcard.c	/^void test_filter_wildcard__none(void)$/;"	f	signature:(void)
test_filter_wildcard__reverse	tests/filter/wildcard.c	/^void test_filter_wildcard__reverse(void)$/;"	f	signature:(void)
test_find_differences	tests/merge/trees/treediff.c	/^static void test_find_differences($/;"	f	file:	signature:( const char *ancestor_oidstr, const char *ours_oidstr, const char *theirs_oidstr, struct merge_index_conflict_data *treediff_conflict_data, size_t treediff_conflict_data_len)
test_graph_descendant_of__cleanup	tests/graph/descendant_of.c	/^void test_graph_descendant_of__cleanup(void)$/;"	f	signature:(void)
test_graph_descendant_of__initialize	tests/graph/descendant_of.c	/^void test_graph_descendant_of__initialize(void)$/;"	f	signature:(void)
test_graph_descendant_of__nopath	tests/graph/descendant_of.c	/^void test_graph_descendant_of__nopath(void)$/;"	f	signature:(void)
test_graph_descendant_of__returns_correct_result	tests/graph/descendant_of.c	/^void test_graph_descendant_of__returns_correct_result(void)$/;"	f	signature:(void)
test_id	tests/refs/revparse.c	/^static void test_id($/;"	f	file:	signature:( const char *spec, const char *expected_left, const char *expected_right, git_revparse_mode_t expected_flags)
test_id_inrepo	tests/refs/revparse.c	/^static void test_id_inrepo($/;"	f	file:	signature:( const char *spec, const char *expected_left, const char *expected_right, git_revparse_mode_t expected_flags, git_repository *repo)
test_index_add__cleanup	tests/index/add.c	/^void test_index_add__cleanup(void)$/;"	f	signature:(void)
test_index_add__initialize	tests/index/add.c	/^void test_index_add__initialize(void)$/;"	f	signature:(void)
test_index_add__invalid_entries_succeeds_by_default	tests/index/add.c	/^void test_index_add__invalid_entries_succeeds_by_default(void)$/;"	f	signature:(void)
test_index_addall__adds_conflicts	tests/index/addall.c	/^void test_index_addall__adds_conflicts(void)$/;"	f	signature:(void)
test_index_addall__callback_filtering	tests/index/addall.c	/^void test_index_addall__callback_filtering(void)$/;"	f	signature:(void)
test_index_addall__cleanup	tests/index/addall.c	/^void test_index_addall__cleanup(void)$/;"	f	signature:(void)
test_index_addall__files_in_folders	tests/index/addall.c	/^void test_index_addall__files_in_folders(void)$/;"	f	signature:(void)
test_index_addall__hidden_files	tests/index/addall.c	/^void test_index_addall__hidden_files(void)$/;"	f	signature:(void)
test_index_addall__initialize	tests/index/addall.c	/^void test_index_addall__initialize(void)$/;"	f	signature:(void)
test_index_addall__removes_deleted_conflicted_files	tests/index/addall.c	/^void test_index_addall__removes_deleted_conflicted_files(void)$/;"	f	signature:(void)
test_index_addall__repo_lifecycle	tests/index/addall.c	/^void test_index_addall__repo_lifecycle(void)$/;"	f	signature:(void)
test_index_bypath__add_directory	tests/index/bypath.c	/^void test_index_bypath__add_directory(void)$/;"	f	signature:(void)
test_index_bypath__add_hidden	tests/index/bypath.c	/^void test_index_bypath__add_hidden(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_conflict_case	tests/index/bypath.c	/^void test_index_bypath__add_honors_conflict_case(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_conflict_mode	tests/index/bypath.c	/^void test_index_bypath__add_honors_conflict_mode(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_existing_case	tests/index/bypath.c	/^void test_index_bypath__add_honors_existing_case(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_existing_case_2	tests/index/bypath.c	/^void test_index_bypath__add_honors_existing_case_2(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_existing_case_3	tests/index/bypath.c	/^void test_index_bypath__add_honors_existing_case_3(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_existing_case_4	tests/index/bypath.c	/^void test_index_bypath__add_honors_existing_case_4(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_mode	tests/index/bypath.c	/^void test_index_bypath__add_honors_mode(void)$/;"	f	signature:(void)
test_index_bypath__add_honors_symlink	tests/index/bypath.c	/^void test_index_bypath__add_honors_symlink(void)$/;"	f	signature:(void)
test_index_bypath__add_keeps_existing_case	tests/index/bypath.c	/^void test_index_bypath__add_keeps_existing_case(void)$/;"	f	signature:(void)
test_index_bypath__add_submodule	tests/index/bypath.c	/^void test_index_bypath__add_submodule(void)$/;"	f	signature:(void)
test_index_bypath__add_submodule_unregistered	tests/index/bypath.c	/^void test_index_bypath__add_submodule_unregistered(void)$/;"	f	signature:(void)
test_index_bypath__cleanup	tests/index/bypath.c	/^void test_index_bypath__cleanup(void)$/;"	f	signature:(void)
test_index_bypath__initialize	tests/index/bypath.c	/^void test_index_bypath__initialize(void)$/;"	f	signature:(void)
test_index_cache__cleanup	tests/index/cache.c	/^void test_index_cache__cleanup(void)$/;"	f	signature:(void)
test_index_cache__initialize	tests/index/cache.c	/^void test_index_cache__initialize(void)$/;"	f	signature:(void)
test_index_cache__read_tree_children	tests/index/cache.c	/^void test_index_cache__read_tree_children(void)$/;"	f	signature:(void)
test_index_cache__read_tree_no_children	tests/index/cache.c	/^void test_index_cache__read_tree_no_children(void)$/;"	f	signature:(void)
test_index_cache__two_levels	tests/index/cache.c	/^void test_index_cache__two_levels(void)$/;"	f	signature:(void)
test_index_cache__write_extension_at_root	tests/index/cache.c	/^void test_index_cache__write_extension_at_root(void)$/;"	f	signature:(void)
test_index_cache__write_extension_invalidated_root	tests/index/cache.c	/^void test_index_cache__write_extension_invalidated_root(void)$/;"	f	signature:(void)
test_index_collision__add	tests/index/collision.c	/^void test_index_collision__add(void)$/;"	f	signature:(void)
test_index_collision__add_with_highstage_1	tests/index/collision.c	/^void test_index_collision__add_with_highstage_1(void)$/;"	f	signature:(void)
test_index_collision__add_with_highstage_2	tests/index/collision.c	/^void test_index_collision__add_with_highstage_2(void)$/;"	f	signature:(void)
test_index_collision__cleanup	tests/index/collision.c	/^void test_index_collision__cleanup(void)$/;"	f	signature:(void)
test_index_collision__initialize	tests/index/collision.c	/^void test_index_collision__initialize(void)$/;"	f	signature:(void)
test_index_conflicts__add	tests/index/conflicts.c	/^void test_index_conflicts__add(void)$/;"	f	signature:(void)
test_index_conflicts__add_fixes_incorrect_stage	tests/index/conflicts.c	/^void test_index_conflicts__add_fixes_incorrect_stage(void)$/;"	f	signature:(void)
test_index_conflicts__add_removes_stage_zero	tests/index/conflicts.c	/^void test_index_conflicts__add_removes_stage_zero(void)$/;"	f	signature:(void)
test_index_conflicts__case_matters	tests/index/conflicts.c	/^void test_index_conflicts__case_matters(void)$/;"	f	signature:(void)
test_index_conflicts__cleanup	tests/index/conflicts.c	/^void test_index_conflicts__cleanup(void)$/;"	f	signature:(void)
test_index_conflicts__get	tests/index/conflicts.c	/^void test_index_conflicts__get(void)$/;"	f	signature:(void)
test_index_conflicts__initialize	tests/index/conflicts.c	/^void test_index_conflicts__initialize(void)$/;"	f	signature:(void)
test_index_conflicts__iterate	tests/index/conflicts.c	/^void test_index_conflicts__iterate(void)$/;"	f	signature:(void)
test_index_conflicts__moved_to_reuc_on_add	tests/index/conflicts.c	/^void test_index_conflicts__moved_to_reuc_on_add(void)$/;"	f	signature:(void)
test_index_conflicts__moved_to_reuc_on_remove	tests/index/conflicts.c	/^void test_index_conflicts__moved_to_reuc_on_remove(void)$/;"	f	signature:(void)
test_index_conflicts__partial	tests/index/conflicts.c	/^void test_index_conflicts__partial(void)$/;"	f	signature:(void)
test_index_conflicts__remove	tests/index/conflicts.c	/^void test_index_conflicts__remove(void)$/;"	f	signature:(void)
test_index_conflicts__remove_all_conflicts	tests/index/conflicts.c	/^void test_index_conflicts__remove_all_conflicts(void)$/;"	f	signature:(void)
test_index_crlf__autocrlf_false_no_attrs	tests/index/crlf.c	/^void test_index_crlf__autocrlf_false_no_attrs(void)$/;"	f	signature:(void)
test_index_crlf__autocrlf_false_text_auto_attr	tests/index/crlf.c	/^void test_index_crlf__autocrlf_false_text_auto_attr(void)$/;"	f	signature:(void)
test_index_crlf__autocrlf_input_no_attrs	tests/index/crlf.c	/^void test_index_crlf__autocrlf_input_no_attrs(void)$/;"	f	signature:(void)
test_index_crlf__autocrlf_input_text_auto_attr	tests/index/crlf.c	/^void test_index_crlf__autocrlf_input_text_auto_attr(void)$/;"	f	signature:(void)
test_index_crlf__autocrlf_true_no_attrs	tests/index/crlf.c	/^void test_index_crlf__autocrlf_true_no_attrs(void)$/;"	f	signature:(void)
test_index_crlf__autocrlf_true_text_auto_attr	tests/index/crlf.c	/^void test_index_crlf__autocrlf_true_text_auto_attr(void)$/;"	f	signature:(void)
test_index_crlf__cleanup	tests/index/crlf.c	/^void test_index_crlf__cleanup(void)$/;"	f	signature:(void)
test_index_crlf__initialize	tests/index/crlf.c	/^void test_index_crlf__initialize(void)$/;"	f	signature:(void)
test_index_crlf__safecrlf_true_no_attrs	tests/index/crlf.c	/^void test_index_crlf__safecrlf_true_no_attrs(void)$/;"	f	signature:(void)
test_index_filemodes__cleanup	tests/index/filemodes.c	/^void test_index_filemodes__cleanup(void)$/;"	f	signature:(void)
test_index_filemodes__explicit	tests/index/filemodes.c	/^void test_index_filemodes__explicit(void)$/;"	f	signature:(void)
test_index_filemodes__initialize	tests/index/filemodes.c	/^void test_index_filemodes__initialize(void)$/;"	f	signature:(void)
test_index_filemodes__invalid	tests/index/filemodes.c	/^void test_index_filemodes__invalid(void)$/;"	f	signature:(void)
test_index_filemodes__read	tests/index/filemodes.c	/^void test_index_filemodes__read(void)$/;"	f	signature:(void)
test_index_filemodes__trusted	tests/index/filemodes.c	/^void test_index_filemodes__trusted(void)$/;"	f	signature:(void)
test_index_filemodes__untrusted	tests/index/filemodes.c	/^void test_index_filemodes__untrusted(void)$/;"	f	signature:(void)
test_index_inmemory__can_create_an_inmemory_index	tests/index/inmemory.c	/^void test_index_inmemory__can_create_an_inmemory_index(void)$/;"	f	signature:(void)
test_index_inmemory__cannot_add_bypath_to_an_inmemory_index	tests/index/inmemory.c	/^void test_index_inmemory__cannot_add_bypath_to_an_inmemory_index(void)$/;"	f	signature:(void)
test_index_names__add	tests/index/names.c	/^void test_index_names__add(void)$/;"	f	signature:(void)
test_index_names__cleaned_on_checkout_head	tests/index/names.c	/^void test_index_names__cleaned_on_checkout_head(void)$/;"	f	signature:(void)
test_index_names__cleaned_on_checkout_tree	tests/index/names.c	/^void test_index_names__cleaned_on_checkout_tree(void)$/;"	f	signature:(void)
test_index_names__cleaned_on_reset_hard	tests/index/names.c	/^void test_index_names__cleaned_on_reset_hard(void)$/;"	f	signature:(void)
test_index_names__cleaned_on_reset_mixed	tests/index/names.c	/^void test_index_names__cleaned_on_reset_mixed(void)$/;"	f	signature:(void)
test_index_names__cleanup	tests/index/names.c	/^void test_index_names__cleanup(void)$/;"	f	signature:(void)
test_index_names__initialize	tests/index/names.c	/^void test_index_names__initialize(void)$/;"	f	signature:(void)
test_index_names__retained_on_checkout_index	tests/index/names.c	/^void test_index_names__retained_on_checkout_index(void)$/;"	f	signature:(void)
test_index_names__roundtrip	tests/index/names.c	/^void test_index_names__roundtrip(void)$/;"	f	signature:(void)
test_index_nsec__cleanup	tests/index/nsec.c	/^void test_index_nsec__cleanup(void)$/;"	f	signature:(void)
test_index_nsec__has_nanos	tests/index/nsec.c	/^void test_index_nsec__has_nanos(void)$/;"	f	signature:(void)
test_index_nsec__initialize	tests/index/nsec.c	/^void test_index_nsec__initialize(void)$/;"	f	signature:(void)
test_index_nsec__staging_maintains_other_nanos	tests/index/nsec.c	/^void test_index_nsec__staging_maintains_other_nanos(void)$/;"	f	signature:(void)
test_index_nsec__status_doesnt_clear_nsecs	tests/index/nsec.c	/^void test_index_nsec__status_doesnt_clear_nsecs(void)$/;"	f	signature:(void)
test_index_racy__adding_to_index_is_uptodate	tests/index/racy.c	/^void test_index_racy__adding_to_index_is_uptodate(void)$/;"	f	signature:(void)
test_index_racy__cleanup	tests/index/racy.c	/^void test_index_racy__cleanup(void)$/;"	f	signature:(void)
test_index_racy__detects_diff_of_change_in_identical_timestamp	tests/index/racy.c	/^void test_index_racy__detects_diff_of_change_in_identical_timestamp(void)$/;"	f	signature:(void)
test_index_racy__diff	tests/index/racy.c	/^void test_index_racy__diff(void)$/;"	f	signature:(void)
test_index_racy__initialize	tests/index/racy.c	/^void test_index_racy__initialize(void)$/;"	f	signature:(void)
test_index_racy__read_index_clears_uptodate_bit	tests/index/racy.c	/^void test_index_racy__read_index_clears_uptodate_bit(void)$/;"	f	signature:(void)
test_index_racy__read_index_smudges	tests/index/racy.c	/^void test_index_racy__read_index_smudges(void)$/;"	f	signature:(void)
test_index_racy__read_tree_clears_uptodate_bit	tests/index/racy.c	/^void test_index_racy__read_tree_clears_uptodate_bit(void)$/;"	f	signature:(void)
test_index_racy__reading_clears_uptodate_bit	tests/index/racy.c	/^void test_index_racy__reading_clears_uptodate_bit(void)$/;"	f	signature:(void)
test_index_racy__smudges_index_entry_on_save	tests/index/racy.c	/^void test_index_racy__smudges_index_entry_on_save(void)$/;"	f	signature:(void)
test_index_racy__write_index_just_after_file	tests/index/racy.c	/^void test_index_racy__write_index_just_after_file(void)$/;"	f	signature:(void)
test_index_read_index__cleanup	tests/index/read_index.c	/^void test_index_read_index__cleanup(void)$/;"	f	signature:(void)
test_index_read_index__handles_conflicts	tests/index/read_index.c	/^void test_index_read_index__handles_conflicts(void)$/;"	f	signature:(void)
test_index_read_index__initialize	tests/index/read_index.c	/^void test_index_read_index__initialize(void)$/;"	f	signature:(void)
test_index_read_index__maintains_stat_cache	tests/index/read_index.c	/^void test_index_read_index__maintains_stat_cache(void)$/;"	f	signature:(void)
test_index_read_index__produces_treesame_indexes	tests/index/read_index.c	/^void test_index_read_index__produces_treesame_indexes(void)$/;"	f	signature:(void)
test_index_read_index__read_and_writes	tests/index/read_index.c	/^void test_index_read_index__read_and_writes(void)$/;"	f	signature:(void)
test_index_read_tree__read_write_involution	tests/index/read_tree.c	/^void test_index_read_tree__read_write_involution(void)$/;"	f	signature:(void)
test_index_rename__casechanging	tests/index/rename.c	/^void test_index_rename__casechanging(void)$/;"	f	signature:(void)
test_index_rename__single_file	tests/index/rename.c	/^void test_index_rename__single_file(void)$/;"	f	signature:(void)
test_index_reuc__add	tests/index/reuc.c	/^void test_index_reuc__add(void)$/;"	f	signature:(void)
test_index_reuc__add_no_ancestor	tests/index/reuc.c	/^void test_index_reuc__add_no_ancestor(void)$/;"	f	signature:(void)
test_index_reuc__cleaned_on_checkout_head	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_checkout_head(void)$/;"	f	signature:(void)
test_index_reuc__cleaned_on_checkout_tree	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_checkout_tree(void)$/;"	f	signature:(void)
test_index_reuc__cleaned_on_reset_hard	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_reset_hard(void)$/;"	f	signature:(void)
test_index_reuc__cleaned_on_reset_mixed	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_reset_mixed(void)$/;"	f	signature:(void)
test_index_reuc__cleanup	tests/index/reuc.c	/^void test_index_reuc__cleanup(void)$/;"	f	signature:(void)
test_index_reuc__ignore_case	tests/index/reuc.c	/^void test_index_reuc__ignore_case(void)$/;"	f	signature:(void)
test_index_reuc__initialize	tests/index/reuc.c	/^void test_index_reuc__initialize(void)$/;"	f	signature:(void)
test_index_reuc__read_byindex	tests/index/reuc.c	/^void test_index_reuc__read_byindex(void)$/;"	f	signature:(void)
test_index_reuc__read_bypath	tests/index/reuc.c	/^void test_index_reuc__read_bypath(void)$/;"	f	signature:(void)
test_index_reuc__remove	tests/index/reuc.c	/^void test_index_reuc__remove(void)$/;"	f	signature:(void)
test_index_reuc__retained_on_checkout_index	tests/index/reuc.c	/^void test_index_reuc__retained_on_checkout_index(void)$/;"	f	signature:(void)
test_index_reuc__retained_on_reset_soft	tests/index/reuc.c	/^void test_index_reuc__retained_on_reset_soft(void)$/;"	f	signature:(void)
test_index_reuc__updates_existing	tests/index/reuc.c	/^void test_index_reuc__updates_existing(void)$/;"	f	signature:(void)
test_index_reuc__write	tests/index/reuc.c	/^void test_index_reuc__write(void)$/;"	f	signature:(void)
test_index_stage__add_always_adds_stage_0	tests/index/stage.c	/^void test_index_stage__add_always_adds_stage_0(void)$/;"	f	signature:(void)
test_index_stage__cleanup	tests/index/stage.c	/^void test_index_stage__cleanup(void)$/;"	f	signature:(void)
test_index_stage__find_gets_first_stage	tests/index/stage.c	/^void test_index_stage__find_gets_first_stage(void)$/;"	f	signature:(void)
test_index_stage__initialize	tests/index/stage.c	/^void test_index_stage__initialize(void)$/;"	f	signature:(void)
test_index_tests__add	tests/index/tests.c	/^void test_index_tests__add(void)$/;"	f	signature:(void)
test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO	tests/index/tests.c	/^void test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO(void)$/;"	f	signature:(void)
test_index_tests__add_frombuffer	tests/index/tests.c	/^void test_index_tests__add_frombuffer(void)$/;"	f	signature:(void)
test_index_tests__add_frombuffer_reset_entry	tests/index/tests.c	/^void test_index_tests__add_frombuffer_reset_entry(void)$/;"	f	signature:(void)
test_index_tests__add_invalid_filename	tests/index/tests.c	/^void test_index_tests__add_invalid_filename(void)$/;"	f	signature:(void)
test_index_tests__add_issue_1397	tests/index/tests.c	/^void test_index_tests__add_issue_1397(void)$/;"	f	signature:(void)
test_index_tests__can_lock_index	tests/index/tests.c	/^void test_index_tests__can_lock_index(void)$/;"	f	signature:(void)
test_index_tests__change_icase_on_instance	tests/index/tests.c	/^void test_index_tests__change_icase_on_instance(void)$/;"	f	signature:(void)
test_index_tests__corrupted_extension	tests/index/tests.c	/^void test_index_tests__corrupted_extension(void)$/;"	f	signature:(void)
test_index_tests__default_test_index	tests/index/tests.c	/^void test_index_tests__default_test_index(void)$/;"	f	signature:(void)
test_index_tests__elocked	tests/index/tests.c	/^void test_index_tests__elocked(void)$/;"	f	signature:(void)
test_index_tests__empty_index	tests/index/tests.c	/^void test_index_tests__empty_index(void)$/;"	f	signature:(void)
test_index_tests__find_in_empty	tests/index/tests.c	/^void test_index_tests__find_in_empty(void)$/;"	f	signature:(void)
test_index_tests__find_in_existing	tests/index/tests.c	/^void test_index_tests__find_in_existing(void)$/;"	f	signature:(void)
test_index_tests__find_prefix	tests/index/tests.c	/^void test_index_tests__find_prefix(void)$/;"	f	signature:(void)
test_index_tests__gitgit_index	tests/index/tests.c	/^void test_index_tests__gitgit_index(void)$/;"	f	signature:(void)
test_index_tests__honors_protect_filesystems	tests/index/tests.c	/^void test_index_tests__honors_protect_filesystems(void)$/;"	f	signature:(void)
test_index_tests__initialize	tests/index/tests.c	/^void test_index_tests__initialize(void)$/;"	f	signature:(void)
test_index_tests__preserves_case	tests/index/tests.c	/^void test_index_tests__preserves_case(void)$/;"	f	signature:(void)
test_index_tests__reload_from_disk	tests/index/tests.c	/^void test_index_tests__reload_from_disk(void)$/;"	f	signature:(void)
test_index_tests__reload_while_ignoring_case	tests/index/tests.c	/^void test_index_tests__reload_while_ignoring_case(void)$/;"	f	signature:(void)
test_index_tests__remove_directory	tests/index/tests.c	/^void test_index_tests__remove_directory(void)$/;"	f	signature:(void)
test_index_tests__remove_entry	tests/index/tests.c	/^void test_index_tests__remove_entry(void)$/;"	f	signature:(void)
test_index_tests__sort0	tests/index/tests.c	/^void test_index_tests__sort0(void)$/;"	f	signature:(void)
test_index_tests__sort1	tests/index/tests.c	/^void test_index_tests__sort1(void)$/;"	f	signature:(void)
test_index_tests__write	tests/index/tests.c	/^void test_index_tests__write(void)$/;"	f	signature:(void)
test_index_tests__write_invalid_filename	tests/index/tests.c	/^void test_index_tests__write_invalid_filename(void)$/;"	f	signature:(void)
test_index_version__can_write_v4	tests/index/version.c	/^void test_index_version__can_write_v4(void)$/;"	f	signature:(void)
test_index_version__cleanup	tests/index/version.c	/^void test_index_version__cleanup(void)$/;"	f	signature:(void)
test_inserting_submodule	tests/object/tree/write.c	/^static void test_inserting_submodule(void)$/;"	f	file:	signature:(void)
test_invalid_name	tests/refs/create.c	/^static void test_invalid_name(const char *name)$/;"	f	file:	signature:(const char *name)
test_invalid_objects	tests/object/tree/write.c	/^static void test_invalid_objects(bool should_allow_invalid)$/;"	f	file:	signature:(bool should_allow_invalid)
test_iterator	tests/rebase/iterator.c	/^void test_iterator(bool inmemory)$/;"	f	signature:(bool inmemory)
test_iterator_index__0	tests/iterator/index.c	/^void test_iterator_index__0(void)$/;"	f	signature:(void)
test_iterator_index__1	tests/iterator/index.c	/^void test_iterator_index__1(void)$/;"	f	signature:(void)
test_iterator_index__advance_into	tests/iterator/index.c	/^void test_iterator_index__advance_into(void)$/;"	f	signature:(void)
test_iterator_index__advance_into_and_over	tests/iterator/index.c	/^void test_iterator_index__advance_into_and_over(void)$/;"	f	signature:(void)
test_iterator_index__advance_over	tests/iterator/index.c	/^void test_iterator_index__advance_over(void)$/;"	f	signature:(void)
test_iterator_index__case_folding	tests/iterator/index.c	/^void test_iterator_index__case_folding(void)$/;"	f	signature:(void)
test_iterator_index__cleanup	tests/iterator/index.c	/^void test_iterator_index__cleanup(void)$/;"	f	signature:(void)
test_iterator_index__icase_0	tests/iterator/index.c	/^void test_iterator_index__icase_0(void)$/;"	f	signature:(void)
test_iterator_index__icase_1	tests/iterator/index.c	/^void test_iterator_index__icase_1(void)$/;"	f	signature:(void)
test_iterator_index__include_conflicts	tests/iterator/index.c	/^void test_iterator_index__include_conflicts(void)$/;"	f	signature:(void)
test_iterator_index__initialize	tests/iterator/index.c	/^void test_iterator_index__initialize(void)$/;"	f	signature:(void)
test_iterator_index__pathlist	tests/iterator/index.c	/^void test_iterator_index__pathlist(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_1	tests/iterator/index.c	/^void test_iterator_index__pathlist_1(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_2	tests/iterator/index.c	/^void test_iterator_index__pathlist_2(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_for_deeply_nested_item	tests/iterator/index.c	/^void test_iterator_index__pathlist_for_deeply_nested_item(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_four	tests/iterator/index.c	/^void test_iterator_index__pathlist_four(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_icase	tests/iterator/index.c	/^void test_iterator_index__pathlist_icase(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_with_directory	tests/iterator/index.c	/^void test_iterator_index__pathlist_with_directory(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_with_dirs	tests/iterator/index.c	/^void test_iterator_index__pathlist_with_dirs(void)$/;"	f	signature:(void)
test_iterator_index__pathlist_with_dirs_include_trees	tests/iterator/index.c	/^void test_iterator_index__pathlist_with_dirs_include_trees(void)$/;"	f	signature:(void)
test_iterator_index__range	tests/iterator/index.c	/^void test_iterator_index__range(void)$/;"	f	signature:(void)
test_iterator_index__range_empty_0	tests/iterator/index.c	/^void test_iterator_index__range_empty_0(void)$/;"	f	signature:(void)
test_iterator_index__range_empty_1	tests/iterator/index.c	/^void test_iterator_index__range_empty_1(void)$/;"	f	signature:(void)
test_iterator_index__range_empty_2	tests/iterator/index.c	/^void test_iterator_index__range_empty_2(void)$/;"	f	signature:(void)
test_iterator_index__range_icase	tests/iterator/index.c	/^void test_iterator_index__range_icase(void)$/;"	f	signature:(void)
test_iterator_tree__0	tests/iterator/tree.c	/^void test_iterator_tree__0(void)$/;"	f	signature:(void)
test_iterator_tree__1	tests/iterator/tree.c	/^void test_iterator_tree__1(void)$/;"	f	signature:(void)
test_iterator_tree__2	tests/iterator/tree.c	/^void test_iterator_tree__2(void)$/;"	f	signature:(void)
test_iterator_tree__3	tests/iterator/tree.c	/^void test_iterator_tree__3(void)$/;"	f	signature:(void)
test_iterator_tree__4	tests/iterator/tree.c	/^void test_iterator_tree__4(void)$/;"	f	signature:(void)
test_iterator_tree__4_ranged	tests/iterator/tree.c	/^void test_iterator_tree__4_ranged(void)$/;"	f	signature:(void)
test_iterator_tree__case_conflicts_0	tests/iterator/tree.c	/^void test_iterator_tree__case_conflicts_0(void)$/;"	f	signature:(void)
test_iterator_tree__case_conflicts_1	tests/iterator/tree.c	/^void test_iterator_tree__case_conflicts_1(void)$/;"	f	signature:(void)
test_iterator_tree__case_conflicts_2	tests/iterator/tree.c	/^void test_iterator_tree__case_conflicts_2(void)$/;"	f	signature:(void)
test_iterator_tree__cleanup	tests/iterator/tree.c	/^void test_iterator_tree__cleanup(void)$/;"	f	signature:(void)
test_iterator_tree__icase_0	tests/iterator/tree.c	/^void test_iterator_tree__icase_0(void)$/;"	f	signature:(void)
test_iterator_tree__icase_1	tests/iterator/tree.c	/^void test_iterator_tree__icase_1(void)$/;"	f	signature:(void)
test_iterator_tree__icase_2	tests/iterator/tree.c	/^void test_iterator_tree__icase_2(void)$/;"	f	signature:(void)
test_iterator_tree__initialize	tests/iterator/tree.c	/^void test_iterator_tree__initialize(void)$/;"	f	signature:(void)
test_iterator_tree__pathlist	tests/iterator/tree.c	/^void test_iterator_tree__pathlist(void)$/;"	f	signature:(void)
test_iterator_tree__pathlist_icase	tests/iterator/tree.c	/^void test_iterator_tree__pathlist_icase(void)$/;"	f	signature:(void)
test_iterator_tree__pathlist_no_match	tests/iterator/tree.c	/^void test_iterator_tree__pathlist_no_match(void)$/;"	f	signature:(void)
test_iterator_tree__pathlist_with_directory	tests/iterator/tree.c	/^void test_iterator_tree__pathlist_with_directory(void)$/;"	f	signature:(void)
test_iterator_tree__pathlist_with_directory_include_tree_nodes	tests/iterator/tree.c	/^void test_iterator_tree__pathlist_with_directory_include_tree_nodes(void)$/;"	f	signature:(void)
test_iterator_tree__range_empty_0	tests/iterator/tree.c	/^void test_iterator_tree__range_empty_0(void)$/;"	f	signature:(void)
test_iterator_tree__range_empty_1	tests/iterator/tree.c	/^void test_iterator_tree__range_empty_1(void)$/;"	f	signature:(void)
test_iterator_tree__range_empty_2	tests/iterator/tree.c	/^void test_iterator_tree__range_empty_2(void)$/;"	f	signature:(void)
test_iterator_tree__range_icase	tests/iterator/tree.c	/^void test_iterator_tree__range_icase(void)$/;"	f	signature:(void)
test_iterator_tree__ranged_0	tests/iterator/tree.c	/^void test_iterator_tree__ranged_0(void)$/;"	f	signature:(void)
test_iterator_tree__ranged_1	tests/iterator/tree.c	/^void test_iterator_tree__ranged_1(void)$/;"	f	signature:(void)
test_iterator_tree__special_functions	tests/iterator/tree.c	/^void test_iterator_tree__special_functions(void)$/;"	f	signature:(void)
test_iterator_workdir__0	tests/iterator/workdir.c	/^void test_iterator_workdir__0(void)$/;"	f	signature:(void)
test_iterator_workdir__1	tests/iterator/workdir.c	/^void test_iterator_workdir__1(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_0	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_0(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_1	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_1(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_3	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_3(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_4	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_4(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_5	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_5(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_5_1_ranged_empty_0	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_5_1_ranged_empty_0(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_empty_1	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_empty_1(void)$/;"	f	signature:(void)
test_iterator_workdir__1_ranged_empty_2	tests/iterator/workdir.c	/^void test_iterator_workdir__1_ranged_empty_2(void)$/;"	f	signature:(void)
test_iterator_workdir__advance_into	tests/iterator/workdir.c	/^void test_iterator_workdir__advance_into(void)$/;"	f	signature:(void)
test_iterator_workdir__advance_over	tests/iterator/workdir.c	/^void test_iterator_workdir__advance_over(void)$/;"	f	signature:(void)
test_iterator_workdir__advance_over_with_pathlist	tests/iterator/workdir.c	/^void test_iterator_workdir__advance_over_with_pathlist(void)$/;"	f	signature:(void)
test_iterator_workdir__bounded_submodules	tests/iterator/workdir.c	/^void test_iterator_workdir__bounded_submodules(void)$/;"	f	signature:(void)
test_iterator_workdir__builtin_ignores	tests/iterator/workdir.c	/^void test_iterator_workdir__builtin_ignores(void)$/;"	f	signature:(void)
test_iterator_workdir__cleanup	tests/iterator/workdir.c	/^void test_iterator_workdir__cleanup(void)$/;"	f	signature:(void)
test_iterator_workdir__depth	tests/iterator/workdir.c	/^void test_iterator_workdir__depth(void)$/;"	f	signature:(void)
test_iterator_workdir__filesystem	tests/iterator/workdir.c	/^void test_iterator_workdir__filesystem(void)$/;"	f	signature:(void)
test_iterator_workdir__filesystem2	tests/iterator/workdir.c	/^void test_iterator_workdir__filesystem2(void)$/;"	f	signature:(void)
test_iterator_workdir__filesystem_gunk	tests/iterator/workdir.c	/^void test_iterator_workdir__filesystem_gunk(void)$/;"	f	signature:(void)
test_iterator_workdir__handles_icase_range	tests/iterator/workdir.c	/^void test_iterator_workdir__handles_icase_range(void)$/;"	f	signature:(void)
test_iterator_workdir__icase	tests/iterator/workdir.c	/^void test_iterator_workdir__icase(void)$/;"	f	signature:(void)
test_iterator_workdir__icase_starts_and_ends	tests/iterator/workdir.c	/^void test_iterator_workdir__icase_starts_and_ends(void)$/;"	f	signature:(void)
test_iterator_workdir__initialize	tests/iterator/workdir.c	/^void test_iterator_workdir__initialize(void)$/;"	f	signature:(void)
test_iterator_workdir__pathlist	tests/iterator/workdir.c	/^void test_iterator_workdir__pathlist(void)$/;"	f	signature:(void)
test_iterator_workdir__pathlist_for_deeply_nested_item	tests/iterator/workdir.c	/^void test_iterator_workdir__pathlist_for_deeply_nested_item(void)$/;"	f	signature:(void)
test_iterator_workdir__pathlist_with_directory	tests/iterator/workdir.c	/^void test_iterator_workdir__pathlist_with_directory(void)$/;"	f	signature:(void)
test_iterator_workdir__pathlist_with_directory_include_trees	tests/iterator/workdir.c	/^void test_iterator_workdir__pathlist_with_directory_include_trees(void)$/;"	f	signature:(void)
test_iterator_workdir__pathlist_with_dirs	tests/iterator/workdir.c	/^void test_iterator_workdir__pathlist_with_dirs(void)$/;"	f	signature:(void)
test_iterator_workdir__skips_fifos_and_special_files	tests/iterator/workdir.c	/^void test_iterator_workdir__skips_fifos_and_special_files(void)$/;"	f	signature:(void)
test_iterator_workdir__skips_unreadable_dirs	tests/iterator/workdir.c	/^void test_iterator_workdir__skips_unreadable_dirs(void)$/;"	f	signature:(void)
test_join_unrooted	tests/path/core.c	/^static void test_join_unrooted($/;"	f	file:	signature:( const char *expected_result, ssize_t expected_rootlen, const char *path, const char *base)
test_make_relative	tests/path/core.c	/^static void test_make_relative($/;"	f	file:	signature:( const char *expected_path, const char *path, const char *parent, int expected_status)
test_merge_driver	tests/merge/driver.c	/^struct test_merge_driver {$/;"	s	file:
test_merge_driver::base	tests/merge/driver.c	/^	git_merge_driver base;$/;"	m	struct:test_merge_driver	file:	access:public
test_merge_driver::initialized	tests/merge/driver.c	/^	int initialized;$/;"	m	struct:test_merge_driver	file:	access:public
test_merge_driver::shutdown	tests/merge/driver.c	/^	int shutdown;$/;"	m	struct:test_merge_driver	file:	access:public
test_merge_driver__apply_can_conflict	tests/merge/driver.c	/^void test_merge_driver__apply_can_conflict(void)$/;"	f	signature:(void)
test_merge_driver__apply_can_defer	tests/merge/driver.c	/^void test_merge_driver__apply_can_defer(void)$/;"	f	signature:(void)
test_merge_driver__cleanup	tests/merge/driver.c	/^void test_merge_driver__cleanup(void)$/;"	f	signature:(void)
test_merge_driver__custom	tests/merge/driver.c	/^void test_merge_driver__custom(void)$/;"	f	signature:(void)
test_merge_driver__default_can_be_specified	tests/merge/driver.c	/^void test_merge_driver__default_can_be_specified(void)$/;"	f	signature:(void)
test_merge_driver__honors_builtin_mergedefault	tests/merge/driver.c	/^void test_merge_driver__honors_builtin_mergedefault(void)$/;"	f	signature:(void)
test_merge_driver__honors_custom_mergedefault	tests/merge/driver.c	/^void test_merge_driver__honors_custom_mergedefault(void)$/;"	f	signature:(void)
test_merge_driver__initialize	tests/merge/driver.c	/^void test_merge_driver__initialize(void)$/;"	f	signature:(void)
test_merge_driver__mergedefault_deferring_falls_back_to_text	tests/merge/driver.c	/^void test_merge_driver__mergedefault_deferring_falls_back_to_text(void)$/;"	f	signature:(void)
test_merge_driver__not_configured_driver_falls_back	tests/merge/driver.c	/^void test_merge_driver__not_configured_driver_falls_back(void)$/;"	f	signature:(void)
test_merge_driver__set_forces_text	tests/merge/driver.c	/^void test_merge_driver__set_forces_text(void)$/;"	f	signature:(void)
test_merge_driver__shutdown_is_called	tests/merge/driver.c	/^void test_merge_driver__shutdown_is_called(void)$/;"	f	signature:(void)
test_merge_driver__unset_forces_binary	tests/merge/driver.c	/^void test_merge_driver__unset_forces_binary(void)$/;"	f	signature:(void)
test_merge_driver__wildcard	tests/merge/driver.c	/^void test_merge_driver__wildcard(void)$/;"	f	signature:(void)
test_merge_files__automerge_from_bufs	tests/merge/files.c	/^void test_merge_files__automerge_from_bufs(void)$/;"	f	signature:(void)
test_merge_files__automerge_from_index	tests/merge/files.c	/^void test_merge_files__automerge_from_index(void)$/;"	f	signature:(void)
test_merge_files__automerge_use_best_path_and_mode	tests/merge/files.c	/^void test_merge_files__automerge_use_best_path_and_mode(void)$/;"	f	signature:(void)
test_merge_files__automerge_whitespace_change	tests/merge/files.c	/^void test_merge_files__automerge_whitespace_change(void)$/;"	f	signature:(void)
test_merge_files__automerge_whitespace_eol	tests/merge/files.c	/^void test_merge_files__automerge_whitespace_eol(void)$/;"	f	signature:(void)
test_merge_files__cleanup	tests/merge/files.c	/^void test_merge_files__cleanup(void)$/;"	f	signature:(void)
test_merge_files__conflict_from_bufs	tests/merge/files.c	/^void test_merge_files__conflict_from_bufs(void)$/;"	f	signature:(void)
test_merge_files__doesnt_add_newline	tests/merge/files.c	/^void test_merge_files__doesnt_add_newline(void)$/;"	f	signature:(void)
test_merge_files__handles_binaries_when_favored	tests/merge/files.c	/^void test_merge_files__handles_binaries_when_favored(void)$/;"	f	signature:(void)
test_merge_files__initialize	tests/merge/files.c	/^void test_merge_files__initialize(void)$/;"	f	signature:(void)
test_merge_files__skips_binaries	tests/merge/files.c	/^void test_merge_files__skips_binaries(void)$/;"	f	signature:(void)
test_merge_files__skips_large_files	tests/merge/files.c	/^void test_merge_files__skips_large_files(void)$/;"	f	signature:(void)
test_merge_trees_automerge__automerge	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__automerge(void)$/;"	f	signature:(void)
test_merge_trees_automerge__cleanup	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_automerge__favor_ours	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__favor_ours(void)$/;"	f	signature:(void)
test_merge_trees_automerge__favor_theirs	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__favor_theirs(void)$/;"	f	signature:(void)
test_merge_trees_automerge__initialize	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__initialize(void)$/;"	f	signature:(void)
test_merge_trees_automerge__unrelated	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__unrelated(void)$/;"	f	signature:(void)
test_merge_trees_commits__automerge	tests/merge/trees/commits.c	/^void test_merge_trees_commits__automerge(void)$/;"	f	signature:(void)
test_merge_trees_commits__cleanup	tests/merge/trees/commits.c	/^void test_merge_trees_commits__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_commits__df_conflict	tests/merge/trees/commits.c	/^void test_merge_trees_commits__df_conflict(void)$/;"	f	signature:(void)
test_merge_trees_commits__fail_on_conflict	tests/merge/trees/commits.c	/^void test_merge_trees_commits__fail_on_conflict(void)$/;"	f	signature:(void)
test_merge_trees_commits__initialize	tests/merge/trees/commits.c	/^void test_merge_trees_commits__initialize(void)$/;"	f	signature:(void)
test_merge_trees_commits__no_ancestor	tests/merge/trees/commits.c	/^void test_merge_trees_commits__no_ancestor(void)$/;"	f	signature:(void)
test_merge_trees_modeconflict__cleanup	tests/merge/trees/modeconflict.c	/^void test_merge_trees_modeconflict__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_modeconflict__df_conflict	tests/merge/trees/modeconflict.c	/^void test_merge_trees_modeconflict__df_conflict(void)$/;"	f	signature:(void)
test_merge_trees_modeconflict__initialize	tests/merge/trees/modeconflict.c	/^void test_merge_trees_modeconflict__initialize(void)$/;"	f	signature:(void)
test_merge_trees_recursive__cleanup	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_recursive__conflict	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__conflict(void)$/;"	f	signature:(void)
test_merge_trees_recursive__conflicting_merge_base	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__conflicting_merge_base(void)$/;"	f	signature:(void)
test_merge_trees_recursive__conflicting_merge_base_since_resolved	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__conflicting_merge_base_since_resolved(void)$/;"	f	signature:(void)
test_merge_trees_recursive__conflicting_merge_base_with_diff3	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__conflicting_merge_base_with_diff3(void)$/;"	f	signature:(void)
test_merge_trees_recursive__initialize	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__initialize(void)$/;"	f	signature:(void)
test_merge_trees_recursive__oh_so_many_levels_of_recursion	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__oh_so_many_levels_of_recursion(void)$/;"	f	signature:(void)
test_merge_trees_recursive__one_base_commit	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__one_base_commit(void)$/;"	f	signature:(void)
test_merge_trees_recursive__one_base_commit_norecursive	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__one_base_commit_norecursive(void)$/;"	f	signature:(void)
test_merge_trees_recursive__recursionlimit	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__recursionlimit(void)$/;"	f	signature:(void)
test_merge_trees_recursive__three_base_commits	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__three_base_commits(void)$/;"	f	signature:(void)
test_merge_trees_recursive__three_base_commits_norecursive	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__three_base_commits_norecursive(void)$/;"	f	signature:(void)
test_merge_trees_recursive__three_levels_of_multiple_bases	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__three_levels_of_multiple_bases(void)$/;"	f	signature:(void)
test_merge_trees_recursive__three_levels_of_multiple_bases_norecursive	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__three_levels_of_multiple_bases_norecursive(void)$/;"	f	signature:(void)
test_merge_trees_recursive__two_base_commits	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__two_base_commits(void)$/;"	f	signature:(void)
test_merge_trees_recursive__two_base_commits_norecursive	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__two_base_commits_norecursive(void)$/;"	f	signature:(void)
test_merge_trees_recursive__two_levels_of_multiple_bases	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__two_levels_of_multiple_bases(void)$/;"	f	signature:(void)
test_merge_trees_recursive__two_levels_of_multiple_bases_norecursive	tests/merge/trees/recursive.c	/^void test_merge_trees_recursive__two_levels_of_multiple_bases_norecursive(void)$/;"	f	signature:(void)
test_merge_trees_renames__cleanup	tests/merge/trees/renames.c	/^void test_merge_trees_renames__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_renames__index	tests/merge/trees/renames.c	/^void test_merge_trees_renames__index(void)$/;"	f	signature:(void)
test_merge_trees_renames__initialize	tests/merge/trees/renames.c	/^void test_merge_trees_renames__initialize(void)$/;"	f	signature:(void)
test_merge_trees_renames__no_rename_index	tests/merge/trees/renames.c	/^void test_merge_trees_renames__no_rename_index(void)$/;"	f	signature:(void)
test_merge_trees_treediff__best_renames	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__best_renames(void)$/;"	f	signature:(void)
test_merge_trees_treediff__cleanup	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_treediff__df_conflicts	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__df_conflicts(void)$/;"	f	signature:(void)
test_merge_trees_treediff__initialize	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__initialize(void)$/;"	f	signature:(void)
test_merge_trees_treediff__rename_conflicts	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__rename_conflicts(void)$/;"	f	signature:(void)
test_merge_trees_treediff__simple	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__simple(void)$/;"	f	signature:(void)
test_merge_trees_treediff__strict_renames	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__strict_renames(void)$/;"	f	signature:(void)
test_merge_trees_trivial__10	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__10(void)$/;"	f	signature:(void)
test_merge_trees_trivial__11	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__11(void)$/;"	f	signature:(void)
test_merge_trees_trivial__13	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__13(void)$/;"	f	signature:(void)
test_merge_trees_trivial__14	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__14(void)$/;"	f	signature:(void)
test_merge_trees_trivial__2alt	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__2alt(void)$/;"	f	signature:(void)
test_merge_trees_trivial__3alt	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__3alt(void)$/;"	f	signature:(void)
test_merge_trees_trivial__4	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__4(void)$/;"	f	signature:(void)
test_merge_trees_trivial__5alt_1	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__5alt_1(void)$/;"	f	signature:(void)
test_merge_trees_trivial__5alt_2	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__5alt_2(void)$/;"	f	signature:(void)
test_merge_trees_trivial__6	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__6(void)$/;"	f	signature:(void)
test_merge_trees_trivial__7	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__7(void)$/;"	f	signature:(void)
test_merge_trees_trivial__8	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__8(void)$/;"	f	signature:(void)
test_merge_trees_trivial__9	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__9(void)$/;"	f	signature:(void)
test_merge_trees_trivial__cleanup	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_trivial__initialize	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__initialize(void)$/;"	f	signature:(void)
test_merge_trees_whitespace__change	tests/merge/trees/whitespace.c	/^void test_merge_trees_whitespace__change(void)$/;"	f	signature:(void)
test_merge_trees_whitespace__cleanup	tests/merge/trees/whitespace.c	/^void test_merge_trees_whitespace__cleanup(void)$/;"	f	signature:(void)
test_merge_trees_whitespace__conflict	tests/merge/trees/whitespace.c	/^void test_merge_trees_whitespace__conflict(void)$/;"	f	signature:(void)
test_merge_trees_whitespace__eol	tests/merge/trees/whitespace.c	/^void test_merge_trees_whitespace__eol(void)$/;"	f	signature:(void)
test_merge_trees_whitespace__initialize	tests/merge/trees/whitespace.c	/^void test_merge_trees_whitespace__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__cleanup	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__fastforward	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__fastforward(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__fastforward_with_config_noff	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__fastforward_with_config_noff(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__initialize	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__no_fastforward	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__no_fastforward(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__no_fastforward_with_config_ffonly	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__no_fastforward_with_config_ffonly(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__unborn	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__unborn(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__uptodate	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__uptodate(void)$/;"	f	signature:(void)
test_merge_workdir_analysis__uptodate_merging_prev_commit	tests/merge/workdir/analysis.c	/^void test_merge_workdir_analysis__uptodate_merging_prev_commit(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__affected_dirty_files_disallowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__affected_dirty_files_disallowed(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__cleanup	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__honors_cache	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__honors_cache(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__identical_staged_files_allowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__identical_staged_files_allowed(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__initialize	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__staged_files_in_index_disallowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__staged_files_in_index_disallowed(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__unaffected_dirty_files_allowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__unaffected_dirty_files_allowed(void)$/;"	f	signature:(void)
test_merge_workdir_dirty__unstaged_deletes_maintained	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__unstaged_deletes_maintained(void)$/;"	f	signature:(void)
test_merge_workdir_recursive__cleanup	tests/merge/workdir/recursive.c	/^void test_merge_workdir_recursive__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_recursive__conflicting_merge_base_with_diff3	tests/merge/workdir/recursive.c	/^void test_merge_workdir_recursive__conflicting_merge_base_with_diff3(void)$/;"	f	signature:(void)
test_merge_workdir_recursive__initialize	tests/merge/workdir/recursive.c	/^void test_merge_workdir_recursive__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_recursive__writes_conflict_with_virtual_base	tests/merge/workdir/recursive.c	/^void test_merge_workdir_recursive__writes_conflict_with_virtual_base(void)$/;"	f	signature:(void)
test_merge_workdir_renames__cleanup	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_renames__initialize	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_renames__ours	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__ours(void)$/;"	f	signature:(void)
test_merge_workdir_renames__renames	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__renames(void)$/;"	f	signature:(void)
test_merge_workdir_renames__similar	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__similar(void)$/;"	f	signature:(void)
test_merge_workdir_setup__branches_and_oids_1	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_1(void)$/;"	f	signature:(void)
test_merge_workdir_setup__branches_and_oids_2	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_2(void)$/;"	f	signature:(void)
test_merge_workdir_setup__branches_and_oids_3	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_3(void)$/;"	f	signature:(void)
test_merge_workdir_setup__branches_and_oids_4	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_4(void)$/;"	f	signature:(void)
test_merge_workdir_setup__cleanup	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_setup__head_foreach_nonewline	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_foreach_nonewline(void)$/;"	f	signature:(void)
test_merge_workdir_setup__head_foreach_octopus	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_foreach_octopus(void)$/;"	f	signature:(void)
test_merge_workdir_setup__head_foreach_one	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_foreach_one(void)$/;"	f	signature:(void)
test_merge_workdir_setup__head_invalid_oid	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_invalid_oid(void)$/;"	f	signature:(void)
test_merge_workdir_setup__head_notfound	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_notfound(void)$/;"	f	signature:(void)
test_merge_workdir_setup__id_from_head	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__id_from_head(void)$/;"	f	signature:(void)
test_merge_workdir_setup__initialize	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_setup__normal_branch_and_remote_tracking_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__normal_branch_and_remote_tracking_branch(void)$/;"	f	signature:(void)
test_merge_workdir_setup__one_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__one_branch(void)$/;"	f	signature:(void)
test_merge_workdir_setup__one_oid	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__one_oid(void)$/;"	f	signature:(void)
test_merge_workdir_setup__pull_one	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__pull_one(void)$/;"	f	signature:(void)
test_merge_workdir_setup__pull_three	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__pull_three(void)$/;"	f	signature:(void)
test_merge_workdir_setup__pull_two	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__pull_two(void)$/;"	f	signature:(void)
test_merge_workdir_setup__remote_tracking_branch_and_normal_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_branch_and_normal_branch(void)$/;"	f	signature:(void)
test_merge_workdir_setup__remote_tracking_one_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_one_branch(void)$/;"	f	signature:(void)
test_merge_workdir_setup__remote_tracking_three_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_three_branches(void)$/;"	f	signature:(void)
test_merge_workdir_setup__remote_tracking_two_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_two_branches(void)$/;"	f	signature:(void)
test_merge_workdir_setup__removed_after_failure	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__removed_after_failure(void)$/;"	f	signature:(void)
test_merge_workdir_setup__retained_after_success	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__retained_after_success(void)$/;"	f	signature:(void)
test_merge_workdir_setup__three_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_branches(void)$/;"	f	signature:(void)
test_merge_workdir_setup__three_oids	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_oids(void)$/;"	f	signature:(void)
test_merge_workdir_setup__three_remotes	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_remotes(void)$/;"	f	signature:(void)
test_merge_workdir_setup__three_same_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_same_branches(void)$/;"	f	signature:(void)
test_merge_workdir_setup__three_same_oids	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_same_oids(void)$/;"	f	signature:(void)
test_merge_workdir_setup__two_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__two_branches(void)$/;"	f	signature:(void)
test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches(void)$/;"	f	signature:(void)
test_merge_workdir_setup__two_remotes	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__two_remotes(void)$/;"	f	signature:(void)
test_merge_workdir_setup__unlocked_after_conflict	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__unlocked_after_conflict(void)$/;"	f	signature:(void)
test_merge_workdir_setup__unlocked_after_success	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__unlocked_after_success(void)$/;"	f	signature:(void)
test_merge_workdir_simple__automerge	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__automerge(void)$/;"	f	signature:(void)
test_merge_workdir_simple__automerge_crlf	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__automerge_crlf(void)$/;"	f	signature:(void)
test_merge_workdir_simple__binary	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__binary(void)$/;"	f	signature:(void)
test_merge_workdir_simple__checkout_ours	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__checkout_ours(void)$/;"	f	signature:(void)
test_merge_workdir_simple__cleanup	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_simple__diff3	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__diff3(void)$/;"	f	signature:(void)
test_merge_workdir_simple__diff3_from_config	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__diff3_from_config(void)$/;"	f	signature:(void)
test_merge_workdir_simple__directory_file	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__directory_file(void)$/;"	f	signature:(void)
test_merge_workdir_simple__favor_ours	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__favor_ours(void)$/;"	f	signature:(void)
test_merge_workdir_simple__favor_theirs	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__favor_theirs(void)$/;"	f	signature:(void)
test_merge_workdir_simple__gitattributes_union	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__gitattributes_union(void)$/;"	f	signature:(void)
test_merge_workdir_simple__initialize	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_simple__merge_overrides_config	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__merge_overrides_config(void)$/;"	f	signature:(void)
test_merge_workdir_simple__mergefile	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__mergefile(void)$/;"	f	signature:(void)
test_merge_workdir_simple__union	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__union(void)$/;"	f	signature:(void)
test_merge_workdir_simple__unrelated	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__unrelated(void)$/;"	f	signature:(void)
test_merge_workdir_simple__unrelated_with_conflicts	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__unrelated_with_conflicts(void)$/;"	f	signature:(void)
test_merge_workdir_submodules__automerge	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__automerge(void)$/;"	f	signature:(void)
test_merge_workdir_submodules__cleanup	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_submodules__initialize	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__initialize(void)$/;"	f	signature:(void)
test_merge_workdir_submodules__take_changed	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__take_changed(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__10	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__10(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__11	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__11(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__13	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__13(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__14	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__14(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__2alt	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__2alt(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__3alt	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__3alt(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__4	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__4(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__5alt_1	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__5alt_1(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__5alt_2	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__5alt_2(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__6	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__6(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__7	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__7(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__8	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__8(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__9	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__9(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__cleanup	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__cleanup(void)$/;"	f	signature:(void)
test_merge_workdir_trivial__initialize	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__initialize(void)$/;"	f	signature:(void)
test_names_expected	tests/diff/rename.c	/^int test_names_expected(const git_diff_delta *delta, float progress, void *p)$/;"	f	signature:(const git_diff_delta *delta, float progress, void *p)
test_network_cred__stock_userpass_properly_handles_username_in_url	tests/network/cred.c	/^void test_network_cred__stock_userpass_properly_handles_username_in_url(void)$/;"	f	signature:(void)
test_network_cred__stock_userpass_validates_args	tests/network/cred.c	/^void test_network_cred__stock_userpass_validates_args(void)$/;"	f	signature:(void)
test_network_cred__stock_userpass_validates_that_method_is_allowed	tests/network/cred.c	/^void test_network_cred__stock_userpass_validates_that_method_is_allowed(void)$/;"	f	signature:(void)
test_network_fetchlocal__all_refs	tests/network/fetchlocal.c	/^void test_network_fetchlocal__all_refs(void)$/;"	f	signature:(void)
test_network_fetchlocal__call_progress	tests/network/fetchlocal.c	/^void test_network_fetchlocal__call_progress(void)$/;"	f	signature:(void)
test_network_fetchlocal__cleanup	tests/network/fetchlocal.c	/^void test_network_fetchlocal__cleanup(void)$/;"	f	signature:(void)
test_network_fetchlocal__clone_into_mirror	tests/network/fetchlocal.c	/^void test_network_fetchlocal__clone_into_mirror(void)$/;"	f	signature:(void)
test_network_fetchlocal__complete	tests/network/fetchlocal.c	/^void test_network_fetchlocal__complete(void)$/;"	f	signature:(void)
test_network_fetchlocal__fetchprune	tests/network/fetchlocal.c	/^void test_network_fetchlocal__fetchprune(void)$/;"	f	signature:(void)
test_network_fetchlocal__multi_remotes	tests/network/fetchlocal.c	/^void test_network_fetchlocal__multi_remotes(void)$/;"	f	signature:(void)
test_network_fetchlocal__partial	tests/network/fetchlocal.c	/^void test_network_fetchlocal__partial(void)$/;"	f	signature:(void)
test_network_fetchlocal__prune	tests/network/fetchlocal.c	/^void test_network_fetchlocal__prune(void)$/;"	f	signature:(void)
test_network_fetchlocal__prune_load_fetch_prune_config	tests/network/fetchlocal.c	/^void test_network_fetchlocal__prune_load_fetch_prune_config(void)$/;"	f	signature:(void)
test_network_fetchlocal__prune_load_remote_prune_config	tests/network/fetchlocal.c	/^void test_network_fetchlocal__prune_load_remote_prune_config(void)$/;"	f	signature:(void)
test_network_fetchlocal__prune_overlapping	tests/network/fetchlocal.c	/^void test_network_fetchlocal__prune_overlapping(void)$/;"	f	signature:(void)
test_network_fetchlocal__prune_tag	tests/network/fetchlocal.c	/^void test_network_fetchlocal__prune_tag(void)$/;"	f	signature:(void)
test_network_matchhost__match	tests/network/matchhost.c	/^void test_network_matchhost__match(void)$/;"	f	signature:(void)
test_network_refspecs__invalid	tests/network/refspecs.c	/^void test_network_refspecs__invalid(void)$/;"	f	signature:(void)
test_network_refspecs__invalid_reverse	tests/network/refspecs.c	/^void test_network_refspecs__invalid_reverse(void)$/;"	f	signature:(void)
test_network_refspecs__matching	tests/network/refspecs.c	/^void test_network_refspecs__matching(void)$/;"	f	signature:(void)
test_network_refspecs__parsing	tests/network/refspecs.c	/^void test_network_refspecs__parsing(void)$/;"	f	signature:(void)
test_network_refspecs__transform_mid_star	tests/network/refspecs.c	/^void test_network_refspecs__transform_mid_star(void)$/;"	f	signature:(void)
test_network_remote_createthenload__cleanup	tests/network/remote/createthenload.c	/^void test_network_remote_createthenload__cleanup(void)$/;"	f	signature:(void)
test_network_remote_createthenload__initialize	tests/network/remote/createthenload.c	/^void test_network_remote_createthenload__initialize(void)$/;"	f	signature:(void)
test_network_remote_createthenload__parsing	tests/network/remote/createthenload.c	/^void test_network_remote_createthenload__parsing(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__cleanup	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__cleanup(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__detached_sharing_nonbranch_id	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__detached_sharing_nonbranch_id(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__initialize	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__initialize(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__master	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__master(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__master_does_not_win	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__master_does_not_win(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__master_on_detached	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__master_on_detached(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__no_default_branch	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__no_default_branch(void)$/;"	f	signature:(void)
test_network_remote_defaultbranch__unborn_HEAD_with_branches	tests/network/remote/defaultbranch.c	/^void test_network_remote_defaultbranch__unborn_HEAD_with_branches(void)$/;"	f	signature:(void)
test_network_remote_delete__cleanup	tests/network/remote/delete.c	/^void test_network_remote_delete__cleanup(void)$/;"	f	signature:(void)
test_network_remote_delete__initialize	tests/network/remote/delete.c	/^void test_network_remote_delete__initialize(void)$/;"	f	signature:(void)
test_network_remote_delete__remove_branch_upstream_configuration_settings	tests/network/remote/delete.c	/^void test_network_remote_delete__remove_branch_upstream_configuration_settings(void)$/;"	f	signature:(void)
test_network_remote_delete__remove_remote_configuration_settings	tests/network/remote/delete.c	/^void test_network_remote_delete__remove_remote_configuration_settings(void)$/;"	f	signature:(void)
test_network_remote_delete__remove_remote_tracking_branches	tests/network/remote/delete.c	/^void test_network_remote_delete__remove_remote_tracking_branches(void)$/;"	f	signature:(void)
test_network_remote_isvalidname__can_detect_invalid_formats	tests/network/remote/isvalidname.c	/^void test_network_remote_isvalidname__can_detect_invalid_formats(void)$/;"	f	signature:(void)
test_network_remote_isvalidname__wont_hopefully_choke_on_valid_formats	tests/network/remote/isvalidname.c	/^void test_network_remote_isvalidname__wont_hopefully_choke_on_valid_formats(void)$/;"	f	signature:(void)
test_network_remote_local__cleanup	tests/network/remote/local.c	/^void test_network_remote_local__cleanup(void)$/;"	f	signature:(void)
test_network_remote_local__connected	tests/network/remote/local.c	/^void test_network_remote_local__connected(void)$/;"	f	signature:(void)
test_network_remote_local__fetch	tests/network/remote/local.c	/^void test_network_remote_local__fetch(void)$/;"	f	signature:(void)
test_network_remote_local__fetch_default_reflog_message	tests/network/remote/local.c	/^void test_network_remote_local__fetch_default_reflog_message(void)$/;"	f	signature:(void)
test_network_remote_local__initialize	tests/network/remote/local.c	/^void test_network_remote_local__initialize(void)$/;"	f	signature:(void)
test_network_remote_local__nested_tags_are_completely_peeled	tests/network/remote/local.c	/^void test_network_remote_local__nested_tags_are_completely_peeled(void)$/;"	f	signature:(void)
test_network_remote_local__opportunistic_update	tests/network/remote/local.c	/^void test_network_remote_local__opportunistic_update(void)$/;"	f	signature:(void)
test_network_remote_local__push_delete	tests/network/remote/local.c	/^void test_network_remote_local__push_delete(void)$/;"	f	signature:(void)
test_network_remote_local__push_to_bare_remote	tests/network/remote/local.c	/^void test_network_remote_local__push_to_bare_remote(void)$/;"	f	signature:(void)
test_network_remote_local__push_to_bare_remote_with_file_url	tests/network/remote/local.c	/^void test_network_remote_local__push_to_bare_remote_with_file_url(void)$/;"	f	signature:(void)
test_network_remote_local__push_to_non_bare_remote	tests/network/remote/local.c	/^void test_network_remote_local__push_to_non_bare_remote(void)$/;"	f	signature:(void)
test_network_remote_local__reflog	tests/network/remote/local.c	/^void test_network_remote_local__reflog(void)$/;"	f	signature:(void)
test_network_remote_local__retrieve_advertised_before_connect	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_before_connect(void)$/;"	f	signature:(void)
test_network_remote_local__retrieve_advertised_references	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_references(void)$/;"	f	signature:(void)
test_network_remote_local__retrieve_advertised_references_after_disconnect	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_references_after_disconnect(void)$/;"	f	signature:(void)
test_network_remote_local__retrieve_advertised_references_from_spaced_repository	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_references_from_spaced_repository(void)$/;"	f	signature:(void)
test_network_remote_local__shorthand_fetch_refspec0	tests/network/remote/local.c	/^void test_network_remote_local__shorthand_fetch_refspec0(void)$/;"	f	signature:(void)
test_network_remote_local__shorthand_fetch_refspec1	tests/network/remote/local.c	/^void test_network_remote_local__shorthand_fetch_refspec1(void)$/;"	f	signature:(void)
test_network_remote_local__tagopt	tests/network/remote/local.c	/^void test_network_remote_local__tagopt(void)$/;"	f	signature:(void)
test_network_remote_local__update_tips_for_new_remote	tests/network/remote/local.c	/^void test_network_remote_local__update_tips_for_new_remote(void) {$/;"	f	signature:(void)
test_network_remote_push__cleanup	tests/network/remote/push.c	/^void test_network_remote_push__cleanup(void)$/;"	f	signature:(void)
test_network_remote_push__create_notification	tests/network/remote/push.c	/^void test_network_remote_push__create_notification(void)$/;"	f	signature:(void)
test_network_remote_push__delete_notification	tests/network/remote/push.c	/^void test_network_remote_push__delete_notification(void)$/;"	f	signature:(void)
test_network_remote_push__initialize	tests/network/remote/push.c	/^void test_network_remote_push__initialize(void)$/;"	f	signature:(void)
test_network_remote_remote__git_remote_create_with_fetchspec	tests/network/remote/remotes.c	/^void test_network_remote_remote__git_remote_create_with_fetchspec(void)$/;"	f	signature:(void)
test_network_remote_remotes__add	tests/network/remote/remotes.c	/^void test_network_remote_remotes__add(void)$/;"	f	signature:(void)
test_network_remote_remotes__add_fetchspec	tests/network/remote/remotes.c	/^void test_network_remote_remotes__add_fetchspec(void)$/;"	f	signature:(void)
test_network_remote_remotes__add_pushspec	tests/network/remote/remotes.c	/^void test_network_remote_remotes__add_pushspec(void)$/;"	f	signature:(void)
test_network_remote_remotes__can_load_with_an_empty_url	tests/network/remote/remotes.c	/^void test_network_remote_remotes__can_load_with_an_empty_url(void)$/;"	f	signature:(void)
test_network_remote_remotes__can_load_with_only_an_empty_pushurl	tests/network/remote/remotes.c	/^void test_network_remote_remotes__can_load_with_only_an_empty_pushurl(void)$/;"	f	signature:(void)
test_network_remote_remotes__cannot_add_a_nameless_remote	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_add_a_nameless_remote(void)$/;"	f	signature:(void)
test_network_remote_remotes__cannot_add_a_remote_with_an_invalid_name	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_add_a_remote_with_an_invalid_name(void)$/;"	f	signature:(void)
test_network_remote_remotes__cannot_create_a_remote_which_name_conflicts_with_an_existing_remote	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_create_a_remote_which_name_conflicts_with_an_existing_remote(void)$/;"	f	signature:(void)
test_network_remote_remotes__cannot_create_a_remote_which_name_is_invalid	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_create_a_remote_which_name_is_invalid(void)$/;"	f	signature:(void)
test_network_remote_remotes__cleanup	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cleanup(void)$/;"	f	signature:(void)
test_network_remote_remotes__dup	tests/network/remote/remotes.c	/^void test_network_remote_remotes__dup(void)$/;"	f	signature:(void)
test_network_remote_remotes__error_when_no_push_available	tests/network/remote/remotes.c	/^void test_network_remote_remotes__error_when_no_push_available(void)$/;"	f	signature:(void)
test_network_remote_remotes__error_when_not_found	tests/network/remote/remotes.c	/^void test_network_remote_remotes__error_when_not_found(void)$/;"	f	signature:(void)
test_network_remote_remotes__fnmatch	tests/network/remote/remotes.c	/^void test_network_remote_remotes__fnmatch(void)$/;"	f	signature:(void)
test_network_remote_remotes__initialize	tests/network/remote/remotes.c	/^void test_network_remote_remotes__initialize(void)$/;"	f	signature:(void)
test_network_remote_remotes__list	tests/network/remote/remotes.c	/^void test_network_remote_remotes__list(void)$/;"	f	signature:(void)
test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND	tests/network/remote/remotes.c	/^void test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC	tests/network/remote/remotes.c	/^void test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_network_remote_remotes__missing_refspecs	tests/network/remote/remotes.c	/^void test_network_remote_remotes__missing_refspecs(void)$/;"	f	signature:(void)
test_network_remote_remotes__nonmatch_upstream_refspec	tests/network/remote/remotes.c	/^void test_network_remote_remotes__nonmatch_upstream_refspec(void)$/;"	f	signature:(void)
test_network_remote_remotes__parsing	tests/network/remote/remotes.c	/^void test_network_remote_remotes__parsing(void)$/;"	f	signature:(void)
test_network_remote_remotes__pushurl	tests/network/remote/remotes.c	/^void test_network_remote_remotes__pushurl(void)$/;"	f	signature:(void)
test_network_remote_remotes__query_refspecs	tests/network/remote/remotes.c	/^void test_network_remote_remotes__query_refspecs(void)$/;"	f	signature:(void)
test_network_remote_remotes__refspec_parsing	tests/network/remote/remotes.c	/^void test_network_remote_remotes__refspec_parsing(void)$/;"	f	signature:(void)
test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl	tests/network/remote/remotes.c	/^void test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl(void)$/;"	f	signature:(void)
test_network_remote_remotes__tagopt	tests/network/remote/remotes.c	/^void test_network_remote_remotes__tagopt(void)$/;"	f	signature:(void)
test_network_remote_remotes__transform	tests/network/remote/remotes.c	/^void test_network_remote_remotes__transform(void)$/;"	f	signature:(void)
test_network_remote_remotes__transform_destination_to_source	tests/network/remote/remotes.c	/^void test_network_remote_remotes__transform_destination_to_source(void)$/;"	f	signature:(void)
test_network_remote_rename__cannot_overwrite_an_existing_remote	tests/network/remote/rename.c	/^void test_network_remote_rename__cannot_overwrite_an_existing_remote(void)$/;"	f	signature:(void)
test_network_remote_rename__cleanup	tests/network/remote/rename.c	/^void test_network_remote_rename__cleanup(void)$/;"	f	signature:(void)
test_network_remote_rename__initialize	tests/network/remote/rename.c	/^void test_network_remote_rename__initialize(void)$/;"	f	signature:(void)
test_network_remote_rename__new_name_can_contain_dots	tests/network/remote/rename.c	/^void test_network_remote_rename__new_name_can_contain_dots(void)$/;"	f	signature:(void)
test_network_remote_rename__new_name_must_conform_to_reference_naming_conventions	tests/network/remote/rename.c	/^void test_network_remote_rename__new_name_must_conform_to_reference_naming_conventions(void)$/;"	f	signature:(void)
test_network_remote_rename__nonexistent_returns_enotfound	tests/network/remote/rename.c	/^void test_network_remote_rename__nonexistent_returns_enotfound(void)$/;"	f	signature:(void)
test_network_remote_rename__overwrite_ref_in_target	tests/network/remote/rename.c	/^void test_network_remote_rename__overwrite_ref_in_target(void)$/;"	f	signature:(void)
test_network_remote_rename__renamed_name_is_persisted	tests/network/remote/rename.c	/^void test_network_remote_rename__renamed_name_is_persisted(void)$/;"	f	signature:(void)
test_network_remote_rename__renaming_a_remote_moves_related_configuration_section	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_moves_related_configuration_section(void)$/;"	f	signature:(void)
test_network_remote_rename__renaming_a_remote_moves_the_underlying_reference	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_moves_the_underlying_reference(void)$/;"	f	signature:(void)
test_network_remote_rename__renaming_a_remote_notifies_of_non_default_fetchrefspec	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_notifies_of_non_default_fetchrefspec(void)$/;"	f	signature:(void)
test_network_remote_rename__renaming_a_remote_updates_branch_related_configuration_entries	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_updates_branch_related_configuration_entries(void)$/;"	f	signature:(void)
test_network_remote_rename__renaming_a_remote_updates_default_fetchrefspec	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_updates_default_fetchrefspec(void)$/;"	f	signature:(void)
test_network_remote_rename__renaming_a_remote_without_a_fetchrefspec_doesnt_create_one	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_without_a_fetchrefspec_doesnt_create_one(void)$/;"	f	signature:(void)
test_network_remote_rename__symref_head	tests/network/remote/rename.c	/^void test_network_remote_rename__symref_head(void)$/;"	f	signature:(void)
test_network_urlparse__cleanup	tests/network/urlparse.c	/^void test_network_urlparse__cleanup(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_cleanup	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_cleanup(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_cross_host_redirect	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_cross_host_redirect(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_http	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_http(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_http_downgrade	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_http_downgrade(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_relative_redirect	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_relative_redirect(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_relative_redirect_ssl	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_relative_redirect_ssl(void)$/;"	f	signature:(void)
test_network_urlparse__connection_data_ssl	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_ssl(void)$/;"	f	signature:(void)
test_network_urlparse__encoded_password	tests/network/urlparse.c	/^void test_network_urlparse__encoded_password(void)$/;"	f	signature:(void)
test_network_urlparse__encoded_username_password	tests/network/urlparse.c	/^void test_network_urlparse__encoded_username_password(void)$/;"	f	signature:(void)
test_network_urlparse__initialize	tests/network/urlparse.c	/^void test_network_urlparse__initialize(void)$/;"	f	signature:(void)
test_network_urlparse__just_hostname	tests/network/urlparse.c	/^void test_network_urlparse__just_hostname(void)$/;"	f	signature:(void)
test_network_urlparse__optional_path	tests/network/urlparse.c	/^void test_network_urlparse__optional_path(void)$/;"	f	signature:(void)
test_network_urlparse__port	tests/network/urlparse.c	/^void test_network_urlparse__port(void)$/;"	f	signature:(void)
test_network_urlparse__root	tests/network/urlparse.c	/^void test_network_urlparse__root(void)$/;"	f	signature:(void)
test_network_urlparse__trivial	tests/network/urlparse.c	/^void test_network_urlparse__trivial(void)$/;"	f	signature:(void)
test_network_urlparse__user	tests/network/urlparse.c	/^void test_network_urlparse__user(void)$/;"	f	signature:(void)
test_network_urlparse__user_pass	tests/network/urlparse.c	/^void test_network_urlparse__user_pass(void)$/;"	f	signature:(void)
test_network_urlparse__user_pass_port	tests/network/urlparse.c	/^void test_network_urlparse__user_pass_port(void)$/;"	f	signature:(void)
test_network_urlparse__user_port	tests/network/urlparse.c	/^void test_network_urlparse__user_port(void)$/;"	f	signature:(void)
test_notes_notes__can_cancel_foreach	tests/notes/notes.c	/^void test_notes_notes__can_cancel_foreach(void)$/;"	f	signature:(void)
test_notes_notes__can_insert_a_note_in_an_existing_fanout	tests/notes/notes.c	/^void test_notes_notes__can_insert_a_note_in_an_existing_fanout(void)$/;"	f	signature:(void)
test_notes_notes__can_insert_a_note_with_a_custom_namespace	tests/notes/notes.c	/^void test_notes_notes__can_insert_a_note_with_a_custom_namespace(void)$/;"	f	signature:(void)
test_notes_notes__can_iterate_custom_namespace	tests/notes/notes.c	/^void test_notes_notes__can_iterate_custom_namespace(void)$/;"	f	signature:(void)
test_notes_notes__can_iterate_default_namespace	tests/notes/notes.c	/^void test_notes_notes__can_iterate_default_namespace(void)$/;"	f	signature:(void)
test_notes_notes__can_read_a_note_in_an_existing_fanout	tests/notes/notes.c	/^void test_notes_notes__can_read_a_note_in_an_existing_fanout(void)$/;"	f	signature:(void)
test_notes_notes__can_remove_a_note_in_an_existing_fanout	tests/notes/notes.c	/^void test_notes_notes__can_remove_a_note_in_an_existing_fanout(void)$/;"	f	signature:(void)
test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace	tests/notes/notes.c	/^void test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace(void)$/;"	f	signature:(void)
test_notes_notes__cleanup	tests/notes/notes.c	/^void test_notes_notes__cleanup(void)$/;"	f	signature:(void)
test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note	tests/notes/notes.c	/^void test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note(void)$/;"	f	signature:(void)
test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS	tests/notes/notes.c	/^void test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS(void)$/;"	f	signature:(void)
test_notes_notes__empty_iterate	tests/notes/notes.c	/^void test_notes_notes__empty_iterate(void)$/;"	f	signature:(void)
test_notes_notes__initialize	tests/notes/notes.c	/^void test_notes_notes__initialize(void)$/;"	f	signature:(void)
test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace	tests/notes/notes.c	/^void test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace(void)$/;"	f	signature:(void)
test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND	tests/notes/notes.c	/^void test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND	tests/notes/notes.c	/^void test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_notes_notesref__cleanup	tests/notes/notesref.c	/^void test_notes_notesref__cleanup(void)$/;"	f	signature:(void)
test_notes_notesref__config_corenotesref	tests/notes/notesref.c	/^void test_notes_notesref__config_corenotesref(void)$/;"	f	signature:(void)
test_notes_notesref__initialize	tests/notes/notesref.c	/^void test_notes_notesref__initialize(void)$/;"	f	signature:(void)
test_notify	tests/diff/notify.c	/^static void test_notify($/;"	f	file:	signature:( char **searched_pathspecs, int pathspecs_count, notify_expected *expected_matched_pathspecs, int expected_diffed_files_count)
test_number	tests/clar.c	/^	int test_number;$/;"	m	struct:clar_error	file:	access:public
test_object	tests/refs/revparse.c	/^static void test_object(const char *spec, const char *expected_oid)$/;"	f	file:	signature:(const char *spec, const char *expected_oid)
test_object_and_ref	tests/refs/revparse.c	/^static void test_object_and_ref(const char *spec, const char *expected_oid, const char *expected_refname)$/;"	f	file:	signature:(const char *spec, const char *expected_oid, const char *expected_refname)
test_object_and_ref_inrepo	tests/refs/revparse.c	/^static void test_object_and_ref_inrepo($/;"	f	file:	signature:( const char *spec, const char *expected_oid, const char *expected_refname, git_repository *repo, bool assert_reference_retrieval)
test_object_blob_filter__cleanup	tests/object/blob/filter.c	/^void test_object_blob_filter__cleanup(void)$/;"	f	signature:(void)
test_object_blob_filter__initialize	tests/object/blob/filter.c	/^void test_object_blob_filter__initialize(void)$/;"	f	signature:(void)
test_object_blob_filter__stats	tests/object/blob/filter.c	/^void test_object_blob_filter__stats(void)$/;"	f	signature:(void)
test_object_blob_filter__to_odb	tests/object/blob/filter.c	/^void test_object_blob_filter__to_odb(void)$/;"	f	signature:(void)
test_object_blob_filter__unfiltered	tests/object/blob/filter.c	/^void test_object_blob_filter__unfiltered(void)$/;"	f	signature:(void)
test_object_blob_fromstream__cleanup	tests/object/blob/fromstream.c	/^void test_object_blob_fromstream__cleanup(void)$/;"	f	signature:(void)
test_object_blob_fromstream__creating_a_blob_from_chunks_honors_the_attributes_directives	tests/object/blob/fromstream.c	/^void test_object_blob_fromstream__creating_a_blob_from_chunks_honors_the_attributes_directives(void)$/;"	f	signature:(void)
test_object_blob_fromstream__initialize	tests/object/blob/fromstream.c	/^void test_object_blob_fromstream__initialize(void)$/;"	f	signature:(void)
test_object_blob_fromstream__multiple_write	tests/object/blob/fromstream.c	/^void test_object_blob_fromstream__multiple_write(void)$/;"	f	signature:(void)
test_object_blob_write__can_create_a_blob_in_a_bare_repo_from_a_absolute_filepath	tests/object/blob/write.c	/^void test_object_blob_write__can_create_a_blob_in_a_bare_repo_from_a_absolute_filepath(void)$/;"	f	signature:(void)
test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_absolute_filepath_pointing_outside_of_the_working_directory	tests/object/blob/write.c	/^void test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_absolute_filepath_pointing_outside_of_the_working_directory(void)$/;"	f	signature:(void)
test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_file_located_in_the_working_directory	tests/object/blob/write.c	/^void test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_file_located_in_the_working_directory(void)$/;"	f	signature:(void)
test_object_blob_write__cleanup	tests/object/blob/write.c	/^void test_object_blob_write__cleanup(void)$/;"	f	signature:(void)
test_object_cache__cache_everything	tests/object/cache.c	/^void test_object_cache__cache_everything(void)$/;"	f	signature:(void)
test_object_cache__cache_no_blobs	tests/object/cache.c	/^void test_object_cache__cache_no_blobs(void)$/;"	f	signature:(void)
test_object_cache__cleanup	tests/object/cache.c	/^void test_object_cache__cleanup(void)$/;"	f	signature:(void)
test_object_cache__fast_thread_rush	tests/object/cache.c	/^void test_object_cache__fast_thread_rush(void)$/;"	f	signature:(void)
test_object_cache__initialize	tests/object/cache.c	/^void test_object_cache__initialize(void)$/;"	f	signature:(void)
test_object_cache__threadmania	tests/object/cache.c	/^void test_object_cache__threadmania(void)$/;"	f	signature:(void)
test_object_commit_commitstagedfile__amend_commit	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__amend_commit(void)$/;"	f	signature:(void)
test_object_commit_commitstagedfile__cleanup	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__cleanup(void)$/;"	f	signature:(void)
test_object_commit_commitstagedfile__generate_predictable_object_ids	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__generate_predictable_object_ids(void)$/;"	f	signature:(void)
test_object_commit_commitstagedfile__initialize	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__initialize(void)$/;"	f	signature:(void)
test_object_inrepo	tests/refs/revparse.c	/^static void test_object_inrepo(const char *spec, const char *expected_oid, git_repository *repo)$/;"	f	file:	signature:(const char *spec, const char *expected_oid, git_repository *repo)
test_object_lookup__cleanup	tests/object/lookup.c	/^void test_object_lookup__cleanup(void)$/;"	f	signature:(void)
test_object_lookup__initialize	tests/object/lookup.c	/^void test_object_lookup__initialize(void)$/;"	f	signature:(void)
test_object_lookup__lookup_nonexisting_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_nonexisting_returns_enotfound(void)$/;"	f	signature:(void)
test_object_lookup__lookup_wrong_type_by_abbreviated_id_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_wrong_type_by_abbreviated_id_returns_enotfound(void)$/;"	f	signature:(void)
test_object_lookup__lookup_wrong_type_eventually_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_wrong_type_eventually_returns_enotfound(void)$/;"	f	signature:(void)
test_object_lookup__lookup_wrong_type_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_wrong_type_returns_enotfound(void)$/;"	f	signature:(void)
test_object_lookupbypath__cleanup	tests/object/lookupbypath.c	/^void test_object_lookupbypath__cleanup(void)$/;"	f	signature:(void)
test_object_lookupbypath__errors	tests/object/lookupbypath.c	/^void test_object_lookupbypath__errors(void)$/;"	f	signature:(void)
test_object_lookupbypath__from_head_commit	tests/object/lookupbypath.c	/^void test_object_lookupbypath__from_head_commit(void)$/;"	f	signature:(void)
test_object_lookupbypath__from_root_tree	tests/object/lookupbypath.c	/^void test_object_lookupbypath__from_root_tree(void)$/;"	f	signature:(void)
test_object_lookupbypath__from_subdir_tree	tests/object/lookupbypath.c	/^void test_object_lookupbypath__from_subdir_tree(void)$/;"	f	signature:(void)
test_object_lookupbypath__initialize	tests/object/lookupbypath.c	/^void test_object_lookupbypath__initialize(void)$/;"	f	signature:(void)
test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed	tests/object/message.c	/^void test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed(void)$/;"	f	signature:(void)
test_object_message__consecutive_blank_lines_at_the_end_should_be_removed	tests/object/message.c	/^void test_object_message__consecutive_blank_lines_at_the_end_should_be_removed(void)$/;"	f	signature:(void)
test_object_message__consecutive_blank_lines_should_be_unified	tests/object/message.c	/^void test_object_message__consecutive_blank_lines_should_be_unified(void)$/;"	f	signature:(void)
test_object_message__consecutive_text_lines_should_be_unchanged	tests/object/message.c	/^void test_object_message__consecutive_text_lines_should_be_unchanged(void)$/;"	f	signature:(void)
test_object_message__keep_comments	tests/object/message.c	/^void test_object_message__keep_comments(void)$/;"	f	signature:(void)
test_object_message__lines_with_intermediate_spaces_should_be_unchanged	tests/object/message.c	/^void test_object_message__lines_with_intermediate_spaces_should_be_unchanged(void)$/;"	f	signature:(void)
test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged	tests/object/message.c	/^void test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged(void)$/;"	f	signature:(void)
test_object_message__long_lines_without_spaces_should_be_unchanged	tests/object/message.c	/^void test_object_message__long_lines_without_spaces_should_be_unchanged(void)$/;"	f	signature:(void)
test_object_message__message_prettify	tests/object/message.c	/^void test_object_message__message_prettify(void)$/;"	f	signature:(void)
test_object_message__only_consecutive_blank_lines_should_be_completely_removed	tests/object/message.c	/^void test_object_message__only_consecutive_blank_lines_should_be_completely_removed(void)$/;"	f	signature:(void)
test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string	tests/object/message.c	/^void test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string(void)$/;"	f	signature:(void)
test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string	tests/object/message.c	/^void test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string(void)$/;"	f	signature:(void)
test_object_message__strip_comments	tests/object/message.c	/^void test_object_message__strip_comments(void)$/;"	f	signature:(void)
test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain	tests/object/message.c	/^void test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain(void){$/;"	f	signature:(void)
test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline	tests/object/message.c	/^void test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline(void)$/;"	f	signature:(void)
test_object_message__text_without_newline_at_end_should_end_with_newline	tests/object/message.c	/^void test_object_message__text_without_newline_at_end_should_end_with_newline(void)$/;"	f	signature:(void)
test_object_peel__blob	tests/object/peel.c	/^void test_object_peel__blob(void)$/;"	f	signature:(void)
test_object_peel__cleanup	tests/object/peel.c	/^void test_object_peel__cleanup(void)$/;"	f	signature:(void)
test_object_peel__commit	tests/object/peel.c	/^void test_object_peel__commit(void)$/;"	f	signature:(void)
test_object_peel__initialize	tests/object/peel.c	/^void test_object_peel__initialize(void)$/;"	f	signature:(void)
test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it	tests/object/peel.c	/^void test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it(void)$/;"	f	signature:(void)
test_object_peel__tag	tests/object/peel.c	/^void test_object_peel__tag(void)$/;"	f	signature:(void)
test_object_peel__target_any_object_for_type_change	tests/object/peel.c	/^void test_object_peel__target_any_object_for_type_change(void)$/;"	f	signature:(void)
test_object_peel__tree	tests/object/peel.c	/^void test_object_peel__tree(void)$/;"	f	signature:(void)
test_object_raw_chars__build_valid_oid_from_raw_bytes	tests/object/raw/chars.c	/^void test_object_raw_chars__build_valid_oid_from_raw_bytes(void)$/;"	f	signature:(void)
test_object_raw_chars__find_invalid_chars_in_oid	tests/object/raw/chars.c	/^void test_object_raw_chars__find_invalid_chars_in_oid(void)$/;"	f	signature:(void)
test_object_raw_compare__compare_fmt_oids	tests/object/raw/compare.c	/^void test_object_raw_compare__compare_fmt_oids(void)$/;"	f	signature:(void)
test_object_raw_compare__compare_pathfmt_oids	tests/object/raw/compare.c	/^void test_object_raw_compare__compare_pathfmt_oids(void)$/;"	f	signature:(void)
test_object_raw_compare__compare_static_oids	tests/object/raw/compare.c	/^void test_object_raw_compare__compare_static_oids(void)$/;"	f	signature:(void)
test_object_raw_compare__succeed_on_copy_oid	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_copy_oid(void)$/;"	f	signature:(void)
test_object_raw_compare__succeed_on_oid_comparison_equal	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_oid_comparison_equal(void)$/;"	f	signature:(void)
test_object_raw_compare__succeed_on_oid_comparison_greater	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_oid_comparison_greater(void)$/;"	f	signature:(void)
test_object_raw_compare__succeed_on_oid_comparison_lesser	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_oid_comparison_lesser(void)$/;"	f	signature:(void)
test_object_raw_convert__convert_oid_partially	tests/object/raw/convert.c	/^void test_object_raw_convert__convert_oid_partially(void)$/;"	f	signature:(void)
test_object_raw_convert__succeed_on_oid_to_string_conversion	tests/object/raw/convert.c	/^void test_object_raw_convert__succeed_on_oid_to_string_conversion(void)$/;"	f	signature:(void)
test_object_raw_convert__succeed_on_oid_to_string_conversion_big	tests/object/raw/convert.c	/^void test_object_raw_convert__succeed_on_oid_to_string_conversion_big(void)$/;"	f	signature:(void)
test_object_raw_fromstr__fail_on_invalid_oid_string	tests/object/raw/fromstr.c	/^void test_object_raw_fromstr__fail_on_invalid_oid_string(void)$/;"	f	signature:(void)
test_object_raw_fromstr__succeed_on_valid_oid_string	tests/object/raw/fromstr.c	/^void test_object_raw_fromstr__succeed_on_valid_oid_string(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_buffer_in_single_call	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_buffer_in_single_call(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_by_blocks	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_by_blocks(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_commit_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_commit_object(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_junk_data	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_junk_data(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_multi_byte_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_multi_byte_object(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_one_byte_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_one_byte_object(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_tag_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_tag_object(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_tree_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_tree_object(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_two_byte_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_two_byte_object(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_vector	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_vector(void)$/;"	f	signature:(void)
test_object_raw_hash__hash_zero_length_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_zero_length_object(void)$/;"	f	signature:(void)
test_object_raw_short__oid_shortener_no_duplicates	tests/object/raw/short.c	/^void test_object_raw_short__oid_shortener_no_duplicates(void)$/;"	f	signature:(void)
test_object_raw_short__oid_shortener_stresstest_git_oid_shorten	tests/object/raw/short.c	/^void test_object_raw_short__oid_shortener_stresstest_git_oid_shorten(void)$/;"	f	signature:(void)
test_object_raw_short__oid_shortener_too_much_oids	tests/object/raw/short.c	/^void test_object_raw_short__oid_shortener_too_much_oids(void)$/;"	f	signature:(void)
test_object_raw_size__validate_oid_size	tests/object/raw/size.c	/^void test_object_raw_size__validate_oid_size(void)$/;"	f	signature:(void)
test_object_raw_type2string__check_type_is_loose	tests/object/raw/type2string.c	/^void test_object_raw_type2string__check_type_is_loose(void)$/;"	f	signature:(void)
test_object_raw_type2string__convert_string_to_type	tests/object/raw/type2string.c	/^void test_object_raw_type2string__convert_string_to_type(void)$/;"	f	signature:(void)
test_object_raw_type2string__convert_type_to_string	tests/object/raw/type2string.c	/^void test_object_raw_type2string__convert_type_to_string(void)$/;"	f	signature:(void)
test_object_raw_write__loose_object	tests/object/raw/write.c	/^void test_object_raw_write__loose_object(void)$/;"	f	signature:(void)
test_object_raw_write__loose_tag	tests/object/raw/write.c	/^void test_object_raw_write__loose_tag(void)$/;"	f	signature:(void)
test_object_raw_write__loose_tree	tests/object/raw/write.c	/^void test_object_raw_write__loose_tree(void)$/;"	f	signature:(void)
test_object_raw_write__one_byte	tests/object/raw/write.c	/^void test_object_raw_write__one_byte(void)$/;"	f	signature:(void)
test_object_raw_write__several_bytes	tests/object/raw/write.c	/^void test_object_raw_write__several_bytes(void)$/;"	f	signature:(void)
test_object_raw_write__two_byte	tests/object/raw/write.c	/^void test_object_raw_write__two_byte(void)$/;"	f	signature:(void)
test_object_raw_write__zero_length	tests/object/raw/write.c	/^void test_object_raw_write__zero_length(void)$/;"	f	signature:(void)
test_object_shortid__cleanup	tests/object/shortid.c	/^void test_object_shortid__cleanup(void)$/;"	f	signature:(void)
test_object_shortid__initialize	tests/object/shortid.c	/^void test_object_shortid__initialize(void)$/;"	f	signature:(void)
test_object_shortid__select	tests/object/shortid.c	/^void test_object_shortid__select(void)$/;"	f	signature:(void)
test_object_tag_list__cleanup	tests/object/tag/list.c	/^void test_object_tag_list__cleanup(void)$/;"	f	signature:(void)
test_object_tag_list__initialize	tests/object/tag/list.c	/^void test_object_tag_list__initialize(void)$/;"	f	signature:(void)
test_object_tag_list__list_all	tests/object/tag/list.c	/^void test_object_tag_list__list_all(void)$/;"	f	signature:(void)
test_object_tag_list__list_by_pattern	tests/object/tag/list.c	/^void test_object_tag_list__list_by_pattern(void)$/;"	f	signature:(void)
test_object_tag_peel__can_peel_several_nested_tags_to_a_commit	tests/object/tag/peel.c	/^void test_object_tag_peel__can_peel_several_nested_tags_to_a_commit(void)$/;"	f	signature:(void)
test_object_tag_peel__can_peel_to_a_commit	tests/object/tag/peel.c	/^void test_object_tag_peel__can_peel_to_a_commit(void)$/;"	f	signature:(void)
test_object_tag_peel__can_peel_to_a_non_commit	tests/object/tag/peel.c	/^void test_object_tag_peel__can_peel_to_a_non_commit(void)$/;"	f	signature:(void)
test_object_tag_peel__cleanup	tests/object/tag/peel.c	/^void test_object_tag_peel__cleanup(void)$/;"	f	signature:(void)
test_object_tag_peel__initialize	tests/object/tag/peel.c	/^void test_object_tag_peel__initialize(void)$/;"	f	signature:(void)
test_object_tag_read__cleanup	tests/object/tag/read.c	/^void test_object_tag_read__cleanup(void)$/;"	f	signature:(void)
test_object_tag_read__extra_header_fields	tests/object/tag/read.c	/^void test_object_tag_read__extra_header_fields(void)$/;"	f	signature:(void)
test_object_tag_read__initialize	tests/object/tag/read.c	/^void test_object_tag_read__initialize(void)$/;"	f	signature:(void)
test_object_tag_read__parse	tests/object/tag/read.c	/^void test_object_tag_read__parse(void)$/;"	f	signature:(void)
test_object_tag_read__parse_without_message	tests/object/tag/read.c	/^void test_object_tag_read__parse_without_message(void)$/;"	f	signature:(void)
test_object_tag_read__parse_without_tagger	tests/object/tag/read.c	/^void test_object_tag_read__parse_without_tagger(void)$/;"	f	signature:(void)
test_object_tag_read__without_tagger_nor_message	tests/object/tag/read.c	/^void test_object_tag_read__without_tagger_nor_message(void)$/;"	f	signature:(void)
test_object_tag_write__basic	tests/object/tag/write.c	/^void test_object_tag_write__basic(void)$/;"	f	signature:(void)
test_object_tag_write__cleanup	tests/object/tag/write.c	/^void test_object_tag_write__cleanup(void)$/;"	f	signature:(void)
test_object_tag_write__creating_an_annotation_does_not_create_a_reference	tests/object/tag/write.c	/^void test_object_tag_write__creating_an_annotation_does_not_create_a_reference(void)$/;"	f	signature:(void)
test_object_tag_write__creating_an_annotation_stores_the_new_object_in_the_odb	tests/object/tag/write.c	/^void test_object_tag_write__creating_an_annotation_stores_the_new_object_in_the_odb(void)$/;"	f	signature:(void)
test_object_tag_write__creating_with_an_invalid_name_returns_EINVALIDSPEC	tests/object/tag/write.c	/^void test_object_tag_write__creating_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_object_tag_write__delete	tests/object/tag/write.c	/^void test_object_tag_write__delete(void)$/;"	f	signature:(void)
test_object_tag_write__deleting_with_an_invalid_name_returns_EINVALIDSPEC	tests/object/tag/write.c	/^void test_object_tag_write__deleting_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_object_tag_write__initialize	tests/object/tag/write.c	/^void test_object_tag_write__initialize(void)$/;"	f	signature:(void)
test_object_tag_write__lightweight	tests/object/tag/write.c	/^void test_object_tag_write__lightweight(void)$/;"	f	signature:(void)
test_object_tag_write__lightweight_over_existing	tests/object/tag/write.c	/^void test_object_tag_write__lightweight_over_existing(void)$/;"	f	signature:(void)
test_object_tag_write__overwrite	tests/object/tag/write.c	/^void test_object_tag_write__overwrite(void)$/;"	f	signature:(void)
test_object_tag_write__replace	tests/object/tag/write.c	/^void test_object_tag_write__replace(void)$/;"	f	signature:(void)
test_object_tree_attributes__cleanup	tests/object/tree/attributes.c	/^void test_object_tree_attributes__cleanup(void)$/;"	f	signature:(void)
test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion	tests/object/tree/attributes.c	/^void test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion(void)$/;"	f	signature:(void)
test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed	tests/object/tree/attributes.c	/^void test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed(void)$/;"	f	signature:(void)
test_object_tree_attributes__initialize	tests/object/tree/attributes.c	/^void test_object_tree_attributes__initialize(void)$/;"	f	signature:(void)
test_object_tree_attributes__normalize_600	tests/object/tree/attributes.c	/^void test_object_tree_attributes__normalize_600(void)$/;"	f	signature:(void)
test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one	tests/object/tree/attributes.c	/^void test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one(void)$/;"	f	signature:(void)
test_object_tree_attributes__treebuilder_reject_invalid_filemode	tests/object/tree/attributes.c	/^void test_object_tree_attributes__treebuilder_reject_invalid_filemode(void)$/;"	f	signature:(void)
test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts(void)$/;"	f	signature:(void)
test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder(void)$/;"	f	signature:(void)
test_object_tree_duplicateentries__cleanup	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__cleanup(void) {$/;"	f	signature:(void)
test_object_tree_duplicateentries__initialize	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__initialize(void) {$/;"	f	signature:(void)
test_object_tree_frompath__cleanup	tests/object/tree/frompath.c	/^void test_object_tree_frompath__cleanup(void)$/;"	f	signature:(void)
test_object_tree_frompath__fail_when_processing_an_invalid_path	tests/object/tree/frompath.c	/^void test_object_tree_frompath__fail_when_processing_an_invalid_path(void)$/;"	f	signature:(void)
test_object_tree_frompath__initialize	tests/object/tree/frompath.c	/^void test_object_tree_frompath__initialize(void)$/;"	f	signature:(void)
test_object_tree_frompath__retrieve_tree_from_path_to_treeentry	tests/object/tree/frompath.c	/^void test_object_tree_frompath__retrieve_tree_from_path_to_treeentry(void)$/;"	f	signature:(void)
test_object_tree_read__cleanup	tests/object/tree/read.c	/^void test_object_tree_read__cleanup(void)$/;"	f	signature:(void)
test_object_tree_read__initialize	tests/object/tree/read.c	/^void test_object_tree_read__initialize(void)$/;"	f	signature:(void)
test_object_tree_read__loaded	tests/object/tree/read.c	/^void test_object_tree_read__loaded(void)$/;"	f	signature:(void)
test_object_tree_read__two	tests/object/tree/read.c	/^void test_object_tree_read__two(void)$/;"	f	signature:(void)
test_object_tree_update__add_blobs	tests/object/tree/update.c	/^void test_object_tree_update__add_blobs(void)$/;"	f	signature:(void)
test_object_tree_update__add_blobs_unsorted	tests/object/tree/update.c	/^void test_object_tree_update__add_blobs_unsorted(void)$/;"	f	signature:(void)
test_object_tree_update__add_conflict	tests/object/tree/update.c	/^void test_object_tree_update__add_conflict(void)$/;"	f	signature:(void)
test_object_tree_update__add_conflict2	tests/object/tree/update.c	/^void test_object_tree_update__add_conflict2(void)$/;"	f	signature:(void)
test_object_tree_update__cleanup	tests/object/tree/update.c	/^void test_object_tree_update__cleanup(void)$/;"	f	signature:(void)
test_object_tree_update__initialize	tests/object/tree/update.c	/^void test_object_tree_update__initialize(void)$/;"	f	signature:(void)
test_object_tree_update__remove_all_entries	tests/object/tree/update.c	/^void test_object_tree_update__remove_all_entries(void)$/;"	f	signature:(void)
test_object_tree_update__remove_blob	tests/object/tree/update.c	/^void test_object_tree_update__remove_blob(void)$/;"	f	signature:(void)
test_object_tree_update__remove_blob_deeper	tests/object/tree/update.c	/^void test_object_tree_update__remove_blob_deeper(void)$/;"	f	signature:(void)
test_object_tree_update__replace_blob	tests/object/tree/update.c	/^void test_object_tree_update__replace_blob(void)$/;"	f	signature:(void)
test_object_tree_walk__0	tests/object/tree/walk.c	/^void test_object_tree_walk__0(void)$/;"	f	signature:(void)
test_object_tree_walk__1	tests/object/tree/walk.c	/^void test_object_tree_walk__1(void)$/;"	f	signature:(void)
test_object_tree_walk__2	tests/object/tree/walk.c	/^void test_object_tree_walk__2(void)$/;"	f	signature:(void)
test_object_tree_walk__cleanup	tests/object/tree/walk.c	/^void test_object_tree_walk__cleanup(void)$/;"	f	signature:(void)
test_object_tree_walk__initialize	tests/object/tree/walk.c	/^void test_object_tree_walk__initialize(void)$/;"	f	signature:(void)
test_object_tree_write__cleanup	tests/object/tree/write.c	/^void test_object_tree_write__cleanup(void)$/;"	f	signature:(void)
test_object_tree_write__cruel_paths	tests/object/tree/write.c	/^void test_object_tree_write__cruel_paths(void)$/;"	f	signature:(void)
test_object_tree_write__filtering	tests/object/tree/write.c	/^void test_object_tree_write__filtering(void)$/;"	f	signature:(void)
test_object_tree_write__from_memory	tests/object/tree/write.c	/^void test_object_tree_write__from_memory(void)$/;"	f	signature:(void)
test_object_tree_write__initialize	tests/object/tree/write.c	/^void test_object_tree_write__initialize(void)$/;"	f	signature:(void)
test_object_tree_write__object_validity	tests/object/tree/write.c	/^void test_object_tree_write__object_validity(void)$/;"	f	signature:(void)
test_object_tree_write__protect_filesystems	tests/object/tree/write.c	/^void test_object_tree_write__protect_filesystems(void)$/;"	f	signature:(void)
test_object_tree_write__removing_and_re_adding_in_treebuilder	tests/object/tree/write.c	/^void test_object_tree_write__removing_and_re_adding_in_treebuilder(void)$/;"	f	signature:(void)
test_object_tree_write__sorted_subtrees	tests/object/tree/write.c	/^void test_object_tree_write__sorted_subtrees(void)$/;"	f	signature:(void)
test_object_tree_write__subtree	tests/object/tree/write.c	/^void test_object_tree_write__subtree(void)$/;"	f	signature:(void)
test_odb_alternates__chained	tests/odb/alternates.c	/^void test_odb_alternates__chained(void)$/;"	f	signature:(void)
test_odb_alternates__cleanup	tests/odb/alternates.c	/^void test_odb_alternates__cleanup(void)$/;"	f	signature:(void)
test_odb_alternates__long_chain	tests/odb/alternates.c	/^void test_odb_alternates__long_chain(void)$/;"	f	signature:(void)
test_odb_backend_nobackend__cleanup	tests/odb/backend/nobackend.c	/^void test_odb_backend_nobackend__cleanup(void)$/;"	f	signature:(void)
test_odb_backend_nobackend__initialize	tests/odb/backend/nobackend.c	/^void test_odb_backend_nobackend__initialize(void)$/;"	f	signature:(void)
test_odb_backend_nobackend__write_fails_gracefully	tests/odb/backend/nobackend.c	/^void test_odb_backend_nobackend__write_fails_gracefully(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__cleanup	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__cleanup(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__read_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__read_is_invoked_once_on_success(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure(void)$/;"	f	signature:(void)
test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success(void)$/;"	f	signature:(void)
test_odb_emptyobjects__blob_notfound	tests/odb/emptyobjects.c	/^void test_odb_emptyobjects__blob_notfound(void)$/;"	f	signature:(void)
test_odb_emptyobjects__cleanup	tests/odb/emptyobjects.c	/^void test_odb_emptyobjects__cleanup(void)$/;"	f	signature:(void)
test_odb_emptyobjects__initialize	tests/odb/emptyobjects.c	/^void test_odb_emptyobjects__initialize(void)$/;"	f	signature:(void)
test_odb_emptyobjects__read_tree	tests/odb/emptyobjects.c	/^void test_odb_emptyobjects__read_tree(void)$/;"	f	signature:(void)
test_odb_emptyobjects__read_tree_odb	tests/odb/emptyobjects.c	/^void test_odb_emptyobjects__read_tree_odb(void)$/;"	f	signature:(void)
test_odb_foreach__cleanup	tests/odb/foreach.c	/^void test_odb_foreach__cleanup(void)$/;"	f	signature:(void)
test_odb_foreach__files_in_objects_dir	tests/odb/foreach.c	/^void test_odb_foreach__files_in_objects_dir(void)$/;"	f	signature:(void)
test_odb_foreach__foreach	tests/odb/foreach.c	/^void test_odb_foreach__foreach(void)$/;"	f	signature:(void)
test_odb_foreach__interrupt_foreach	tests/odb/foreach.c	/^void test_odb_foreach__interrupt_foreach(void)$/;"	f	signature:(void)
test_odb_foreach__one_pack	tests/odb/foreach.c	/^void test_odb_foreach__one_pack(void)$/;"	f	signature:(void)
test_odb_freshen__cleanup	tests/odb/freshen.c	/^void test_odb_freshen__cleanup(void)$/;"	f	signature:(void)
test_odb_freshen__initialize	tests/odb/freshen.c	/^void test_odb_freshen__initialize(void)$/;"	f	signature:(void)
test_odb_freshen__loose_object	tests/odb/freshen.c	/^void test_odb_freshen__loose_object(void)$/;"	f	signature:(void)
test_odb_freshen__packed_object	tests/odb/freshen.c	/^void test_odb_freshen__packed_object(void)$/;"	f	signature:(void)
test_odb_loose__cleanup	tests/odb/loose.c	/^void test_odb_loose__cleanup(void)$/;"	f	signature:(void)
test_odb_loose__exists	tests/odb/loose.c	/^void test_odb_loose__exists(void)$/;"	f	signature:(void)
test_odb_loose__initialize	tests/odb/loose.c	/^void test_odb_loose__initialize(void)$/;"	f	signature:(void)
test_odb_loose__permissions_readwrite	tests/odb/loose.c	/^void test_odb_loose__permissions_readwrite(void)$/;"	f	signature:(void)
test_odb_loose__permissions_standard	tests/odb/loose.c	/^void test_odb_loose__permissions_standard(void)$/;"	f	signature:(void)
test_odb_loose__simple_reads	tests/odb/loose.c	/^void test_odb_loose__simple_reads(void)$/;"	f	signature:(void)
test_odb_loose_permissions_readonly	tests/odb/loose.c	/^void test_odb_loose_permissions_readonly(void)$/;"	f	signature:(void)
test_odb_mixed__cleanup	tests/odb/mixed.c	/^void test_odb_mixed__cleanup(void)$/;"	f	signature:(void)
test_odb_mixed__dup_oid	tests/odb/mixed.c	/^void test_odb_mixed__dup_oid(void) {$/;"	f	signature:(void)
test_odb_mixed__dup_oid_prefix_0	tests/odb/mixed.c	/^void test_odb_mixed__dup_oid_prefix_0(void) {$/;"	f	signature:(void)
test_odb_mixed__expand_ids	tests/odb/mixed.c	/^void test_odb_mixed__expand_ids(void)$/;"	f	signature:(void)
test_odb_mixed__initialize	tests/odb/mixed.c	/^void test_odb_mixed__initialize(void)$/;"	f	signature:(void)
test_odb_packed__cleanup	tests/odb/packed.c	/^void test_odb_packed__cleanup(void)$/;"	f	signature:(void)
test_odb_packed__initialize	tests/odb/packed.c	/^void test_odb_packed__initialize(void)$/;"	f	signature:(void)
test_odb_packed__mass_read	tests/odb/packed.c	/^void test_odb_packed__mass_read(void)$/;"	f	signature:(void)
test_odb_packed__read_header_0	tests/odb/packed.c	/^void test_odb_packed__read_header_0(void)$/;"	f	signature:(void)
test_odb_packed__read_header_1	tests/odb/packed.c	/^void test_odb_packed__read_header_1(void)$/;"	f	signature:(void)
test_odb_packed_one__cleanup	tests/odb/packed_one.c	/^void test_odb_packed_one__cleanup(void)$/;"	f	signature:(void)
test_odb_packed_one__initialize	tests/odb/packed_one.c	/^void test_odb_packed_one__initialize(void)$/;"	f	signature:(void)
test_odb_packed_one__mass_read	tests/odb/packed_one.c	/^void test_odb_packed_one__mass_read(void)$/;"	f	signature:(void)
test_odb_packed_one__read_header_0	tests/odb/packed_one.c	/^void test_odb_packed_one__read_header_0(void)$/;"	f	signature:(void)
test_odb_sorting__alternate_backends_sorting	tests/odb/sorting.c	/^void test_odb_sorting__alternate_backends_sorting(void)$/;"	f	signature:(void)
test_odb_sorting__basic_backends_sorting	tests/odb/sorting.c	/^void test_odb_sorting__basic_backends_sorting(void)$/;"	f	signature:(void)
test_odb_sorting__cleanup	tests/odb/sorting.c	/^void test_odb_sorting__cleanup(void)$/;"	f	signature:(void)
test_odb_sorting__initialize	tests/odb/sorting.c	/^void test_odb_sorting__initialize(void)$/;"	f	signature:(void)
test_odb_streamwrite__can_accept_chunks	tests/odb/streamwrite.c	/^void test_odb_streamwrite__can_accept_chunks(void)$/;"	f	signature:(void)
test_odb_streamwrite__can_detect_additional_bytes	tests/odb/streamwrite.c	/^void test_odb_streamwrite__can_detect_additional_bytes(void)$/;"	f	signature:(void)
test_odb_streamwrite__can_detect_missing_bytes	tests/odb/streamwrite.c	/^void test_odb_streamwrite__can_detect_missing_bytes(void)$/;"	f	signature:(void)
test_odb_streamwrite__cleanup	tests/odb/streamwrite.c	/^void test_odb_streamwrite__cleanup(void)$/;"	f	signature:(void)
test_odb_streamwrite__initialize	tests/odb/streamwrite.c	/^void test_odb_streamwrite__initialize(void)$/;"	f	signature:(void)
test_online_badssl__expired	tests/online/badssl.c	/^void test_online_badssl__expired(void)$/;"	f	signature:(void)
test_online_badssl__old_cipher	tests/online/badssl.c	/^void test_online_badssl__old_cipher(void)$/;"	f	signature:(void)
test_online_badssl__self_signed	tests/online/badssl.c	/^void test_online_badssl__self_signed(void)$/;"	f	signature:(void)
test_online_badssl__wrong_host	tests/online/badssl.c	/^void test_online_badssl__wrong_host(void)$/;"	f	signature:(void)
test_online_clone__bitbucket_style	tests/online/clone.c	/^void test_online_clone__bitbucket_style(void)$/;"	f	signature:(void)
test_online_clone__can_cancel	tests/online/clone.c	/^void test_online_clone__can_cancel(void)$/;"	f	signature:(void)
test_online_clone__can_checkout_a_cloned_repo	tests/online/clone.c	/^void test_online_clone__can_checkout_a_cloned_repo(void)$/;"	f	signature:(void)
test_online_clone__certificate_invalid	tests/online/clone.c	/^void test_online_clone__certificate_invalid(void)$/;"	f	signature:(void)
test_online_clone__certificate_valid	tests/online/clone.c	/^void test_online_clone__certificate_valid(void)$/;"	f	signature:(void)
test_online_clone__cleanup	tests/online/clone.c	/^void test_online_clone__cleanup(void)$/;"	f	signature:(void)
test_online_clone__clone_mirror	tests/online/clone.c	/^void test_online_clone__clone_mirror(void)$/;"	f	signature:(void)
test_online_clone__cred_callback_called_again_on_auth_failure	tests/online/clone.c	/^void test_online_clone__cred_callback_called_again_on_auth_failure(void)$/;"	f	signature:(void)
test_online_clone__cred_callback_failure_return_code_is_tunnelled	tests/online/clone.c	/^void test_online_clone__cred_callback_failure_return_code_is_tunnelled(void)$/;"	f	signature:(void)
test_online_clone__credentials	tests/online/clone.c	/^void test_online_clone__credentials(void)$/;"	f	signature:(void)
test_online_clone__custom_headers	tests/online/clone.c	/^void test_online_clone__custom_headers(void)$/;"	f	signature:(void)
test_online_clone__custom_remote_callbacks	tests/online/clone.c	/^void test_online_clone__custom_remote_callbacks(void)$/;"	f	signature:(void)
test_online_clone__empty_repository	tests/online/clone.c	/^void test_online_clone__empty_repository(void)$/;"	f	signature:(void)
test_online_clone__initialize	tests/online/clone.c	/^void test_online_clone__initialize(void)$/;"	f	signature:(void)
test_online_clone__network_bare	tests/online/clone.c	/^void test_online_clone__network_bare(void)$/;"	f	signature:(void)
test_online_clone__network_full	tests/online/clone.c	/^void test_online_clone__network_full(void)$/;"	f	signature:(void)
test_online_clone__proxy_credentials_in_url	tests/online/clone.c	/^void test_online_clone__proxy_credentials_in_url(void)$/;"	f	signature:(void)
test_online_clone__proxy_credentials_request	tests/online/clone.c	/^void test_online_clone__proxy_credentials_request(void)$/;"	f	signature:(void)
test_online_clone__ssh_auth_methods	tests/online/clone.c	/^void test_online_clone__ssh_auth_methods(void)$/;"	f	signature:(void)
test_online_clone__ssh_cannot_change_username	tests/online/clone.c	/^void test_online_clone__ssh_cannot_change_username(void)$/;"	f	signature:(void)
test_online_clone__ssh_cert	tests/online/clone.c	/^void test_online_clone__ssh_cert(void)$/;"	f	signature:(void)
test_online_clone__ssh_memory_auth	tests/online/clone.c	/^void test_online_clone__ssh_memory_auth(void)$/;"	f	signature:(void)
test_online_clone__ssh_with_paths	tests/online/clone.c	/^void test_online_clone__ssh_with_paths(void)$/;"	f	signature:(void)
test_online_clone__start_with_http	tests/online/clone.c	/^void test_online_clone__start_with_http(void)$/;"	f	signature:(void)
test_online_clone__url_with_no_path_returns_EINVALIDSPEC	tests/online/clone.c	/^void test_online_clone__url_with_no_path_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_online_fetch__can_cancel	tests/online/fetch.c	/^void test_online_fetch__can_cancel(void)$/;"	f	signature:(void)
test_online_fetch__cleanup	tests/online/fetch.c	/^void test_online_fetch__cleanup(void)$/;"	f	signature:(void)
test_online_fetch__default_git	tests/online/fetch.c	/^void test_online_fetch__default_git(void)$/;"	f	signature:(void)
test_online_fetch__default_http	tests/online/fetch.c	/^void test_online_fetch__default_http(void)$/;"	f	signature:(void)
test_online_fetch__default_https	tests/online/fetch.c	/^void test_online_fetch__default_https(void)$/;"	f	signature:(void)
test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date	tests/online/fetch.c	/^void test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date(void)$/;"	f	signature:(void)
test_online_fetch__fetch_twice	tests/online/fetch.c	/^void test_online_fetch__fetch_twice(void)$/;"	f	signature:(void)
test_online_fetch__initialize	tests/online/fetch.c	/^void test_online_fetch__initialize(void)$/;"	f	signature:(void)
test_online_fetch__ls_disconnected	tests/online/fetch.c	/^void test_online_fetch__ls_disconnected(void)$/;"	f	signature:(void)
test_online_fetch__no_tags_git	tests/online/fetch.c	/^void test_online_fetch__no_tags_git(void)$/;"	f	signature:(void)
test_online_fetch__no_tags_http	tests/online/fetch.c	/^void test_online_fetch__no_tags_http(void)$/;"	f	signature:(void)
test_online_fetch__remote_symrefs	tests/online/fetch.c	/^void test_online_fetch__remote_symrefs(void)$/;"	f	signature:(void)
test_online_fetch__twice	tests/online/fetch.c	/^void test_online_fetch__twice(void)$/;"	f	signature:(void)
test_online_fetchhead__cleanup	tests/online/fetchhead.c	/^void test_online_fetchhead__cleanup(void)$/;"	f	signature:(void)
test_online_fetchhead__colon_only_dst_refspec_creates_no_branch	tests/online/fetchhead.c	/^void test_online_fetchhead__colon_only_dst_refspec_creates_no_branch(void)$/;"	f	signature:(void)
test_online_fetchhead__empty_dst_refspec_creates_no_branch	tests/online/fetchhead.c	/^void test_online_fetchhead__empty_dst_refspec_creates_no_branch(void)$/;"	f	signature:(void)
test_online_fetchhead__explicit_dst_refspec_creates_branch	tests/online/fetchhead.c	/^void test_online_fetchhead__explicit_dst_refspec_creates_branch(void)$/;"	f	signature:(void)
test_online_fetchhead__explicit_spec	tests/online/fetchhead.c	/^void test_online_fetchhead__explicit_spec(void)$/;"	f	signature:(void)
test_online_fetchhead__initialize	tests/online/fetchhead.c	/^void test_online_fetchhead__initialize(void)$/;"	f	signature:(void)
test_online_fetchhead__no_merges	tests/online/fetchhead.c	/^void test_online_fetchhead__no_merges(void)$/;"	f	signature:(void)
test_online_fetchhead__wildcard_spec	tests/online/fetchhead.c	/^void test_online_fetchhead__wildcard_spec(void)$/;"	f	signature:(void)
test_online_push__b1	tests/online/push.c	/^void test_online_push__b1(void)$/;"	f	signature:(void)
test_online_push__b2	tests/online/push.c	/^void test_online_push__b2(void)$/;"	f	signature:(void)
test_online_push__b3	tests/online/push.c	/^void test_online_push__b3(void)$/;"	f	signature:(void)
test_online_push__b4	tests/online/push.c	/^void test_online_push__b4(void)$/;"	f	signature:(void)
test_online_push__b5	tests/online/push.c	/^void test_online_push__b5(void)$/;"	f	signature:(void)
test_online_push__b5_cancel	tests/online/push.c	/^void test_online_push__b5_cancel(void)$/;"	f	signature:(void)
test_online_push__bad_refspecs	tests/online/push.c	/^void test_online_push__bad_refspecs(void)$/;"	f	signature:(void)
test_online_push__cleanup	tests/online/push.c	/^void test_online_push__cleanup(void)$/;"	f	signature:(void)
test_online_push__configured	tests/online/push.c	/^void test_online_push__configured(void)$/;"	f	signature:(void)
test_online_push__delete	tests/online/push.c	/^void test_online_push__delete(void)$/;"	f	signature:(void)
test_online_push__expressions	tests/online/push.c	/^void test_online_push__expressions(void)$/;"	f	signature:(void)
test_online_push__fast_fwd	tests/online/push.c	/^void test_online_push__fast_fwd(void)$/;"	f	signature:(void)
test_online_push__force	tests/online/push.c	/^void test_online_push__force(void)$/;"	f	signature:(void)
test_online_push__implicit_tgt	tests/online/push.c	/^void test_online_push__implicit_tgt(void)$/;"	f	signature:(void)
test_online_push__initialize	tests/online/push.c	/^void test_online_push__initialize(void)$/;"	f	signature:(void)
test_online_push__multi	tests/online/push.c	/^void test_online_push__multi(void)$/;"	f	signature:(void)
test_online_push__noop	tests/online/push.c	/^void test_online_push__noop(void)$/;"	f	signature:(void)
test_online_push__notes	tests/online/push.c	/^void test_online_push__notes(void)$/;"	f	signature:(void)
test_online_push__tag_blob	tests/online/push.c	/^void test_online_push__tag_blob(void)$/;"	f	signature:(void)
test_online_push__tag_commit	tests/online/push.c	/^void test_online_push__tag_commit(void)$/;"	f	signature:(void)
test_online_push__tag_lightweight	tests/online/push.c	/^void test_online_push__tag_lightweight(void)$/;"	f	signature:(void)
test_online_push__tag_to_tag	tests/online/push.c	/^void test_online_push__tag_to_tag(void)$/;"	f	signature:(void)
test_online_push__tag_tree	tests/online/push.c	/^void test_online_push__tag_tree(void)$/;"	f	signature:(void)
test_online_remotes__restricted_refspecs	tests/online/remotes.c	/^void test_online_remotes__restricted_refspecs(void)$/;"	f	signature:(void)
test_online_remotes__single_branch	tests/online/remotes.c	/^void test_online_remotes__single_branch(void)$/;"	f	signature:(void)
test_operations	tests/rebase/iterator.c	/^static void test_operations(git_rebase *rebase, size_t expected_current)$/;"	f	file:	signature:(git_rebase *rebase, size_t expected_current)
test_pack_indexer__fix_thin	tests/pack/indexer.c	/^void test_pack_indexer__fix_thin(void)$/;"	f	signature:(void)
test_pack_indexer__out_of_order	tests/pack/indexer.c	/^void test_pack_indexer__out_of_order(void)$/;"	f	signature:(void)
test_pack_packbuilder__cleanup	tests/pack/packbuilder.c	/^void test_pack_packbuilder__cleanup(void)$/;"	f	signature:(void)
test_pack_packbuilder__create_pack	tests/pack/packbuilder.c	/^void test_pack_packbuilder__create_pack(void)$/;"	f	signature:(void)
test_pack_packbuilder__foreach	tests/pack/packbuilder.c	/^void test_pack_packbuilder__foreach(void)$/;"	f	signature:(void)
test_pack_packbuilder__foreach_with_cancel	tests/pack/packbuilder.c	/^void test_pack_packbuilder__foreach_with_cancel(void)$/;"	f	signature:(void)
test_pack_packbuilder__get_hash	tests/pack/packbuilder.c	/^void test_pack_packbuilder__get_hash(void)$/;"	f	signature:(void)
test_pack_packbuilder__initialize	tests/pack/packbuilder.c	/^void test_pack_packbuilder__initialize(void)$/;"	f	signature:(void)
test_pack_packbuilder__permissions_readonly	tests/pack/packbuilder.c	/^void test_pack_packbuilder__permissions_readonly(void)$/;"	f	signature:(void)
test_pack_packbuilder__permissions_readwrite	tests/pack/packbuilder.c	/^void test_pack_packbuilder__permissions_readwrite(void)$/;"	f	signature:(void)
test_pack_packbuilder__permissions_standard	tests/pack/packbuilder.c	/^void test_pack_packbuilder__permissions_standard(void)$/;"	f	signature:(void)
test_pack_sharing__open_two_repos	tests/pack/sharing.c	/^void test_pack_sharing__open_two_repos(void)$/;"	f	signature:(void)
test_parse_invalid_diff	tests/diff/parse.c	/^static void test_parse_invalid_diff(const char *invalid_diff)$/;"	f	file:	signature:(const char *invalid_diff)
test_patch	tests/diff/binary.c	/^void test_patch($/;"	f	signature:( const char *one, const char *two, const git_diff_options *opts, const char *expected)
test_patch_parse__invalid_patches_fails	tests/patch/parse.c	/^void test_patch_parse__invalid_patches_fails(void)$/;"	f	signature:(void)
test_patch_parse__leading_and_trailing_garbage	tests/patch/parse.c	/^void test_patch_parse__leading_and_trailing_garbage(void)$/;"	f	signature:(void)
test_patch_parse__nonpatches_fail_with_notfound	tests/patch/parse.c	/^void test_patch_parse__nonpatches_fail_with_notfound(void)$/;"	f	signature:(void)
test_patch_parse__original_to_change_middle	tests/patch/parse.c	/^void test_patch_parse__original_to_change_middle(void)$/;"	f	signature:(void)
test_patch_print__add	tests/patch/print.c	/^void test_patch_print__add(void)$/;"	f	signature:(void)
test_patch_print__append	tests/patch/print.c	/^void test_patch_print__append(void)$/;"	f	signature:(void)
test_patch_print__append_nocontext	tests/patch/print.c	/^void test_patch_print__append_nocontext(void)$/;"	f	signature:(void)
test_patch_print__binary_add	tests/patch/print.c	/^void test_patch_print__binary_add(void)$/;"	f	signature:(void)
test_patch_print__binary_delete	tests/patch/print.c	/^void test_patch_print__binary_delete(void)$/;"	f	signature:(void)
test_patch_print__binary_delta	tests/patch/print.c	/^void test_patch_print__binary_delta(void)$/;"	f	signature:(void)
test_patch_print__binary_literal	tests/patch/print.c	/^void test_patch_print__binary_literal(void)$/;"	f	signature:(void)
test_patch_print__binary_not_shown	tests/patch/print.c	/^void test_patch_print__binary_not_shown(void)$/;"	f	signature:(void)
test_patch_print__change_firstline	tests/patch/print.c	/^void test_patch_print__change_firstline(void)$/;"	f	signature:(void)
test_patch_print__change_lastline	tests/patch/print.c	/^void test_patch_print__change_lastline(void)$/;"	f	signature:(void)
test_patch_print__change_middle	tests/patch/print.c	/^void test_patch_print__change_middle(void)$/;"	f	signature:(void)
test_patch_print__change_middle_nocontext	tests/patch/print.c	/^void test_patch_print__change_middle_nocontext(void)$/;"	f	signature:(void)
test_patch_print__delete	tests/patch/print.c	/^void test_patch_print__delete(void)$/;"	f	signature:(void)
test_patch_print__from_empty_file	tests/patch/print.c	/^void test_patch_print__from_empty_file(void)$/;"	f	signature:(void)
test_patch_print__modechange_modified	tests/patch/print.c	/^void test_patch_print__modechange_modified(void)$/;"	f	signature:(void)
test_patch_print__modechange_unchanged	tests/patch/print.c	/^void test_patch_print__modechange_unchanged(void)$/;"	f	signature:(void)
test_patch_print__not_reversible	tests/patch/print.c	/^void test_patch_print__not_reversible(void)$/;"	f	signature:(void)
test_patch_print__prepend	tests/patch/print.c	/^void test_patch_print__prepend(void)$/;"	f	signature:(void)
test_patch_print__prepend_and_append	tests/patch/print.c	/^void test_patch_print__prepend_and_append(void)$/;"	f	signature:(void)
test_patch_print__prepend_nocontext	tests/patch/print.c	/^void test_patch_print__prepend_nocontext(void)$/;"	f	signature:(void)
test_patch_print__rename_exact	tests/patch/print.c	/^void test_patch_print__rename_exact(void)$/;"	f	signature:(void)
test_patch_print__rename_exact_quotedname	tests/patch/print.c	/^void test_patch_print__rename_exact_quotedname(void)$/;"	f	signature:(void)
test_patch_print__rename_similar	tests/patch/print.c	/^void test_patch_print__rename_similar(void)$/;"	f	signature:(void)
test_patch_print__rename_similar_quotedname	tests/patch/print.c	/^void test_patch_print__rename_similar_quotedname(void)$/;"	f	signature:(void)
test_patch_print__to_empty_file	tests/patch/print.c	/^void test_patch_print__to_empty_file(void)$/;"	f	signature:(void)
test_path_core__isvalid_backslash	tests/path/core.c	/^void test_path_core__isvalid_backslash(void)$/;"	f	signature:(void)
test_path_core__isvalid_dos_paths	tests/path/core.c	/^void test_path_core__isvalid_dos_paths(void)$/;"	f	signature:(void)
test_path_core__isvalid_dos_paths_withnum	tests/path/core.c	/^void test_path_core__isvalid_dos_paths_withnum(void)$/;"	f	signature:(void)
test_path_core__isvalid_dot_and_dotdot	tests/path/core.c	/^void test_path_core__isvalid_dot_and_dotdot(void)$/;"	f	signature:(void)
test_path_core__isvalid_dot_git	tests/path/core.c	/^void test_path_core__isvalid_dot_git(void)$/;"	f	signature:(void)
test_path_core__isvalid_dotgit_ntfs	tests/path/core.c	/^void test_path_core__isvalid_dotgit_ntfs(void)$/;"	f	signature:(void)
test_path_core__isvalid_dotgit_with_hfs_ignorables	tests/path/core.c	/^void test_path_core__isvalid_dotgit_with_hfs_ignorables(void)$/;"	f	signature:(void)
test_path_core__isvalid_empty_dir_component	tests/path/core.c	/^void test_path_core__isvalid_empty_dir_component(void)$/;"	f	signature:(void)
test_path_core__isvalid_nt_chars	tests/path/core.c	/^void test_path_core__isvalid_nt_chars(void)$/;"	f	signature:(void)
test_path_core__isvalid_standard	tests/path/core.c	/^void test_path_core__isvalid_standard(void)$/;"	f	signature:(void)
test_path_core__isvalid_trailing_colon	tests/path/core.c	/^void test_path_core__isvalid_trailing_colon(void)$/;"	f	signature:(void)
test_path_core__isvalid_trailing_dot	tests/path/core.c	/^void test_path_core__isvalid_trailing_dot(void)$/;"	f	signature:(void)
test_path_core__isvalid_trailing_space	tests/path/core.c	/^void test_path_core__isvalid_trailing_space(void)$/;"	f	signature:(void)
test_path_core__join_unrooted	tests/path/core.c	/^void test_path_core__join_unrooted(void)$/;"	f	signature:(void)
test_path_core__make_relative	tests/path/core.c	/^void test_path_core__make_relative(void)$/;"	f	signature:(void)
test_path_win32__8dot3_name	tests/path/win32.c	/^void test_path_win32__8dot3_name(void)$/;"	f	signature:(void)
test_path_win32__absolute_from_no_drive_letter	tests/path/win32.c	/^void test_path_win32__absolute_from_no_drive_letter(void)$/;"	f	signature:(void)
test_path_win32__absolute_from_relative	tests/path/win32.c	/^void test_path_win32__absolute_from_relative(void)$/;"	f	signature:(void)
test_path_win32__canonicalize	tests/path/win32.c	/^void test_path_win32__canonicalize(void)$/;"	f	signature:(void)
test_path_win32__dot_and_dotdot	tests/path/win32.c	/^void test_path_win32__dot_and_dotdot(void)$/;"	f	signature:(void)
test_path_win32__honors_max_path	tests/path/win32.c	/^void test_path_win32__honors_max_path(void)$/;"	f	signature:(void)
test_path_win32__removes_trailing_slash	tests/path/win32.c	/^void test_path_win32__removes_trailing_slash(void)$/;"	f	signature:(void)
test_path_win32__squashes_multiple_slashes	tests/path/win32.c	/^void test_path_win32__squashes_multiple_slashes(void)$/;"	f	signature:(void)
test_path_win32__unc	tests/path/win32.c	/^void test_path_win32__unc(void)$/;"	f	signature:(void)
test_path_win32__utf8_to_utf16	tests/path/win32.c	/^void test_path_win32__utf8_to_utf16(void)$/;"	f	signature:(void)
test_perf_merge__cleanup	tests/perf/merge.c	/^void test_perf_merge__cleanup(void)$/;"	f	signature:(void)
test_perf_merge__initialize	tests/perf/merge.c	/^void test_perf_merge__initialize(void)$/;"	f	signature:(void)
test_perf_merge__m1	tests/perf/merge.c	/^void test_perf_merge__m1(void)$/;"	f	signature:(void)
test_rangelike	tests/refs/revparse.c	/^static void test_rangelike(const char *rangelike,$/;"	f	file:	signature:(const char *rangelike, const char *expected_left, const char *expected_right, git_revparse_mode_t expected_revparseflags)
test_read_object	tests/odb/loose.c	/^static void test_read_object(object_data *data)$/;"	f	file:	signature:(object_data *data)
test_rebase_abort__cleanup	tests/rebase/abort.c	/^void test_rebase_abort__cleanup(void)$/;"	f	signature:(void)
test_rebase_abort__detached_head	tests/rebase/abort.c	/^void test_rebase_abort__detached_head(void)$/;"	f	signature:(void)
test_rebase_abort__initialize	tests/rebase/abort.c	/^void test_rebase_abort__initialize(void)$/;"	f	signature:(void)
test_rebase_abort__merge	tests/rebase/abort.c	/^void test_rebase_abort__merge(void)$/;"	f	signature:(void)
test_rebase_abort__merge_by_id	tests/rebase/abort.c	/^void test_rebase_abort__merge_by_id(void)$/;"	f	signature:(void)
test_rebase_abort__merge_by_id_immediately_after_init	tests/rebase/abort.c	/^void test_rebase_abort__merge_by_id_immediately_after_init(void)$/;"	f	signature:(void)
test_rebase_abort__merge_by_revspec	tests/rebase/abort.c	/^void test_rebase_abort__merge_by_revspec(void)$/;"	f	signature:(void)
test_rebase_abort__merge_immediately_after_init	tests/rebase/abort.c	/^void test_rebase_abort__merge_immediately_after_init(void)$/;"	f	signature:(void)
test_rebase_abort__old_style_head_file	tests/rebase/abort.c	/^void test_rebase_abort__old_style_head_file(void)$/;"	f	signature:(void)
test_rebase_inmemory__can_resolve_conflicts	tests/rebase/inmemory.c	/^void test_rebase_inmemory__can_resolve_conflicts(void)$/;"	f	signature:(void)
test_rebase_inmemory__cleanup	tests/rebase/inmemory.c	/^void test_rebase_inmemory__cleanup(void)$/;"	f	signature:(void)
test_rebase_inmemory__initialize	tests/rebase/inmemory.c	/^void test_rebase_inmemory__initialize(void)$/;"	f	signature:(void)
test_rebase_inmemory__no_common_ancestor	tests/rebase/inmemory.c	/^void test_rebase_inmemory__no_common_ancestor(void)$/;"	f	signature:(void)
test_rebase_inmemory__not_in_rebase_state	tests/rebase/inmemory.c	/^void test_rebase_inmemory__not_in_rebase_state(void)$/;"	f	signature:(void)
test_rebase_inmemory__with_directories	tests/rebase/inmemory.c	/^void test_rebase_inmemory__with_directories(void)$/;"	f	signature:(void)
test_rebase_iterator__cleanup	tests/rebase/iterator.c	/^void test_rebase_iterator__cleanup(void)$/;"	f	signature:(void)
test_rebase_iterator__initialize	tests/rebase/iterator.c	/^void test_rebase_iterator__initialize(void)$/;"	f	signature:(void)
test_rebase_iterator__iterates	tests/rebase/iterator.c	/^void test_rebase_iterator__iterates(void)$/;"	f	signature:(void)
test_rebase_iterator__iterates_inmemory	tests/rebase/iterator.c	/^void test_rebase_iterator__iterates_inmemory(void)$/;"	f	signature:(void)
test_rebase_merge__blocked_when_dirty	tests/rebase/merge.c	/^void test_rebase_merge__blocked_when_dirty(void)$/;"	f	signature:(void)
test_rebase_merge__cleanup	tests/rebase/merge.c	/^void test_rebase_merge__cleanup(void)$/;"	f	signature:(void)
test_rebase_merge__commit	tests/rebase/merge.c	/^void test_rebase_merge__commit(void)$/;"	f	signature:(void)
test_rebase_merge__commit_drops_already_applied	tests/rebase/merge.c	/^void test_rebase_merge__commit_drops_already_applied(void)$/;"	f	signature:(void)
test_rebase_merge__commit_updates_rewritten	tests/rebase/merge.c	/^void test_rebase_merge__commit_updates_rewritten(void)$/;"	f	signature:(void)
test_rebase_merge__commit_with_id	tests/rebase/merge.c	/^void test_rebase_merge__commit_with_id(void)$/;"	f	signature:(void)
test_rebase_merge__copy_notes_disabled_in_config	tests/rebase/merge.c	/^void test_rebase_merge__copy_notes_disabled_in_config(void)$/;"	f	signature:(void)
test_rebase_merge__copy_notes_off_by_default	tests/rebase/merge.c	/^void test_rebase_merge__copy_notes_off_by_default(void)$/;"	f	signature:(void)
test_rebase_merge__copy_notes_specified_in_config	tests/rebase/merge.c	/^void test_rebase_merge__copy_notes_specified_in_config(void)$/;"	f	signature:(void)
test_rebase_merge__copy_notes_specified_in_options	tests/rebase/merge.c	/^void test_rebase_merge__copy_notes_specified_in_options(void)$/;"	f	signature:(void)
test_rebase_merge__custom_checkout_options	tests/rebase/merge.c	/^void test_rebase_merge__custom_checkout_options(void)$/;"	f	signature:(void)
test_rebase_merge__custom_merge_options	tests/rebase/merge.c	/^void test_rebase_merge__custom_merge_options(void)$/;"	f	signature:(void)
test_rebase_merge__detached_finish	tests/rebase/merge.c	/^void test_rebase_merge__detached_finish(void)$/;"	f	signature:(void)
test_rebase_merge__finish	tests/rebase/merge.c	/^void test_rebase_merge__finish(void)$/;"	f	signature:(void)
test_rebase_merge__finish_with_ids	tests/rebase/merge.c	/^void test_rebase_merge__finish_with_ids(void)$/;"	f	signature:(void)
test_rebase_merge__initialize	tests/rebase/merge.c	/^void test_rebase_merge__initialize(void)$/;"	f	signature:(void)
test_rebase_merge__next	tests/rebase/merge.c	/^void test_rebase_merge__next(void)$/;"	f	signature:(void)
test_rebase_merge__next_stops_with_iterover	tests/rebase/merge.c	/^void test_rebase_merge__next_stops_with_iterover(void)$/;"	f	signature:(void)
test_rebase_merge__next_with_conflicts	tests/rebase/merge.c	/^void test_rebase_merge__next_with_conflicts(void)$/;"	f	signature:(void)
test_rebase_merge__no_common_ancestor	tests/rebase/merge.c	/^void test_rebase_merge__no_common_ancestor(void)$/;"	f	signature:(void)
test_rebase_merge__with_directories	tests/rebase/merge.c	/^void test_rebase_merge__with_directories(void)$/;"	f	signature:(void)
test_rebase_setup__blocked_for_staged_change	tests/rebase/setup.c	/^void test_rebase_setup__blocked_for_staged_change(void)$/;"	f	signature:(void)
test_rebase_setup__blocked_for_unstaged_change	tests/rebase/setup.c	/^void test_rebase_setup__blocked_for_unstaged_change(void)$/;"	f	signature:(void)
test_rebase_setup__blocked_when_in_progress	tests/rebase/setup.c	/^void test_rebase_setup__blocked_when_in_progress(void)$/;"	f	signature:(void)
test_rebase_setup__branch_with_merges	tests/rebase/setup.c	/^void test_rebase_setup__branch_with_merges(void)$/;"	f	signature:(void)
test_rebase_setup__cleanup	tests/rebase/setup.c	/^void test_rebase_setup__cleanup(void)$/;"	f	signature:(void)
test_rebase_setup__initialize	tests/rebase/setup.c	/^void test_rebase_setup__initialize(void)$/;"	f	signature:(void)
test_rebase_setup__merge	tests/rebase/setup.c	/^void test_rebase_setup__merge(void)$/;"	f	signature:(void)
test_rebase_setup__merge_branch_by_id	tests/rebase/setup.c	/^void test_rebase_setup__merge_branch_by_id(void)$/;"	f	signature:(void)
test_rebase_setup__merge_from_detached	tests/rebase/setup.c	/^void test_rebase_setup__merge_from_detached(void)$/;"	f	signature:(void)
test_rebase_setup__merge_null_branch_uses_HEAD	tests/rebase/setup.c	/^void test_rebase_setup__merge_null_branch_uses_HEAD(void)$/;"	f	signature:(void)
test_rebase_setup__merge_onto_and_upstream	tests/rebase/setup.c	/^void test_rebase_setup__merge_onto_and_upstream(void)$/;"	f	signature:(void)
test_rebase_setup__merge_onto_upstream_and_branch	tests/rebase/setup.c	/^void test_rebase_setup__merge_onto_upstream_and_branch(void)$/;"	f	signature:(void)
test_rebase_setup__merge_onto_upstream_and_branch_by_id	tests/rebase/setup.c	/^void test_rebase_setup__merge_onto_upstream_and_branch_by_id(void)$/;"	f	signature:(void)
test_rebase_setup__merge_root	tests/rebase/setup.c	/^void test_rebase_setup__merge_root(void)$/;"	f	signature:(void)
test_rebase_setup__not_blocked_for_untracked_add	tests/rebase/setup.c	/^void test_rebase_setup__not_blocked_for_untracked_add(void)$/;"	f	signature:(void)
test_rebase_setup__orphan_branch	tests/rebase/setup.c	/^void test_rebase_setup__orphan_branch(void)$/;"	f	signature:(void)
test_reflog	tests/repo/head.c	/^static void test_reflog(git_repository *repo, size_t idx,$/;"	f	file:	signature:(git_repository *repo, size_t idx, const char *old_spec, const char *new_spec, const char *email, const char *message)
test_refs_branches_create__can_create_a_local_branch	tests/refs/branches/create.c	/^void test_refs_branches_create__can_create_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_create__can_create_branch_with_unicode	tests/refs/branches/create.c	/^void test_refs_branches_create__can_create_branch_with_unicode(void)$/;"	f	signature:(void)
test_refs_branches_create__can_force_create_over_an_existing_branch	tests/refs/branches/create.c	/^void test_refs_branches_create__can_force_create_over_an_existing_branch(void)$/;"	f	signature:(void)
test_refs_branches_create__can_force_create_over_current_branch_in_bare_repo	tests/refs/branches/create.c	/^void test_refs_branches_create__can_force_create_over_current_branch_in_bare_repo(void)$/;"	f	signature:(void)
test_refs_branches_create__can_not_create_a_branch_if_its_name_collide_with_an_existing_one	tests/refs/branches/create.c	/^void test_refs_branches_create__can_not_create_a_branch_if_its_name_collide_with_an_existing_one(void)$/;"	f	signature:(void)
test_refs_branches_create__cannot_force_create_over_current_branch_in_nonbare_repo	tests/refs/branches/create.c	/^void test_refs_branches_create__cannot_force_create_over_current_branch_in_nonbare_repo(void)$/;"	f	signature:(void)
test_refs_branches_create__cleanup	tests/refs/branches/create.c	/^void test_refs_branches_create__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_create__creating_a_branch_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/branches/create.c	/^void test_refs_branches_create__creating_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_refs_branches_create__default_reflog_message	tests/refs/branches/create.c	/^void test_refs_branches_create__default_reflog_message(void)$/;"	f	signature:(void)
test_refs_branches_create__initialize	tests/refs/branches/create.c	/^void test_refs_branches_create__initialize(void)$/;"	f	signature:(void)
test_refs_branches_create__name_vs_namespace	tests/refs/branches/create.c	/^void test_refs_branches_create__name_vs_namespace(void)$/;"	f	signature:(void)
test_refs_branches_create__name_vs_namespace_fail	tests/refs/branches/create.c	/^void test_refs_branches_create__name_vs_namespace_fail(void)$/;"	f	signature:(void)
test_refs_branches_delete__can_delete_a_branch_even_if_HEAD_is_missing	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_branch_even_if_HEAD_is_missing(void)$/;"	f	signature:(void)
test_refs_branches_delete__can_delete_a_branch_pointed_at_by_detached_HEAD	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_branch_pointed_at_by_detached_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_delete__can_delete_a_branch_when_HEAD_is_unborn	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_branch_when_HEAD_is_unborn(void)$/;"	f	signature:(void)
test_refs_branches_delete__can_delete_a_local_branch	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_delete__can_delete_a_remote_branch	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_remote_branch(void)$/;"	f	signature:(void)
test_refs_branches_delete__can_not_delete_a_branch_pointed_at_by_HEAD	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_not_delete_a_branch_pointed_at_by_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_delete__cleanup	tests/refs/branches/delete.c	/^void test_refs_branches_delete__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_delete__deleting_a_branch_removes_related_configuration_data	tests/refs/branches/delete.c	/^void test_refs_branches_delete__deleting_a_branch_removes_related_configuration_data(void)$/;"	f	signature:(void)
test_refs_branches_delete__initialize	tests/refs/branches/delete.c	/^void test_refs_branches_delete__initialize(void)$/;"	f	signature:(void)
test_refs_branches_delete__removes_reflog	tests/refs/branches/delete.c	/^void test_refs_branches_delete__removes_reflog(void)$/;"	f	signature:(void)
test_refs_branches_ishead__can_properly_handle_missing_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_properly_handle_missing_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_ishead__can_properly_handle_unborn_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_properly_handle_unborn_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_ishead__cleanup	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_ishead__initialize	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__initialize(void)$/;"	f	signature:(void)
test_refs_branches_ishead__only_direct_references_are_considered	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__only_direct_references_are_considered(void)$/;"	f	signature:(void)
test_refs_branches_ishead__wont_be_fooled_by_a_non_branch	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__wont_be_fooled_by_a_non_branch(void)$/;"	f	signature:(void)
test_refs_branches_iterator__cleanup	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_iterator__initialize	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__initialize(void)$/;"	f	signature:(void)
test_refs_branches_iterator__mix_of_packed_and_loose	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__mix_of_packed_and_loose(void)$/;"	f	signature:(void)
test_refs_branches_iterator__retrieve_all_branches	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_all_branches(void)$/;"	f	signature:(void)
test_refs_branches_iterator__retrieve_local_branches	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_local_branches(void)$/;"	f	signature:(void)
test_refs_branches_iterator__retrieve_remote_branches	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_remote_branches(void)$/;"	f	signature:(void)
test_refs_branches_iterator__retrieve_remote_symbolic_HEAD_when_present	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_remote_symbolic_HEAD_when_present(void)$/;"	f	signature:(void)
test_refs_branches_lookup__can_retrieve_a_local_branch	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__can_retrieve_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_lookup__can_retrieve_a_remote_tracking_branch	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__can_retrieve_a_remote_tracking_branch(void)$/;"	f	signature:(void)
test_refs_branches_lookup__cleanup	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_lookup__initialize	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__initialize(void)$/;"	f	signature:(void)
test_refs_branches_lookup__trying_to_retrieve_a_branch_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__trying_to_retrieve_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_refs_branches_lookup__trying_to_retrieve_an_unknown_branch_returns_ENOTFOUND	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__trying_to_retrieve_an_unknown_branch_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_refs_branches_move__can_force_move_over_an_existing_branch	tests/refs/branches/move.c	/^void test_refs_branches_move__can_force_move_over_an_existing_branch(void)$/;"	f	signature:(void)
test_refs_branches_move__can_move_a_local_branch	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace(void)$/;"	f	signature:(void)
test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace(void)$/;"	f	signature:(void)
test_refs_branches_move__can_move_with_unicode	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_with_unicode(void)$/;"	f	signature:(void)
test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one	tests/refs/branches/move.c	/^void test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one(void)$/;"	f	signature:(void)
test_refs_branches_move__can_not_move_a_non_branch	tests/refs/branches/move.c	/^void test_refs_branches_move__can_not_move_a_non_branch(void)$/;"	f	signature:(void)
test_refs_branches_move__cleanup	tests/refs/branches/move.c	/^void test_refs_branches_move__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_move__default_reflog_message	tests/refs/branches/move.c	/^void test_refs_branches_move__default_reflog_message(void)$/;"	f	signature:(void)
test_refs_branches_move__initialize	tests/refs/branches/move.c	/^void test_refs_branches_move__initialize(void)$/;"	f	signature:(void)
test_refs_branches_move__moving_a_branch_moves_related_configuration_data	tests/refs/branches/move.c	/^void test_refs_branches_move__moving_a_branch_moves_related_configuration_data(void)$/;"	f	signature:(void)
test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/branches/move.c	/^void test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD	tests/refs/branches/move.c	/^void test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD(void)$/;"	f	signature:(void)
test_refs_branches_name__can_get_local_branch_name	tests/refs/branches/name.c	/^void test_refs_branches_name__can_get_local_branch_name(void)$/;"	f	signature:(void)
test_refs_branches_name__can_get_remote_branch_name	tests/refs/branches/name.c	/^void test_refs_branches_name__can_get_remote_branch_name(void)$/;"	f	signature:(void)
test_refs_branches_name__cleanup	tests/refs/branches/name.c	/^void test_refs_branches_name__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_name__error_when_ref_is_no_branch	tests/refs/branches/name.c	/^void test_refs_branches_name__error_when_ref_is_no_branch(void)$/;"	f	signature:(void)
test_refs_branches_name__initialize	tests/refs/branches/name.c	/^void test_refs_branches_name__initialize(void)$/;"	f	signature:(void)
test_refs_branches_remote__ambiguous_remote_returns_error	tests/refs/branches/remote.c	/^void test_refs_branches_remote__ambiguous_remote_returns_error(void)$/;"	f	signature:(void)
test_refs_branches_remote__can_get_remote_for_branch	tests/refs/branches/remote.c	/^void test_refs_branches_remote__can_get_remote_for_branch(void)$/;"	f	signature:(void)
test_refs_branches_remote__cleanup	tests/refs/branches/remote.c	/^void test_refs_branches_remote__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_remote__initialize	tests/refs/branches/remote.c	/^void test_refs_branches_remote__initialize(void)$/;"	f	signature:(void)
test_refs_branches_remote__local_remote_returns_error	tests/refs/branches/remote.c	/^void test_refs_branches_remote__local_remote_returns_error(void)$/;"	f	signature:(void)
test_refs_branches_remote__no_matching_remote_returns_error	tests/refs/branches/remote.c	/^void test_refs_branches_remote__no_matching_remote_returns_error(void)$/;"	f	signature:(void)
test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch(void)$/;"	f	signature:(void)
test_refs_branches_upstream__cleanup	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_upstream__initialize	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__initialize(void)$/;"	f	signature:(void)
test_refs_branches_upstream__no_fetch_refspec	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__no_fetch_refspec(void)$/;"	f	signature:(void)
test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND(void)$/;"	f	signature:(void)
test_refs_branches_upstream__set_unset_upstream	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__set_unset_upstream(void)$/;"	f	signature:(void)
test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND(void)$/;"	f	signature:(void)
test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND(void)$/;"	f	signature:(void)
test_refs_branches_upstream__upstream_remote	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__upstream_remote(void)$/;"	f	signature:(void)
test_refs_branches_upstream__upstream_remote_empty_value	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__upstream_remote_empty_value(void)$/;"	f	signature:(void)
test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch(void)$/;"	f	signature:(void)
test_refs_branches_upstreamname__cleanup	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__cleanup(void)$/;"	f	signature:(void)
test_refs_branches_upstreamname__initialize	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__initialize(void)$/;"	f	signature:(void)
test_refs_crashes__double_free	tests/refs/crashes.c	/^void test_refs_crashes__double_free(void)$/;"	f	signature:(void)
test_refs_create__cleanup	tests/refs/create.c	/^void test_refs_create__cleanup(void)$/;"	f	signature:(void)
test_refs_create__creating_a_loose_ref_with_invalid_windows_name	tests/refs/create.c	/^void test_refs_create__creating_a_loose_ref_with_invalid_windows_name(void)$/;"	f	signature:(void)
test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/create.c	/^void test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_refs_create__deep_symbolic	tests/refs/create.c	/^void test_refs_create__deep_symbolic(void)$/;"	f	signature:(void)
test_refs_create__existing_dir_propagates_edirectory	tests/refs/create.c	/^void test_refs_create__existing_dir_propagates_edirectory(void)$/;"	f	signature:(void)
test_refs_create__initialize	tests/refs/create.c	/^void test_refs_create__initialize(void)$/;"	f	signature:(void)
test_refs_create__oid	tests/refs/create.c	/^void test_refs_create__oid(void)$/;"	f	signature:(void)
test_refs_create__oid_unknown_fails_by_default	tests/refs/create.c	/^void test_refs_create__oid_unknown_fails_by_default(void)$/;"	f	signature:(void)
test_refs_create__oid_unknown_succeeds_without_strict	tests/refs/create.c	/^void test_refs_create__oid_unknown_succeeds_without_strict(void)$/;"	f	signature:(void)
test_refs_create__propagate_eexists	tests/refs/create.c	/^void test_refs_create__propagate_eexists(void)$/;"	f	signature:(void)
test_refs_create__symbolic	tests/refs/create.c	/^void test_refs_create__symbolic(void)$/;"	f	signature:(void)
test_refs_createwithlog__cleanup	tests/refs/createwithlog.c	/^void test_refs_createwithlog__cleanup(void)$/;"	f	signature:(void)
test_refs_createwithlog__creating_a_direct_reference_adds_a_reflog_entry	tests/refs/createwithlog.c	/^void test_refs_createwithlog__creating_a_direct_reference_adds_a_reflog_entry(void)$/;"	f	signature:(void)
test_refs_createwithlog__initialize	tests/refs/createwithlog.c	/^void test_refs_createwithlog__initialize(void)$/;"	f	signature:(void)
test_refs_delete__cleanup	tests/refs/delete.c	/^void test_refs_delete__cleanup(void)$/;"	f	signature:(void)
test_refs_delete__initialize	tests/refs/delete.c	/^void test_refs_delete__initialize(void)$/;"	f	signature:(void)
test_refs_delete__packed_loose	tests/refs/delete.c	/^void test_refs_delete__packed_loose(void)$/;"	f	signature:(void)
test_refs_delete__packed_only	tests/refs/delete.c	/^void test_refs_delete__packed_only(void)$/;"	f	signature:(void)
test_refs_delete__remove	tests/refs/delete.c	/^void test_refs_delete__remove(void)$/;"	f	signature:(void)
test_refs_dup__cleanup	tests/refs/dup.c	/^void test_refs_dup__cleanup(void)$/;"	f	signature:(void)
test_refs_dup__direct	tests/refs/dup.c	/^void test_refs_dup__direct(void)$/;"	f	signature:(void)
test_refs_dup__initialize	tests/refs/dup.c	/^void test_refs_dup__initialize(void)$/;"	f	signature:(void)
test_refs_dup__symbolic	tests/refs/dup.c	/^void test_refs_dup__symbolic(void)$/;"	f	signature:(void)
test_refs_foreachglob__can_cancel	tests/refs/foreachglob.c	/^void test_refs_foreachglob__can_cancel(void)$/;"	f	signature:(void)
test_refs_foreachglob__cleanup	tests/refs/foreachglob.c	/^void test_refs_foreachglob__cleanup(void)$/;"	f	signature:(void)
test_refs_foreachglob__initialize	tests/refs/foreachglob.c	/^void test_refs_foreachglob__initialize(void)$/;"	f	signature:(void)
test_refs_foreachglob__retrieve_all_refs	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_all_refs(void)$/;"	f	signature:(void)
test_refs_foreachglob__retrieve_local_branches	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_local_branches(void)$/;"	f	signature:(void)
test_refs_foreachglob__retrieve_partially_named_references	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_partially_named_references(void)$/;"	f	signature:(void)
test_refs_foreachglob__retrieve_remote_branches	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_remote_branches(void)$/;"	f	signature:(void)
test_refs_isvalidname__can_detect_invalid_formats	tests/refs/isvalidname.c	/^void test_refs_isvalidname__can_detect_invalid_formats(void)$/;"	f	signature:(void)
test_refs_isvalidname__wont_hopefully_choke_on_valid_formats	tests/refs/isvalidname.c	/^void test_refs_isvalidname__wont_hopefully_choke_on_valid_formats(void)$/;"	f	signature:(void)
test_refs_iterator__cleanup	tests/refs/iterator.c	/^void test_refs_iterator__cleanup(void)$/;"	f	signature:(void)
test_refs_iterator__concurrent_delete	tests/refs/iterator.c	/^void test_refs_iterator__concurrent_delete(void)$/;"	f	signature:(void)
test_refs_iterator__empty	tests/refs/iterator.c	/^void test_refs_iterator__empty(void)$/;"	f	signature:(void)
test_refs_iterator__foreach	tests/refs/iterator.c	/^void test_refs_iterator__foreach(void)$/;"	f	signature:(void)
test_refs_iterator__foreach_can_cancel	tests/refs/iterator.c	/^void test_refs_iterator__foreach_can_cancel(void)$/;"	f	signature:(void)
test_refs_iterator__foreach_name	tests/refs/iterator.c	/^void test_refs_iterator__foreach_name(void)$/;"	f	signature:(void)
test_refs_iterator__foreach_name_can_cancel	tests/refs/iterator.c	/^void test_refs_iterator__foreach_name_can_cancel(void)$/;"	f	signature:(void)
test_refs_iterator__initialize	tests/refs/iterator.c	/^void test_refs_iterator__initialize(void)$/;"	f	signature:(void)
test_refs_iterator__list	tests/refs/iterator.c	/^void test_refs_iterator__list(void)$/;"	f	signature:(void)
test_refs_list__all	tests/refs/list.c	/^void test_refs_list__all(void)$/;"	f	signature:(void)
test_refs_list__cleanup	tests/refs/list.c	/^void test_refs_list__cleanup(void)$/;"	f	signature:(void)
test_refs_list__do_not_retrieve_references_which_name_end_with_a_lock_extension	tests/refs/list.c	/^void test_refs_list__do_not_retrieve_references_which_name_end_with_a_lock_extension(void)$/;"	f	signature:(void)
test_refs_list__initialize	tests/refs/list.c	/^void test_refs_list__initialize(void)$/;"	f	signature:(void)
test_refs_listall__from_repository_opened_through_gitdir_path	tests/refs/listall.c	/^void test_refs_listall__from_repository_opened_through_gitdir_path(void)$/;"	f	signature:(void)
test_refs_listall__from_repository_opened_through_workdir_path	tests/refs/listall.c	/^void test_refs_listall__from_repository_opened_through_workdir_path(void)$/;"	f	signature:(void)
test_refs_listall__from_repository_with_no_trailing_newline	tests/refs/listall.c	/^void test_refs_listall__from_repository_with_no_trailing_newline(void)$/;"	f	signature:(void)
test_refs_lookup__cleanup	tests/refs/lookup.c	/^void test_refs_lookup__cleanup(void)$/;"	f	signature:(void)
test_refs_lookup__dwim_notfound	tests/refs/lookup.c	/^void test_refs_lookup__dwim_notfound(void)$/;"	f	signature:(void)
test_refs_lookup__initialize	tests/refs/lookup.c	/^void test_refs_lookup__initialize(void)$/;"	f	signature:(void)
test_refs_lookup__invalid_name	tests/refs/lookup.c	/^void test_refs_lookup__invalid_name(void)$/;"	f	signature:(void)
test_refs_lookup__namespace	tests/refs/lookup.c	/^void test_refs_lookup__namespace(void)$/;"	f	signature:(void)
test_refs_lookup__oid	tests/refs/lookup.c	/^void test_refs_lookup__oid(void)$/;"	f	signature:(void)
test_refs_lookup__with_resolve	tests/refs/lookup.c	/^void test_refs_lookup__with_resolve(void)$/;"	f	signature:(void)
test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version	tests/refs/normalize.c	/^void test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version(void)$/;"	f	signature:(void)
test_refs_normalize__can_normalize_a_direct_reference_name	tests/refs/normalize.c	/^void test_refs_normalize__can_normalize_a_direct_reference_name(void)$/;"	f	signature:(void)
test_refs_normalize__cannot_normalize_any_direct_reference_name	tests/refs/normalize.c	/^void test_refs_normalize__cannot_normalize_any_direct_reference_name(void)$/;"	f	signature:(void)
test_refs_normalize__jgit_suite	tests/refs/normalize.c	/^void test_refs_normalize__jgit_suite(void)$/;"	f	signature:(void)
test_refs_normalize__refspec_pattern	tests/refs/normalize.c	/^void test_refs_normalize__refspec_pattern(void)$/;"	f	signature:(void)
test_refs_normalize__symbolic	tests/refs/normalize.c	/^void test_refs_normalize__symbolic(void)$/;"	f	signature:(void)
test_refs_overwrite__cleanup	tests/refs/overwrite.c	/^void test_refs_overwrite__cleanup(void)$/;"	f	signature:(void)
test_refs_overwrite__initialize	tests/refs/overwrite.c	/^void test_refs_overwrite__initialize(void)$/;"	f	signature:(void)
test_refs_overwrite__object_id	tests/refs/overwrite.c	/^void test_refs_overwrite__object_id(void)$/;"	f	signature:(void)
test_refs_overwrite__object_id_with_symbolic	tests/refs/overwrite.c	/^void test_refs_overwrite__object_id_with_symbolic(void)$/;"	f	signature:(void)
test_refs_overwrite__symbolic	tests/refs/overwrite.c	/^void test_refs_overwrite__symbolic(void)$/;"	f	signature:(void)
test_refs_overwrite__symbolic_with_object_id	tests/refs/overwrite.c	/^void test_refs_overwrite__symbolic_with_object_id(void)$/;"	f	signature:(void)
test_refs_pack__cleanup	tests/refs/pack.c	/^void test_refs_pack__cleanup(void)$/;"	f	signature:(void)
test_refs_pack__empty	tests/refs/pack.c	/^void test_refs_pack__empty(void)$/;"	f	signature:(void)
test_refs_pack__initialize	tests/refs/pack.c	/^void test_refs_pack__initialize(void)$/;"	f	signature:(void)
test_refs_pack__loose	tests/refs/pack.c	/^void test_refs_pack__loose(void)$/;"	f	signature:(void)
test_refs_pack__symbolic	tests/refs/pack.c	/^void test_refs_pack__symbolic(void)$/;"	f	signature:(void)
test_refs_peel__can_peel_a_branch	tests/refs/peel.c	/^void test_refs_peel__can_peel_a_branch(void)$/;"	f	signature:(void)
test_refs_peel__can_peel_a_symbolic_reference	tests/refs/peel.c	/^void test_refs_peel__can_peel_a_symbolic_reference(void)$/;"	f	signature:(void)
test_refs_peel__can_peel_a_tag	tests/refs/peel.c	/^void test_refs_peel__can_peel_a_tag(void)$/;"	f	signature:(void)
test_refs_peel__can_peel_fully_peeled_packed_refs	tests/refs/peel.c	/^void test_refs_peel__can_peel_fully_peeled_packed_refs(void)$/;"	f	signature:(void)
test_refs_peel__can_peel_into_any_non_tag_object	tests/refs/peel.c	/^void test_refs_peel__can_peel_into_any_non_tag_object(void)$/;"	f	signature:(void)
test_refs_peel__cannot_peel_into_a_non_existing_target	tests/refs/peel.c	/^void test_refs_peel__cannot_peel_into_a_non_existing_target(void)$/;"	f	signature:(void)
test_refs_peel__cleanup	tests/refs/peel.c	/^void test_refs_peel__cleanup(void)$/;"	f	signature:(void)
test_refs_peel__initialize	tests/refs/peel.c	/^void test_refs_peel__initialize(void)$/;"	f	signature:(void)
test_refs_races__cleanup	tests/refs/races.c	/^void test_refs_races__cleanup(void)$/;"	f	signature:(void)
test_refs_races__create_matching	tests/refs/races.c	/^void test_refs_races__create_matching(void)$/;"	f	signature:(void)
test_refs_races__delete	tests/refs/races.c	/^void test_refs_races__delete(void)$/;"	f	signature:(void)
test_refs_races__initialize	tests/refs/races.c	/^void test_refs_races__initialize(void)$/;"	f	signature:(void)
test_refs_races__switch_oid_to_symbolic	tests/refs/races.c	/^void test_refs_races__switch_oid_to_symbolic(void)$/;"	f	signature:(void)
test_refs_races__switch_symbolic_to_oid	tests/refs/races.c	/^void test_refs_races__switch_symbolic_to_oid(void)$/;"	f	signature:(void)
test_refs_races__symbolic_create_matching	tests/refs/races.c	/^void test_refs_races__symbolic_create_matching(void)$/;"	f	signature:(void)
test_refs_read__can_determine_if_a_reference_is_a_local_branch	tests/refs/read.c	/^void test_refs_read__can_determine_if_a_reference_is_a_local_branch(void)$/;"	f	signature:(void)
test_refs_read__can_determine_if_a_reference_is_a_note	tests/refs/read.c	/^void test_refs_read__can_determine_if_a_reference_is_a_note(void)$/;"	f	signature:(void)
test_refs_read__can_determine_if_a_reference_is_a_tag	tests/refs/read.c	/^void test_refs_read__can_determine_if_a_reference_is_a_tag(void)$/;"	f	signature:(void)
test_refs_read__chomped	tests/refs/read.c	/^void test_refs_read__chomped(void)$/;"	f	signature:(void)
test_refs_read__cleanup	tests/refs/read.c	/^void test_refs_read__cleanup(void)$/;"	f	signature:(void)
test_refs_read__head_then_master	tests/refs/read.c	/^void test_refs_read__head_then_master(void)$/;"	f	signature:(void)
test_refs_read__initialize	tests/refs/read.c	/^void test_refs_read__initialize(void)$/;"	f	signature:(void)
test_refs_read__invalid_name_returns_EINVALIDSPEC	tests/refs/read.c	/^void test_refs_read__invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_refs_read__loose_first	tests/refs/read.c	/^void test_refs_read__loose_first(void)$/;"	f	signature:(void)
test_refs_read__loose_tag	tests/refs/read.c	/^void test_refs_read__loose_tag(void)$/;"	f	signature:(void)
test_refs_read__master_then_head	tests/refs/read.c	/^void test_refs_read__master_then_head(void)$/;"	f	signature:(void)
test_refs_read__nested_symbolic	tests/refs/read.c	/^void test_refs_read__nested_symbolic(void)$/;"	f	signature:(void)
test_refs_read__nonexisting_tag	tests/refs/read.c	/^void test_refs_read__nonexisting_tag(void)$/;"	f	signature:(void)
test_refs_read__packed	tests/refs/read.c	/^void test_refs_read__packed(void)$/;"	f	signature:(void)
test_refs_read__symbolic	tests/refs/read.c	/^void test_refs_read__symbolic(void)$/;"	f	signature:(void)
test_refs_read__trailing	tests/refs/read.c	/^void test_refs_read__trailing(void)$/;"	f	signature:(void)
test_refs_read__unfound_return_ENOTFOUND	tests/refs/read.c	/^void test_refs_read__unfound_return_ENOTFOUND(void)$/;"	f	signature:(void)
test_refs_reflog_drop__can_drop_all_the_entries	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_all_the_entries(void)$/;"	f	signature:(void)
test_refs_reflog_drop__can_drop_an_entry	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_an_entry(void)$/;"	f	signature:(void)
test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history(void)$/;"	f	signature:(void)
test_refs_reflog_drop__can_drop_the_oldest_entry	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_the_oldest_entry(void)$/;"	f	signature:(void)
test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history(void)$/;"	f	signature:(void)
test_refs_reflog_drop__can_persist_deletion_on_disk	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_persist_deletion_on_disk(void)$/;"	f	signature:(void)
test_refs_reflog_drop__cleanup	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__cleanup(void)$/;"	f	signature:(void)
test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_refs_reflog_drop__initialize	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__initialize(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__append_then_read	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__append_then_read(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__append_to_HEAD_when_changing_current_branch	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__append_to_HEAD_when_changing_current_branch(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__cannot_write_a_moved_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__cannot_write_a_moved_reflog(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__cleanup	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__cleanup(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__deleting_the_reference_deletes_the_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__deleting_the_reference_deletes_the_reflog(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__do_not_append_when_no_update	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__do_not_append_when_no_update(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__fails_gracefully_on_nonempty_reflog_dir	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__fails_gracefully_on_nonempty_reflog_dir(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__initialize	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__initialize(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__logallrefupdates_bare_set_false	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__logallrefupdates_bare_set_false(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__logallrefupdates_bare_unset	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__logallrefupdates_bare_unset(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__logallrefupdates_nonbare_set_false	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__logallrefupdates_nonbare_set_false(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__reading_a_reflog_with_invalid_format_returns_error	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__reading_a_reflog_with_invalid_format_returns_error(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__reference_has_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__reference_has_reflog(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__removes_empty_reflog_dir	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__removes_empty_reflog_dir(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__write_only_std_locations	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__write_only_std_locations(void)$/;"	f	signature:(void)
test_refs_reflog_reflog__write_when_explicitly_active	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__write_when_explicitly_active(void)$/;"	f	signature:(void)
test_refs_rename__cleanup	tests/refs/rename.c	/^void test_refs_rename__cleanup(void)$/;"	f	signature:(void)
test_refs_rename__force_loose	tests/refs/rename.c	/^void test_refs_rename__force_loose(void)$/;"	f	signature:(void)
test_refs_rename__force_loose_packed	tests/refs/rename.c	/^void test_refs_rename__force_loose_packed(void)$/;"	f	signature:(void)
test_refs_rename__initialize	tests/refs/rename.c	/^void test_refs_rename__initialize(void)$/;"	f	signature:(void)
test_refs_rename__invalid_name	tests/refs/rename.c	/^void test_refs_rename__invalid_name(void)$/;"	f	signature:(void)
test_refs_rename__loose	tests/refs/rename.c	/^void test_refs_rename__loose(void)$/;"	f	signature:(void)
test_refs_rename__move_up	tests/refs/rename.c	/^void test_refs_rename__move_up(void)$/;"	f	signature:(void)
test_refs_rename__name_collision	tests/refs/rename.c	/^void test_refs_rename__name_collision(void)$/;"	f	signature:(void)
test_refs_rename__overwrite	tests/refs/rename.c	/^void test_refs_rename__overwrite(void)$/;"	f	signature:(void)
test_refs_rename__packed	tests/refs/rename.c	/^void test_refs_rename__packed(void)$/;"	f	signature:(void)
test_refs_rename__packed_doesnt_pack_others	tests/refs/rename.c	/^void test_refs_rename__packed_doesnt_pack_others(void)$/;"	f	signature:(void)
test_refs_rename__prefix	tests/refs/rename.c	/^void test_refs_rename__prefix(void)$/;"	f	signature:(void)
test_refs_rename__propagate_eexists	tests/refs/rename.c	/^void test_refs_rename__propagate_eexists(void)$/;"	f	signature:(void)
test_refs_rename__writes_to_reflog	tests/refs/rename.c	/^void test_refs_rename__writes_to_reflog(void)$/;"	f	signature:(void)
test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS	tests/refs/revparse.c	/^void test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS(void)$/;"	f	signature:(void)
test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS	tests/refs/revparse.c	/^void test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS(void)$/;"	f	signature:(void)
test_refs_revparse__chaining	tests/refs/revparse.c	/^void test_refs_revparse__chaining(void)$/;"	f	signature:(void)
test_refs_revparse__cleanup	tests/refs/revparse.c	/^void test_refs_revparse__cleanup(void)$/;"	f	signature:(void)
test_refs_revparse__colon	tests/refs/revparse.c	/^void test_refs_revparse__colon(void)$/;"	f	signature:(void)
test_refs_revparse__date	tests/refs/revparse.c	/^void test_refs_revparse__date(void)$/;"	f	signature:(void)
test_refs_revparse__describe_output	tests/refs/revparse.c	/^void test_refs_revparse__describe_output(void)$/;"	f	signature:(void)
test_refs_revparse__disambiguation	tests/refs/revparse.c	/^void test_refs_revparse__disambiguation(void)$/;"	f	signature:(void)
test_refs_revparse__ext_can_expand_short_reference_names	tests/refs/revparse.c	/^void test_refs_revparse__ext_can_expand_short_reference_names(void)$/;"	f	signature:(void)
test_refs_revparse__ext_retrieves_both_the_reference_and_its_target	tests/refs/revparse.c	/^void test_refs_revparse__ext_retrieves_both_the_reference_and_its_target(void)$/;"	f	signature:(void)
test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision	tests/refs/revparse.c	/^void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision(void)$/;"	f	signature:(void)
test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content	tests/refs/revparse.c	/^void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content(void)$/;"	f	signature:(void)
test_refs_revparse__full_refs	tests/refs/revparse.c	/^void test_refs_revparse__full_refs(void)$/;"	f	signature:(void)
test_refs_revparse__head	tests/refs/revparse.c	/^void test_refs_revparse__head(void)$/;"	f	signature:(void)
test_refs_revparse__initialize	tests/refs/revparse.c	/^void test_refs_revparse__initialize(void)$/;"	f	signature:(void)
test_refs_revparse__invalid_reference_name	tests/refs/revparse.c	/^void test_refs_revparse__invalid_reference_name(void)$/;"	f	signature:(void)
test_refs_revparse__issue_994	tests/refs/revparse.c	/^void test_refs_revparse__issue_994(void)$/;"	f	signature:(void)
test_refs_revparse__linear_history	tests/refs/revparse.c	/^void test_refs_revparse__linear_history(void)$/;"	f	signature:(void)
test_refs_revparse__nonexistant_object	tests/refs/revparse.c	/^void test_refs_revparse__nonexistant_object(void)$/;"	f	signature:(void)
test_refs_revparse__not_tag	tests/refs/revparse.c	/^void test_refs_revparse__not_tag(void)$/;"	f	signature:(void)
test_refs_revparse__nth_parent	tests/refs/revparse.c	/^void test_refs_revparse__nth_parent(void)$/;"	f	signature:(void)
test_refs_revparse__ordinal	tests/refs/revparse.c	/^void test_refs_revparse__ordinal(void)$/;"	f	signature:(void)
test_refs_revparse__parses_range_operator	tests/refs/revparse.c	/^void test_refs_revparse__parses_range_operator(void)$/;"	f	signature:(void)
test_refs_revparse__partial_refs	tests/refs/revparse.c	/^void test_refs_revparse__partial_refs(void)$/;"	f	signature:(void)
test_refs_revparse__previous_head	tests/refs/revparse.c	/^void test_refs_revparse__previous_head(void)$/;"	f	signature:(void)
test_refs_revparse__range	tests/refs/revparse.c	/^void test_refs_revparse__range(void)$/;"	f	signature:(void)
test_refs_revparse__reflog_of_a_ref_under_refs	tests/refs/revparse.c	/^void test_refs_revparse__reflog_of_a_ref_under_refs(void)$/;"	f	signature:(void)
test_refs_revparse__revwalk	tests/refs/revparse.c	/^void test_refs_revparse__revwalk(void)$/;"	f	signature:(void)
test_refs_revparse__shas	tests/refs/revparse.c	/^void test_refs_revparse__shas(void)$/;"	f	signature:(void)
test_refs_revparse__to_type	tests/refs/revparse.c	/^void test_refs_revparse__to_type(void)$/;"	f	signature:(void)
test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha	tests/refs/revparse.c	/^void test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha(void)$/;"	f	signature:(void)
test_refs_revparse__try_to_retrieve_branch_before_described_tag	tests/refs/revparse.c	/^void test_refs_revparse__try_to_retrieve_branch_before_described_tag(void)$/;"	f	signature:(void)
test_refs_revparse__try_to_retrieve_sha_before_branch	tests/refs/revparse.c	/^void test_refs_revparse__try_to_retrieve_sha_before_branch(void)$/;"	f	signature:(void)
test_refs_revparse__uneven_sizes	tests/refs/revparse.c	/^void test_refs_revparse__uneven_sizes(void)$/;"	f	signature:(void)
test_refs_revparse__upstream	tests/refs/revparse.c	/^void test_refs_revparse__upstream(void)$/;"	f	signature:(void)
test_refs_settargetwithlog__cleanup	tests/refs/settargetwithlog.c	/^void test_refs_settargetwithlog__cleanup(void)$/;"	f	signature:(void)
test_refs_settargetwithlog__initialize	tests/refs/settargetwithlog.c	/^void test_refs_settargetwithlog__initialize(void)$/;"	f	signature:(void)
test_refs_settargetwithlog__updating_a_direct_reference_adds_a_reflog_entry	tests/refs/settargetwithlog.c	/^void test_refs_settargetwithlog__updating_a_direct_reference_adds_a_reflog_entry(void)$/;"	f	signature:(void)
test_refs_setter__cant_update_direct_with_symbolic	tests/refs/setter.c	/^void test_refs_setter__cant_update_direct_with_symbolic(void)$/;"	f	signature:(void)
test_refs_setter__cant_update_symbolic_with_direct	tests/refs/setter.c	/^void test_refs_setter__cant_update_symbolic_with_direct(void)$/;"	f	signature:(void)
test_refs_setter__cleanup	tests/refs/setter.c	/^void test_refs_setter__cleanup(void)$/;"	f	signature:(void)
test_refs_setter__initialize	tests/refs/setter.c	/^void test_refs_setter__initialize(void)$/;"	f	signature:(void)
test_refs_setter__update_direct	tests/refs/setter.c	/^void test_refs_setter__update_direct(void)$/;"	f	signature:(void)
test_refs_setter__update_symbolic	tests/refs/setter.c	/^void test_refs_setter__update_symbolic(void)$/;"	f	signature:(void)
test_refs_shorthand__0	tests/refs/shorthand.c	/^void test_refs_shorthand__0(void)$/;"	f	signature:(void)
test_refs_transactions__cleanup	tests/refs/transactions.c	/^void test_refs_transactions__cleanup(void)$/;"	f	signature:(void)
test_refs_transactions__initialize	tests/refs/transactions.c	/^void test_refs_transactions__initialize(void)$/;"	f	signature:(void)
test_refs_transactions__single_create	tests/refs/transactions.c	/^void test_refs_transactions__single_create(void)$/;"	f	signature:(void)
test_refs_transactions__single_ref_delete	tests/refs/transactions.c	/^void test_refs_transactions__single_ref_delete(void)$/;"	f	signature:(void)
test_refs_transactions__single_ref_mix_types	tests/refs/transactions.c	/^void test_refs_transactions__single_ref_mix_types(void)$/;"	f	signature:(void)
test_refs_transactions__single_ref_oid	tests/refs/transactions.c	/^void test_refs_transactions__single_ref_oid(void)$/;"	f	signature:(void)
test_refs_transactions__single_ref_symbolic	tests/refs/transactions.c	/^void test_refs_transactions__single_ref_symbolic(void)$/;"	f	signature:(void)
test_refs_transactions__unlocked_set	tests/refs/transactions.c	/^void test_refs_transactions__unlocked_set(void)$/;"	f	signature:(void)
test_refs_unicode__cleanup	tests/refs/unicode.c	/^void test_refs_unicode__cleanup(void)$/;"	f	signature:(void)
test_refs_unicode__create_and_lookup	tests/refs/unicode.c	/^void test_refs_unicode__create_and_lookup(void)$/;"	f	signature:(void)
test_refs_unicode__initialize	tests/refs/unicode.c	/^void test_refs_unicode__initialize(void)$/;"	f	signature:(void)
test_refs_update__cleanup	tests/refs/update.c	/^void test_refs_update__cleanup(void)$/;"	f	signature:(void)
test_refs_update__initialize	tests/refs/update.c	/^void test_refs_update__initialize(void)$/;"	f	signature:(void)
test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/update.c	/^void test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f	signature:(void)
test_remote_insteadof__anonymous_remote	tests/remote/insteadof.c	/^void test_remote_insteadof__anonymous_remote(void)$/;"	f	signature:(void)
test_remote_insteadof__cleanup	tests/remote/insteadof.c	/^void test_remote_insteadof__cleanup(void)$/;"	f	signature:(void)
test_remote_insteadof__initialize	tests/remote/insteadof.c	/^void test_remote_insteadof__initialize(void)$/;"	f	signature:(void)
test_remote_insteadof__pushurl_insteadof_applicable	tests/remote/insteadof.c	/^void test_remote_insteadof__pushurl_insteadof_applicable(void)$/;"	f	signature:(void)
test_remote_insteadof__pushurl_insteadof_not_applicable	tests/remote/insteadof.c	/^void test_remote_insteadof__pushurl_insteadof_not_applicable(void)$/;"	f	signature:(void)
test_remote_insteadof__url_insteadof_applicable	tests/remote/insteadof.c	/^void test_remote_insteadof__url_insteadof_applicable(void)$/;"	f	signature:(void)
test_remote_insteadof__url_insteadof_not_applicable	tests/remote/insteadof.c	/^void test_remote_insteadof__url_insteadof_not_applicable(void)$/;"	f	signature:(void)
test_repo_1	tests/status/ignore.c	/^static const char *test_repo_1 = "empty_standard_repo";$/;"	v	file:
test_repo_config__can_open_global_when_there_is_no_file	tests/repo/config.c	/^void test_repo_config__can_open_global_when_there_is_no_file(void)$/;"	f	signature:(void)
test_repo_config__can_open_missing_global_with_separators	tests/repo/config.c	/^void test_repo_config__can_open_missing_global_with_separators(void)$/;"	f	signature:(void)
test_repo_config__cleanup	tests/repo/config.c	/^void test_repo_config__cleanup(void)$/;"	f	signature:(void)
test_repo_config__initialize	tests/repo/config.c	/^void test_repo_config__initialize(void)$/;"	f	signature:(void)
test_repo_config__read_with_no_configs_at_all	tests/repo/config.c	/^void test_repo_config__read_with_no_configs_at_all(void)$/;"	f	signature:(void)
test_repo_discover__ceiling_should_not_affect_gitdir_redirection	tests/repo/discover.c	/^void test_repo_discover__ceiling_should_not_affect_gitdir_redirection(void)$/;"	f	signature:(void)
test_repo_discover__cleanup	tests/repo/discover.c	/^void test_repo_discover__cleanup(void)$/;"	f	signature:(void)
test_repo_discover__discovering_nonexistent_dir_fails	tests/repo/discover.c	/^void test_repo_discover__discovering_nonexistent_dir_fails(void)$/;"	f	signature:(void)
test_repo_discover__discovering_repo_with_exact_path_succeeds	tests/repo/discover.c	/^void test_repo_discover__discovering_repo_with_exact_path_succeeds(void)$/;"	f	signature:(void)
test_repo_discover__discovering_repo_with_subdirectory_succeeds	tests/repo/discover.c	/^void test_repo_discover__discovering_repo_with_subdirectory_succeeds(void)$/;"	f	signature:(void)
test_repo_discover__discovering_repository_with_alternative_gitdir_succeeds	tests/repo/discover.c	/^void test_repo_discover__discovering_repository_with_alternative_gitdir_succeeds(void)$/;"	f	signature:(void)
test_repo_discover__discovering_repository_with_ceiling	tests/repo/discover.c	/^void test_repo_discover__discovering_repository_with_ceiling(void)$/;"	f	signature:(void)
test_repo_discover__discovering_repository_with_malformed_alternative_gitdir_fails	tests/repo/discover.c	/^void test_repo_discover__discovering_repository_with_malformed_alternative_gitdir_fails(void)$/;"	f	signature:(void)
test_repo_discover__discovery_starting_at_file_succeeds	tests/repo/discover.c	/^void test_repo_discover__discovery_starting_at_file_succeeds(void)$/;"	f	signature:(void)
test_repo_discover__initialize	tests/repo/discover.c	/^void test_repo_discover__initialize(void)$/;"	f	signature:(void)
test_repo_discover__other_ceiling	tests/repo/discover.c	/^void test_repo_discover__other_ceiling(void)$/;"	f	signature:(void)
test_repo_env__cleanup	tests/repo/env.c	/^void test_repo_env__cleanup(void)$/;"	f	signature:(void)
test_repo_env__initialize	tests/repo/env.c	/^void test_repo_env__initialize(void)$/;"	f	signature:(void)
test_repo_env__open	tests/repo/env.c	/^void test_repo_env__open(void)$/;"	f	signature:(void)
test_repo_getters__is_empty_can_detect_used_repositories	tests/repo/getters.c	/^void test_repo_getters__is_empty_can_detect_used_repositories(void)$/;"	f	signature:(void)
test_repo_getters__is_empty_correctly_deals_with_pristine_looking_repos	tests/repo/getters.c	/^void test_repo_getters__is_empty_correctly_deals_with_pristine_looking_repos(void)$/;"	f	signature:(void)
test_repo_getters__retrieving_the_odb_honors_the_refcount	tests/repo/getters.c	/^void test_repo_getters__retrieving_the_odb_honors_the_refcount(void)$/;"	f	signature:(void)
test_repo_hashfile__cleanup	tests/repo/hashfile.c	/^void test_repo_hashfile__cleanup(void)$/;"	f	signature:(void)
test_repo_hashfile__filtered	tests/repo/hashfile.c	/^void test_repo_hashfile__filtered(void)$/;"	f	signature:(void)
test_repo_hashfile__initialize	tests/repo/hashfile.c	/^void test_repo_hashfile__initialize(void)$/;"	f	signature:(void)
test_repo_hashfile__simple	tests/repo/hashfile.c	/^void test_repo_hashfile__simple(void)$/;"	f	signature:(void)
test_repo_head__branch_birth	tests/repo/head.c	/^void test_repo_head__branch_birth(void)$/;"	f	signature:(void)
test_repo_head__can_tell_if_an_unborn_head_is_detached	tests/repo/head.c	/^void test_repo_head__can_tell_if_an_unborn_head_is_detached(void)$/;"	f	signature:(void)
test_repo_head__cleanup	tests/repo/head.c	/^void test_repo_head__cleanup(void)$/;"	f	signature:(void)
test_repo_head__detach_head_Detaches_HEAD_and_make_it_point_to_the_peeled_commit	tests/repo/head.c	/^void test_repo_head__detach_head_Detaches_HEAD_and_make_it_point_to_the_peeled_commit(void)$/;"	f	signature:(void)
test_repo_head__detach_head_Fails_if_HEAD_and_point_to_a_non_commitish	tests/repo/head.c	/^void test_repo_head__detach_head_Fails_if_HEAD_and_point_to_a_non_commitish(void)$/;"	f	signature:(void)
test_repo_head__detaching_an_unborn_branch_returns_GIT_EUNBORNBRANCH	tests/repo/head.c	/^void test_repo_head__detaching_an_unborn_branch_returns_GIT_EUNBORNBRANCH(void)$/;"	f	signature:(void)
test_repo_head__detaching_writes_reflog	tests/repo/head.c	/^void test_repo_head__detaching_writes_reflog(void)$/;"	f	signature:(void)
test_repo_head__head_detached	tests/repo/head.c	/^void test_repo_head__head_detached(void)$/;"	f	signature:(void)
test_repo_head__initialize	tests/repo/head.c	/^void test_repo_head__initialize(void)$/;"	f	signature:(void)
test_repo_head__orphan_branch_does_not_count	tests/repo/head.c	/^void test_repo_head__orphan_branch_does_not_count(void)$/;"	f	signature:(void)
test_repo_head__retrieving_a_missing_head_returns_GIT_ENOTFOUND	tests/repo/head.c	/^void test_repo_head__retrieving_a_missing_head_returns_GIT_ENOTFOUND(void)$/;"	f	signature:(void)
test_repo_head__retrieving_an_unborn_branch_returns_GIT_EUNBORNBRANCH	tests/repo/head.c	/^void test_repo_head__retrieving_an_unborn_branch_returns_GIT_EUNBORNBRANCH(void)$/;"	f	signature:(void)
test_repo_head__set_head_Attaches_HEAD_to_un_unborn_branch_when_the_branch_doesnt_exist	tests/repo/head.c	/^void test_repo_head__set_head_Attaches_HEAD_to_un_unborn_branch_when_the_branch_doesnt_exist(void)$/;"	f	signature:(void)
test_repo_head__set_head_Attaches_HEAD_when_the_reference_points_to_a_branch	tests/repo/head.c	/^void test_repo_head__set_head_Attaches_HEAD_when_the_reference_points_to_a_branch(void)$/;"	f	signature:(void)
test_repo_head__set_head_Detaches_HEAD_when_the_reference_doesnt_point_to_a_branch	tests/repo/head.c	/^void test_repo_head__set_head_Detaches_HEAD_when_the_reference_doesnt_point_to_a_branch(void)$/;"	f	signature:(void)
test_repo_head__set_head_Fails_when_the_reference_points_to_a_non_commitish	tests/repo/head.c	/^void test_repo_head__set_head_Fails_when_the_reference_points_to_a_non_commitish(void)$/;"	f	signature:(void)
test_repo_head__set_head_Returns_ENOTFOUND_when_the_reference_doesnt_exist	tests/repo/head.c	/^void test_repo_head__set_head_Returns_ENOTFOUND_when_the_reference_doesnt_exist(void)$/;"	f	signature:(void)
test_repo_head__set_head_detached_Detaches_HEAD_and_make_it_point_to_the_peeled_commit	tests/repo/head.c	/^void test_repo_head__set_head_detached_Detaches_HEAD_and_make_it_point_to_the_peeled_commit(void)$/;"	f	signature:(void)
test_repo_head__set_head_detached_Fails_when_the_object_isnt_a_commitish	tests/repo/head.c	/^void test_repo_head__set_head_detached_Fails_when_the_object_isnt_a_commitish(void)$/;"	f	signature:(void)
test_repo_head__set_head_detached_Return_ENOTFOUND_when_the_object_doesnt_exist	tests/repo/head.c	/^void test_repo_head__set_head_detached_Return_ENOTFOUND_when_the_object_doesnt_exist(void)$/;"	f	signature:(void)
test_repo_head__set_to_current_target	tests/repo/head.c	/^void test_repo_head__set_to_current_target(void)$/;"	f	signature:(void)
test_repo_head__setting_head_updates_reflog	tests/repo/head.c	/^void test_repo_head__setting_head_updates_reflog(void)$/;"	f	signature:(void)
test_repo_head__symref_chain	tests/repo/head.c	/^void test_repo_head__symref_chain(void)$/;"	f	signature:(void)
test_repo_head__unborn_head	tests/repo/head.c	/^void test_repo_head__unborn_head(void)$/;"	f	signature:(void)
test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head	tests/repo/headtree.c	/^void test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head(void)$/;"	f	signature:(void)
test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head	tests/repo/headtree.c	/^void test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head(void)$/;"	f	signature:(void)
test_repo_headtree__cleanup	tests/repo/headtree.c	/^void test_repo_headtree__cleanup(void)$/;"	f	signature:(void)
test_repo_headtree__initialize	tests/repo/headtree.c	/^void test_repo_headtree__initialize(void)$/;"	f	signature:(void)
test_repo_headtree__when_head_is_missing_returns_ENOTFOUND	tests/repo/headtree.c	/^void test_repo_headtree__when_head_is_missing_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH	tests/repo/headtree.c	/^void test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH(void)$/;"	f	signature:(void)
test_repo_init__additional_templates	tests/repo/init.c	/^void test_repo_init__additional_templates(void)$/;"	f	signature:(void)
test_repo_init__at_filesystem_root	tests/repo/init.c	/^void test_repo_init__at_filesystem_root(void)$/;"	f	signature:(void)
test_repo_init__bare_repo	tests/repo/init.c	/^void test_repo_init__bare_repo(void)$/;"	f	signature:(void)
test_repo_init__bare_repo_escaping_current_workdir	tests/repo/init.c	/^void test_repo_init__bare_repo_escaping_current_workdir(void)$/;"	f	signature:(void)
test_repo_init__bare_repo_noslash	tests/repo/init.c	/^void test_repo_init__bare_repo_noslash(void)$/;"	f	signature:(void)
test_repo_init__can_reinit_an_initialized_repository	tests/repo/init.c	/^void test_repo_init__can_reinit_an_initialized_repository(void)$/;"	f	signature:(void)
test_repo_init__cleanup	tests/repo/init.c	/^void test_repo_init__cleanup(void)$/;"	f	signature:(void)
test_repo_init__detect_filemode	tests/repo/init.c	/^void test_repo_init__detect_filemode(void)$/;"	f	signature:(void)
test_repo_init__detect_ignorecase	tests/repo/init.c	/^void test_repo_init__detect_ignorecase(void)$/;"	f	signature:(void)
test_repo_init__detect_precompose_unicode_required	tests/repo/init.c	/^void test_repo_init__detect_precompose_unicode_required(void)$/;"	f	signature:(void)
test_repo_init__extended_0	tests/repo/init.c	/^void test_repo_init__extended_0(void)$/;"	f	signature:(void)
test_repo_init__extended_1	tests/repo/init.c	/^void test_repo_init__extended_1(void)$/;"	f	signature:(void)
test_repo_init__extended_with_template_and_shared_mode	tests/repo/init.c	/^void test_repo_init__extended_with_template_and_shared_mode(void)$/;"	f	signature:(void)
test_repo_init__external_templates_specified_in_config	tests/repo/init.c	/^void test_repo_init__external_templates_specified_in_config(void)$/;"	f	signature:(void)
test_repo_init__external_templates_specified_in_options	tests/repo/init.c	/^void test_repo_init__external_templates_specified_in_options(void)$/;"	f	signature:(void)
test_repo_init__external_templates_with_leading_dot	tests/repo/init.c	/^void test_repo_init__external_templates_with_leading_dot(void)$/;"	f	signature:(void)
test_repo_init__init_with_initial_commit	tests/repo/init.c	/^void test_repo_init__init_with_initial_commit(void)$/;"	f	signature:(void)
test_repo_init__initialize	tests/repo/init.c	/^void test_repo_init__initialize(void)$/;"	f	signature:(void)
test_repo_init__reinit_bare_repo	tests/repo/init.c	/^void test_repo_init__reinit_bare_repo(void)$/;"	f	signature:(void)
test_repo_init__reinit_doesnot_overwrite_ignorecase	tests/repo/init.c	/^void test_repo_init__reinit_doesnot_overwrite_ignorecase(void)$/;"	f	signature:(void)
test_repo_init__reinit_overwrites_filemode	tests/repo/init.c	/^void test_repo_init__reinit_overwrites_filemode(void)$/;"	f	signature:(void)
test_repo_init__reinit_too_recent_bare_repo	tests/repo/init.c	/^void test_repo_init__reinit_too_recent_bare_repo(void)$/;"	f	signature:(void)
test_repo_init__relative_gitdir	tests/repo/init.c	/^void test_repo_init__relative_gitdir(void)$/;"	f	signature:(void)
test_repo_init__relative_gitdir_2	tests/repo/init.c	/^void test_repo_init__relative_gitdir_2(void)$/;"	f	signature:(void)
test_repo_init__sets_logAllRefUpdates_according_to_type_of_repository	tests/repo/init.c	/^void test_repo_init__sets_logAllRefUpdates_according_to_type_of_repository(void)$/;"	f	signature:(void)
test_repo_init__standard_repo	tests/repo/init.c	/^void test_repo_init__standard_repo(void)$/;"	f	signature:(void)
test_repo_init__standard_repo_noslash	tests/repo/init.c	/^void test_repo_init__standard_repo_noslash(void)$/;"	f	signature:(void)
test_repo_message__cleanup	tests/repo/message.c	/^void test_repo_message__cleanup(void)$/;"	f	signature:(void)
test_repo_message__initialize	tests/repo/message.c	/^void test_repo_message__initialize(void)$/;"	f	signature:(void)
test_repo_message__message	tests/repo/message.c	/^void test_repo_message__message(void)$/;"	f	signature:(void)
test_repo_message__none	tests/repo/message.c	/^void test_repo_message__none(void)$/;"	f	signature:(void)
test_repo_new__has_nothing	tests/repo/new.c	/^void test_repo_new__has_nothing(void)$/;"	f	signature:(void)
test_repo_new__is_bare_until_workdir_set	tests/repo/new.c	/^void test_repo_new__is_bare_until_workdir_set(void)$/;"	f	signature:(void)
test_repo_open__bad_gitlinks	tests/repo/open.c	/^void test_repo_open__bad_gitlinks(void)$/;"	f	signature:(void)
test_repo_open__bare_empty_repo	tests/repo/open.c	/^void test_repo_open__bare_empty_repo(void)$/;"	f	signature:(void)
test_repo_open__cleanup	tests/repo/open.c	/^void test_repo_open__cleanup(void)$/;"	f	signature:(void)
test_repo_open__failures	tests/repo/open.c	/^void test_repo_open__failures(void)$/;"	f	signature:(void)
test_repo_open__force_bare	tests/repo/open.c	/^void test_repo_open__force_bare(void)$/;"	f	signature:(void)
test_repo_open__format_version_1	tests/repo/open.c	/^void test_repo_open__format_version_1(void)$/;"	f	signature:(void)
test_repo_open__from_git_new_workdir	tests/repo/open.c	/^void test_repo_open__from_git_new_workdir(void)$/;"	f	signature:(void)
test_repo_open__gitlinked	tests/repo/open.c	/^void test_repo_open__gitlinked(void)$/;"	f	signature:(void)
test_repo_open__no_config	tests/repo/open.c	/^void test_repo_open__no_config(void)$/;"	f	signature:(void)
test_repo_open__open_with_discover	tests/repo/open.c	/^void test_repo_open__open_with_discover(void)$/;"	f	signature:(void)
test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND	tests/repo/open.c	/^void test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_repo_open__standard_empty_repo_through_gitdir	tests/repo/open.c	/^void test_repo_open__standard_empty_repo_through_gitdir(void)$/;"	f	signature:(void)
test_repo_open__standard_empty_repo_through_workdir	tests/repo/open.c	/^void test_repo_open__standard_empty_repo_through_workdir(void)$/;"	f	signature:(void)
test_repo_open__win32_path	tests/repo/open.c	/^void test_repo_open__win32_path(void)$/;"	f	signature:(void)
test_repo_pathspec__cleanup	tests/repo/pathspec.c	/^void test_repo_pathspec__cleanup(void)$/;"	f	signature:(void)
test_repo_pathspec__in_memory	tests/repo/pathspec.c	/^void test_repo_pathspec__in_memory(void)$/;"	f	signature:(void)
test_repo_pathspec__index0	tests/repo/pathspec.c	/^void test_repo_pathspec__index0(void)$/;"	f	signature:(void)
test_repo_pathspec__index1	tests/repo/pathspec.c	/^void test_repo_pathspec__index1(void)$/;"	f	signature:(void)
test_repo_pathspec__initialize	tests/repo/pathspec.c	/^void test_repo_pathspec__initialize(void)$/;"	f	signature:(void)
test_repo_pathspec__tree0	tests/repo/pathspec.c	/^void test_repo_pathspec__tree0(void)$/;"	f	signature:(void)
test_repo_pathspec__tree5	tests/repo/pathspec.c	/^void test_repo_pathspec__tree5(void)$/;"	f	signature:(void)
test_repo_pathspec__workdir0	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir0(void)$/;"	f	signature:(void)
test_repo_pathspec__workdir1	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir1(void)$/;"	f	signature:(void)
test_repo_pathspec__workdir2	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir2(void)$/;"	f	signature:(void)
test_repo_pathspec__workdir3	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir3(void)$/;"	f	signature:(void)
test_repo_pathspec__workdir4	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir4(void)$/;"	f	signature:(void)
test_repo_reservedname__cleanup	tests/repo/reservedname.c	/^void test_repo_reservedname__cleanup(void)$/;"	f	signature:(void)
test_repo_reservedname__custom_shortname_recognized	tests/repo/reservedname.c	/^void test_repo_reservedname__custom_shortname_recognized(void)$/;"	f	signature:(void)
test_repo_reservedname__includes_shortname_on_win32	tests/repo/reservedname.c	/^void test_repo_reservedname__includes_shortname_on_win32(void)$/;"	f	signature:(void)
test_repo_reservedname__includes_shortname_when_requested	tests/repo/reservedname.c	/^void test_repo_reservedname__includes_shortname_when_requested(void)$/;"	f	signature:(void)
test_repo_reservedname__submodule_pointer	tests/repo/reservedname.c	/^void test_repo_reservedname__submodule_pointer(void)$/;"	f	signature:(void)
test_repo_reservedname__submodule_pointer_during_create	tests/repo/reservedname.c	/^void test_repo_reservedname__submodule_pointer_during_create(void)$/;"	f	signature:(void)
test_repo_setters__cleanup	tests/repo/setters.c	/^void test_repo_setters__cleanup(void)$/;"	f	signature:(void)
test_repo_setters__initialize	tests/repo/setters.c	/^void test_repo_setters__initialize(void)$/;"	f	signature:(void)
test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount	tests/repo/setters.c	/^void test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount(void)$/;"	f	signature:(void)
test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount	tests/repo/setters.c	/^void test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount(void)$/;"	f	signature:(void)
test_repo_setters__setting_a_workdir_creates_a_gitlink	tests/repo/setters.c	/^void test_repo_setters__setting_a_workdir_creates_a_gitlink(void)$/;"	f	signature:(void)
test_repo_setters__setting_a_workdir_prettifies_its_path	tests/repo/setters.c	/^void test_repo_setters__setting_a_workdir_prettifies_its_path(void)$/;"	f	signature:(void)
test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one	tests/repo/setters.c	/^void test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one(void)$/;"	f	signature:(void)
test_repo_shallow__cleanup	tests/repo/shallow.c	/^void test_repo_shallow__cleanup(void)$/;"	f	signature:(void)
test_repo_shallow__clears_errors	tests/repo/shallow.c	/^void test_repo_shallow__clears_errors(void)$/;"	f	signature:(void)
test_repo_shallow__empty_shallow_file	tests/repo/shallow.c	/^void test_repo_shallow__empty_shallow_file(void)$/;"	f	signature:(void)
test_repo_shallow__initialize	tests/repo/shallow.c	/^void test_repo_shallow__initialize(void)$/;"	f	signature:(void)
test_repo_shallow__no_shallow_file	tests/repo/shallow.c	/^void test_repo_shallow__no_shallow_file(void)$/;"	f	signature:(void)
test_repo_shallow__shallow_repo	tests/repo/shallow.c	/^void test_repo_shallow__shallow_repo(void)$/;"	f	signature:(void)
test_repo_state__apply_mailbox	tests/repo/state.c	/^void test_repo_state__apply_mailbox(void)$/;"	f	signature:(void)
test_repo_state__apply_mailbox_or_rebase	tests/repo/state.c	/^void test_repo_state__apply_mailbox_or_rebase(void)$/;"	f	signature:(void)
test_repo_state__bisect	tests/repo/state.c	/^void test_repo_state__bisect(void)$/;"	f	signature:(void)
test_repo_state__cherry_pick	tests/repo/state.c	/^void test_repo_state__cherry_pick(void)$/;"	f	signature:(void)
test_repo_state__cherrypick_sequence	tests/repo/state.c	/^void test_repo_state__cherrypick_sequence(void)$/;"	f	signature:(void)
test_repo_state__cleanup	tests/repo/state.c	/^void test_repo_state__cleanup(void)$/;"	f	signature:(void)
test_repo_state__initialize	tests/repo/state.c	/^void test_repo_state__initialize(void)$/;"	f	signature:(void)
test_repo_state__merge	tests/repo/state.c	/^void test_repo_state__merge(void)$/;"	f	signature:(void)
test_repo_state__none_with_HEAD_attached	tests/repo/state.c	/^void test_repo_state__none_with_HEAD_attached(void)$/;"	f	signature:(void)
test_repo_state__none_with_HEAD_detached	tests/repo/state.c	/^void test_repo_state__none_with_HEAD_detached(void)$/;"	f	signature:(void)
test_repo_state__rebase	tests/repo/state.c	/^void test_repo_state__rebase(void)$/;"	f	signature:(void)
test_repo_state__rebase_interactive	tests/repo/state.c	/^void test_repo_state__rebase_interactive(void)$/;"	f	signature:(void)
test_repo_state__rebase_merge	tests/repo/state.c	/^void test_repo_state__rebase_merge(void)$/;"	f	signature:(void)
test_repo_state__revert	tests/repo/state.c	/^void test_repo_state__revert(void)$/;"	f	signature:(void)
test_repo_state__revert_sequence	tests/repo/state.c	/^void test_repo_state__revert_sequence(void)$/;"	f	signature:(void)
test_reset_default__cleanup	tests/reset/default.c	/^void test_reset_default__cleanup(void)$/;"	f	signature:(void)
test_reset_default__initialize	tests/reset/default.c	/^void test_reset_default__initialize(void)$/;"	f	signature:(void)
test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index	tests/reset/default.c	/^void test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index(void)$/;"	f	signature:(void)
test_reset_default__resetting_filepaths_clears_previous_conflicts	tests/reset/default.c	/^void test_reset_default__resetting_filepaths_clears_previous_conflicts(void)$/;"	f	signature:(void)
test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries	tests/reset/default.c	/^void test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries(void)$/;"	f	signature:(void)
test_reset_default__resetting_unknown_filepaths_does_not_fail	tests/reset/default.c	/^void test_reset_default__resetting_unknown_filepaths_does_not_fail(void)$/;"	f	signature:(void)
test_reset_default__staged_rename_reset_delete	tests/reset/default.c	/^void test_reset_default__staged_rename_reset_delete(void)$/;"	f	signature:(void)
test_reset_hard__cannot_reset_in_a_bare_repository	tests/reset/hard.c	/^void test_reset_hard__cannot_reset_in_a_bare_repository(void)$/;"	f	signature:(void)
test_reset_hard__cleans_up_merge	tests/reset/hard.c	/^void test_reset_hard__cleans_up_merge(void)$/;"	f	signature:(void)
test_reset_hard__cleanup	tests/reset/hard.c	/^void test_reset_hard__cleanup(void)$/;"	f	signature:(void)
test_reset_hard__initialize	tests/reset/hard.c	/^void test_reset_hard__initialize(void)$/;"	f	signature:(void)
test_reset_hard__reflog_is_correct	tests/reset/hard.c	/^void test_reset_hard__reflog_is_correct(void)$/;"	f	signature:(void)
test_reset_hard__resetting_reverts_modified_files	tests/reset/hard.c	/^void test_reset_hard__resetting_reverts_modified_files(void)$/;"	f	signature:(void)
test_reset_hard__resetting_reverts_unmerged	tests/reset/hard.c	/^void test_reset_hard__resetting_reverts_unmerged(void)$/;"	f	signature:(void)
test_reset_hard__switch_file_to_dir	tests/reset/hard.c	/^void test_reset_hard__switch_file_to_dir(void)$/;"	f	signature:(void)
test_reset_mixed__cannot_reset_in_a_bare_repository	tests/reset/mixed.c	/^void test_reset_mixed__cannot_reset_in_a_bare_repository(void)$/;"	f	signature:(void)
test_reset_mixed__cleanup	tests/reset/mixed.c	/^void test_reset_mixed__cleanup(void)$/;"	f	signature:(void)
test_reset_mixed__initialize	tests/reset/mixed.c	/^void test_reset_mixed__initialize(void)$/;"	f	signature:(void)
test_reset_mixed__reflog_is_correct	tests/reset/mixed.c	/^void test_reset_mixed__reflog_is_correct(void)$/;"	f	signature:(void)
test_reset_mixed__resetting_refreshes_the_index_to_the_commit_tree	tests/reset/mixed.c	/^void test_reset_mixed__resetting_refreshes_the_index_to_the_commit_tree(void)$/;"	f	signature:(void)
test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit	tests/reset/soft.c	/^void test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit(void)$/;"	f	signature:(void)
test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit	tests/reset/soft.c	/^void test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit(void)$/;"	f	signature:(void)
test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit	tests/reset/soft.c	/^void test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit(void)$/;"	f	signature:(void)
test_reset_soft__cleanup	tests/reset/soft.c	/^void test_reset_soft__cleanup(void)$/;"	f	signature:(void)
test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence	tests/reset/soft.c	/^void test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence(void)$/;"	f	signature:(void)
test_reset_soft__fails_when_merging	tests/reset/soft.c	/^void test_reset_soft__fails_when_merging(void)$/;"	f	signature:(void)
test_reset_soft__initialize	tests/reset/soft.c	/^void test_reset_soft__initialize(void)$/;"	f	signature:(void)
test_reset_soft__reflog_is_correct	tests/reset/soft.c	/^void test_reset_soft__reflog_is_correct(void)$/;"	f	signature:(void)
test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn	tests/reset/soft.c	/^void test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn(void)$/;"	f	signature:(void)
test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit	tests/reset/soft.c	/^void test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit(void)$/;"	f	signature:(void)
test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head	tests/reset/soft.c	/^void test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head(void)$/;"	f	signature:(void)
test_revert_bare__automerge	tests/revert/bare.c	/^void test_revert_bare__automerge(void)$/;"	f	signature:(void)
test_revert_bare__cleanup	tests/revert/bare.c	/^void test_revert_bare__cleanup(void)$/;"	f	signature:(void)
test_revert_bare__conflicts	tests/revert/bare.c	/^void test_revert_bare__conflicts(void)$/;"	f	signature:(void)
test_revert_bare__initialize	tests/revert/bare.c	/^void test_revert_bare__initialize(void)$/;"	f	signature:(void)
test_revert_bare__orphan	tests/revert/bare.c	/^void test_revert_bare__orphan(void)$/;"	f	signature:(void)
test_revert_workdir__again	tests/revert/workdir.c	/^void test_revert_workdir__again(void)$/;"	f	signature:(void)
test_revert_workdir__again_after_automerge	tests/revert/workdir.c	/^void test_revert_workdir__again_after_automerge(void)$/;"	f	signature:(void)
test_revert_workdir__again_after_edit	tests/revert/workdir.c	/^void test_revert_workdir__again_after_edit(void)$/;"	f	signature:(void)
test_revert_workdir__again_after_edit_two	tests/revert/workdir.c	/^void test_revert_workdir__again_after_edit_two(void)$/;"	f	signature:(void)
test_revert_workdir__automerge	tests/revert/workdir.c	/^void test_revert_workdir__automerge(void)$/;"	f	signature:(void)
test_revert_workdir__cleanup	tests/revert/workdir.c	/^void test_revert_workdir__cleanup(void)$/;"	f	signature:(void)
test_revert_workdir__conflict_use_ours	tests/revert/workdir.c	/^void test_revert_workdir__conflict_use_ours(void)$/;"	f	signature:(void)
test_revert_workdir__conflicts	tests/revert/workdir.c	/^void test_revert_workdir__conflicts(void)$/;"	f	signature:(void)
test_revert_workdir__head	tests/revert/workdir.c	/^void test_revert_workdir__head(void)$/;"	f	signature:(void)
test_revert_workdir__initialize	tests/revert/workdir.c	/^void test_revert_workdir__initialize(void)$/;"	f	signature:(void)
test_revert_workdir__merge_fails_without_mainline_specified	tests/revert/workdir.c	/^void test_revert_workdir__merge_fails_without_mainline_specified(void)$/;"	f	signature:(void)
test_revert_workdir__merge_first_parent	tests/revert/workdir.c	/^void test_revert_workdir__merge_first_parent(void)$/;"	f	signature:(void)
test_revert_workdir__merge_second_parent	tests/revert/workdir.c	/^void test_revert_workdir__merge_second_parent(void)$/;"	f	signature:(void)
test_revert_workdir__nonmerge_fails_mainline_specified	tests/revert/workdir.c	/^void test_revert_workdir__nonmerge_fails_mainline_specified(void)$/;"	f	signature:(void)
test_revert_workdir__orphan	tests/revert/workdir.c	/^void test_revert_workdir__orphan(void)$/;"	f	signature:(void)
test_revert_workdir__rename	tests/revert/workdir.c	/^void test_revert_workdir__rename(void)$/;"	f	signature:(void)
test_revert_workdir__rename_1_of_2	tests/revert/workdir.c	/^void test_revert_workdir__rename_1_of_2(void)$/;"	f	signature:(void)
test_revwalk_basic__big_timestamp	tests/revwalk/basic.c	/^void test_revwalk_basic__big_timestamp(void)$/;"	f	signature:(void)
test_revwalk_basic__cleanup	tests/revwalk/basic.c	/^void test_revwalk_basic__cleanup(void)$/;"	f	signature:(void)
test_revwalk_basic__disallow_non_commit	tests/revwalk/basic.c	/^void test_revwalk_basic__disallow_non_commit(void)$/;"	f	signature:(void)
test_revwalk_basic__glob_heads	tests/revwalk/basic.c	/^void test_revwalk_basic__glob_heads(void)$/;"	f	signature:(void)
test_revwalk_basic__glob_heads_with_invalid	tests/revwalk/basic.c	/^void test_revwalk_basic__glob_heads_with_invalid(void)$/;"	f	signature:(void)
test_revwalk_basic__hide_then_push	tests/revwalk/basic.c	/^void test_revwalk_basic__hide_then_push(void)$/;"	f	signature:(void)
test_revwalk_basic__initialize	tests/revwalk/basic.c	/^void test_revwalk_basic__initialize(void)$/;"	f	signature:(void)
test_revwalk_basic__mimic_git_rev_list	tests/revwalk/basic.c	/^void test_revwalk_basic__mimic_git_rev_list(void)$/;"	f	signature:(void)
test_revwalk_basic__multiple_push_1	tests/revwalk/basic.c	/^void test_revwalk_basic__multiple_push_1(void)$/;"	f	signature:(void)
test_revwalk_basic__multiple_push_2	tests/revwalk/basic.c	/^void test_revwalk_basic__multiple_push_2(void)$/;"	f	signature:(void)
test_revwalk_basic__old_hidden_commit_one	tests/revwalk/basic.c	/^void test_revwalk_basic__old_hidden_commit_one(void)$/;"	f	signature:(void)
test_revwalk_basic__old_hidden_commit_two	tests/revwalk/basic.c	/^void test_revwalk_basic__old_hidden_commit_two(void)$/;"	f	signature:(void)
test_revwalk_basic__push_all	tests/revwalk/basic.c	/^void test_revwalk_basic__push_all(void)$/;"	f	signature:(void)
test_revwalk_basic__push_head	tests/revwalk/basic.c	/^void test_revwalk_basic__push_head(void)$/;"	f	signature:(void)
test_revwalk_basic__push_head_hide_ref	tests/revwalk/basic.c	/^void test_revwalk_basic__push_head_hide_ref(void)$/;"	f	signature:(void)
test_revwalk_basic__push_head_hide_ref_nobase	tests/revwalk/basic.c	/^void test_revwalk_basic__push_head_hide_ref_nobase(void)$/;"	f	signature:(void)
test_revwalk_basic__push_mixed	tests/revwalk/basic.c	/^void test_revwalk_basic__push_mixed(void)$/;"	f	signature:(void)
test_revwalk_basic__push_range	tests/revwalk/basic.c	/^void test_revwalk_basic__push_range(void)$/;"	f	signature:(void)
test_revwalk_basic__sorting_modes	tests/revwalk/basic.c	/^void test_revwalk_basic__sorting_modes(void)$/;"	f	signature:(void)
test_revwalk_hidecb__add_hide_cb_during_walking	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__add_hide_cb_during_walking(void)$/;"	f	signature:(void)
test_revwalk_hidecb__add_hide_cb_multiple_times	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__add_hide_cb_multiple_times(void)$/;"	f	signature:(void)
test_revwalk_hidecb__cleanup	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__cleanup(void)$/;"	f	signature:(void)
test_revwalk_hidecb__hide_all_cb	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__hide_all_cb(void)$/;"	f	signature:(void)
test_revwalk_hidecb__hide_none_cb	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__hide_none_cb(void)$/;"	f	signature:(void)
test_revwalk_hidecb__hide_some_commits	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__hide_some_commits(void)$/;"	f	signature:(void)
test_revwalk_hidecb__initialize	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__initialize(void)$/;"	f	signature:(void)
test_revwalk_hidecb__test_payload	tests/revwalk/hidecb.c	/^void test_revwalk_hidecb__test_payload(void)$/;"	f	signature:(void)
test_revwalk_mergebase__cleanup	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__cleanup(void)$/;"	f	signature:(void)
test_revwalk_mergebase__initialize	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__initialize(void)$/;"	f	signature:(void)
test_revwalk_mergebase__many_merge_branch	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__many_merge_branch(void)$/;"	f	signature:(void)
test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_revwalk_mergebase__merged_branch	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__merged_branch(void)$/;"	f	signature:(void)
test_revwalk_mergebase__multiple_merge_bases	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__multiple_merge_bases(void)$/;"	f	signature:(void)
test_revwalk_mergebase__multiple_merge_bases_many_commits	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__multiple_merge_bases_many_commits(void)$/;"	f	signature:(void)
test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_revwalk_mergebase__no_off_by_one_missing	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__no_off_by_one_missing(void)$/;"	f	signature:(void)
test_revwalk_mergebase__octopus_merge_branch	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__octopus_merge_branch(void)$/;"	f	signature:(void)
test_revwalk_mergebase__octopus_no_common_ancestor_returns_ENOTFOUND	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__octopus_no_common_ancestor_returns_ENOTFOUND(void)$/;"	f	signature:(void)
test_revwalk_mergebase__prefer_youngest_merge_base	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__prefer_youngest_merge_base(void)$/;"	f	signature:(void)
test_revwalk_mergebase__remove_redundant	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__remove_redundant(void)$/;"	f	signature:(void)
test_revwalk_mergebase__single1	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__single1(void)$/;"	f	signature:(void)
test_revwalk_mergebase__single2	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__single2(void)$/;"	f	signature:(void)
test_revwalk_mergebase__two_way_merge	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__two_way_merge(void)$/;"	f	signature:(void)
test_revwalk_signatureparsing__cleanup	tests/revwalk/signatureparsing.c	/^void test_revwalk_signatureparsing__cleanup(void)$/;"	f	signature:(void)
test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets	tests/revwalk/signatureparsing.c	/^void test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets(void)$/;"	f	signature:(void)
test_revwalk_signatureparsing__initialize	tests/revwalk/signatureparsing.c	/^void test_revwalk_signatureparsing__initialize(void)$/;"	f	signature:(void)
test_revwalk_simplify__cleanup	tests/revwalk/simplify.c	/^void test_revwalk_simplify__cleanup(void)$/;"	f	signature:(void)
test_revwalk_simplify__first_parent	tests/revwalk/simplify.c	/^void test_revwalk_simplify__first_parent(void)$/;"	f	signature:(void)
test_stash_apply__calls_progress_cb	tests/stash/apply.c	/^void test_stash_apply__calls_progress_cb(void)$/;"	f	signature:(void)
test_stash_apply__cleanup	tests/stash/apply.c	/^void test_stash_apply__cleanup(void)$/;"	f	signature:(void)
test_stash_apply__conflict_commit_with_default	tests/stash/apply.c	/^void test_stash_apply__conflict_commit_with_default(void)$/;"	f	signature:(void)
test_stash_apply__conflict_commit_with_reinstate_index	tests/stash/apply.c	/^void test_stash_apply__conflict_commit_with_reinstate_index(void)$/;"	f	signature:(void)
test_stash_apply__conflict_index_with_default	tests/stash/apply.c	/^void test_stash_apply__conflict_index_with_default(void)$/;"	f	signature:(void)
test_stash_apply__conflict_index_with_reinstate_index	tests/stash/apply.c	/^void test_stash_apply__conflict_index_with_reinstate_index(void)$/;"	f	signature:(void)
test_stash_apply__conflict_untracked_with_default	tests/stash/apply.c	/^void test_stash_apply__conflict_untracked_with_default(void)$/;"	f	signature:(void)
test_stash_apply__conflict_untracked_with_reinstate_index	tests/stash/apply.c	/^void test_stash_apply__conflict_untracked_with_reinstate_index(void)$/;"	f	signature:(void)
test_stash_apply__conflict_workdir_with_default	tests/stash/apply.c	/^void test_stash_apply__conflict_workdir_with_default(void)$/;"	f	signature:(void)
test_stash_apply__conflict_workdir_with_reinstate_index	tests/stash/apply.c	/^void test_stash_apply__conflict_workdir_with_reinstate_index(void)$/;"	f	signature:(void)
test_stash_apply__executes_notify_cb	tests/stash/apply.c	/^void test_stash_apply__executes_notify_cb(void)$/;"	f	signature:(void)
test_stash_apply__fails_with_uncommitted_changes_in_index	tests/stash/apply.c	/^void test_stash_apply__fails_with_uncommitted_changes_in_index(void)$/;"	f	signature:(void)
test_stash_apply__initialize	tests/stash/apply.c	/^void test_stash_apply__initialize(void)$/;"	f	signature:(void)
test_stash_apply__merges_new_file	tests/stash/apply.c	/^void test_stash_apply__merges_new_file(void)$/;"	f	signature:(void)
test_stash_apply__pop	tests/stash/apply.c	/^void test_stash_apply__pop(void)$/;"	f	signature:(void)
test_stash_apply__progress_cb_can_abort	tests/stash/apply.c	/^void test_stash_apply__progress_cb_can_abort(void)$/;"	f	signature:(void)
test_stash_apply__uses_reflog_like_indices_1	tests/stash/apply.c	/^void test_stash_apply__uses_reflog_like_indices_1(void)$/;"	f	signature:(void)
test_stash_apply__uses_reflog_like_indices_2	tests/stash/apply.c	/^void test_stash_apply__uses_reflog_like_indices_2(void)$/;"	f	signature:(void)
test_stash_apply__with_default	tests/stash/apply.c	/^void test_stash_apply__with_default(void)$/;"	f	signature:(void)
test_stash_apply__with_existing_file	tests/stash/apply.c	/^void test_stash_apply__with_existing_file(void)$/;"	f	signature:(void)
test_stash_apply__with_reinstate_index	tests/stash/apply.c	/^void test_stash_apply__with_reinstate_index(void)$/;"	f	signature:(void)
test_stash_drop__can_purge_the_stash_from_the_bottom	tests/stash/drop.c	/^void test_stash_drop__can_purge_the_stash_from_the_bottom(void)$/;"	f	signature:(void)
test_stash_drop__can_purge_the_stash_from_the_top	tests/stash/drop.c	/^void test_stash_drop__can_purge_the_stash_from_the_top(void)$/;"	f	signature:(void)
test_stash_drop__cannot_drop_a_non_existing_stashed_state	tests/stash/drop.c	/^void test_stash_drop__cannot_drop_a_non_existing_stashed_state(void)$/;"	f	signature:(void)
test_stash_drop__cannot_drop_from_an_empty_stash	tests/stash/drop.c	/^void test_stash_drop__cannot_drop_from_an_empty_stash(void)$/;"	f	signature:(void)
test_stash_drop__cleanup	tests/stash/drop.c	/^void test_stash_drop__cleanup(void)$/;"	f	signature:(void)
test_stash_drop__dropping_an_entry_rewrites_reflog_history	tests/stash/drop.c	/^void test_stash_drop__dropping_an_entry_rewrites_reflog_history(void)$/;"	f	signature:(void)
test_stash_drop__dropping_the_last_entry_removes_the_stash	tests/stash/drop.c	/^void test_stash_drop__dropping_the_last_entry_removes_the_stash(void)$/;"	f	signature:(void)
test_stash_drop__dropping_the_top_stash_updates_the_stash_reference	tests/stash/drop.c	/^void test_stash_drop__dropping_the_top_stash_updates_the_stash_reference(void)$/;"	f	signature:(void)
test_stash_drop__initialize	tests/stash/drop.c	/^void test_stash_drop__initialize(void)$/;"	f	signature:(void)
test_stash_foreach__can_enumerate_a_repository	tests/stash/foreach.c	/^void test_stash_foreach__can_enumerate_a_repository(void)$/;"	f	signature:(void)
test_stash_foreach__cleanup	tests/stash/foreach.c	/^void test_stash_foreach__cleanup(void)$/;"	f	signature:(void)
test_stash_foreach__enumerating_a_empty_repository_doesnt_fail	tests/stash/foreach.c	/^void test_stash_foreach__enumerating_a_empty_repository_doesnt_fail(void)$/;"	f	signature:(void)
test_stash_foreach__initialize	tests/stash/foreach.c	/^void test_stash_foreach__initialize(void)$/;"	f	signature:(void)
test_stash_save__can_accept_a_message	tests/stash/save.c	/^void test_stash_save__can_accept_a_message(void)$/;"	f	signature:(void)
test_stash_save__can_include_untracked_and_ignored_files	tests/stash/save.c	/^void test_stash_save__can_include_untracked_and_ignored_files(void)$/;"	f	signature:(void)
test_stash_save__can_include_untracked_files	tests/stash/save.c	/^void test_stash_save__can_include_untracked_files(void)$/;"	f	signature:(void)
test_stash_save__can_keep_index	tests/stash/save.c	/^void test_stash_save__can_keep_index(void)$/;"	f	signature:(void)
test_stash_save__can_stage_normal_then_stage_untracked	tests/stash/save.c	/^void test_stash_save__can_stage_normal_then_stage_untracked(void)$/;"	f	signature:(void)
test_stash_save__can_stash_against_a_detached_head	tests/stash/save.c	/^void test_stash_save__can_stash_against_a_detached_head(void)$/;"	f	signature:(void)
test_stash_save__cannot_stash_against_a_bare_repository	tests/stash/save.c	/^void test_stash_save__cannot_stash_against_a_bare_repository(void)$/;"	f	signature:(void)
test_stash_save__cannot_stash_against_an_unborn_branch	tests/stash/save.c	/^void test_stash_save__cannot_stash_against_an_unborn_branch(void)$/;"	f	signature:(void)
test_stash_save__cannot_stash_when_there_are_no_local_change	tests/stash/save.c	/^void test_stash_save__cannot_stash_when_there_are_no_local_change(void)$/;"	f	signature:(void)
test_stash_save__cleanup	tests/stash/save.c	/^void test_stash_save__cleanup(void)$/;"	f	signature:(void)
test_stash_save__deleted_in_index_modified_in_workdir	tests/stash/save.c	/^void test_stash_save__deleted_in_index_modified_in_workdir(void)$/;"	f	signature:(void)
test_stash_save__does_not_keep_index_by_default	tests/stash/save.c	/^void test_stash_save__does_not_keep_index_by_default(void)$/;"	f	signature:(void)
test_stash_save__ignored_directory	tests/stash/save.c	/^void test_stash_save__ignored_directory(void)$/;"	f	signature:(void)
test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree	tests/stash/save.c	/^void test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree(void)$/;"	f	signature:(void)
test_stash_save__initialize	tests/stash/save.c	/^void test_stash_save__initialize(void)$/;"	f	signature:(void)
test_stash_save__skip_submodules	tests/stash/save.c	/^void test_stash_save__skip_submodules(void)$/;"	f	signature:(void)
test_stash_save__stashing_updates_the_reflog	tests/stash/save.c	/^void test_stash_save__stashing_updates_the_reflog(void)$/;"	f	signature:(void)
test_stash_save__untracked_skips_ignored	tests/stash/save.c	/^void test_stash_save__untracked_skips_ignored(void)$/;"	f	signature:(void)
test_stash_submodules__cleanup	tests/stash/submodules.c	/^void test_stash_submodules__cleanup(void)$/;"	f	signature:(void)
test_stash_submodules__does_not_stash_modified_submodules	tests/stash/submodules.c	/^void test_stash_submodules__does_not_stash_modified_submodules(void)$/;"	f	signature:(void)
test_stash_submodules__initialize	tests/stash/submodules.c	/^void test_stash_submodules__initialize(void)$/;"	f	signature:(void)
test_stash_submodules__stash_is_empty_with_modified_submodules	tests/stash/submodules.c	/^void test_stash_submodules__stash_is_empty_with_modified_submodules(void)$/;"	f	signature:(void)
test_status	tests/clar.c	/^	enum cl_test_status test_status;$/;"	m	struct:__anon364	typeref:enum:__anon364::cl_test_status	file:	access:public
test_status_ignore__0	tests/status/ignore.c	/^void test_status_ignore__0(void)$/;"	f	signature:(void)
test_status_ignore__1	tests/status/ignore.c	/^void test_status_ignore__1(void)$/;"	f	signature:(void)
test_status_ignore__add_internal_as_first_thing	tests/status/ignore.c	/^void test_status_ignore__add_internal_as_first_thing(void)$/;"	f	signature:(void)
test_status_ignore__adding_internal_ignores	tests/status/ignore.c	/^void test_status_ignore__adding_internal_ignores(void)$/;"	f	signature:(void)
test_status_ignore__automatically_ignore_bad_files	tests/status/ignore.c	/^void test_status_ignore__automatically_ignore_bad_files(void)$/;"	f	signature:(void)
test_status_ignore__cleanup	tests/status/ignore.c	/^void test_status_ignore__cleanup(void)$/;"	f	signature:(void)
test_status_ignore__contained_dir_with_matching_name	tests/status/ignore.c	/^void test_status_ignore__contained_dir_with_matching_name(void)$/;"	f	signature:(void)
test_status_ignore__do_not_unignore_basename_prefix	tests/status/ignore.c	/^void test_status_ignore__do_not_unignore_basename_prefix(void)$/;"	f	signature:(void)
test_status_ignore__empty_repo_with_gitignore_rewrite	tests/status/ignore.c	/^void test_status_ignore__empty_repo_with_gitignore_rewrite(void)$/;"	f	signature:(void)
test_status_ignore__filename_with_cr	tests/status/ignore.c	/^void test_status_ignore__filename_with_cr(void)$/;"	f	signature:(void)
test_status_ignore__filenames_with_special_prefixes_do_not_interfere_with_status_retrieval	tests/status/ignore.c	/^void test_status_ignore__filenames_with_special_prefixes_do_not_interfere_with_status_retrieval(void)$/;"	f	signature:(void)
test_status_ignore__ignore_pattern_contains_space	tests/status/ignore.c	/^void test_status_ignore__ignore_pattern_contains_space(void)$/;"	f	signature:(void)
test_status_ignore__ignore_pattern_ignorecase	tests/status/ignore.c	/^void test_status_ignore__ignore_pattern_ignorecase(void)$/;"	f	signature:(void)
test_status_ignore__initialize	tests/status/ignore.c	/^void test_status_ignore__initialize(void)$/;"	f	signature:(void)
test_status_ignore__internal_ignores_inside_deep_paths	tests/status/ignore.c	/^void test_status_ignore__internal_ignores_inside_deep_paths(void)$/;"	f	signature:(void)
test_status_ignore__issue_1766_negated_ignores	tests/status/ignore.c	/^void test_status_ignore__issue_1766_negated_ignores(void)$/;"	f	signature:(void)
test_status_ignore__leading_slash_ignores	tests/status/ignore.c	/^void test_status_ignore__leading_slash_ignores(void)$/;"	f	signature:(void)
test_status_ignore__more_breakage	tests/status/ignore.c	/^void test_status_ignore__more_breakage(void)$/;"	f	signature:(void)
test_status_ignore__negate_exact_previous	tests/status/ignore.c	/^void test_status_ignore__negate_exact_previous(void)$/;"	f	signature:(void)
test_status_ignore__negate_starstar	tests/status/ignore.c	/^void test_status_ignore__negate_starstar(void)$/;"	f	signature:(void)
test_status_ignore__negative_directory_ignores	tests/status/ignore.c	/^void test_status_ignore__negative_directory_ignores(void)$/;"	f	signature:(void)
test_status_ignore__negative_ignores_in_slash_star	tests/status/ignore.c	/^void test_status_ignore__negative_ignores_in_slash_star(void)$/;"	f	signature:(void)
test_status_ignore__negative_ignores_inside_ignores	tests/status/ignore.c	/^void test_status_ignore__negative_ignores_inside_ignores(void)$/;"	f	signature:(void)
test_status_ignore__negative_ignores_without_trailing_slash_inside_ignores	tests/status/ignore.c	/^void test_status_ignore__negative_ignores_without_trailing_slash_inside_ignores(void)$/;"	f	signature:(void)
test_status_ignore__subdir_doesnt_match_above	tests/status/ignore.c	/^void test_status_ignore__subdir_doesnt_match_above(void)$/;"	f	signature:(void)
test_status_ignore__subdirectories	tests/status/ignore.c	/^void test_status_ignore__subdirectories(void)$/;"	f	signature:(void)
test_status_ignore__subdirectories_not_at_root	tests/status/ignore.c	/^void test_status_ignore__subdirectories_not_at_root(void)$/;"	f	signature:(void)
test_status_ignore__subdirectories_recursion	tests/status/ignore.c	/^void test_status_ignore__subdirectories_recursion(void)$/;"	f	signature:(void)
test_status_ignore__trailing_slash_star	tests/status/ignore.c	/^void test_status_ignore__trailing_slash_star(void)$/;"	f	signature:(void)
test_status_ignore__unignore_entry_in_ignored_dir	tests/status/ignore.c	/^void test_status_ignore__unignore_entry_in_ignored_dir(void)$/;"	f	signature:(void)
test_status_renames__both_casechange_one	tests/status/renames.c	/^void test_status_renames__both_casechange_one(void)$/;"	f	signature:(void)
test_status_renames__both_casechange_two	tests/status/renames.c	/^void test_status_renames__both_casechange_two(void)$/;"	f	signature:(void)
test_status_renames__both_one	tests/status/renames.c	/^void test_status_renames__both_one(void)$/;"	f	signature:(void)
test_status_renames__both_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__both_rename_from_rewrite(void)$/;"	f	signature:(void)
test_status_renames__both_two	tests/status/renames.c	/^void test_status_renames__both_two(void)$/;"	f	signature:(void)
test_status_renames__cleanup	tests/status/renames.c	/^void test_status_renames__cleanup(void)$/;"	f	signature:(void)
test_status_renames__head2index_no_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__head2index_no_rename_from_rewrite(void)$/;"	f	signature:(void)
test_status_renames__head2index_one	tests/status/renames.c	/^void test_status_renames__head2index_one(void)$/;"	f	signature:(void)
test_status_renames__head2index_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__head2index_rename_from_rewrite(void)$/;"	f	signature:(void)
test_status_renames__head2index_two	tests/status/renames.c	/^void test_status_renames__head2index_two(void)$/;"	f	signature:(void)
test_status_renames__index2workdir_one	tests/status/renames.c	/^void test_status_renames__index2workdir_one(void)$/;"	f	signature:(void)
test_status_renames__index2workdir_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__index2workdir_rename_from_rewrite(void)$/;"	f	signature:(void)
test_status_renames__index2workdir_two	tests/status/renames.c	/^void test_status_renames__index2workdir_two(void)$/;"	f	signature:(void)
test_status_renames__initialize	tests/status/renames.c	/^void test_status_renames__initialize(void)$/;"	f	signature:(void)
test_status_renames__precomposed_unicode_rename	tests/status/renames.c	/^void test_status_renames__precomposed_unicode_rename(void)$/;"	f	signature:(void)
test_status_renames__precomposed_unicode_toggle_is_rename	tests/status/renames.c	/^void test_status_renames__precomposed_unicode_toggle_is_rename(void)$/;"	f	signature:(void)
test_status_renames__rewrites_only_for_renames	tests/status/renames.c	/^void test_status_renames__rewrites_only_for_renames(void)$/;"	f	signature:(void)
test_status_renames__zero_byte_file_does_not_fail	tests/status/renames.c	/^void test_status_renames__zero_byte_file_does_not_fail(void)$/;"	f	signature:(void)
test_status_single__hash_single_empty_file	tests/status/single.c	/^void test_status_single__hash_single_empty_file(void)$/;"	f	signature:(void)
test_status_single__hash_single_file	tests/status/single.c	/^void test_status_single__hash_single_file(void)$/;"	f	signature:(void)
test_status_submodules__0	tests/status/submodules.c	/^void test_status_submodules__0(void)$/;"	f	signature:(void)
test_status_submodules__1	tests/status/submodules.c	/^void test_status_submodules__1(void)$/;"	f	signature:(void)
test_status_submodules__api	tests/status/submodules.c	/^void test_status_submodules__api(void)$/;"	f	signature:(void)
test_status_submodules__broken_stuff_that_git_allows	tests/status/submodules.c	/^void test_status_submodules__broken_stuff_that_git_allows(void)$/;"	f	signature:(void)
test_status_submodules__cleanup	tests/status/submodules.c	/^void test_status_submodules__cleanup(void)$/;"	f	signature:(void)
test_status_submodules__contained_untracked_repo	tests/status/submodules.c	/^void test_status_submodules__contained_untracked_repo(void)$/;"	f	signature:(void)
test_status_submodules__dirty_workdir_only	tests/status/submodules.c	/^void test_status_submodules__dirty_workdir_only(void)$/;"	f	signature:(void)
test_status_submodules__entry_but_dir_tracked	tests/status/submodules.c	/^void test_status_submodules__entry_but_dir_tracked(void)$/;"	f	signature:(void)
test_status_submodules__initialize	tests/status/submodules.c	/^void test_status_submodules__initialize(void)$/;"	f	signature:(void)
test_status_submodules__mixed_case	tests/status/submodules.c	/^void test_status_submodules__mixed_case(void)$/;"	f	signature:(void)
test_status_submodules__moved_head	tests/status/submodules.c	/^void test_status_submodules__moved_head(void)$/;"	f	signature:(void)
test_status_submodules__single_file	tests/status/submodules.c	/^void test_status_submodules__single_file(void)$/;"	f	signature:(void)
test_status_submodules__uninitialized	tests/status/submodules.c	/^void test_status_submodules__uninitialized(void)$/;"	f	signature:(void)
test_status_worktree__cleanup	tests/status/worktree.c	/^void test_status_worktree__cleanup(void)$/;"	f	signature:(void)
test_status_worktree__conflict_has_no_oid	tests/status/worktree.c	/^void test_status_worktree__conflict_has_no_oid(void)$/;"	f	signature:(void)
test_status_worktree__conflict_with_diff3	tests/status/worktree.c	/^void test_status_worktree__conflict_with_diff3(void)$/;"	f	signature:(void)
test_status_worktree__conflicted_item	tests/status/worktree.c	/^void test_status_worktree__conflicted_item(void)$/;"	f	signature:(void)
test_status_worktree__empty_repository	tests/status/worktree.c	/^void test_status_worktree__empty_repository(void)$/;"	f	signature:(void)
test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files	tests/status/worktree.c	/^void test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files(void)$/;"	f	signature:(void)
test_status_worktree__file_status_honors_core_ignorecase_false	tests/status/worktree.c	/^void test_status_worktree__file_status_honors_core_ignorecase_false(void)$/;"	f	signature:(void)
test_status_worktree__file_status_honors_core_ignorecase_true	tests/status/worktree.c	/^void test_status_worktree__file_status_honors_core_ignorecase_true(void)$/;"	f	signature:(void)
test_status_worktree__filemode_changes	tests/status/worktree.c	/^void test_status_worktree__filemode_changes(void)$/;"	f	signature:(void)
test_status_worktree__ignores	tests/status/worktree.c	/^void test_status_worktree__ignores(void)$/;"	f	signature:(void)
test_status_worktree__interruptable_foreach	tests/status/worktree.c	/^void test_status_worktree__interruptable_foreach(void)$/;"	f	signature:(void)
test_status_worktree__issue_592	tests/status/worktree.c	/^void test_status_worktree__issue_592(void)$/;"	f	signature:(void)
test_status_worktree__issue_592_2	tests/status/worktree.c	/^void test_status_worktree__issue_592_2(void)$/;"	f	signature:(void)
test_status_worktree__issue_592_3	tests/status/worktree.c	/^void test_status_worktree__issue_592_3(void)$/;"	f	signature:(void)
test_status_worktree__issue_592_4	tests/status/worktree.c	/^void test_status_worktree__issue_592_4(void)$/;"	f	signature:(void)
test_status_worktree__issue_592_5	tests/status/worktree.c	/^void test_status_worktree__issue_592_5(void)$/;"	f	signature:(void)
test_status_worktree__issue_592_ignored_dirs_with_tracked_content	tests/status/worktree.c	/^void test_status_worktree__issue_592_ignored_dirs_with_tracked_content(void)$/;"	f	signature:(void)
test_status_worktree__issue_592_ignores_0	tests/status/worktree.c	/^void test_status_worktree__issue_592_ignores_0(void)$/;"	f	signature:(void)
test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf	tests/status/worktree.c	/^void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf(void)$/;"	f	signature:(void)
test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397	tests/status/worktree.c	/^void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397(void)$/;"	f	signature:(void)
test_status_worktree__long_filenames	tests/status/worktree.c	/^void test_status_worktree__long_filenames(void)$/;"	f	signature:(void)
test_status_worktree__purged_worktree	tests/status/worktree.c	/^void test_status_worktree__purged_worktree(void)$/;"	f	signature:(void)
test_status_worktree__show_index_and_workdir	tests/status/worktree.c	/^void test_status_worktree__show_index_and_workdir(void)$/;"	f	signature:(void)
test_status_worktree__show_index_only	tests/status/worktree.c	/^void test_status_worktree__show_index_only(void)$/;"	f	signature:(void)
test_status_worktree__show_workdir_only	tests/status/worktree.c	/^void test_status_worktree__show_workdir_only(void)$/;"	f	signature:(void)
test_status_worktree__simple_delete	tests/status/worktree.c	/^void test_status_worktree__simple_delete(void)$/;"	f	signature:(void)
test_status_worktree__simple_delete_indexed	tests/status/worktree.c	/^void test_status_worktree__simple_delete_indexed(void)$/;"	f	signature:(void)
test_status_worktree__single_file	tests/status/worktree.c	/^void test_status_worktree__single_file(void)$/;"	f	signature:(void)
test_status_worktree__single_file_empty_repo	tests/status/worktree.c	/^void test_status_worktree__single_file_empty_repo(void)$/;"	f	signature:(void)
test_status_worktree__single_folder	tests/status/worktree.c	/^void test_status_worktree__single_folder(void)$/;"	f	signature:(void)
test_status_worktree__single_nonexistent_file	tests/status/worktree.c	/^void test_status_worktree__single_nonexistent_file(void)$/;"	f	signature:(void)
test_status_worktree__single_nonexistent_file_empty_repo	tests/status/worktree.c	/^void test_status_worktree__single_nonexistent_file_empty_repo(void)$/;"	f	signature:(void)
test_status_worktree__sorting_by_case	tests/status/worktree.c	/^void test_status_worktree__sorting_by_case(void)$/;"	f	signature:(void)
test_status_worktree__swap_subdir_and_file	tests/status/worktree.c	/^void test_status_worktree__swap_subdir_and_file(void)$/;"	f	signature:(void)
test_status_worktree__swap_subdir_with_recurse_and_pathspec	tests/status/worktree.c	/^void test_status_worktree__swap_subdir_with_recurse_and_pathspec(void)$/;"	f	signature:(void)
test_status_worktree__unreadable	tests/status/worktree.c	/^void test_status_worktree__unreadable(void)$/;"	f	signature:(void)
test_status_worktree__unreadable_as_untracked	tests/status/worktree.c	/^void test_status_worktree__unreadable_as_untracked(void)$/;"	f	signature:(void)
test_status_worktree__unreadable_not_included	tests/status/worktree.c	/^void test_status_worktree__unreadable_not_included(void)$/;"	f	signature:(void)
test_status_worktree__update_index_with_symlink_doesnt_change_mode	tests/status/worktree.c	/^void test_status_worktree__update_index_with_symlink_doesnt_change_mode(void)$/;"	f	signature:(void)
test_status_worktree__update_stat_cache_0	tests/status/worktree.c	/^void test_status_worktree__update_stat_cache_0(void)$/;"	f	signature:(void)
test_status_worktree__whole_repository	tests/status/worktree.c	/^void test_status_worktree__whole_repository(void)$/;"	f	signature:(void)
test_status_worktree__with_directory_in_pathlist	tests/status/worktree.c	/^void test_status_worktree__with_directory_in_pathlist(void)$/;"	f	signature:(void)
test_status_worktree__within_subdir	tests/status/worktree.c	/^void test_status_worktree__within_subdir(void)$/;"	f	signature:(void)
test_status_worktree_init__bracket_in_filename	tests/status/worktree_init.c	/^void test_status_worktree_init__bracket_in_filename(void)$/;"	f	signature:(void)
test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository	tests/status/worktree_init.c	/^void test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository(void)$/;"	f	signature:(void)
test_status_worktree_init__disable_pathspec_match	tests/status/worktree_init.c	/^void test_status_worktree_init__disable_pathspec_match(void)$/;"	f	signature:(void)
test_status_worktree_init__first_commit_in_progress	tests/status/worktree_init.c	/^void test_status_worktree_init__first_commit_in_progress(void)$/;"	f	signature:(void)
test_status_worktree_init__new_staged_file_must_handle_crlf	tests/status/worktree_init.c	/^void test_status_worktree_init__new_staged_file_must_handle_crlf(void)$/;"	f	signature:(void)
test_status_worktree_init__space_in_filename	tests/status/worktree_init.c	/^void test_status_worktree_init__space_in_filename(void)$/;"	f	signature:(void)
test_status_worktree_init__status_file_with_clean_index_and_empty_workdir	tests/status/worktree_init.c	/^void test_status_worktree_init__status_file_with_clean_index_and_empty_workdir(void)$/;"	f	signature:(void)
test_status_worktree_init__status_file_without_index_or_workdir	tests/status/worktree_init.c	/^void test_status_worktree_init__status_file_without_index_or_workdir(void)$/;"	f	signature:(void)
test_stream	tests/core/stream.c	/^static git_stream test_stream;$/;"	v	file:
test_stream	tests/filter/stream.c	/^static void test_stream(size_t numchunks)$/;"	f	file:	signature:(size_t numchunks)
test_stress_diff__cleanup	tests/stress/diff.c	/^void test_stress_diff__cleanup(void)$/;"	f	signature:(void)
test_stress_diff__initialize	tests/stress/diff.c	/^void test_stress_diff__initialize(void)$/;"	f	signature:(void)
test_stress_diff__rename_big_files	tests/stress/diff.c	/^void test_stress_diff__rename_big_files(void)$/;"	f	signature:(void)
test_stress_diff__rename_many_files	tests/stress/diff.c	/^void test_stress_diff__rename_many_files(void)$/;"	f	signature:(void)
test_string	tests/buf/basic.c	/^static const char *test_string = "Have you seen that? Have you seeeen that??";$/;"	v	file:
test_string	tests/core/buffer.c	/^const char *test_string = TESTSTR;$/;"	v
test_string_x2	tests/core/buffer.c	/^const char *test_string_x2 = TESTSTR TESTSTR;$/;"	v
test_submodule_add__cleanup	tests/submodule/add.c	/^void test_submodule_add__cleanup(void)$/;"	f	signature:(void)
test_submodule_add__url_absolute	tests/submodule/add.c	/^void test_submodule_add__url_absolute(void)$/;"	f	signature:(void)
test_submodule_add__url_relative	tests/submodule/add.c	/^void test_submodule_add__url_relative(void)$/;"	f	signature:(void)
test_submodule_add__url_relative_to_origin	tests/submodule/add.c	/^void test_submodule_add__url_relative_to_origin(void)$/;"	f	signature:(void)
test_submodule_add__url_relative_to_workdir	tests/submodule/add.c	/^void test_submodule_add__url_relative_to_workdir(void)$/;"	f	signature:(void)
test_submodule_init__absolute_url	tests/submodule/init.c	/^void test_submodule_init__absolute_url(void)$/;"	f	signature:(void)
test_submodule_init__cleanup	tests/submodule/init.c	/^void test_submodule_init__cleanup(void)$/;"	f	signature:(void)
test_submodule_init__relative_url	tests/submodule/init.c	/^void test_submodule_init__relative_url(void)$/;"	f	signature:(void)
test_submodule_init__relative_url_detached_head	tests/submodule/init.c	/^void test_submodule_init__relative_url_detached_head(void)$/;"	f	signature:(void)
test_submodule_lookup__accessors	tests/submodule/lookup.c	/^void test_submodule_lookup__accessors(void)$/;"	f	signature:(void)
test_submodule_lookup__backslashes	tests/submodule/lookup.c	/^void test_submodule_lookup__backslashes(void)$/;"	f	signature:(void)
test_submodule_lookup__foreach	tests/submodule/lookup.c	/^void test_submodule_lookup__foreach(void)$/;"	f	signature:(void)
test_submodule_lookup__initialize	tests/submodule/lookup.c	/^void test_submodule_lookup__initialize(void)$/;"	f	signature:(void)
test_submodule_lookup__just_added	tests/submodule/lookup.c	/^void test_submodule_lookup__just_added(void)$/;"	f	signature:(void)
test_submodule_lookup__lookup_even_with_missing_index	tests/submodule/lookup.c	/^void test_submodule_lookup__lookup_even_with_missing_index(void)$/;"	f	signature:(void)
test_submodule_lookup__lookup_even_with_unborn_head	tests/submodule/lookup.c	/^void test_submodule_lookup__lookup_even_with_unborn_head(void)$/;"	f	signature:(void)
test_submodule_lookup__prefix_name	tests/submodule/lookup.c	/^void test_submodule_lookup__prefix_name(void)$/;"	f	signature:(void)
test_submodule_lookup__renamed	tests/submodule/lookup.c	/^void test_submodule_lookup__renamed(void)$/;"	f	signature:(void)
test_submodule_lookup__simple_lookup	tests/submodule/lookup.c	/^void test_submodule_lookup__simple_lookup(void)$/;"	f	signature:(void)
test_submodule_modify__init	tests/submodule/modify.c	/^void test_submodule_modify__init(void)$/;"	f	signature:(void)
test_submodule_modify__initialize	tests/submodule/modify.c	/^void test_submodule_modify__initialize(void)$/;"	f	signature:(void)
test_submodule_modify__set_branch	tests/submodule/modify.c	/^void test_submodule_modify__set_branch(void)$/;"	f	signature:(void)
test_submodule_modify__set_fetch_recurse_submodules	tests/submodule/modify.c	/^void test_submodule_modify__set_fetch_recurse_submodules(void)$/;"	f	signature:(void)
test_submodule_modify__set_ignore	tests/submodule/modify.c	/^void test_submodule_modify__set_ignore(void)$/;"	f	signature:(void)
test_submodule_modify__set_update	tests/submodule/modify.c	/^void test_submodule_modify__set_update(void)$/;"	f	signature:(void)
test_submodule_modify__set_url	tests/submodule/modify.c	/^void test_submodule_modify__set_url(void)$/;"	f	signature:(void)
test_submodule_modify__sync	tests/submodule/modify.c	/^void test_submodule_modify__sync(void)$/;"	f	signature:(void)
test_submodule_nosubs__add	tests/submodule/nosubs.c	/^void test_submodule_nosubs__add(void)$/;"	f	signature:(void)
test_submodule_nosubs__add_and_delete	tests/submodule/nosubs.c	/^void test_submodule_nosubs__add_and_delete(void)$/;"	f	signature:(void)
test_submodule_nosubs__bad_gitmodules	tests/submodule/nosubs.c	/^void test_submodule_nosubs__bad_gitmodules(void)$/;"	f	signature:(void)
test_submodule_nosubs__cleanup	tests/submodule/nosubs.c	/^void test_submodule_nosubs__cleanup(void)$/;"	f	signature:(void)
test_submodule_nosubs__foreach	tests/submodule/nosubs.c	/^void test_submodule_nosubs__foreach(void)$/;"	f	signature:(void)
test_submodule_nosubs__lookup	tests/submodule/nosubs.c	/^void test_submodule_nosubs__lookup(void)$/;"	f	signature:(void)
test_submodule_repository_init__basic	tests/submodule/repository_init.c	/^void test_submodule_repository_init__basic(void)$/;"	f	signature:(void)
test_submodule_status__cleanup	tests/submodule/status.c	/^void test_submodule_status__cleanup(void)$/;"	f	signature:(void)
test_submodule_status__ignore_all	tests/submodule/status.c	/^void test_submodule_status__ignore_all(void)$/;"	f	signature:(void)
test_submodule_status__ignore_dirty	tests/submodule/status.c	/^void test_submodule_status__ignore_dirty(void)$/;"	f	signature:(void)
test_submodule_status__ignore_none	tests/submodule/status.c	/^void test_submodule_status__ignore_none(void)$/;"	f	signature:(void)
test_submodule_status__ignore_untracked	tests/submodule/status.c	/^void test_submodule_status__ignore_untracked(void)$/;"	f	signature:(void)
test_submodule_status__initialize	tests/submodule/status.c	/^void test_submodule_status__initialize(void)$/;"	f	signature:(void)
test_submodule_status__iterator	tests/submodule/status.c	/^void test_submodule_status__iterator(void)$/;"	f	signature:(void)
test_submodule_status__unchanged	tests/submodule/status.c	/^void test_submodule_status__unchanged(void)$/;"	f	signature:(void)
test_submodule_status__untracked_dirs_containing_ignored_files	tests/submodule/status.c	/^void test_submodule_status__untracked_dirs_containing_ignored_files(void)$/;"	f	signature:(void)
test_submodule_update__can_force_update	tests/submodule/update.c	/^void test_submodule_update__can_force_update(void)$/;"	f	signature:(void)
test_submodule_update__cleanup	tests/submodule/update.c	/^void test_submodule_update__cleanup(void)$/;"	f	signature:(void)
test_submodule_update__unitialized_submodule_no_init	tests/submodule/update.c	/^void test_submodule_update__unitialized_submodule_no_init(void)$/;"	f	signature:(void)
test_submodule_update__update_already_checked_out_submodule	tests/submodule/update.c	/^void test_submodule_update__update_already_checked_out_submodule(void)$/;"	f	signature:(void)
test_submodule_update__update_and_init_submodule	tests/submodule/update.c	/^void test_submodule_update__update_and_init_submodule(void)$/;"	f	signature:(void)
test_submodule_update__update_blocks_on_dirty_wd	tests/submodule/update.c	/^void test_submodule_update__update_blocks_on_dirty_wd(void)$/;"	f	signature:(void)
test_submodule_update__update_submodule	tests/submodule/update.c	/^void test_submodule_update__update_submodule(void)$/;"	f	signature:(void)
test_submodule_update__update_submodule_with_path	tests/submodule/update.c	/^void test_submodule_update__update_submodule_with_path(void)$/;"	f	signature:(void)
test_threads_basic__cache	tests/threads/basic.c	/^void test_threads_basic__cache(void)$/;"	f	signature:(void)
test_threads_basic__cleanup	tests/threads/basic.c	/^void test_threads_basic__cleanup(void)$/;"	f	signature:(void)
test_threads_basic__exit	tests/threads/basic.c	/^void test_threads_basic__exit(void)$/;"	f	signature:(void)
test_threads_basic__initialize	tests/threads/basic.c	/^void test_threads_basic__initialize(void)$/;"	f	signature:(void)
test_threads_basic__multiple_init	tests/threads/basic.c	/^void test_threads_basic__multiple_init(void)$/;"	f	signature:(void)
test_threads_basic__set_error	tests/threads/basic.c	/^void test_threads_basic__set_error(void)$/;"	f	signature:(void)
test_threads_diff__cleanup	tests/threads/diff.c	/^void test_threads_diff__cleanup(void)$/;"	f	signature:(void)
test_threads_diff__concurrent_diffs	tests/threads/diff.c	/^void test_threads_diff__concurrent_diffs(void)$/;"	f	signature:(void)
test_threads_diff__with_concurrent_index_modified	tests/threads/diff.c	/^void test_threads_diff__with_concurrent_index_modified(void)$/;"	f	signature:(void)
test_threads_iterator__cleanup	tests/threads/iterator.c	/^void test_threads_iterator__cleanup(void)$/;"	f	signature:(void)
test_threads_iterator__workdir	tests/threads/iterator.c	/^void test_threads_iterator__workdir(void)$/;"	f	signature:(void)
test_threads_refdb__cleanup	tests/threads/refdb.c	/^void test_threads_refdb__cleanup(void)$/;"	f	signature:(void)
test_threads_refdb__edit_while_iterate	tests/threads/refdb.c	/^void test_threads_refdb__edit_while_iterate(void)$/;"	f	signature:(void)
test_threads_refdb__initialize	tests/threads/refdb.c	/^void test_threads_refdb__initialize(void)$/;"	f	signature:(void)
test_trace_trace__can_reset	tests/trace/trace.c	/^void test_trace_trace__can_reset(void)$/;"	f	signature:(void)
test_trace_trace__can_unset	tests/trace/trace.c	/^void test_trace_trace__can_unset(void)$/;"	f	signature:(void)
test_trace_trace__cleanup	tests/trace/trace.c	/^void test_trace_trace__cleanup(void)$/;"	f	signature:(void)
test_trace_trace__initialize	tests/trace/trace.c	/^void test_trace_trace__initialize(void)$/;"	f	signature:(void)
test_trace_trace__sets	tests/trace/trace.c	/^void test_trace_trace__sets(void)$/;"	f	signature:(void)
test_trace_trace__skips_higher_level	tests/trace/trace.c	/^void test_trace_trace__skips_higher_level(void)$/;"	f	signature:(void)
test_trace_trace__writes	tests/trace/trace.c	/^void test_trace_trace__writes(void)$/;"	f	signature:(void)
test_trace_trace__writes_lower_level	tests/trace/trace.c	/^void test_trace_trace__writes_lower_level(void)$/;"	f	signature:(void)
test_trace_windows_stacktrace__aux1	tests/trace/windows/stacktrace.c	/^void test_trace_windows_stacktrace__aux1(void)$/;"	f	signature:(void)
test_trace_windows_stacktrace__basic	tests/trace/windows/stacktrace.c	/^void test_trace_windows_stacktrace__basic(void)$/;"	f	signature:(void)
test_trace_windows_stacktrace__leaks	tests/trace/windows/stacktrace.c	/^void test_trace_windows_stacktrace__leaks(void)$/;"	f	signature:(void)
test_transport_register__custom_transport	tests/transport/register.c	/^void test_transport_register__custom_transport(void)$/;"	f	signature:(void)
test_transport_register__custom_transport_error_doubleregister	tests/transport/register.c	/^void test_transport_register__custom_transport_error_doubleregister(void)$/;"	f	signature:(void)
test_transport_register__custom_transport_error_remove_non_existing	tests/transport/register.c	/^void test_transport_register__custom_transport_error_remove_non_existing(void)$/;"	f	signature:(void)
test_transport_register__custom_transport_ssh	tests/transport/register.c	/^void test_transport_register__custom_transport_ssh(void)$/;"	f	signature:(void)
test_tree_to_tree_computed_to_parsed	tests/diff/parse.c	/^static void test_tree_to_tree_computed_to_parsed($/;"	f	file:	signature:( const char *sandbox, const char *a_id, const char *b_id, uint32_t diff_flags, uint32_t find_flags)
test_utf8_to_utf16	tests/path/win32.c	/^void test_utf8_to_utf16(const char *utf8_in, const wchar_t *utf16_expected)$/;"	f	signature:(const char *utf8_in, const wchar_t *utf16_expected)
test_walk	tests/revwalk/basic.c	/^static int test_walk(git_revwalk *walk, const git_oid *root,$/;"	f	file:	signature:(git_revwalk *walk, const git_oid *root, int flags, const int possible_results[][6], int results_count)
test_walk_only	tests/revwalk/basic.c	/^static int test_walk_only(git_revwalk *walk,$/;"	f	file:	signature:(git_revwalk *walk, const int possible_results[][commit_count], int results_count)
test_win32_forbidden__can_add_forbidden_filename_with_entry	tests/win32/forbidden.c	/^void test_win32_forbidden__can_add_forbidden_filename_with_entry(void)$/;"	f	signature:(void)
test_win32_forbidden__can_blame_file	tests/win32/forbidden.c	/^void test_win32_forbidden__can_blame_file(void)$/;"	f	signature:(void)
test_win32_forbidden__can_diff_index_to_workdir	tests/win32/forbidden.c	/^void test_win32_forbidden__can_diff_index_to_workdir(void)$/;"	f	signature:(void)
test_win32_forbidden__can_diff_tree_to_index	tests/win32/forbidden.c	/^void test_win32_forbidden__can_diff_tree_to_index(void)$/;"	f	signature:(void)
test_win32_forbidden__can_diff_tree_to_tree	tests/win32/forbidden.c	/^void test_win32_forbidden__can_diff_tree_to_tree(void)$/;"	f	signature:(void)
test_win32_forbidden__can_open_index	tests/win32/forbidden.c	/^void test_win32_forbidden__can_open_index(void)$/;"	f	signature:(void)
test_win32_forbidden__can_query_submodules	tests/win32/forbidden.c	/^void test_win32_forbidden__can_query_submodules(void)$/;"	f	signature:(void)
test_win32_forbidden__cannot_add_dot_git_even_with_entry	tests/win32/forbidden.c	/^void test_win32_forbidden__cannot_add_dot_git_even_with_entry(void)$/;"	f	signature:(void)
test_win32_forbidden__cannot_add_forbidden_filename_from_filesystem	tests/win32/forbidden.c	/^void test_win32_forbidden__cannot_add_forbidden_filename_from_filesystem(void)$/;"	f	signature:(void)
test_win32_forbidden__checking_out_forbidden_index_fails	tests/win32/forbidden.c	/^void test_win32_forbidden__checking_out_forbidden_index_fails(void)$/;"	f	signature:(void)
test_win32_forbidden__cleanup	tests/win32/forbidden.c	/^void test_win32_forbidden__cleanup(void)$/;"	f	signature:(void)
test_win32_forbidden__initialize	tests/win32/forbidden.c	/^void test_win32_forbidden__initialize(void)$/;"	f	signature:(void)
test_win32_longpath__cleanup	tests/win32/longpath.c	/^void test_win32_longpath__cleanup(void)$/;"	f	signature:(void)
test_win32_longpath__errmsg_on_checkout	tests/win32/longpath.c	/^void test_win32_longpath__errmsg_on_checkout(void)$/;"	f	signature:(void)
test_win32_longpath__initialize	tests/win32/longpath.c	/^void test_win32_longpath__initialize(void)$/;"	f	signature:(void)
test_win32_name	tests/refs/create.c	/^static void test_win32_name(const char *name)$/;"	f	file:	signature:(const char *name)
test_with_many	tests/stress/diff.c	/^static void test_with_many(int expected_new)$/;"	f	file:	signature:(int expected_new)
test_write_object_permission	tests/odb/loose.c	/^void test_write_object_permission($/;"	f	signature:( mode_t dir_mode, mode_t file_mode, mode_t expected_dir_mode, mode_t expected_file_mode)
test_write_pack_permission	tests/pack/packbuilder.c	/^static void test_write_pack_permission(mode_t given, mode_t expected)$/;"	f	file:	signature:(mode_t given, mode_t expected)
testrepo2_subdir_paths	tests/status/worktree.c	/^static const char *testrepo2_subdir_paths[] = {$/;"	v	file:
testrepo2_subdir_paths_icase	tests/status/worktree.c	/^static const char *testrepo2_subdir_paths_icase[] = {$/;"	v	file:
tests	tests/clar.c	/^	const struct clar_func *tests;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:	access:public
tests_ran	tests/clar.c	/^	int tests_ran;$/;"	m	struct:__anon364	file:	access:public
text	deps/zlib/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s	access:public
textual_content	tests/object/blob/fromstream.c	/^static char textual_content[] = "libgit2\\n\\r\\n\\0";$/;"	v	file:
th_data	tests/threads/refdb.c	/^struct th_data {$/;"	s	file:
th_data::error	tests/threads/refdb.c	/^	cl_git_thread_err error;$/;"	m	struct:th_data	file:	access:public
th_data::id	tests/threads/refdb.c	/^	int id;$/;"	m	struct:th_data	file:	access:public
th_data::path	tests/threads/refdb.c	/^	const char *path;$/;"	m	struct:th_data	file:	access:public
their_entry	src/merge.h	/^	git_index_entry their_entry;$/;"	m	struct:__anon325	access:public
their_label	include/git2/checkout.h	/^	const char *their_label; \/**< the name of the "their" side of conflicts *\/$/;"	m	struct:git_checkout_options	access:public
their_label	include/git2/merge.h	/^	const char *their_label;$/;"	m	struct:__anon130	access:public
their_mode	tests/merge/merge_helpers.h	/^	unsigned int their_mode;$/;"	m	struct:merge_reuc_entry	access:public
their_oid_str	tests/merge/merge_helpers.h	/^	char their_oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:merge_reuc_entry	access:public
their_path	tests/merge/merge_helpers.h	/^	char their_path[128];$/;"	m	struct:merge_name_entry	access:public
their_status	src/merge.h	/^	git_delta_t their_status;$/;"	m	struct:__anon325	access:public
theirs	include/git2/sys/index.h	/^	char *theirs;$/;"	m	struct:git_index_name_entry	access:public
theirs	src/checkout.c	/^	const git_index_entry *theirs;$/;"	m	struct:__anon216	file:	access:public
theirs	src/merge_driver.h	/^	const git_index_entry *theirs;$/;"	m	struct:git_merge_driver_source	access:public
theirs	tests/checkout/conflict.c	/^	char theirs[64];$/;"	m	struct:checkout_name_entry	file:	access:public
theirs	tests/merge/merge_helpers.h	/^	struct merge_index_with_status theirs;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status	access:public
thin_pack	src/transports/smart.h	/^		thin_pack:1;$/;"	m	struct:transport_smart_caps	access:public
thin_pack	tests/pack/indexer.c	/^static const unsigned char thin_pack[] = {$/;"	v	file:
thin_pack_len	tests/pack/indexer.c	/^static const unsigned int thin_pack_len = 78;$/;"	v	file:
third_tree	tests/object/tree/write.c	/^static const char *third_tree = "eb86d8b81d6adbd5290a935d6c9976882de98488";$/;"	v	file:
thread	src/pack-objects.c	/^	git_thread thread;$/;"	m	struct:thread_params	file:	access:public
thread	src/unix/pthread.h	/^	pthread_t thread;$/;"	m	struct:__anon328	access:public
thread	src/win32/thread.h	/^	HANDLE thread;$/;"	m	struct:__anon285	access:public
thread_params	src/pack-objects.c	/^struct thread_params {$/;"	s	file:
thread_params::cond	src/pack-objects.c	/^	git_cond cond;$/;"	m	struct:thread_params	file:	access:public
thread_params::data_ready	src/pack-objects.c	/^	size_t data_ready;$/;"	m	struct:thread_params	file:	access:public
thread_params::depth	src/pack-objects.c	/^	size_t depth;$/;"	m	struct:thread_params	file:	access:public
thread_params::list	src/pack-objects.c	/^	git_pobject **list;$/;"	m	struct:thread_params	file:	access:public
thread_params::list_size	src/pack-objects.c	/^	size_t list_size;$/;"	m	struct:thread_params	file:	access:public
thread_params::mutex	src/pack-objects.c	/^	git_mutex mutex;$/;"	m	struct:thread_params	file:	access:public
thread_params::pb	src/pack-objects.c	/^	git_packbuilder *pb;$/;"	m	struct:thread_params	file:	access:public
thread_params::remaining	src/pack-objects.c	/^	size_t remaining;$/;"	m	struct:thread_params	file:	access:public
thread_params::thread	src/pack-objects.c	/^	git_thread thread;$/;"	m	struct:thread_params	file:	access:public
thread_params::window	src/pack-objects.c	/^	size_t window;$/;"	m	struct:thread_params	file:	access:public
thread_params::working	src/pack-objects.c	/^	size_t working;$/;"	m	struct:thread_params	file:	access:public
threaded_find_deltas	src/pack-objects.c	/^static void *threaded_find_deltas(void *arg)$/;"	f	file:	signature:(void *arg)
tick_index	tests/checkout/checkout_helpers.c	/^void tick_index(git_index *index)$/;"	f	signature:(git_index *index)
time	deps/zlib/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s	access:public
time	include/git2/types.h	/^	git_time_t time; \/**< time in seconds from epoch *\/$/;"	m	struct:git_time	access:public
time	src/commit_list.h	/^	int64_t time;$/;"	m	struct:git_commit_list_node	access:public
time	tests/commit/parse.c	/^	git_time_t time;$/;"	m	struct:__anon378	file:	access:public
time_started	tests/clar_libgit2_timer.h	/^	double time_started;$/;"	m	struct:cl_perf_timer	access:public
time_started	tests/perf/helper__perf__timer.h	/^	LARGE_INTEGER time_started;$/;"	m	struct:perf__timer	access:public
time_started	tests/perf/helper__perf__timer.h	/^	uint32_t time_started;$/;"	m	struct:perf__timer	access:public
timespec	src/win32/win32-compat.h	28;"	d
timezone_names	src/date.c	/^} timezone_names[] = {$/;"	v	typeref:struct:__anon300	file:
tip_context	deps/regex/regex_internal.h	/^  unsigned int tip_context;$/;"	m	struct:re_string_t	access:public
tlno	src/blame_git.c	/^	long tlno;$/;"	m	struct:blame_chunk_cb_data	file:	access:public
tls_ctor	src/tls_stream.c	/^static git_stream_cb tls_ctor;$/;"	v	file:
tm_to_time_t	src/date.c	/^static git_time_t tm_to_time_t(const struct tm *tm)$/;"	f	file:	signature:(const struct tm *tm)
tmp	src/attr_file.h	/^	git_buf tmp;$/;"	m	struct:__anon173	access:public
tmp	src/checkout.c	/^	git_buf tmp;$/;"	m	struct:__anon215	file:	access:public
tmp_buf	src/iterator.c	/^	git_buf tmp_buf;$/;"	m	struct:__anon272	file:	access:public
to	include/git2/revparse.h	/^	git_object *to;$/;"	m	struct:__anon74	access:public
to	src/fileops.c	/^	git_buf to;$/;"	m	struct:__anon264	file:	access:public
to_hex	src/oid.c	/^static char to_hex[] = "0123456789abcdef";$/;"	v	file:
to_hex	tests/core/pool.c	/^static char to_hex[] = "0123456789abcdef";$/;"	v	file:
to_root	src/fileops.c	/^	const char *to_root;$/;"	m	struct:__anon264	file:	access:public
token	deps/regex/regex_internal.h	/^  re_token_t token;$/;"	m	struct:bin_tree_t	access:public
tokens	deps/http-parser/http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
top_dir	tests/core/dirent.c	/^static char *top_dir = "dir-walk";$/;"	v	file:
topo_delay	src/commit_list.h	/^			 topo_delay:1,$/;"	m	struct:git_commit_list_node	access:public
total	deps/zlib/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state	access:public
total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon211	file:	access:public
total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon212	file:	access:public
total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon213	file:	access:public
total_deltas	include/git2/types.h	/^	unsigned int total_deltas;$/;"	m	struct:git_transfer_progress	access:public
total_errors	tests/clar.c	/^	int total_errors;$/;"	m	struct:__anon364	file:	access:public
total_in	deps/zlib/zlib.h	/^    uLong    total_in;  \/* total number of input bytes read so far *\/$/;"	m	struct:z_stream_s	access:public
total_objects	include/git2/types.h	/^	unsigned int total_objects;$/;"	m	struct:git_transfer_progress	access:public
total_out	deps/zlib/zlib.h	/^    uLong    total_out; \/* total number of bytes output so far *\/$/;"	m	struct:z_stream_s	access:public
total_patches	include/git2/diff.h	/^	size_t total_patches;$/;"	m	struct:__anon100	access:public
total_skipped	tests/clar.c	/^	int total_skipped;$/;"	m	struct:__anon364	file:	access:public
total_steps	examples/network/clone.c	/^	size_t total_steps;$/;"	m	struct:progress_data	file:	access:public
total_steps	src/checkout.c	/^	size_t total_steps;$/;"	m	struct:__anon215	file:	access:public
touch_file	tests/diff/workdir.c	/^static int touch_file(void *payload, git_buf *path)$/;"	f	file:	signature:(void *payload, git_buf *path)
tr_static_init	deps/zlib/trees.c	/^local void tr_static_init()$/;"	f
trace_callback	tests/trace/trace.c	/^static void trace_callback(git_trace_level_t level, const char *message)$/;"	f	file:	signature:(git_trace_level_t level, const char *message)
trace_payload	tests/clar.c	/^	void *trace_payload;$/;"	m	struct:__anon364	file:	access:public
trailer	src/indexer.c	/^	git_hash_ctx trailer;$/;"	m	struct:git_indexer	file:	access:public
trampoline	tests/clar.c	/^	jmp_buf trampoline;$/;"	m	struct:__anon364	file:	access:public
trampoline_enabled	tests/clar.c	/^	int trampoline_enabled;$/;"	m	struct:__anon364	file:	access:public
trans	deps/regex/regex_internal.h	/^  RE_TRANSLATE_TYPE trans;$/;"	m	struct:re_string_t	access:public
transaction_node	src/transaction.c	/^} transaction_node;$/;"	t	typeref:struct:__anon208	file:
transaction_t	src/transaction.c	/^} transaction_t;$/;"	t	typeref:enum:__anon207	file:
transferProgressCallback	tests/online/fetch.c	/^static int transferProgressCallback(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
transfer_cb	tests/network/fetchlocal.c	/^static int transfer_cb(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
transfer_encoding	src/transports/winhttp.c	/^static const wchar_t *transfer_encoding = L"Transfer-Encoding: chunked";$/;"	v	file:
transfer_progress	include/git2/remote.h	/^	git_transfer_progress_cb transfer_progress;$/;"	m	struct:git_remote_callbacks	access:public
transfer_progress_calls	tests/online/push_util.h	/^	int transfer_progress_calls;$/;"	m	struct:__anon353	access:public
transfer_progress_cb	examples/network/fetch.c	/^static int transfer_progress_cb(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
transfer_to_push_transfer	src/transports/local.c	/^static int transfer_to_push_transfer(const git_transfer_progress *stats, void *payload)$/;"	f	file:	signature:(const git_transfer_progress *stats, void *payload)
transient_count_leaks	src/win32/w32_crtdbg_stacktrace.c	/^	unsigned int transient_count_leaks; \/* sum of leaks *\/$/;"	m	struct:__anon292	file:	access:public
transit_state	deps/regex/regexec.c	/^transit_state (reg_errcode_t *err, re_match_context_t *mctx,$/;"	f	file:	signature:(reg_errcode_t *err, re_match_context_t *mctx, re_dfastate_t *state)
transit_state_bkref	deps/regex/regexec.c	/^transit_state_bkref (re_match_context_t *mctx, const re_node_set *nodes)$/;"	f	file:	signature:(re_match_context_t *mctx, const re_node_set *nodes)
transit_state_mb	deps/regex/regexec.c	/^transit_state_mb (re_match_context_t *mctx, re_dfastate_t *pstate)$/;"	f	file:	signature:(re_match_context_t *mctx, re_dfastate_t *pstate)
transport	include/git2/remote.h	/^	git_transport_cb transport;$/;"	m	struct:git_remote_callbacks	access:public
transport	src/remote.h	/^	git_transport *transport;$/;"	m	struct:git_remote	access:public
transport_definition	src/transport.c	/^typedef struct transport_definition {$/;"	s	file:
transport_definition	src/transport.c	/^} transport_definition;$/;"	t	typeref:struct:transport_definition	file:
transport_definition::fn	src/transport.c	/^	git_transport_cb fn;$/;"	m	struct:transport_definition	file:	access:public
transport_definition::param	src/transport.c	/^	void *param;$/;"	m	struct:transport_definition	file:	access:public
transport_definition::prefix	src/transport.c	/^	char *prefix;$/;"	m	struct:transport_definition	file:	access:public
transport_find_by_url	src/transport.c	/^static transport_definition * transport_find_by_url(const char *url)$/;"	f	file:	signature:(const char *url)
transport_find_fn	src/transport.c	/^static int transport_find_fn($/;"	f	file:	signature:( git_transport_cb *out, const char *url, void **param)
transport_local	src/transports/local.c	/^} transport_local;$/;"	t	typeref:struct:__anon178	file:
transport_smart	src/transports/smart.h	/^} transport_smart;$/;"	t	typeref:struct:__anon193
transport_smart_caps	src/transports/smart.h	/^typedef struct transport_smart_caps {$/;"	s
transport_smart_caps	src/transports/smart.h	/^} transport_smart_caps;$/;"	t	typeref:struct:transport_smart_caps
transport_smart_caps::common	src/transports/smart.h	/^	int common:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::delete_refs	src/transports/smart.h	/^		delete_refs:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::include_tag	src/transports/smart.h	/^		include_tag:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::multi_ack	src/transports/smart.h	/^		multi_ack: 1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::multi_ack_detailed	src/transports/smart.h	/^		multi_ack_detailed: 1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::ofs_delta	src/transports/smart.h	/^		ofs_delta:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::report_status	src/transports/smart.h	/^		report_status:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::side_band	src/transports/smart.h	/^		side_band:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::side_band_64k	src/transports/smart.h	/^		side_band_64k:1,$/;"	m	struct:transport_smart_caps	access:public
transport_smart_caps::thin_pack	src/transports/smart.h	/^		thin_pack:1;$/;"	m	struct:transport_smart_caps	access:public
transports	src/transport.c	/^static transport_definition transports[] = {$/;"	v	file:
tree	include/git2/tree.h	/^GIT_EXTERN(const git_oid *) git_tree_id(const git_tree *tree);$/;"	v
tree	include/git2/tree.h	/^GIT_EXTERN(git_repository *) git_tree_owner(const git_tree *tree);$/;"	v
tree	include/git2/tree.h	/^GIT_EXTERN(size_t) git_tree_entrycount(const git_tree *tree);$/;"	v
tree	include/git2/tree.h	/^GIT_EXTERN(void) git_tree_free(git_tree *tree);$/;"	v
tree	src/annotated_commit.h	/^	git_tree *tree;$/;"	m	struct:git_annotated_commit	access:public
tree	src/index.c	/^	git_tree_cache *tree;$/;"	m	struct:read_tree_data	file:	access:public
tree	src/index.h	/^	git_tree_cache *tree;$/;"	m	struct:git_index	access:public
tree	src/iterator.c	/^	git_tree *tree;$/;"	m	struct:__anon268	file:	access:public
tree	src/iterator.c	/^	git_tree *tree;$/;"	m	struct:__anon272	file:	access:public
tree	src/tree.c	/^	git_tree *tree;$/;"	m	struct:__anon159	file:	access:public
tree	tests/object/tree/frompath.c	/^static	git_tree *tree;$/;"	v	file:
tree	tests/odb/loose_data.h	/^static object_data tree = {$/;"	v
tree	tests/repo/headtree.c	/^static git_tree *tree;$/;"	v	file:
tree_buf	src/iterator.c	/^	git_buf tree_buf;$/;"	m	struct:__anon273	file:	access:public
tree_bytes	tests/odb/loose_data.h	/^static unsigned char tree_bytes[] = {$/;"	v
tree_checker	tests/object/tree/duplicateentries.c	/^static void tree_checker($/;"	f	file:	signature:( git_oid *tid, const char *expected_sha, git_filemode_t expected_filemode)
tree_creator	tests/object/tree/duplicateentries.c	/^static void tree_creator(git_oid *out, void (*fn)(git_treebuilder *))$/;"	f	file:	signature:(git_oid *out, void (*fn)(git_treebuilder *))
tree_data	tests/object/raw/data.h	/^static unsigned char tree_data[] = {$/;"	v
tree_data	tests/odb/loose_data.h	/^static unsigned char tree_data[] = {$/;"	v
tree_desc	deps/zlib/deflate.h	/^} FAR tree_desc;$/;"	t	typeref:struct:tree_desc_s
tree_desc_s	deps/zlib/deflate.h	/^typedef struct tree_desc_s {$/;"	s
tree_desc_s::dyn_tree	deps/zlib/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s	access:public
tree_desc_s::max_code	deps/zlib/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s	access:public
tree_desc_s::stat_desc	deps/zlib/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s	access:public
tree_entry	src/iterator.c	/^	git_index_entry tree_entry;$/;"	m	struct:__anon273	file:	access:public
tree_entry	src/iterator.c	/^	git_tree_entry *tree_entry;$/;"	m	struct:__anon267	file:	access:public
tree_entry_cmp	src/iterator.c	/^GIT_INLINE(int) tree_entry_cmp($/;"	f	signature:( const git_tree_entry *a, const git_tree_entry *b, bool icase)
tree_error	src/tree.c	/^static int tree_error(const char *str, const char *path)$/;"	f	file:	signature:(const char *str, const char *path)
tree_id	src/commit.h	/^	git_oid tree_id;$/;"	m	struct:git_commit	access:public
tree_id	tests/object/raw/data.h	/^static char *tree_id = "dff2da90b254e1beb889d1f1f1288be1803782df";$/;"	v
tree_id_str	tests/commit/write.c	/^static const char *tree_id_str = "1810dff58d8a660512d4832e740f692884338ccd";$/;"	v	file:
tree_iterator	src/iterator.c	/^} tree_iterator;$/;"	t	typeref:struct:__anon269	file:
tree_iterator_advance	src/iterator.c	/^static int tree_iterator_advance(const git_index_entry **out, git_iterator *i)$/;"	f	file:	signature:(const git_index_entry **out, git_iterator *i)
tree_iterator_advance_into	src/iterator.c	/^static int tree_iterator_advance_into($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
tree_iterator_advance_over	src/iterator.c	/^static int tree_iterator_advance_over($/;"	f	file:	signature:( const git_index_entry **out, git_iterator_status_t *status, git_iterator *i)
tree_iterator_clear	src/iterator.c	/^static void tree_iterator_clear(tree_iterator *iter)$/;"	f	file:	signature:(tree_iterator *iter)
tree_iterator_compute_path	src/iterator.c	/^static int tree_iterator_compute_path($/;"	f	file:	signature:( git_buf *out, tree_iterator_entry *entry)
tree_iterator_current	src/iterator.c	/^static int tree_iterator_current($/;"	f	file:	signature:( const git_index_entry **out, git_iterator *i)
tree_iterator_current_entry	src/iterator.c	/^GIT_INLINE(tree_iterator_entry *) tree_iterator_current_entry($/;"	f	signature:( tree_iterator_frame *frame)
tree_iterator_current_frame	src/iterator.c	/^GIT_INLINE(tree_iterator_frame *) tree_iterator_current_frame($/;"	f	signature:( tree_iterator *iter)
tree_iterator_entry	src/iterator.c	/^} tree_iterator_entry;$/;"	t	typeref:struct:__anon267	file:
tree_iterator_entry_cmp	src/iterator.c	/^GIT_INLINE(int) tree_iterator_entry_cmp(const void *ptr_a, const void *ptr_b)$/;"	f	signature:(const void *ptr_a, const void *ptr_b)
tree_iterator_entry_cmp_icase	src/iterator.c	/^GIT_INLINE(int) tree_iterator_entry_cmp_icase($/;"	f	signature:( const void *ptr_a, const void *ptr_b)
tree_iterator_entry_sort_icase	src/iterator.c	/^static int tree_iterator_entry_sort_icase(const void *ptr_a, const void *ptr_b)$/;"	f	file:	signature:(const void *ptr_a, const void *ptr_b)
tree_iterator_frame	src/iterator.c	/^} tree_iterator_frame;$/;"	t	typeref:struct:__anon268	file:
tree_iterator_frame_init	src/iterator.c	/^static int tree_iterator_frame_init($/;"	f	file:	signature:( tree_iterator *iter, git_tree *tree, tree_iterator_entry *frame_entry)
tree_iterator_frame_pop	src/iterator.c	/^static void tree_iterator_frame_pop(tree_iterator *iter)$/;"	f	file:	signature:(tree_iterator *iter)
tree_iterator_frame_push	src/iterator.c	/^GIT_INLINE(int) tree_iterator_frame_push($/;"	f	signature:( tree_iterator *iter, tree_iterator_entry *entry)
tree_iterator_frame_push_neighbors	src/iterator.c	/^GIT_INLINE(int) tree_iterator_frame_push_neighbors($/;"	f	signature:( tree_iterator *iter, tree_iterator_frame *parent_frame, tree_iterator_frame *frame, const char *filename)
tree_iterator_free	src/iterator.c	/^static void tree_iterator_free(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
tree_iterator_init	src/iterator.c	/^static int tree_iterator_init(tree_iterator *iter)$/;"	f	file:	signature:(tree_iterator *iter)
tree_iterator_parent_frame	src/iterator.c	/^GIT_INLINE(tree_iterator_frame *) tree_iterator_parent_frame($/;"	f	signature:( tree_iterator *iter)
tree_iterator_reset	src/iterator.c	/^static int tree_iterator_reset(git_iterator *i)$/;"	f	file:	signature:(git_iterator *i)
tree_iterator_set_current	src/iterator.c	/^static void tree_iterator_set_current($/;"	f	file:	signature:( tree_iterator *iter, tree_iterator_frame *frame, tree_iterator_entry *entry)
tree_iterator_test	tests/iterator/tree.c	/^static void tree_iterator_test($/;"	f	file:	signature:( const char *sandbox, const char *treeish, const char *start, const char *end, int expected_count, const char **expected_values)
tree_key_search	src/tree.c	/^static int tree_key_search($/;"	f	file:	signature:( size_t *at_pos, const git_tree *tree, const char *filename, size_t filename_len)
tree_key_search	src/tree.c	/^struct tree_key_search {$/;"	s	file:
tree_key_search::filename	src/tree.c	/^	const char *filename;$/;"	m	struct:tree_key_search	file:	access:public
tree_key_search::filename_len	src/tree.c	/^	uint16_t filename_len;$/;"	m	struct:tree_key_search	file:	access:public
tree_obj	tests/object/raw/data.h	/^static git_rawobj tree_obj = {$/;"	v
tree_oid	tests/object/tree/attributes.c	/^static const char *tree_oid  = "1b05fdaa881ee45b48cbaa5e9b037d667a47745e";$/;"	v	file:
tree_oid	tests/object/tree/read.c	/^static const char *tree_oid = "1810dff58d8a660512d4832e740f692884338ccd";$/;"	v	file:
tree_oid	tests/object/tree/walk.c	/^static const char *tree_oid = "1810dff58d8a660512d4832e740f692884338ccd";$/;"	v	file:
tree_parsing	examples/general.c	/^static void tree_parsing(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
tree_pool	src/index.h	/^	git_pool tree_pool;$/;"	m	struct:git_index	access:public
tree_stack_entry	src/tree.c	/^} tree_stack_entry;$/;"	t	typeref:struct:__anon159	file:
tree_walk	src/tree.c	/^static int tree_walk($/;"	f	file:	signature:( const git_tree *tree, git_treewalk_cb callback, git_buf *path, void *payload, bool preorder)
tree_walk_context	src/pack-objects.c	/^struct tree_walk_context {$/;"	s	file:
tree_walk_context::buf	src/pack-objects.c	/^	git_buf buf;$/;"	m	struct:tree_walk_context	file:	access:public
tree_walk_context::pb	src/pack-objects.c	/^	git_packbuilder *pb;$/;"	m	struct:tree_walk_context	file:	access:public
tree_write	src/notes.c	/^static int tree_write($/;"	f	file:	signature:( git_tree **out, git_repository *repo, git_tree *source_tree, const git_oid *object_oid, const char *treeentry_name, unsigned int attributes)
treebuilder_filter_prefixed	tests/object/tree/write.c	/^static int treebuilder_filter_prefixed($/;"	f	file:	signature:( const git_tree_entry *entry, void *payload)
treebuilder_get	src/tree.c	/^static git_tree_entry *treebuilder_get(git_treebuilder *bld, const char *filename)$/;"	f	file:	signature:(git_treebuilder *bld, const char *filename)
treeish1	examples/diff.c	/^	const char *treeish1;$/;"	m	struct:opts	file:	access:public
treeish2	examples/diff.c	/^	const char *treeish2;$/;"	m	struct:opts	file:	access:public
treeish_to_tree	examples/common.c	/^void treeish_to_tree($/;"	f	signature:( git_tree **out, git_repository *repo, const char *treeish)
treewalk_count_cb	tests/object/tree/walk.c	/^static int treewalk_count_cb($/;"	f	file:	signature:( const char *root, const git_tree_entry *entry, void *payload)
treewalk_skip_data	tests/object/tree/walk.c	/^struct treewalk_skip_data {$/;"	s	file:
treewalk_skip_data::dirs	tests/object/tree/walk.c	/^	int dirs;$/;"	m	struct:treewalk_skip_data	file:	access:public
treewalk_skip_data::files	tests/object/tree/walk.c	/^	int files;$/;"	m	struct:treewalk_skip_data	file:	access:public
treewalk_skip_data::skip	tests/object/tree/walk.c	/^	const char *skip;$/;"	m	struct:treewalk_skip_data	file:	access:public
treewalk_skip_data::stop	tests/object/tree/walk.c	/^	const char *stop;$/;"	m	struct:treewalk_skip_data	file:	access:public
treewalk_skip_de_cb	tests/object/tree/walk.c	/^static int treewalk_skip_de_cb($/;"	f	file:	signature:( const char *root, const git_tree_entry *entry, void *payload)
treewalk_stop_cb	tests/object/tree/walk.c	/^static int treewalk_stop_cb($/;"	f	file:	signature:( const char *root, const git_tree_entry *entry, void *payload)
treewalk_stop_immediately_cb	tests/object/tree/walk.c	/^static int treewalk_stop_immediately_cb($/;"	f	file:	signature:( const char *root, const git_tree_entry *entry, void *payload)
trie_node	src/oid.c	/^} trie_node;$/;"	t	typeref:union:__anon301	file:
trim_common_tail	src/blame_git.c	/^static void trim_common_tail(mmfile_t *a, mmfile_t *b, long ctx)$/;"	f	file:	signature:(mmfile_t *a, mmfile_t *b, long ctx)
trtable	deps/regex/regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::re_dfastate_t	access:public
true	deps/regex/regex.c	75;"	d	file:
true	src/cc-compat.h	70;"	d
truncate_racily_clean	src/index.c	/^static int truncate_racily_clean(git_index *index)$/;"	f	file:	signature:(git_index *index)
try_build_signature	tests/commit/signature.c	/^static int try_build_signature(const char *name, const char *email, git_time_t time, int offset)$/;"	f	file:	signature:(const char *name, const char *email, git_time_t time, int offset)
try_create_file_with_nsec_timestamp	tests/index/nsec.c	/^static bool try_create_file_with_nsec_timestamp(const char *path)$/;"	f	file:	signature:(const char *path)
try_delta	src/pack-objects.c	/^static int try_delta(git_packbuilder *pb, struct unpacked *trg,$/;"	f	file:	signature:(git_packbuilder *pb, struct unpacked *trg, struct unpacked *src, size_t max_depth, size_t *mem_usage, int *ret)
try_lcs	src/xdiff/xhistogram.c	/^static int try_lcs($/;"	f	file:	signature:( struct histindex *index, struct region *lcs, unsigned int b_ptr, unsigned int line1, unsigned int count1, unsigned int line2, unsigned int count2)
try_parse_numeric	src/revparse.c	/^static int try_parse_numeric(int *n, const char *curly_braces_content)$/;"	f	file:	signature:(int *n, const char *curly_braces_content)
try_remove_existing_file_internal	src/config.c	/^static void try_remove_existing_file_internal($/;"	f	file:	signature:( git_config *cfg, git_config_level_t level)
tsort_r_cmp	src/tsort.c	/^static int tsort_r_cmp(const void *a, const void *b, void *payload)$/;"	f	file:	signature:(const void *a, const void *b, void *payload)
tsort_run	src/tsort.c	/^struct tsort_run {$/;"	s	file:
tsort_run::length	src/tsort.c	/^	ssize_t length;$/;"	m	struct:tsort_run	file:	access:public
tsort_run::start	src/tsort.c	/^	ssize_t start;$/;"	m	struct:tsort_run	file:	access:public
tsort_store	src/tsort.c	/^struct tsort_store {$/;"	s	file:
tsort_store::alloc	src/tsort.c	/^	size_t alloc;$/;"	m	struct:tsort_store	file:	access:public
tsort_store::cmp	src/tsort.c	/^	git__sort_r_cmp cmp;$/;"	m	struct:tsort_store	file:	access:public
tsort_store::payload	src/tsort.c	/^	void *payload;$/;"	m	struct:tsort_store	file:	access:public
tsort_store::storage	src/tsort.c	/^	void **storage;$/;"	m	struct:tsort_store	file:	access:public
ttt	tests/object/message.c	18;"	d	file:
tv_nsec	src/win32/win32-compat.h	/^	long tv_nsec;$/;"	m	struct:p_timespec	access:public
tv_sec	src/win32/win32-compat.h	/^	time_t tv_sec;$/;"	m	struct:p_timespec	access:public
tv_sec	src/win32/win32-compat.h	/^	time_t tv_sec;$/;"	m	struct:p_timeval	access:public
tv_usec	src/win32/win32-compat.h	/^	suseconds_t tv_usec;$/;"	m	struct:p_timeval	access:public
two	tests/odb/loose_data.h	/^static object_data two = {$/;"	v
two_blobs	tests/object/tree/duplicateentries.c	/^static void two_blobs(git_treebuilder *bld)$/;"	f	file:	signature:(git_treebuilder *bld)
two_bytes	tests/odb/loose_data.h	/^static unsigned char two_bytes[] = {$/;"	v
two_data	tests/object/raw/data.h	/^static unsigned char two_data[] = {$/;"	v
two_data	tests/odb/loose_data.h	/^static unsigned char two_data[] = {$/;"	v
two_id	tests/object/raw/data.h	/^static char *two_id = "78981922613b2afb6025042ff6bd878ac1994e85";$/;"	v
two_obj	tests/object/raw/data.h	/^static git_rawobj two_obj = {$/;"	v
tx	include/git2/transaction.h	/^GIT_EXTERN(int) git_transaction_commit(git_transaction *tx);$/;"	v
tx	include/git2/transaction.h	/^GIT_EXTERN(void) git_transaction_free(git_transaction *tx);$/;"	v
type	deps/http-parser/http_parser.h	/^  unsigned char type : 2;     \/* enum http_parser_type *\/$/;"	m	struct:http_parser	access:public
type	deps/regex/regex_internal.h	/^  bracket_elem_type type;$/;"	m	struct:__anon15	access:public
type	deps/regex/regex_internal.h	/^  re_token_type_t type : 8;$/;"	m	struct:__anon7	access:public
type	deps/regex/regex_internal.h	/^  re_token_type_t type;$/;"	m	struct:__anon7	access:public
type	include/git2/diff.h	/^	git_diff_binary_t type;$/;"	m	struct:__anon89	access:public
type	include/git2/object.h	/^GIT_EXTERN(const char *) git_object_type2string(git_otype type);$/;"	v
type	include/git2/object.h	/^GIT_EXTERN(int) git_object_typeisloose(git_otype type);$/;"	v
type	include/git2/object.h	/^GIT_EXTERN(size_t) git_object__size(git_otype type);$/;"	v
type	include/git2/odb.h	/^	git_otype type;$/;"	m	struct:git_odb_expand_id	access:public
type	include/git2/proxy.h	/^	git_proxy_t type;$/;"	m	struct:__anon125	access:public
type	include/git2/rebase.h	/^	git_rebase_operation_t type;$/;"	m	struct:__anon69	access:public
type	include/git2/transport.h	/^	git_cert_ssh_t type;$/;"	m	struct:__anon78	access:public
type	src/annotated_commit.h	/^	git_annotated_commit_t type;$/;"	m	struct:git_annotated_commit	access:public
type	src/cache.h	/^	int16_t    type;  \/* git_otype value *\/$/;"	m	struct:__anon229	access:public
type	src/date.c	/^	const char *type;$/;"	m	struct:typelen	file:	access:public
type	src/diff.h	/^	git_diff_origin_t type;$/;"	m	struct:git_diff	access:public
type	src/diff_driver.c	/^	git_diff_driver_t type;$/;"	m	struct:git_diff_driver	file:	access:public
type	src/hash/hash_win32.h	/^	enum hash_win32_prov_type type;$/;"	m	struct:git_hash_ctx	typeref:enum:git_hash_ctx::hash_win32_prov_type	access:public
type	src/hash/hash_win32.h	/^	enum hash_win32_prov_type type;$/;"	m	struct:git_hash_prov	typeref:enum:git_hash_prov::hash_win32_prov_type	access:public
type	src/iterator.h	/^	git_iterator_type_t type;$/;"	m	struct:git_iterator	access:public
type	src/merge.h	/^	git_merge_diff_type_t type;$/;"	m	struct:__anon325	access:public
type	src/odb.c	/^	git_otype type;$/;"	m	struct:__anon245	file:	access:public
type	src/odb.h	/^	git_otype type;		\/**< Type of this object. *\/$/;"	m	struct:__anon162	access:public
type	src/odb_loose.c	/^	git_otype type; \/* object type *\/$/;"	m	struct:__anon343	file:	access:public
type	src/odb_mempack.c	/^	git_otype type;$/;"	m	struct:memobject	file:	access:public
type	src/pack-objects.h	/^	git_otype type;$/;"	m	struct:git_pobject	access:public
type	src/pack.h	/^	git_otype type;$/;"	m	struct:pack_chain_elem	access:public
type	src/rebase.c	/^	git_rebase_type_t type;$/;"	m	struct:git_rebase	file:	access:public
type	src/refs.h	/^	git_ref_t type;$/;"	m	struct:git_reference	access:public
type	src/tag.h	/^	git_otype type;$/;"	m	struct:git_tag	access:public
type	src/transaction.c	/^	transaction_t type;$/;"	m	struct:git_transaction	file:	access:public
type	src/transports/auth.h	/^	git_http_authtype_t type;$/;"	m	struct:__anon196	access:public
type	src/transports/auth.h	/^	git_http_authtype_t type;$/;"	m	struct:git_http_auth_context	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon184	typeref:enum:__anon184::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon185	typeref:enum:__anon185::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon186	typeref:enum:__anon186::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon187	typeref:enum:__anon187::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon188	typeref:enum:__anon188::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon189	typeref:enum:__anon189::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon190	typeref:enum:__anon190::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon191	typeref:enum:__anon191::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon192	typeref:enum:__anon192::git_pkt_type	access:public
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:git_pkt_cmd	typeref:enum:git_pkt_cmd::git_pkt_type	access:public
type	src/zstream.h	/^	git_zstream_t type;$/;"	m	struct:__anon294	access:public
type	tests/object/cache.c	/^	git_otype type;$/;"	m	struct:__anon373	file:	access:public
type	tests/odb/loose_data.h	/^    char          *type;   \/* object type                               *\/$/;"	m	struct:object_data	access:public
type_size_sort	src/pack-objects.c	/^static int type_size_sort(const void *_a, const void *_b)$/;"	f	file:	signature:(const void *_a, const void *_b)
typelen	src/date.c	/^static const struct typelen {$/;"	s	file:
typelen	src/date.c	/^} typelen[] = {$/;"	v	typeref:struct:typelen	file:
typelen::length	src/date.c	/^	int length;$/;"	m	struct:typelen	file:	access:public
typelen::type	src/date.c	/^	const char *type;$/;"	m	struct:typelen	file:	access:public
u	src/bitvec.h	/^	} u;$/;"	m	struct:__anon205	typeref:union:__anon205::__anon206	access:public
uInt	deps/zlib/zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uIntf	deps/zlib/zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uLong	deps/zlib/zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLongf	deps/zlib/zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uch	deps/zlib/zutil.h	/^typedef unsigned char  uch;$/;"	t
uchf	deps/zlib/zutil.h	/^typedef uch FAR uchf;$/;"	t
uid	include/git2/index.h	/^	uint32_t uid;$/;"	m	struct:git_index_entry	access:public
uid	src/index.c	/^	uint32_t uid;$/;"	m	struct:entry_long	file:	access:public
uid	src/index.c	/^	uint32_t uid;$/;"	m	struct:entry_short	file:	access:public
uid	src/win32/w32_crtdbg_stacktrace.c	/^	char uid[CRTDBG_STACKTRACE__UID_LEN + 1];$/;"	m	struct:__anon291	file:	access:public
uid	src/win32/w32_crtdbg_stacktrace.c	/^	git_win32__crtdbg_stacktrace__uid uid; \/* must be first *\/$/;"	m	struct:__anon292	file:	access:public
uint16_t	deps/http-parser/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint16_t	include/git2/stdint.h	/^   typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	include/git2/stdint.h	/^   typedef unsigned short    uint16_t;$/;"	t
uint32_t	deps/http-parser/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	include/git2/stdint.h	/^   typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	include/git2/stdint.h	/^   typedef unsigned int      uint32_t;$/;"	t
uint64_t	deps/http-parser/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	include/git2/stdint.h	/^typedef unsigned __int64     uint64_t;$/;"	t
uint8_t	deps/http-parser/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
uint8_t	include/git2/stdint.h	/^   typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	include/git2/stdint.h	/^   typedef unsigned char     uint8_t;$/;"	t
uint_fast16_t	include/git2/stdint.h	/^typedef uint16_t  uint_fast16_t;$/;"	t
uint_fast32_t	include/git2/stdint.h	/^typedef uint32_t  uint_fast32_t;$/;"	t
uint_fast64_t	include/git2/stdint.h	/^typedef uint64_t  uint_fast64_t;$/;"	t
uint_fast8_t	include/git2/stdint.h	/^typedef uint8_t   uint_fast8_t;$/;"	t
uint_least16_t	include/git2/stdint.h	/^typedef uint16_t  uint_least16_t;$/;"	t
uint_least32_t	include/git2/stdint.h	/^typedef uint32_t  uint_least32_t;$/;"	t
uint_least64_t	include/git2/stdint.h	/^typedef uint64_t  uint_least64_t;$/;"	t
uint_least8_t	include/git2/stdint.h	/^typedef uint8_t   uint_least8_t;$/;"	t
uintmax_t	include/git2/stdint.h	/^typedef uint64_t  uintmax_t;$/;"	t
uintptr_t	include/git2/stdint.h	/^   typedef _W64 unsigned int uintptr_t;$/;"	t
uintptr_t	include/git2/stdint.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t
ulg	deps/zlib/zutil.h	/^typedef unsigned long  ulg;$/;"	t
unaffected	tests/merge/workdir/dirty.c	/^static char *unaffected[][4] = {$/;"	v	file:
unc_path	tests/clone/local.c	/^static int unc_path(git_buf *buf, const char *host, const char *path)$/;"	f	file:	signature:(git_buf *buf, const char *host, const char *path)
unescape	src/netops.c	/^static char* unescape(char *str)$/;"	f	file:	signature:(char *str)
unescape_line	src/config_file.c	/^static int unescape_line($/;"	f	file:	signature:( char **out, bool *is_multi, const char *ptr, int quote_count)
unhex	deps/http-parser/http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
uninteresting	src/commit_list.h	/^			 uninteresting:1,$/;"	m	struct:git_commit_list_node	access:public
uninteresting	src/pack-objects.h	/^	unsigned int uninteresting:1,$/;"	m	struct:__anon320	access:public
uniques	tests/resources/userdiff/after/file.php	/^    protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/before/file.php	/^    protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/expected/driver/diff.php	/^     protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/expected/nodriver/diff.php	/^     protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/files/file.php	/^    protected $uniques = array();$/;"	v
unlock	include/git2/sys/config.h	/^	int (*unlock)(struct git_config_backend *, int success);$/;"	m	struct:git_config_backend	access:public
unlock	include/git2/sys/refdb_backend.h	/^	int (*unlock)(git_refdb_backend *backend, void *payload, int success, int update_reflog,$/;"	m	struct:git_refdb_backend	access:public
unmerged_index_init	tests/reset/hard.c	/^static void unmerged_index_init(git_index *index, int entries)$/;"	f	file:	signature:(git_index *index, int entries)
unpack_ok	src/push.h	/^	bool unpack_ok;$/;"	m	struct:git_push	access:public
unpack_ok	src/transports/smart.h	/^	int unpack_ok;$/;"	m	struct:__anon192	access:public
unpack_pkt	src/transports/smart_pkt.c	/^static int unpack_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:	signature:(git_pkt **out, const char *line, size_t len)
unpacked	src/pack-objects.c	/^struct unpacked {$/;"	s	file:
unpacked::data	src/pack-objects.c	/^	void *data;$/;"	m	struct:unpacked	file:	access:public
unpacked::depth	src/pack-objects.c	/^	size_t depth;$/;"	m	struct:unpacked	file:	access:public
unpacked::index	src/pack-objects.c	/^	struct git_delta_index *index;$/;"	m	struct:unpacked	typeref:struct:unpacked::git_delta_index	file:	access:public
unpacked::object	src/pack-objects.c	/^	git_pobject *object;$/;"	m	struct:unpacked	file:	access:public
unposix_path	tests/repo/open.c	/^static void unposix_path(git_buf *path)$/;"	f	file:	signature:(git_buf *path)
unset_upstream	src/branch.c	/^static int unset_upstream(git_config *config, const char *shortname)$/;"	f	file:	signature:(git_config *config, const char *shortname)
untracked	tests/checkout/typechange.c	/^	int untracked;$/;"	m	struct:__anon350	file:	access:public
unused	deps/regex/regex_internal.h	/^  char unused;$/;"	m	struct:re_backref_cache_entry	access:public
unused	src/attr_file.h	/^	git_refcount unused;$/;"	m	struct:__anon168	access:public
update	src/submodule.h	/^	git_submodule_update_t update;$/;"	m	struct:git_submodule	access:public
update_attr_callback	tests/checkout/tree.c	/^void update_attr_callback($/;"	f	signature:( const char *path, size_t completed_steps, size_t total_steps, void *payload)
update_branch_remote_config_entry	src/remote.c	/^static int update_branch_remote_config_entry($/;"	f	file:	signature:( git_repository *repo, const char *old_name, const char *new_name)
update_cb	examples/network/fetch.c	/^static int update_cb(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f	file:	signature:(const char *refname, const git_oid *a, const git_oid *b, void *data)
update_config_entries_cb	src/remote.c	/^static int update_config_entries_cb($/;"	f	file:	signature:( const git_config_entry *entry, void *payload)
update_conflicts	src/checkout.c	/^	git_vector update_conflicts;$/;"	m	struct:__anon215	file:	access:public
update_count	tests/core/dirent.c	/^static int update_count(name_data *data, const char *name)$/;"	f	file:	signature:(name_data *data, const char *name)
update_cur_sifted_state	deps/regex/regexec.c	/^update_cur_sifted_state (const re_match_context_t *mctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int str_idx, re_node_set *dest_nodes)
update_data	src/remote.c	/^struct update_data {$/;"	s	file:
update_data::config	src/remote.c	/^	git_config *config;$/;"	m	struct:update_data	file:	access:public
update_data::new_remote_name	src/remote.c	/^	const char *new_remote_name;$/;"	m	struct:update_data	file:	access:public
update_data::old_remote_name	src/remote.c	/^	const char *old_remote_name;$/;"	m	struct:update_data	file:	access:public
update_default	src/submodule.h	/^	git_submodule_update_t update_default;$/;"	m	struct:git_submodule	access:public
update_fetchhead	include/git2/remote.h	/^	int update_fetchhead;$/;"	m	struct:__anon55	access:public
update_head_to_branch	src/clone.c	/^static int update_head_to_branch($/;"	f	file:	signature:( git_repository *repo, const char *remote_name, const char *branch, const char *reflog_message)
update_head_to_new_branch	src/clone.c	/^static int update_head_to_new_branch($/;"	f	file:	signature:( git_repository *repo, const git_oid *target, const char *name, const char *reflog_message)
update_head_to_remote	src/clone.c	/^static int update_head_to_remote($/;"	f	file:	signature:( git_repository *repo, git_remote *remote, const char *reflog_message)
update_header_and_rehash	src/indexer.c	/^static int update_header_and_rehash(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:	signature:(git_indexer *idx, git_transfer_progress *stats)
update_hunk	src/apply.c	/^static int update_hunk($/;"	f	file:	signature:( patch_image *image, unsigned int linenum, patch_image *preimage, patch_image *postimage)
update_names	src/checkout.c	/^	git_vector *update_names;$/;"	m	struct:__anon215	file:	access:public
update_reflog	src/stash.c	/^static int update_reflog($/;"	f	file:	signature:( git_oid *w_commit_oid, git_repository *repo, const char *message)
update_refs_from_report	src/transports/smart_protocol.c	/^static int update_refs_from_report($/;"	f	file:	signature:( git_vector *refs, git_vector *push_specs, git_vector *push_report)
update_regs	deps/regex/regexec.c	/^update_regs (const re_dfa_t *dfa, regmatch_t *pmatch,$/;"	f	file:	signature:(const re_dfa_t *dfa, regmatch_t *pmatch, regmatch_t *prev_idx_match, int cur_node, int cur_idx, int nmatch)
update_reuc	src/checkout.c	/^	git_vector *update_reuc;$/;"	m	struct:__anon215	file:	access:public
update_submodule_cb_payload	tests/submodule/update.c	/^struct update_submodule_cb_payload {$/;"	s	file:
update_submodule_cb_payload::checkout_notify_called	tests/submodule/update.c	/^	int checkout_notify_called;$/;"	m	struct:update_submodule_cb_payload	file:	access:public
update_submodule_cb_payload::checkout_progress_called	tests/submodule/update.c	/^	int checkout_progress_called;$/;"	m	struct:update_submodule_cb_payload	file:	access:public
update_submodule_cb_payload::update_tips_called	tests/submodule/update.c	/^	int update_tips_called;$/;"	m	struct:update_submodule_cb_payload	file:	access:public
update_target	src/transaction.c	/^static int update_target(git_refdb *db, transaction_node *node)$/;"	f	file:	signature:(git_refdb *db, transaction_node *node)
update_tips	include/git2/remote.h	/^	int (*update_tips)(const char *refname, const git_oid *a, const git_oid *b, void *data);$/;"	m	struct:git_remote_callbacks	access:public
update_tips	tests/online/clone.c	/^static int update_tips(const char *refname, const git_oid *a, const git_oid *b, void *payload)$/;"	f	file:	signature:(const char *refname, const git_oid *a, const git_oid *b, void *payload)
update_tips	tests/online/fetch.c	/^static int update_tips(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f	file:	signature:(const char *refname, const git_oid *a, const git_oid *b, void *data)
update_tips	tests/submodule/update.c	/^static int update_tips(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f	file:	signature:(const char *refname, const git_oid *a, const git_oid *b, void *data)
update_tips_called	tests/submodule/update.c	/^	int update_tips_called;$/;"	m	struct:update_submodule_cb_payload	file:	access:public
update_tips_fail_on_call	tests/network/fetchlocal.c	/^int update_tips_fail_on_call(const char *ref, const git_oid *old, const git_oid *new, void *data)$/;"	f	signature:(const char *ref, const git_oid *old, const git_oid *new, void *data)
update_tips_for_spec	src/remote.c	/^static int update_tips_for_spec($/;"	f	file:	signature:( git_remote *remote, const git_remote_callbacks *callbacks, int update_fetchhead, git_remote_autotag_option_t tagopt, git_refspec *spec, git_vector *refs, const char *log_message)
update_tm	src/date.c	/^static git_time_t update_tm(struct tm *tm, struct tm *now, unsigned long sec)$/;"	f	file:	signature:(struct tm *tm, struct tm *now, unsigned long sec)
updated	src/hash/hash_win32.h	/^	bool updated;$/;"	m	struct:hash_cng_ctx	access:public
updated_tip	tests/online/push_util.h	/^} updated_tip;$/;"	t	typeref:struct:__anon352
updated_tip_free	tests/online/push_util.c	/^void updated_tip_free(updated_tip *t)$/;"	f	signature:(updated_tip *t)
updated_tips	tests/online/push_util.h	/^	git_vector updated_tips;$/;"	m	struct:__anon353	access:public
updates	src/push.h	/^	git_vector updates;$/;"	m	struct:git_push	access:public
updates	tests/checkout/typechange.c	/^	int updates;$/;"	m	struct:__anon350	file:	access:public
updatewindow	deps/zlib/inflate.c	/^local int updatewindow(strm, end, copy)$/;"	f
upgrade	deps/http-parser/http_parser.h	/^  unsigned char upgrade : 1;$/;"	m	struct:http_parser	access:public
upload_pack_ls_service_url	src/transports/http.c	/^static const char *upload_pack_ls_service_url = "\/info\/refs?service=git-upload-pack";$/;"	v	file:
upload_pack_ls_service_url	src/transports/winhttp.c	/^static const char *upload_pack_ls_service_url = "\/info\/refs?service=git-upload-pack";$/;"	v	file:
upload_pack_service	src/transports/http.c	/^static const char *upload_pack_service = "upload-pack";$/;"	v	file:
upload_pack_service	src/transports/winhttp.c	/^static const char *upload_pack_service = "upload-pack";$/;"	v	file:
upload_pack_service_url	src/transports/http.c	/^static const char *upload_pack_service_url = "\/git-upload-pack";$/;"	v	file:
upload_pack_service_url	src/transports/winhttp.c	/^static const char *upload_pack_service_url = "\/git-upload-pack";$/;"	v	file:
upstream	tests/refs/branches/upstream.c	/^static git_reference *branch, *upstream;$/;"	v	file:
upstream_name	tests/refs/branches/upstreamname.c	/^static git_buf upstream_name;$/;"	v	file:
url	include/git2/proxy.h	/^	const char *url;$/;"	m	struct:__anon125	access:public
url	src/remote.h	/^	char *url;$/;"	m	struct:git_remote	access:public
url	src/submodule.h	/^	char *url;$/;"	m	struct:git_submodule	access:public
url	src/transports/git.c	/^	char *url;$/;"	m	struct:__anon197	file:	access:public
url	src/transports/local.c	/^	char *url;$/;"	m	struct:__anon178	file:	access:public
url	src/transports/smart.h	/^	char *url;$/;"	m	struct:__anon193	access:public
url	src/transports/ssh.c	/^	char *url;$/;"	m	struct:__anon182	file:	access:public
url	tests/network/remote/createthenload.c	/^static char url[] = "http:\/\/github.com\/libgit2\/libgit2.git";$/;"	v	file:
url_cred	src/transports/http.c	/^	git_cred *url_cred;$/;"	m	struct:__anon176	file:	access:public
url_cred	src/transports/winhttp.c	/^	git_cred *url_cred;$/;"	m	struct:__anon181	file:	access:public
usage	examples/blame.c	/^static void usage(const char *msg, const char *arg)$/;"	f	file:	signature:(const char *msg, const char *arg)
usage	examples/cat-file.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:	signature:(const char *message, const char *arg)
usage	examples/diff.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:	signature:(const char *message, const char *arg)
usage	examples/init.c	/^static void usage(const char *error, const char *arg)$/;"	f	file:	signature:(const char *error, const char *arg)
usage	examples/log.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:	signature:(const char *message, const char *arg)
usage	examples/remote.c	/^static void usage(const char *msg, const char *arg)$/;"	f	file:	signature:(const char *msg, const char *arg)
usage	examples/rev-parse.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:	signature:(const char *message, const char *arg)
use_ctr	src/pack.h	/^	size_t use_ctr;$/;"	m	struct:__anon295	access:public
use_git_alloc	src/pack.c	/^static void *use_git_alloc(void *opaq, unsigned int count, unsigned int size)$/;"	f	file:	signature:(void *opaq, unsigned int count, unsigned int size)
use_git_free	src/pack.c	/^static void use_git_free(void *opaq, void *ptr)$/;"	f	file:	signature:(void *opaq, void *ptr)
use_ignores	src/hashsig.c	/^	int use_ignores;$/;"	m	struct:__anon335	file:	access:public
use_remote	examples/network/ls-remote.c	/^static int use_remote(git_repository *repo, char *name)$/;"	f	file:	signature:(git_repository *repo, char *name)
use_ssl	src/netops.h	/^	bool use_ssl;$/;"	m	struct:gitno_connection_data	access:public
used_bkref_map	deps/regex/regex_internal.h	/^  bitset_word_t used_bkref_map;$/;"	m	struct:re_dfa_t	access:public
used_ctr	src/mwindow.h	/^	size_t used_ctr;$/;"	m	struct:git_mwindow_ctl	access:public
used_memory	src/cache.h	/^	ssize_t     used_memory;$/;"	m	struct:__anon230	access:public
user	src/netops.h	/^	char *user;$/;"	m	struct:gitno_connection_data	access:public
user	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
user_agent	src/transports/http.c	/^static const char *user_agent(void)$/;"	f	file:	signature:(void)
user_agent	src/transports/winhttp.c	/^static int user_agent(git_buf *ua)$/;"	f	file:	signature:(git_buf *ua)
user_input	src/revwalk.h	/^	git_commit_list *user_input;$/;"	m	struct:git_revwalk	access:public
username	include/git2/cred_helpers.h	/^	const char *username;$/;"	m	struct:git_cred_userpass_payload	access:public
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:__anon81	access:public
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_custom	access:public
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_interactive	access:public
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_key	access:public
username	include/git2/transport.h	/^	char username[1];$/;"	m	struct:git_cred_username	access:public
username_free	src/transports/cred.c	/^static void username_free(struct git_cred *cred)$/;"	f	file:	signature:(struct git_cred *cred)
userpass_from_url	src/transports/winhttp.c	/^static int userpass_from_url(wchar_t **user, int *user_len,$/;"	f	file:	signature:(wchar_t **user, int *user_len, wchar_t **pass, int *pass_len, const wchar_t *url, int url_len)
ush	deps/zlib/zutil.h	/^typedef unsigned short ush;$/;"	t
ushf	deps/zlib/zutil.h	/^typedef ush FAR ushf;$/;"	t
utf8_sb_map	deps/regex/regcomp.c	/^static const bitset_t utf8_sb_map = {$/;"	v	file:
utf8proc_utf8class	src/util.c	/^static const int8_t utf8proc_utf8class[256] = {$/;"	v	file:
va_copy	src/cc-compat.h	81;"	d
va_copy	src/cc-compat.h	83;"	d
va_list	script/user_model.c	/^typedef struct va_list_str *va_list;$/;"	t	typeref:struct:va_list_str	file:
val	deps/zlib/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon31	access:public
val	src/delta.c	/^	unsigned int val;$/;"	m	struct:index_entry	file:	access:public
val	src/thread-utils.h	/^	__int64 val;$/;"	m	struct:__anon315	access:public
val	src/thread-utils.h	/^	volatile long val;$/;"	m	struct:__anon314	access:public
valid	src/hash/hash_win32.h	/^	bool valid;$/;"	m	struct:hash_cryptoapi_ctx	access:public
valid_blob_id	tests/index/add.c	/^static const char *valid_blob_id = "fa49b077972391ad58037050f2a75f74e3671e92";$/;"	v	file:
valid_commit_id	tests/index/add.c	/^static const char *valid_commit_id = "763d71aadf09a7951596c9746c024e7eece7c7af";$/;"	v	file:
valid_entry_name	src/tree.c	/^static int valid_entry_name(git_repository *repo, const char *filename)$/;"	f	file:	signature:(git_repository *repo, const char *filename)
valid_filemode	src/index.c	/^static bool valid_filemode(const int filemode)$/;"	f	file:	signature:(const int filemode)
valid_filemode	src/tree.c	/^static bool valid_filemode(const int filemode)$/;"	f	file:	signature:(const int filemode)
valid_len	deps/regex/regex_internal.h	/^  int valid_len;$/;"	m	struct:re_string_t	access:public
valid_raw_len	deps/regex/regex_internal.h	/^  int valid_raw_len;$/;"	m	struct:re_string_t	access:public
valid_repository_path	src/repository.c	/^static bool valid_repository_path(git_buf *repository_path)$/;"	f	file:	signature:(git_buf *repository_path)
valid_tree_id	tests/index/add.c	/^static const char *valid_tree_id = "181037049a54a1eb5fab404658a3a250b44335d7";$/;"	v	file:
validate_and_apply_patchfile	tests/apply/fromfile.c	/^static int validate_and_apply_patchfile($/;"	f	file:	signature:( const char *old, size_t old_len, const char *new, size_t new_len, const char *patchfile, const git_diff_options *diff_opts, const char *filename_expected, unsigned int mode_expected)
validate_templates	tests/repo/init.c	/^static void validate_templates(git_repository *repo, const char *template_path)$/;"	f	file:	signature:(git_repository *repo, const char *template_path)
validate_tree_and_parents	src/commit.c	/^static int validate_tree_and_parents(git_array_oid_t *parents, git_repository *repo, const git_oid *tree,$/;"	f	file:	signature:(git_array_oid_t *parents, git_repository *repo, const git_oid *tree, git_commit_parent_callback parent_cb, void *parent_payload, const git_oid *current_id, bool validate)
value	include/git2/config.h	/^	const char *value; \/**< String value of the entry *\/$/;"	m	struct:git_config_entry	access:public
value	src/attr_file.h	/^	const char *value;$/;"	m	struct:__anon169	access:public
value	src/config_file.c	/^	const char *value;$/;"	m	struct:write_data	file:	access:public
value	tests/core/sortedcache.c	/^	int value;$/;"	m	struct:__anon359	file:	access:public
values	src/config_file.c	/^	git_strmap *values;$/;"	m	struct:__anon152	file:	access:public
values	src/config_file.c	/^	git_strmap *values;$/;"	m	struct:parse_data	file:	access:public
values	src/config_file.c	/^	refcounted_strmap *values;$/;"	m	struct:__anon153	file:	access:public
values	src/hashsig.c	/^	hashsig_t values[HASHSIG_HEAP_SIZE];$/;"	m	struct:__anon334	file:	access:public
values_mutex	src/config_file.c	/^	git_mutex values_mutex;$/;"	m	struct:__anon153	file:	access:public
verb	src/transports/http.c	/^	const char *verb;$/;"	m	struct:__anon175	file:	access:public
verb	src/transports/winhttp.c	/^	const wchar_t *verb;$/;"	m	struct:__anon180	file:	access:public
verbose	deps/zlib/zutil.c	118;"	d	file:
verbose	examples/cat-file.c	/^	int verbose;$/;"	m	struct:opts	file:	access:public
verify_component	src/path.c	/^static bool verify_component($/;"	f	file:	signature:( git_repository *repo, const char *component, size_t len, unsigned int flags)
verify_dotgit_hfs	src/path.c	/^static bool verify_dotgit_hfs(const char *path, size_t len)$/;"	f	file:	signature:(const char *path, size_t len)
verify_last_error	src/filebuf.c	/^static int verify_last_error(git_filebuf *file)$/;"	f	file:	signature:(git_filebuf *file)
verify_refs	tests/online/push.c	/^static void verify_refs(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)$/;"	f	file:	signature:(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)
verify_remote_refs	tests/online/push_util.c	/^void verify_remote_refs(const git_remote_head *actual_refs[], size_t actual_refs_len, const expected_ref expected_refs[], size_t expected_refs_len)$/;"	f	signature:(const git_remote_head *actual_refs[], size_t actual_refs_len, const expected_ref expected_refs[], size_t expected_refs_len)
verify_server_cert	src/openssl_stream.c	/^static int verify_server_cert(SSL *ssl, const char *host)$/;"	f	file:	signature:(SSL *ssl, const char *host)
verify_tracking_branches	tests/online/push.c	/^static void verify_tracking_branches(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)$/;"	f	file:	signature:(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)
verify_update_tips_callback	tests/online/push.c	/^static void verify_update_tips_callback(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)$/;"	f	file:	signature:(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)
version	include/git2/blame.h	/^	unsigned int version;$/;"	m	struct:git_blame_options	access:public
version	include/git2/checkout.h	/^	unsigned int version;$/;"	m	struct:git_checkout_options	access:public
version	include/git2/cherrypick.h	/^	unsigned int version;$/;"	m	struct:__anon115	access:public
version	include/git2/clone.h	/^	unsigned int version;$/;"	m	struct:git_clone_options	access:public
version	include/git2/describe.h	/^	unsigned int version;$/;"	m	struct:__anon108	access:public
version	include/git2/describe.h	/^	unsigned int version;$/;"	m	struct:git_describe_options	access:public
version	include/git2/diff.h	/^	unsigned int version;      \/**< version for the struct *\/$/;"	m	struct:__anon87	access:public
version	include/git2/diff.h	/^	unsigned int version;$/;"	m	struct:__anon100	access:public
version	include/git2/diff.h	/^	unsigned int version;$/;"	m	struct:__anon96	access:public
version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon126	access:public
version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon130	access:public
version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon132	access:public
version	include/git2/proxy.h	/^	unsigned int version;$/;"	m	struct:__anon125	access:public
version	include/git2/rebase.h	/^	unsigned int version;$/;"	m	struct:__anon67	access:public
version	include/git2/remote.h	/^	int version;$/;"	m	struct:__anon55	access:public
version	include/git2/remote.h	/^	unsigned int version;$/;"	m	struct:__anon56	access:public
version	include/git2/remote.h	/^	unsigned int version;$/;"	m	struct:git_remote_callbacks	access:public
version	include/git2/repository.h	/^	unsigned int version;$/;"	m	struct:__anon119	access:public
version	include/git2/revert.h	/^	unsigned int version;$/;"	m	struct:__anon142	access:public
version	include/git2/stash.h	/^	unsigned int version;$/;"	m	struct:git_stash_apply_options	access:public
version	include/git2/status.h	/^	unsigned int      version;$/;"	m	struct:__anon49	access:public
version	include/git2/submodule.h	/^	unsigned int version;$/;"	m	struct:git_submodule_update_options	access:public
version	include/git2/sys/config.h	/^	unsigned int version;$/;"	m	struct:git_config_backend	access:public
version	include/git2/sys/diff.h	/^	unsigned int version;$/;"	m	struct:__anon60	access:public
version	include/git2/sys/filter.h	/^	unsigned int           version;$/;"	m	struct:git_filter	access:public
version	include/git2/sys/merge.h	/^	unsigned int                 version;$/;"	m	struct:git_merge_driver	access:public
version	include/git2/sys/odb_backend.h	/^	unsigned int version;$/;"	m	struct:git_odb_backend	access:public
version	include/git2/sys/refdb_backend.h	/^	unsigned int version;$/;"	m	struct:git_refdb_backend	access:public
version	include/git2/sys/stream.h	/^	int version;$/;"	m	struct:git_stream	access:public
version	include/git2/sys/transport.h	/^	unsigned int version;$/;"	m	struct:git_transport	access:public
version	src/index.c	/^	uint32_t version;$/;"	m	struct:index_header	file:	access:public
version	src/index.h	/^	unsigned int version;$/;"	m	struct:git_index	access:public
voidp	deps/zlib/zconf.h	/^typedef void       *voidp;$/;"	t
voidpc	deps/zlib/zconf.h	/^typedef void const *voidpc;$/;"	t
voidpf	deps/zlib/zconf.h	/^typedef void FAR   *voidpf;$/;"	t
w_bits	deps/zlib/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state	access:public
w_mask	deps/zlib/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state	access:public
w_size	deps/zlib/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state	access:public
wait_for	src/curl_stream.c	/^static int wait_for(curl_socket_t fd, bool reading)$/;"	f	file:	signature:(curl_socket_t fd, bool reading)
wait_while_ack	src/transports/smart_protocol.c	/^static int wait_while_ack(gitno_buffer *buf)$/;"	f	file:	signature:(gitno_buffer *buf)
walk	include/git2/revwalk.h	/^GIT_EXTERN(git_repository *) git_revwalk_repository(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(int) git_revwalk_hide_head(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(int) git_revwalk_push_head(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(void) git_revwalk_free(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(void) git_revwalk_simplify_first_parent(git_revwalk *walk);$/;"	v
walk_and_search	src/revparse.c	/^static int walk_and_search(git_object **out, git_revwalk *walk, regex_t *regex)$/;"	f	file:	signature:(git_object **out, git_revwalk *walk, regex_t *regex)
walk_common_sequence	src/xdiff/xpatience.c	/^static int walk_common_sequence(struct hashmap *map, struct entry *first,$/;"	f	file:	signature:(struct hashmap *map, struct entry *first, int line1, int count1, int line2, int count2)
walk_data	tests/core/dirent.c	/^typedef struct walk_data {$/;"	s	file:
walk_data	tests/core/dirent.c	/^} walk_data;$/;"	t	typeref:struct:walk_data	file:
walk_data::names	tests/core/dirent.c	/^	name_data *names; \/* name state data	*\/$/;"	m	struct:walk_data	file:	access:public
walk_data::path	tests/core/dirent.c	/^	git_buf path;$/;"	m	struct:walk_data	file:	access:public
walk_data::sub	tests/core/dirent.c	/^	char *sub;		\/* sub-directory name *\/$/;"	m	struct:walk_data	file:	access:public
walk_objects	src/pack-objects.h	/^	git_oidmap *walk_objects;$/;"	m	struct:git_packbuilder	access:public
walker	examples/log.c	/^	git_revwalk *walker;$/;"	m	struct:log_state	file:	access:public
walker	include/git2/revwalk.h	/^GIT_EXTERN(void) git_revwalk_reset(git_revwalk *walker);$/;"	v
walking	src/revwalk.h	/^	unsigned walking:1,$/;"	m	struct:git_revwalk	access:public
was	deps/zlib/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state	access:public
wbits	deps/zlib/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state	access:public
wch	deps/regex/regex_internal.h	/^    wchar_t wch;$/;"	m	union:__anon15::__anon16	access:public
wcs	deps/regex/regex_internal.h	/^  wint_t *wcs;$/;"	m	struct:re_string_t	access:public
wcscat_s	tests/clar/fs.h	11;"	d
wcscpy_s	tests/clar/fs.h	10;"	d
wcstoimax	include/git2/inttypes.h	305;"	d
wcstoumax	include/git2/inttypes.h	306;"	d
wd_item_is_removable	src/checkout.c	/^static bool wd_item_is_removable($/;"	f	file:	signature:( checkout_data *data, const git_index_entry *wd)
wd_oid	src/submodule.h	/^	git_oid wd_oid;$/;"	m	struct:git_submodule	access:public
weak_alias	deps/regex/regcomp.c	/^weak_alias (__re_compile_pattern, re_compile_pattern)$/;"	f
weak_alias	deps/regex/regcomp.c	/^weak_alias (__re_set_syntax, re_set_syntax)$/;"	f
weak_alias	deps/regex/regcomp.c	/^weak_alias (__regcomp, regcomp)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_match, re_match)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_match_2, re_match_2)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_search, re_search)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_set_registers, re_set_registers)$/;"	f
weekday_names	src/date.c	/^static const char *weekday_names[] = {$/;"	v	file:
what	tests/stash/apply.c	/^	bool what;$/;"	m	struct:seen_paths	file:	access:public
whave	deps/zlib/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state	access:public
when	include/git2/types.h	/^	git_time when; \/**< time when the action happened *\/$/;"	m	struct:git_signature	access:public
when	tests/stash/apply.c	/^	bool when;$/;"	m	struct:seen_paths	file:	access:public
who	tests/stash/apply.c	/^	bool who;$/;"	m	struct:seen_paths	file:	access:public
wildcard_filter_apply	tests/filter/wildcard.c	/^static int wildcard_filter_apply($/;"	f	file:	signature:( git_filter *self, void **payload, git_buf *to, const git_buf *from, const git_filter_source *source)
wildcard_filter_check	tests/filter/wildcard.c	/^static int wildcard_filter_check($/;"	f	file:	signature:( git_filter *self, void **payload, const git_filter_source *src, const char **attr_values)
wildcard_filter_cleanup	tests/filter/wildcard.c	/^static void wildcard_filter_cleanup(git_filter *self, void *payload)$/;"	f	file:	signature:(git_filter *self, void *payload)
wildcard_filter_free	tests/filter/wildcard.c	/^static void wildcard_filter_free(git_filter *f)$/;"	f	file:	signature:(git_filter *f)
win32_find_existing_dirs	src/win32/findfile.c	/^static int win32_find_existing_dirs($/;"	f	file:	signature:( git_buf *out, const wchar_t *tmpl[])
win32_find_git_in_path	src/win32/findfile.c	/^static int win32_find_git_in_path(git_buf *buf, const wchar_t *gitexe, const wchar_t *subdir)$/;"	f	file:	signature:(git_buf *buf, const wchar_t *gitexe, const wchar_t *subdir)
win32_find_git_in_registry	src/win32/findfile.c	/^static int win32_find_git_in_registry($/;"	f	file:	signature:( git_buf *buf, const HKEY hive, const wchar_t *key, const wchar_t *subdir)
win32_path_to_8	src/win32/findfile.c	/^static int win32_path_to_8(git_buf *dest, const wchar_t *src)$/;"	f	file:	signature:(git_buf *dest, const wchar_t *src)
win32_srwlock_acquire_exclusive	src/win32/thread.c	/^static win32_srwlock_fn win32_srwlock_acquire_exclusive;$/;"	v	file:
win32_srwlock_acquire_shared	src/win32/thread.c	/^static win32_srwlock_fn win32_srwlock_acquire_shared;$/;"	v	file:
win32_srwlock_fn	src/win32/thread.c	/^typedef void (WINAPI *win32_srwlock_fn)(GIT_SRWLOCK *);$/;"	t	file:
win32_srwlock_initialize	src/win32/thread.c	/^static win32_srwlock_fn win32_srwlock_initialize;$/;"	v	file:
win32_srwlock_release_exclusive	src/win32/thread.c	/^static win32_srwlock_fn win32_srwlock_release_exclusive;$/;"	v	file:
win32_srwlock_release_shared	src/win32/thread.c	/^static win32_srwlock_fn win32_srwlock_release_shared;$/;"	v	file:
win32_walkpath	src/win32/findfile.c	/^static wchar_t* win32_walkpath(wchar_t *path, wchar_t *buf, size_t buflen)$/;"	f	file:	signature:(wchar_t *path, wchar_t *buf, size_t buflen)
window	deps/zlib/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state	access:public
window	deps/zlib/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state	access:public
window	src/pack-objects.c	/^	size_t window;$/;"	m	struct:thread_params	file:	access:public
window_map	src/mwindow.h	/^	git_map window_map;$/;"	m	struct:git_mwindow	access:public
window_memory_limit	src/pack-objects.h	/^	size_t window_memory_limit;$/;"	m	struct:git_packbuilder	access:public
window_size	deps/zlib/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state	access:public
windowfiles	src/mwindow.h	/^	git_vector windowfiles;$/;"	m	struct:git_mwindow_ctl	access:public
windows	src/mwindow.h	/^	git_mwindow *windows;$/;"	m	struct:git_mwindow_file	access:public
winhttp_action	src/transports/winhttp.c	/^static int winhttp_action($/;"	f	file:	signature:( git_smart_subtransport_stream **stream, git_smart_subtransport *subtransport, const char *url, git_smart_service_t action)
winhttp_authmechanism_t	src/transports/winhttp.c	/^} winhttp_authmechanism_t;$/;"	t	typeref:enum:__anon179	file:
winhttp_close	src/transports/winhttp.c	/^static int winhttp_close(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
winhttp_close_connection	src/transports/winhttp.c	/^static int winhttp_close_connection(winhttp_subtransport *t)$/;"	f	file:	signature:(winhttp_subtransport *t)
winhttp_connect	src/transports/winhttp.c	/^static int winhttp_connect($/;"	f	file:	signature:( winhttp_subtransport *t)
winhttp_free	src/transports/winhttp.c	/^static void winhttp_free(git_smart_subtransport *subtransport)$/;"	f	file:	signature:(git_smart_subtransport *subtransport)
winhttp_receivepack	src/transports/winhttp.c	/^static int winhttp_receivepack($/;"	f	file:	signature:( winhttp_subtransport *t, winhttp_stream *s)
winhttp_receivepack_ls	src/transports/winhttp.c	/^static int winhttp_receivepack_ls($/;"	f	file:	signature:( winhttp_subtransport *t, winhttp_stream *s)
winhttp_stream	src/transports/winhttp.c	/^} winhttp_stream;$/;"	t	typeref:struct:__anon180	file:
winhttp_stream_alloc	src/transports/winhttp.c	/^static int winhttp_stream_alloc(winhttp_subtransport *t, winhttp_stream **stream)$/;"	f	file:	signature:(winhttp_subtransport *t, winhttp_stream **stream)
winhttp_stream_close	src/transports/winhttp.c	/^static void winhttp_stream_close(winhttp_stream *s)$/;"	f	file:	signature:(winhttp_stream *s)
winhttp_stream_connect	src/transports/winhttp.c	/^static int winhttp_stream_connect(winhttp_stream *s)$/;"	f	file:	signature:(winhttp_stream *s)
winhttp_stream_free	src/transports/winhttp.c	/^static void winhttp_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:	signature:(git_smart_subtransport_stream *stream)
winhttp_stream_read	src/transports/winhttp.c	/^static int winhttp_stream_read($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, char *buffer, size_t buf_size, size_t *bytes_read)
winhttp_stream_write_buffered	src/transports/winhttp.c	/^static int winhttp_stream_write_buffered($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
winhttp_stream_write_chunked	src/transports/winhttp.c	/^static int winhttp_stream_write_chunked($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
winhttp_stream_write_single	src/transports/winhttp.c	/^static int winhttp_stream_write_single($/;"	f	file:	signature:( git_smart_subtransport_stream *stream, const char *buffer, size_t len)
winhttp_subtransport	src/transports/winhttp.c	/^} winhttp_subtransport;$/;"	t	typeref:struct:__anon181	file:
winhttp_uploadpack	src/transports/winhttp.c	/^static int winhttp_uploadpack($/;"	f	file:	signature:( winhttp_subtransport *t, winhttp_stream *s)
winhttp_uploadpack_ls	src/transports/winhttp.c	/^static int winhttp_uploadpack_ls($/;"	f	file:	signature:( winhttp_subtransport *t, winhttp_stream *s)
with_statement	tests/generate.py	/^from __future__ import with_statement$/;"	i
wnext	deps/zlib/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state	access:public
word_char	deps/regex/regex_internal.h	/^  bitset_t word_char;$/;"	m	struct:re_dfa_t	access:public
word_char	deps/regex/regex_internal.h	/^  re_const_bitset_ptr_t word_char;$/;"	m	struct:re_string_t	access:public
word_char	deps/regex/regex_internal.h	/^  unsigned int word_char : 1;$/;"	m	struct:__anon7	access:public
word_ops_used	deps/regex/regex_internal.h	/^  unsigned char word_ops_used;$/;"	m	struct:re_string_t	access:public
word_ops_used	deps/regex/regex_internal.h	/^  unsigned int word_ops_used : 1;$/;"	m	struct:re_dfa_t	access:public
word_pattern	src/diff_driver.c	/^	regex_t  word_pattern;$/;"	m	struct:git_diff_driver	file:	access:public
word_trtable	deps/regex/regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::	access:public
words	src/bitvec.h	/^		uint64_t *words;$/;"	m	union:__anon205::__anon206	access:public
words	src/userdiff.h	/^	const char *words;$/;"	m	struct:__anon161	access:public
work	deps/zlib/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state	access:public
workdir	src/attr.c	/^	const char *workdir;$/;"	m	struct:__anon247	file:	access:public
workdir	src/repository.h	/^	char *workdir;$/;"	m	struct:git_repository	access:public
workdir_data	tests/filter/custom.c	/^static char workdir_data[] =$/;"	v	file:
workdir_delta2status	src/status.c	/^static unsigned int workdir_delta2status($/;"	f	file:	signature:( git_diff *diff, git_diff_delta *idx2wd)
workdir_iterator_test	tests/iterator/workdir.c	/^static void workdir_iterator_test($/;"	f	file:	signature:( const char *sandbox, const char *start, const char *end, int expected_count, int expected_ignores, const char **expected_names, const char *an_ignored_name)
workdir_path	include/git2/repository.h	/^	const char *workdir_path;$/;"	m	struct:__anon119	access:public
working	src/pack-objects.c	/^	size_t working;$/;"	m	struct:thread_params	file:	access:public
wrap	deps/zlib/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state	access:public
wrap	deps/zlib/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state	access:public
wrapped	src/transports/smart.h	/^	git_smart_subtransport *wrapped;$/;"	m	struct:__anon193	access:public
write	include/git2/odb_backend.h	/^	int (*write)(git_odb_stream *stream, const char *buffer, size_t len);$/;"	m	struct:git_odb_stream	access:public
write	include/git2/sys/odb_backend.h	/^	int (* write)($/;"	m	struct:git_odb_backend	access:public
write	include/git2/sys/refdb_backend.h	/^	int (*write)(git_refdb_backend *backend,$/;"	m	struct:git_refdb_backend	access:public
write	include/git2/sys/stream.h	/^	ssize_t (*write)(struct git_stream *, const char *, size_t, int);$/;"	m	struct:git_stream	access:public
write	include/git2/sys/transport.h	/^	int (*write)($/;"	m	struct:git_smart_subtransport_stream	access:public
write	include/git2/types.h	/^	int (*write)(git_writestream *stream, const char *buffer, size_t len);$/;"	m	struct:git_writestream	access:public
write	src/filebuf.h	/^	int (*write)(git_filebuf *file, void *source, size_t len);$/;"	m	struct:git_filebuf	access:public
write	tests/generate.py	/^    def write(self):$/;"	m	class:TestSuite	access:public
write_add_refspec	src/remote.c	/^static int write_add_refspec(git_repository *repo, const char *name, const char *refspec, bool fetch)$/;"	f	file:	signature:(git_repository *repo, const char *name, const char *refspec, bool fetch)
write_at	src/indexer.c	/^static int write_at(git_indexer *idx, const void *data, git_off_t offset, size_t size)$/;"	f	file:	signature:(git_indexer *idx, const void *data, git_off_t offset, size_t size)
write_attributes	tests/object/blob/fromstream.c	/^static void write_attributes(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
write_cb	src/pack-objects.c	/^static int write_cb(void *buf, size_t len, void *payload)$/;"	f	file:	signature:(void *buf, size_t len, void *payload)
write_cb	src/stransport_stream.c	/^static OSStatus write_cb(SSLConnectionRef conn, const void *data, size_t *len)$/;"	f	file:	signature:(SSLConnectionRef conn, const void *data, size_t *len)
write_cherrypick_head	src/cherrypick.c	/^static int write_cherrypick_head($/;"	f	file:	signature:( git_repository *repo, const char *commit_oidstr)
write_chunk	src/transports/http.c	/^static int write_chunk(git_stream *io, const char *buffer, size_t len)$/;"	f	file:	signature:(git_stream *io, const char *buffer, size_t len)
write_chunk	src/transports/winhttp.c	/^static int write_chunk(HINTERNET request, const char *buffer, size_t len)$/;"	f	file:	signature:(HINTERNET request, const char *buffer, size_t len)
write_data	src/config_file.c	/^struct write_data {$/;"	s	file:
write_data::buf	src/config_file.c	/^	git_buf *buf;$/;"	m	struct:write_data	file:	access:public
write_data::buffered_comment	src/config_file.c	/^	git_buf buffered_comment;$/;"	m	struct:write_data	file:	access:public
write_data::in_section	src/config_file.c	/^	unsigned int in_section : 1,$/;"	m	struct:write_data	file:	access:public
write_data::name	src/config_file.c	/^	const char *name;$/;"	m	struct:write_data	file:	access:public
write_data::preg	src/config_file.c	/^	const regex_t *preg;$/;"	m	struct:write_data	file:	access:public
write_data::preg_replaced	src/config_file.c	/^		preg_replaced : 1;$/;"	m	struct:write_data	file:	access:public
write_data::section	src/config_file.c	/^	const char *section;$/;"	m	struct:write_data	file:	access:public
write_data::value	src/config_file.c	/^	const char *value;$/;"	m	struct:write_data	file:	access:public
write_deflate	src/filebuf.c	/^static int write_deflate(git_filebuf *file, void *source, size_t len)$/;"	f	file:	signature:(git_filebuf *file, void *source, size_t len)
write_disk_entry	src/index.c	/^static int write_disk_entry(git_filebuf *file, git_index_entry *entry, const char **last)$/;"	f	file:	signature:(git_filebuf *file, git_index_entry *entry, const char **last)
write_entries	src/index.c	/^static int write_entries(git_index *index, git_filebuf *file)$/;"	f	file:	signature:(git_index *index, git_filebuf *file)
write_extension	src/index.c	/^static int write_extension(git_filebuf *file, struct index_extension *header, git_buf *data)$/;"	f	file:	signature:(git_filebuf *file, struct index_extension *header, git_buf *data)
write_file	tests/repo/discover.c	/^static void write_file(const char *path, const char *content)$/;"	f	file:	signature:(const char *path, const char *content)
write_file_contents	tests/merge/workdir/setup.c	/^static void write_file_contents(const char *filename, const char *output)$/;"	f	file:	signature:(const char *filename, const char *output)
write_file_filtered	src/blob.c	/^static int write_file_filtered($/;"	f	file:	signature:( git_oid *id, git_off_t *size, git_odb *odb, const char *full_path, git_filter_list *fl)
write_file_stream	src/blob.c	/^static int write_file_stream($/;"	f	file:	signature:( git_oid *id, git_odb *odb, const char *path, git_off_t file_size)
write_files	tests/merge/workdir/dirty.c	/^static void write_files(char *files[])$/;"	f	file:	signature:(char *files[])
write_index	src/index.c	/^static int write_index(git_oid *checksum, git_index *index, git_filebuf *file)$/;"	f	file:	signature:(git_oid *checksum, git_index *index, git_filebuf *file)
write_invalid_filename	tests/index/tests.c	/^static void write_invalid_filename(git_repository *repo, const char *fn_orig)$/;"	f	file:	signature:(git_repository *repo, const char *fn_orig)
write_line	src/config_file.c	/^static int write_line(struct write_data *write_data, const char *line, size_t line_len)$/;"	f	file:	signature:(struct write_data *write_data, const char *line, size_t line_len)
write_line_to	src/config_file.c	/^static int write_line_to(git_buf *buf, const char *line, size_t line_len)$/;"	f	file:	signature:(git_buf *buf, const char *line, size_t line_len)
write_mapped_var	src/submodule.c	/^static int write_mapped_var(git_repository *repo, const char *name, git_cvar_map *maps, size_t nmaps, const char *var, int ival)$/;"	f	file:	signature:(git_repository *repo, const char *name, git_cvar_map *maps, size_t nmaps, const char *var, int ival)
write_merge_head	src/merge.c	/^static int write_merge_head($/;"	f	file:	signature:( git_repository *repo, const git_annotated_commit *heads[], size_t heads_len)
write_merge_mode	src/merge.c	/^static int write_merge_mode(git_repository *repo)$/;"	f	file:	signature:(git_repository *repo)
write_merge_msg	src/cherrypick.c	/^static int write_merge_msg($/;"	f	file:	signature:( git_repository *repo, const char *commit_msg)
write_merge_msg	src/merge.c	/^static int write_merge_msg($/;"	f	file:	signature:( git_repository *repo, const git_annotated_commit *heads[], size_t heads_len)
write_merge_msg	src/revert.c	/^static int write_merge_msg($/;"	f	file:	signature:( git_repository *repo, const char *commit_oidstr, const char *commit_msgline)
write_name_extension	src/index.c	/^static int write_name_extension(git_index *index, git_filebuf *file)$/;"	f	file:	signature:(git_index *index, git_filebuf *file)
write_normal	src/filebuf.c	/^static int write_normal(git_filebuf *file, void *source, size_t len)$/;"	f	file:	signature:(git_filebuf *file, void *source, size_t len)
write_object	src/pack-objects.c	/^static int write_object($/;"	f	file:	signature:( git_packbuilder *pb, git_pobject *po, int (*write_cb)(void *buf, size_t size, void *cb_data), void *cb_data)
write_object_files	tests/odb/loose.c	/^static void write_object_files(object_data *d)$/;"	f	file:	signature:(object_data *d)
write_on_comment	src/config_file.c	/^static int write_on_comment(struct reader **reader, const char *line, size_t line_len, void *data)$/;"	f	file:	signature:(struct reader **reader, const char *line, size_t line_len, void *data)
write_on_eof	src/config_file.c	/^static int write_on_eof($/;"	f	file:	signature:( struct reader **reader, const char *current_section, void *data)
write_on_section	src/config_file.c	/^static int write_on_section($/;"	f	file:	signature:( struct reader **reader, const char *current_section, const char *line, size_t line_len, void *data)
write_on_variable	src/config_file.c	/^static int write_on_variable($/;"	f	file:	signature:( struct reader **reader, const char *current_section, char *var_name, char *var_value, const char *line, size_t line_len, void *data)
write_one	src/pack-objects.c	/^static int write_one($/;"	f	file:	signature:( enum write_one_status *status, git_packbuilder *pb, git_pobject *po, int (*write_cb)(void *buf, size_t size, void *cb_data), void *cb_data)
write_one_status	src/pack-objects.c	/^enum write_one_status {$/;"	g	file:
write_pack	src/pack-objects.c	/^static int write_pack(git_packbuilder *pb,$/;"	f	file:	signature:(git_packbuilder *pb, int (*write_cb)(void *buf, size_t size, void *cb_data), void *cb_data)
write_pack_buf	src/pack-objects.c	/^static int write_pack_buf(void *buf, size_t size, void *data)$/;"	f	file:	signature:(void *buf, size_t size, void *data)
write_reuc_extension	src/index.c	/^static int write_reuc_extension(git_index *index, git_filebuf *file)$/;"	f	file:	signature:(git_index *index, git_filebuf *file)
write_revert_head	src/revert.c	/^static int write_revert_head($/;"	f	file:	signature:( git_repository *repo, const char *commit_oidstr)
write_section	src/config_file.c	/^static int write_section(git_buf *fbuf, const char *key)$/;"	f	file:	signature:(git_buf *fbuf, const char *key)
write_similarity_file_two	tests/diff/rename.c	/^static void write_similarity_file_two(const char *filename, size_t b_lines)$/;"	f	file:	signature:(const char *filename, size_t b_lines)
write_symlink	src/blob.c	/^static int write_symlink($/;"	f	file:	signature:( git_oid *id, git_odb *odb, const char *path, size_t link_size)
write_table	deps/zlib/crc32.c	/^local void write_table(out, table)$/;"	f
write_tag_annotation	src/tag.c	/^static int write_tag_annotation($/;"	f	file:	signature:( git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message)
write_tree	src/tree-cache.c	/^static void write_tree(git_buf *out, git_tree_cache *tree)$/;"	f	file:	signature:(git_buf *out, git_tree_cache *tree)
write_tree	src/tree.c	/^static int write_tree($/;"	f	file:	signature:( git_oid *oid, git_repository *repo, git_index *index, const char *dirname, size_t start)
write_tree_extension	src/index.c	/^static int write_tree_extension(git_index *index, git_filebuf *file)$/;"	f	file:	signature:(git_index *index, git_filebuf *file)
write_value	src/config_file.c	/^static int write_value(struct write_data *write_data)$/;"	f	file:	signature:(struct write_data *write_data)
write_var	src/submodule.c	/^static int write_var(git_repository *repo, const char *name, const char *var, const char *val)$/;"	f	file:	signature:(git_repository *repo, const char *name, const char *var, const char *val)
writefile	tests/filter/stream.c	/^static void writefile(const char *filename, size_t numchunks)$/;"	f	file:	signature:(const char *filename, size_t numchunks)
writepack	include/git2/sys/odb_backend.h	/^	int (* writepack)($/;"	m	struct:git_odb_backend	access:public
writepack	src/transports/local.c	/^	git_odb_writepack *writepack;$/;"	m	struct:foreach_data	file:	access:public
writestream	include/git2/sys/odb_backend.h	/^	int (* writestream)($/;"	m	struct:git_odb_backend	access:public
written	src/merge.c	/^	bool written;$/;"	m	struct:merge_msg_entry	file:	access:public
written	src/odb.c	/^	size_t size, written;$/;"	m	struct:__anon245	file:	access:public
written	src/pack-objects.h	/^	int written:1,$/;"	m	struct:git_pobject	access:public
written	tests/trace/trace.c	/^static int written = 0;$/;"	v	file:
wrong_sorted_path	tests/status/status_helpers.h	/^	int wrong_sorted_path;$/;"	m	struct:__anon365	access:public
wrong_status_flags_count	tests/status/status_helpers.h	/^	int wrong_status_flags_count;$/;"	m	struct:__anon365	access:public
wsize	deps/zlib/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state	access:public
wt_adds	tests/index/addall.c	/^	size_t wt_adds;$/;"	m	struct:__anon371	file:	access:public
wt_dels	tests/index/addall.c	/^	size_t wt_dels;$/;"	m	struct:__anon371	file:	access:public
wt_mods	tests/index/addall.c	/^	size_t wt_mods;$/;"	m	struct:__anon371	file:	access:public
www_authenticate	src/transports/http.c	/^	git_vector www_authenticate;$/;"	m	struct:__anon176	file:	access:public
xd_new_data	src/diff_xdiff.c	/^	mmfile_t xd_old_data, xd_new_data;$/;"	m	struct:__anon224	file:	access:public
xd_old_data	src/diff_xdiff.c	/^	mmfile_t xd_old_data, xd_new_data;$/;"	m	struct:__anon224	file:	access:public
xdalgoenv_t	src/xdiff/xdiffi.h	/^} xdalgoenv_t;$/;"	t	typeref:struct:s_xdalgoenv
xdchange_t	src/xdiff/xdiffi.h	/^} xdchange_t;$/;"	t	typeref:struct:s_xdchange
xdemitcb_t	src/xdiff/xdiff.h	/^} xdemitcb_t;$/;"	t	typeref:struct:s_xdemitcb
xdemitconf_t	src/xdiff/xdiff.h	/^} xdemitconf_t;$/;"	t	typeref:struct:s_xdemitconf
xdf1	src/xdiff/xtypes.h	/^	xdfile_t xdf1, xdf2;$/;"	m	struct:s_xdfenv	access:public
xdf2	src/xdiff/xtypes.h	/^	xdfile_t xdf1, xdf2;$/;"	m	struct:s_xdfenv	access:public
xdfenv_t	src/xdiff/xtypes.h	/^} xdfenv_t;$/;"	t	typeref:struct:s_xdfenv
xdfile_t	src/xdiff/xtypes.h	/^} xdfile_t;$/;"	t	typeref:struct:s_xdfile
xdl_add_change	src/xdiff/xdiffi.c	/^static xdchange_t *xdl_add_change(xdchange_t *xscr, long i1, long i2, long chg1, long chg2) {$/;"	f	file:	signature:(xdchange_t *xscr, long i1, long i2, long chg1, long chg2)
xdl_append_merge	src/xdiff/xmerge.c	/^static int xdl_append_merge(xdmerge_t **merge, int mode,$/;"	f	file:	signature:(xdmerge_t **merge, int mode, long i0, long chg0, long i1, long chg1, long i2, long chg2)
xdl_atol	src/xdiff/xutils.c	/^long xdl_atol(char const *str, char const **next) {$/;"	f	signature:(char const *str, char const **next)
xdl_blankline	src/xdiff/xutils.c	/^int xdl_blankline(const char *line, long size, long flags)$/;"	f	signature:(const char *line, long size, long flags)
xdl_bogosqrt	src/xdiff/xutils.c	/^long xdl_bogosqrt(long n) {$/;"	f	signature:(long n)
xdl_build_script	src/xdiff/xdiffi.c	/^int xdl_build_script(xdfenv_t *xe, xdchange_t **xscr) {$/;"	f	signature:(xdfenv_t *xe, xdchange_t **xscr)
xdl_call_hunk_func	src/xdiff/xdiffi.c	/^static int xdl_call_hunk_func(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	f	file:	signature:(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb, xdemitconf_t const *xecfg)
xdl_cha_alloc	src/xdiff/xutils.c	/^void *xdl_cha_alloc(chastore_t *cha) {$/;"	f	signature:(chastore_t *cha)
xdl_cha_free	src/xdiff/xutils.c	/^void xdl_cha_free(chastore_t *cha) {$/;"	f	signature:(chastore_t *cha)
xdl_cha_init	src/xdiff/xutils.c	/^int xdl_cha_init(chastore_t *cha, long isize, long icount) {$/;"	f	signature:(chastore_t *cha, long isize, long icount)
xdl_change_compact	src/xdiff/xdiffi.c	/^int xdl_change_compact(xdfile_t *xdf, xdfile_t *xdfo, long flags) {$/;"	f	signature:(xdfile_t *xdf, xdfile_t *xdfo, long flags)
xdl_classify_record	src/xdiff/xprepare.c	/^static int xdl_classify_record(unsigned int pass, xdlclassifier_t *cf, xrecord_t **rhash,$/;"	f	file:	signature:(unsigned int pass, xdlclassifier_t *cf, xrecord_t **rhash, unsigned int hbits, xrecord_t *rec)
xdl_clean_mmatch	src/xdiff/xprepare.c	/^static int xdl_clean_mmatch(char const *dis, long i, long s, long e) {$/;"	f	file:	signature:(char const *dis, long i, long s, long e)
xdl_cleanup_merge	src/xdiff/xmerge.c	/^static int xdl_cleanup_merge(xdmerge_t *c)$/;"	f	file:	signature:(xdmerge_t *c)
xdl_cleanup_records	src/xdiff/xprepare.c	/^static int xdl_cleanup_records(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2) {$/;"	f	file:	signature:(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2)
xdl_diff	src/xdiff/xdiffi.c	/^int xdl_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,$/;"	f	signature:(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdemitconf_t const *xecfg, xdemitcb_t *ecb)
xdl_do_diff	src/xdiff/xdiffi.c	/^int xdl_do_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,$/;"	f	signature:(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdfenv_t *xe)
xdl_do_histogram_diff	src/xdiff/xhistogram.c	/^int xdl_do_histogram_diff(mmfile_t *file1, mmfile_t *file2,$/;"	f	signature:(mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env)
xdl_do_merge	src/xdiff/xmerge.c	/^static int xdl_do_merge(xdfenv_t *xe1, xdchange_t *xscr1,$/;"	f	file:	signature:(xdfenv_t *xe1, xdchange_t *xscr1, xdfenv_t *xe2, xdchange_t *xscr2, xmparam_t const *xmp, mmbuffer_t *result)
xdl_do_patience_diff	src/xdiff/xpatience.c	/^int xdl_do_patience_diff(mmfile_t *file1, mmfile_t *file2,$/;"	f	signature:(mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env)
xdl_emit_common	src/xdiff/xemit.c	/^static int xdl_emit_common(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	f	file:	signature:(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb, xdemitconf_t const *xecfg)
xdl_emit_diff	src/xdiff/xemit.c	/^int xdl_emit_diff(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	f	signature:(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb, xdemitconf_t const *xecfg)
xdl_emit_diffrec	src/xdiff/xutils.c	/^int xdl_emit_diffrec(char const *rec, long size, char const *pre, long psize,$/;"	f	signature:(char const *rec, long size, char const *pre, long psize, xdemitcb_t *ecb)
xdl_emit_hunk_consume_func_t	src/xdiff/xdiff.h	/^typedef int (*xdl_emit_hunk_consume_func_t)(long start_a, long count_a,$/;"	t
xdl_emit_hunk_hdr	src/xdiff/xutils.c	/^int xdl_emit_hunk_hdr(long s1, long c1, long s2, long c2,$/;"	f	signature:(long s1, long c1, long s2, long c2, const char *func, long funclen, xdemitcb_t *ecb)
xdl_emit_record	src/xdiff/xemit.c	/^static int xdl_emit_record(xdfile_t *xdf, long ri, char const *pre, xdemitcb_t *ecb) {$/;"	f	file:	signature:(xdfile_t *xdf, long ri, char const *pre, xdemitcb_t *ecb)
xdl_fall_back_diff	src/xdiff/xutils.c	/^int xdl_fall_back_diff(xdfenv_t *diff_env, xpparam_t const *xpp,$/;"	f	signature:(xdfenv_t *diff_env, xpparam_t const *xpp, int line1, int count1, int line2, int count2)
xdl_fill_merge_buffer	src/xdiff/xmerge.c	/^static int xdl_fill_merge_buffer(size_t *out,$/;"	f	file:	signature:(size_t *out, xdfenv_t *xe1, const char *name1, xdfenv_t *xe2, const char *name2, const char *ancestor_name, int favor, xdmerge_t *m, char *dest, int style, int marker_size)
xdl_free	src/xdiff/xdiff.h	112;"	d
xdl_free_classifier	src/xdiff/xprepare.c	/^static void xdl_free_classifier(xdlclassifier_t *cf) {$/;"	f	file:	signature:(xdlclassifier_t *cf)
xdl_free_ctx	src/xdiff/xprepare.c	/^static void xdl_free_ctx(xdfile_t *xdf) {$/;"	f	file:	signature:(xdfile_t *xdf)
xdl_free_env	src/xdiff/xprepare.c	/^void xdl_free_env(xdfenv_t *xe) {$/;"	f	signature:(xdfenv_t *xe)
xdl_free_script	src/xdiff/xdiffi.c	/^void xdl_free_script(xdchange_t *xscr) {$/;"	f	signature:(xdchange_t *xscr)
xdl_get_hunk	src/xdiff/xemit.c	/^xdchange_t *xdl_get_hunk(xdchange_t **xscr, xdemitconf_t const *xecfg)$/;"	f	signature:(xdchange_t **xscr, xdemitconf_t const *xecfg)
xdl_get_rec	src/xdiff/xemit.c	/^static long xdl_get_rec(xdfile_t *xdf, long ri, char const **rec) {$/;"	f	file:	signature:(xdfile_t *xdf, long ri, char const **rec)
xdl_guess_lines	src/xdiff/xutils.c	/^long xdl_guess_lines(mmfile_t *mf, long sample) {$/;"	f	signature:(mmfile_t *mf, long sample)
xdl_hash_record	src/xdiff/xutils.c	/^unsigned long xdl_hash_record(char const **data, char const *top, long flags) {$/;"	f	signature:(char const **data, char const *top, long flags)
xdl_hash_record_with_whitespace	src/xdiff/xutils.c	/^static unsigned long xdl_hash_record_with_whitespace(char const **data,$/;"	f	file:	signature:(char const **data, char const *top, long flags)
xdl_hashbits	src/xdiff/xutils.c	/^unsigned int xdl_hashbits(unsigned int size) {$/;"	f	signature:(unsigned int size)
xdl_init_classifier	src/xdiff/xprepare.c	/^static int xdl_init_classifier(xdlclassifier_t *cf, long size, long flags) {$/;"	f	file:	signature:(xdlclassifier_t *cf, long size, long flags)
xdl_malloc	src/xdiff/xdiff.h	111;"	d
xdl_mark_ignorable	src/xdiff/xdiffi.c	/^static void xdl_mark_ignorable(xdchange_t *xscr, xdfenv_t *xe, long flags)$/;"	f	file:	signature:(xdchange_t *xscr, xdfenv_t *xe, long flags)
xdl_merge	src/xdiff/xmerge.c	/^int xdl_merge(mmfile_t *orig, mmfile_t *mf1, mmfile_t *mf2,$/;"	f	signature:(mmfile_t *orig, mmfile_t *mf1, mmfile_t *mf2, xmparam_t const *xmp, mmbuffer_t *result)
xdl_merge_cmp_lines	src/xdiff/xmerge.c	/^static int xdl_merge_cmp_lines(xdfenv_t *xe1, int i1, xdfenv_t *xe2, int i2,$/;"	f	file:	signature:(xdfenv_t *xe1, int i1, xdfenv_t *xe2, int i2, int line_count, long flags)
xdl_merge_two_conflicts	src/xdiff/xmerge.c	/^static void xdl_merge_two_conflicts(xdmerge_t *m)$/;"	f	file:	signature:(xdmerge_t *m)
xdl_mmfile_first	src/xdiff/xutils.c	/^void *xdl_mmfile_first(mmfile_t *mmf, long *size)$/;"	f	signature:(mmfile_t *mmf, long *size)
xdl_mmfile_size	src/xdiff/xutils.c	/^long xdl_mmfile_size(mmfile_t *mmf)$/;"	f	signature:(mmfile_t *mmf)
xdl_num_out	src/xdiff/xutils.c	/^int xdl_num_out(char *out, long val) {$/;"	f	signature:(char *out, long val)
xdl_optimize_ctxs	src/xdiff/xprepare.c	/^static int xdl_optimize_ctxs(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2) {$/;"	f	file:	signature:(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2)
xdl_orig_copy	src/xdiff/xmerge.c	/^static int xdl_orig_copy(size_t *out, xdfenv_t *xe, int i, int count, int add_nl, char *dest)$/;"	f	file:	signature:(size_t *out, xdfenv_t *xe, int i, int count, int add_nl, char *dest)
xdl_prepare_ctx	src/xdiff/xprepare.c	/^static int xdl_prepare_ctx(unsigned int pass, mmfile_t *mf, long narec, xpparam_t const *xpp,$/;"	f	file:	signature:(unsigned int pass, mmfile_t *mf, long narec, xpparam_t const *xpp, xdlclassifier_t *cf, xdfile_t *xdf)
xdl_prepare_env	src/xdiff/xprepare.c	/^int xdl_prepare_env(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,$/;"	f	signature:(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdfenv_t *xe)
xdl_realloc	src/xdiff/xdiff.h	113;"	d
xdl_recmatch	src/xdiff/xutils.c	/^int xdl_recmatch(const char *l1, long s1, const char *l2, long s2, long flags)$/;"	f	signature:(const char *l1, long s1, const char *l2, long s2, long flags)
xdl_recs_cmp	src/xdiff/xdiffi.c	/^int xdl_recs_cmp(diffdata_t *dd1, long off1, long lim1,$/;"	f	signature:(diffdata_t *dd1, long off1, long lim1, diffdata_t *dd2, long off2, long lim2, long *kvdf, long *kvdb, int need_min, xdalgoenv_t *xenv)
xdl_recs_copy	src/xdiff/xmerge.c	/^static int xdl_recs_copy(size_t *out, xdfenv_t *xe, int i, int count, int add_nl, char *dest)$/;"	f	file:	signature:(size_t *out, xdfenv_t *xe, int i, int count, int add_nl, char *dest)
xdl_recs_copy_0	src/xdiff/xmerge.c	/^static int xdl_recs_copy_0(size_t *out, int use_orig, xdfenv_t *xe, int i, int count, int add_nl, char *dest)$/;"	f	file:	signature:(size_t *out, int use_orig, xdfenv_t *xe, int i, int count, int add_nl, char *dest)
xdl_refine_conflicts	src/xdiff/xmerge.c	/^static int xdl_refine_conflicts(xdfenv_t *xe1, xdfenv_t *xe2, xdmerge_t *m,$/;"	f	file:	signature:(xdfenv_t *xe1, xdfenv_t *xe2, xdmerge_t *m, xpparam_t const *xpp)
xdl_simplify_non_conflicts	src/xdiff/xmerge.c	/^static int xdl_simplify_non_conflicts(xdfenv_t *xe1, xdmerge_t *m,$/;"	f	file:	signature:(xdfenv_t *xe1, xdmerge_t *m, int simplify_if_no_alnum)
xdl_split	src/xdiff/xdiffi.c	/^static long xdl_split(unsigned long const *ha1, long off1, long lim1,$/;"	f	file:	signature:(unsigned long const *ha1, long off1, long lim1, unsigned long const *ha2, long off2, long lim2, long *kvdf, long *kvdb, int need_min, xdpsplit_t *spl, xdalgoenv_t *xenv)
xdl_trim_ends	src/xdiff/xprepare.c	/^static int xdl_trim_ends(xdfile_t *xdf1, xdfile_t *xdf2) {$/;"	f	file:	signature:(xdfile_t *xdf1, xdfile_t *xdf2)
xdlclass_t	src/xdiff/xprepare.c	/^} xdlclass_t;$/;"	t	typeref:struct:s_xdlclass	file:
xdlclassifier_t	src/xdiff/xprepare.c	/^} xdlclassifier_t;$/;"	t	typeref:struct:s_xdlclassifier	file:
xdmerge_t	src/xdiff/xmerge.c	/^} xdmerge_t;$/;"	t	typeref:struct:s_xdmerge	file:
xdpsplit_t	src/xdiff/xdiffi.c	/^} xdpsplit_t;$/;"	t	typeref:struct:s_xdpsplit	file:
xflags	deps/zlib/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s	access:public
xmparam_t	src/xdiff/xdiff.h	/^} xmparam_t;$/;"	t	typeref:struct:s_xmparam
xo	src/diff_xdiff.c	/^	git_xdiff_output *xo;$/;"	m	struct:__anon224	file:	access:public
xpp	src/xdiff/xdiff.h	/^	xpparam_t xpp;$/;"	m	struct:s_xmparam	access:public
xpp	src/xdiff/xhistogram.c	/^	xpparam_t const *xpp;$/;"	m	struct:histindex	file:	access:public
xpp	src/xdiff/xpatience.c	/^	xpparam_t const *xpp;$/;"	m	struct:hashmap	file:	access:public
xpparam_t	src/xdiff/xdiff.h	/^} xpparam_t;$/;"	t	typeref:struct:s_xpparam
xrealloc	examples/describe.c	/^static void *xrealloc(void *oldp, size_t newsz)$/;"	f	file:	signature:(void *oldp, size_t newsz)
xrecord_t	src/xdiff/xtypes.h	/^} xrecord_t;$/;"	t	typeref:struct:s_xrecord
z	src/zstream.h	/^	z_stream z;$/;"	m	struct:__anon294	access:public
zError	deps/zlib/zutil.c	/^const char * ZEXPORT zError(err)$/;"	f
z_adler32_combine	deps/zlib/zlib.h	1706;"	d
z_buf	src/filebuf.h	/^	unsigned char *z_buf;$/;"	m	struct:git_filebuf	access:public
z_const	deps/zlib/zconf.h	56;"	d
z_crc32_combine	deps/zlib/zlib.h	1707;"	d
z_crc_t	deps/zlib/zconf.h	/^typedef unsigned long z_crc_t;$/;"	t
z_delta_size	src/pack-objects.h	/^	size_t z_delta_size;$/;"	m	struct:git_pobject	access:public
z_errmsg	deps/zlib/zutil.c	/^z_const char * const z_errmsg[10] = {$/;"	v
z_errmsg	deps/zlib/zutil.h	/^extern z_const char * const z_errmsg[10]; \/* indexed by 2-zlib_error *\/$/;"	x
z_error	deps/zlib/zutil.c	/^void ZLIB_INTERNAL z_error (m)$/;"	f
z_gzgetc	deps/zlib/zlib.h	1677;"	d
z_gzgetc	deps/zlib/zlib.h	1678;"	d
z_gzoffset	deps/zlib/zlib.h	1705;"	d
z_gzopen	deps/zlib/zlib.h	1702;"	d
z_gzseek	deps/zlib/zlib.h	1703;"	d
z_gztell	deps/zlib/zlib.h	1704;"	d
z_off64_t	deps/zlib/zconf.h	55;"	d
z_off_t	deps/zlib/zconf.h	54;"	d
z_stream	deps/zlib/zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream_s	deps/zlib/zlib.h	/^typedef struct z_stream_s {$/;"	s
z_stream_s::adler	deps/zlib/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::avail_in	deps/zlib/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::avail_out	deps/zlib/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::data_type	deps/zlib/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::msg	deps/zlib/zlib.h	/^    z_const char *msg;  \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::next_in	deps/zlib/zlib.h	/^    z_const Bytef *next_in;     \/* next input byte *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::next_out	deps/zlib/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::opaque	deps/zlib/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::reserved	deps/zlib/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::state	deps/zlib/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR	access:public
z_stream_s::total_in	deps/zlib/zlib.h	/^    uLong    total_in;  \/* total number of input bytes read so far *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::total_out	deps/zlib/zlib.h	/^    uLong    total_out; \/* total number of bytes output so far *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::zalloc	deps/zlib/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::zfree	deps/zlib/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s	access:public
z_streamp	deps/zlib/zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
z_verbose	deps/zlib/zutil.c	/^int ZLIB_INTERNAL z_verbose = verbose;$/;"	v
z_verbose	deps/zlib/zutil.h	/^   extern int ZLIB_INTERNAL z_verbose;$/;"	x
zalloc	deps/zlib/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s	access:public
zcalloc	deps/zlib/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)$/;"	f
zcalloc	deps/zlib/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)$/;"	f	signature:(voidpf opaque, uInt items, uInt size)
zcalloc	deps/zlib/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)$/;"	f	signature:(voidpf opaque, unsigned items, unsigned size)
zcfree	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zcfree (opaque, ptr)$/;"	f
zcfree	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)$/;"	f	signature:(voidpf opaque, voidpf ptr)
zero	tests/odb/loose_data.h	/^static object_data zero = {$/;"	v
zero_bytes	tests/odb/loose_data.h	/^static unsigned char zero_bytes[] = {$/;"	v
zero_data	tests/object/raw/data.h	/^static unsigned char zero_data[] = {$/;"	v
zero_data	tests/odb/loose_data.h	/^static unsigned char zero_data[] = {$/;"	v
zero_id	tests/object/raw/data.h	/^static char *zero_id = "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391";$/;"	v
zero_obj	tests/object/raw/data.h	/^static git_rawobj zero_obj = {$/;"	v
zerr	src/zstream.h	/^	int zerr;$/;"	m	struct:__anon294	access:public
zfree	deps/zlib/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s	access:public
zlibCompileFlags	deps/zlib/zutil.c	/^uLong ZEXPORT zlibCompileFlags()$/;"	f
zlibVersion	deps/zlib/zutil.c	/^const char * ZEXPORT zlibVersion()$/;"	f
zlib_version	deps/zlib/zlib.h	210;"	d
zmemcmp	deps/zlib/zutil.c	/^int ZLIB_INTERNAL zmemcmp(s1, s2, len)$/;"	f
zmemcmp	deps/zlib/zutil.h	205;"	d
zmemcmp	deps/zlib/zutil.h	209;"	d
zmemcpy	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zmemcpy(dest, source, len)$/;"	f
zmemcpy	deps/zlib/zutil.h	204;"	d
zmemcpy	deps/zlib/zutil.h	208;"	d
zmemzero	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zmemzero(dest, len)$/;"	f
zmemzero	deps/zlib/zutil.h	206;"	d
zmemzero	deps/zlib/zutil.h	210;"	d
zs	src/filebuf.h	/^	z_stream zs;$/;"	m	struct:git_filebuf	access:public
zstream	src/pack-objects.h	/^	git_zstream zstream;$/;"	m	struct:git_packbuilder	access:public
zstream	src/pack.h	/^	z_stream zstream;$/;"	m	struct:git_packfile_stream	access:public
zstream_buf	src/zstream.c	/^static int zstream_buf(git_buf *out, const void *in, size_t in_len, git_zstream_t type)$/;"	f	file:	signature:(git_buf *out, const void *in, size_t in_len, git_zstream_t type)
zstream_seterr	src/zstream.c	/^static int zstream_seterr(git_zstream *zs)$/;"	f	file:	signature:(git_zstream *zs)
zterm	examples/status.c	/^	int zterm;$/;"	m	struct:opts	file:	access:public
